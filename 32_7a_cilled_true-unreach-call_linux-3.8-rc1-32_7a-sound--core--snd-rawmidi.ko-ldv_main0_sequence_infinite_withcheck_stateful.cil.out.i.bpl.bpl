var $M.0: [ref]ref;

var $M.1: [ref]ref;

var $M.2: [ref]i8;

var $M.3: [ref]i32;

var $M.4: [ref]i8;

var $M.5: [ref]i64;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]i32;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]i32;

var $M.12: [ref]i64;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]i32;

var $M.16: [ref]i64;

var $M.17: [ref]ref;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]i32;

var $M.24: [ref]i64;

var $M.25: [ref]ref;

var $M.26: i32;

var $M.27: [ref]i32;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]i32;

var $M.33: [ref]i32;

var $M.34: [ref]i32;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]i32;

var $M.39: [ref]ref;

var $M.40: i32;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]i32;

var $M.44: [ref]i32;

var $M.45: [ref]ref;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 298982);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const {:count 32} amidi_map: ref;

axiom amidi_map == $sub.ref(0, 2180);

const {:count 32} midi_map: ref;

axiom midi_map == $sub.ref(0, 3332);

const snd_rawmidi_f_ops: ref;

axiom snd_rawmidi_f_ops == $sub.ref(0, 4572);

const snd_rawmidi_devices: ref;

axiom snd_rawmidi_devices == $sub.ref(0, 5612);

const register_mutex: ref;

axiom register_mutex == $sub.ref(0, 6804);

const ldv_mutex_register_mutex: ref;

axiom ldv_mutex_register_mutex == $sub.ref(0, 7832);

const ldv_mutex_power_lock: ref;

axiom ldv_mutex_power_lock == $sub.ref(0, 8860);

const ldv_mutex_open_mutex: ref;

axiom ldv_mutex_open_mutex == $sub.ref(0, 9888);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 10916);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 11944);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 12993);

const {:count 15} .str.14: ref;

axiom .str.14 == $sub.ref(0, 14032);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 15332);

const {:count 55} .str.1: ref;

axiom .str.1 == $sub.ref(0, 16411);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 11} .str.2: ref;

axiom .str.2 == $sub.ref(0, 17446);

const {:count 23} .str.18: ref;

axiom .str.18 == $sub.ref(0, 18493);

const {:count 17} .str.19: ref;

axiom .str.19 == $sub.ref(0, 19534);

const {:count 168} .str.20: ref;

axiom .str.20 == $sub.ref(0, 20726);

const {:count 27} .str.21: ref;

axiom .str.21 == $sub.ref(0, 21777);

const snd_major: ref;

axiom snd_major == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 25} .str.15: ref;

axiom .str.15 == $sub.ref(0, 22826);

const {:count 16} .str.16: ref;

axiom .str.16 == $sub.ref(0, 23866);

const {:count 23} .str.17: ref;

axiom .str.17 == $sub.ref(0, 24913);

const {:count 34} .str.39: ref;

axiom .str.39 == $sub.ref(0, 25971);

const {:count 7} .str.3: ref;

axiom .str.3 == $sub.ref(0, 27002);

const {:count 45} .str.4: ref;

axiom .str.4 == $sub.ref(0, 28071);

const {:count 53} .str.5: ref;

axiom .str.5 == $sub.ref(0, 29148);

const {:count 52} .str.6: ref;

axiom .str.6 == $sub.ref(0, 30224);

const {:count 51} .str.7: ref;

axiom .str.7 == $sub.ref(0, 31299);

const {:count 46} .str.8: ref;

axiom .str.8 == $sub.ref(0, 32369);

const {:count 6} .str.9: ref;

axiom .str.9 == $sub.ref(0, 33399);

const {:count 27} .str.10: ref;

axiom .str.10 == $sub.ref(0, 34450);

const {:count 19} .str.11: ref;

axiom .str.11 == $sub.ref(0, 35493);

const {:count 18} .str.12: ref;

axiom .str.12 == $sub.ref(0, 36535);

const {:count 37} .str.22: ref;

axiom .str.22 == $sub.ref(0, 37596);

const {:count 11} .str.23: ref;

axiom .str.23 == $sub.ref(0, 38631);

const {:count 42} .str.24: ref;

axiom .str.24 == $sub.ref(0, 39697);

const {:count 46} .str.25: ref;

axiom .str.25 == $sub.ref(0, 40767);

const {:count 7} .str.26: ref;

axiom .str.26 == $sub.ref(0, 41798);

const {:count 9} .str.27: ref;

axiom .str.27 == $sub.ref(0, 42831);

const {:count 11} .str.28: ref;

axiom .str.28 == $sub.ref(0, 43866);

const {:count 5} .str.29: ref;

axiom .str.29 == $sub.ref(0, 44895);

const {:count 32} .str.30: ref;

axiom .str.30 == $sub.ref(0, 45951);

const {:count 21} .str.31: ref;

axiom .str.31 == $sub.ref(0, 46996);

const {:count 15} .str.33: ref;

axiom .str.33 == $sub.ref(0, 48035);

const {:count 7} .str.34: ref;

axiom .str.34 == $sub.ref(0, 49066);

const {:count 63} .str.32: ref;

axiom .str.32 == $sub.ref(0, 50153);

const {:count 31} .str.35: ref;

axiom .str.35 == $sub.ref(0, 51208);

const {:count 64} .str.36: ref;

axiom .str.36 == $sub.ref(0, 52296);

const {:count 28} .str.37: ref;

axiom .str.37 == $sub.ref(0, 53348);

const {:count 29} .str.38: ref;

axiom .str.38 == $sub.ref(0, 54401);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 55433);

const {:count 3} .str.1.92: ref;

axiom .str.1.92 == $sub.ref(0, 56460);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 57498);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 58526);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 59558);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 60590);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const no_llseek: ref;

axiom no_llseek == $sub.ref(0, 61622);

procedure no_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);



const snd_rawmidi_read: ref;

axiom snd_rawmidi_read == $sub.ref(0, 62654);

procedure snd_rawmidi_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.5, $M.34, $M.35, $M.36, $M.2, $CurrAddr;



implementation snd_rawmidi_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i30: i1;
  var $i29: i64;
  var $p31: ref;
  var $i32: i1;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $i59: i1;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i24: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i1;
  var $i68: i64;
  var $i69: i32;
  var $i70: i1;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i80: i64;
  var $i17: i64;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 2} {:cexpr "snd_rawmidi_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} snd_rawmidi_input_trigger($p10, 1);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i2, 0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i17 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i18, $p19, $i20 := 0, $p1, $i2;
    goto $bb8;

  $bb8:
    call $p21, $i22, $i23, $p25, $i26, $i27, $i28, $i30, $i29, $p34, $p35, $p36, $i37, $p38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $p55, $i56, $i57, $i58, $p61, $i62, $i63, $i24, $p64, $i65, $i66, $i67, $i68, $i69, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $i18, $p19, $i20, $i80 := snd_rawmidi_read_loop_$bb8($p0, $p4, $p5, $p8, $p10, $p15, $p21, $i22, $i23, $p25, $i26, $i27, $i28, $i30, $i29, $p34, $p35, $p36, $i37, $p38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $p55, $i56, $i57, $i58, $p61, $i62, $i63, $i24, $p64, $i65, $i66, $i67, $i68, $i69, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $i18, $p19, $i20, $i80);
    goto $bb8_last;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} spin_lock_irq($p21);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i22 := snd_rawmidi_ready($p10);
    call {:si_unique_call 6} {:cexpr "tmp___6"} boogie_si_record_i32($i22);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i24 := $i18;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} spin_unlock_irq($p64);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i65 := snd_rawmidi_kernel_read1($p10, $p19, $0.ref, $i20);
    call {:si_unique_call 24} {:cexpr "tmp___7"} boogie_si_record_i64($i65);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    call {:si_unique_call 25} {:cexpr "count1"} boogie_si_record_i32($i66);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i68, $i69 := $i24, $i66;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i66);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, $i24);
    call {:si_unique_call 26} {:cexpr "result"} boogie_si_record_i64($i74);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i66);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p19, $mul.ref($i75, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i66);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i78 := $sub.i64($i20, $i77);
    call {:si_unique_call 27} {:cexpr "count"} boogie_si_record_i64($i78);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i80 := $i74;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i17 := $i80;
    goto $bb7;

  $bb49:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i18, $p19, $i20 := $i74, $p76, $i78;
    goto $bb49_dummy;

  $bb43:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i70 := $sle.i64($i68, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i70 == 1);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i72 := $i68;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i13 := $i72;
    goto $bb3;

  $bb45:
    assume $i70 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i69);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb47;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call $p25, $i26, $i27, $i28, $i30, $i29, $p34, $p35, $p36, $i37, $p38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $p55, $i56, $i57, $i58, $p61, $i62, $i63 := snd_rawmidi_read_loop_$bb13($p0, $p4, $p5, $p8, $p10, $p15, $p25, $i26, $i27, $i28, $i30, $i29, $p34, $p35, $p36, $i37, $p38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $p55, $i56, $i57, $i58, $p61, $i62, $i63, $i18);
    goto $bb13_last;

  $bb14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.3, $p25);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 2048);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i29 := $i18;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i28 == 1);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i64($i18, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i29 := $i18;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p34 := get_current();
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} init_waitqueue_entry($p4, $p34);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p15, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} add_wait_queue($p35, $p4);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.5 := $store.i64($M.5, $p5, 1);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p36 := get_current();
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.5, $p5);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p36, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 12} $i39 := devirtbounce(0, $p38, $i37, $p38);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.5 := $store.i64($M.5, $p5, $i39);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} spin_unlock_irq($p40);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} schedule();
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p15, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} remove_wait_queue($p41, $p4);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.6, $p42);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.7, $p44);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 1184)), $mul.ref(784, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.8, $p46);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p49 := get_current();
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i50 := signal_pending($p49);
    call {:si_unique_call 18} {:cexpr "tmp___5"} boogie_si_record_i32($i50);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i52 := $i18;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.2, $p55);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i58 := $i18;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} spin_lock_irq($p61);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i62 := snd_rawmidi_ready($p10);
    call {:si_unique_call 21} {:cexpr "tmp___6"} boogie_si_record_i32($i62);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i63 == 1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i24 := $i18;
    goto $bb12;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb40_dummy;

  $bb34:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i59 := $sgt.i64($i58, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i59 == 1);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i60 := $sub.i64(0, 5);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i13 := $i60;
    goto $bb3;

  $bb36:
    assume $i59 == 1;
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    goto $bb38;

  $bb28:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i64($i52, 0);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i53 == 1);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64(0, 512);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i13 := $i54;
    goto $bb3;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb32;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 19);
    goto $bb3;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} spin_unlock_irq($p31);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i64($i29, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64(0, 11);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i13 := $i33;
    goto $bb3;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i33 := $i29;
    goto $bb22;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb16;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 5);
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb49_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_27;
}



const snd_rawmidi_write: ref;

axiom snd_rawmidi_write == $sub.ref(0, 63686);

procedure snd_rawmidi_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.12, $M.16, $M.34, $M.35, $M.36, $M.2, $CurrAddr;



implementation snd_rawmidi_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i24: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $p38: ref;
  var $i39: i1;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i64;
  var $i61: i1;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $i66: i1;
  var $i67: i64;
  var $i68: i1;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i32: i64;
  var $p73: ref;
  var $i74: i64;
  var $i75: i32;
  var $i76: i1;
  var $i77: i64;
  var $i78: i32;
  var $i79: i1;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i97: i64;
  var $i25: i64;
  var $i93: i64;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $i109: i64;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i1;
  var $i123: i1;
  var $i124: i64;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i64;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $i23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 32} {:cexpr "snd_rawmidi_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.9, $p8);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.10, $p11);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p12);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(24, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.2, $p16);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i2, 0);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i25 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i93 := $i25;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.11, $p98);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 4096);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i23 := $i93;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb62:
    assume $i101 == 1;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} spin_lock_irq($p102);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.2, $p103);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.2, $p105);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i104, $i106);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} spin_unlock_irq($p136);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb64:
    assume $i107 == 1;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    call $p108, $i109, $i110, $p111, $p112, $p113, $i114, $p115, $i116, $p117, $i118, $p119, $p120, $i121, $i122, $p125, $i126, $i127, $i128, $i129, $p132, $i133, $i134, $i135 := snd_rawmidi_write_loop_$bb67($p6, $p7, $p14, $p103, $p105, $p108, $i109, $i110, $p111, $p112, $p113, $i114, $p115, $i116, $p117, $i118, $p119, $p120, $i121, $i122, $p125, $i126, $i127, $i128, $i129, $p132, $i133, $i134, $i135);
    goto $bb67_last;

  $bb68:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.2, $p108);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i64.i32($i109);
    call {:si_unique_call 59} {:cexpr "last_avail"} boogie_si_record_i32($i110);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p111 := get_current();
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} init_waitqueue_entry($p6, $p111);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} add_wait_queue($p112, $p6);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p7, 1);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p113 := get_current();
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i114 := $load.i64($M.16, $p7);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p113, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 64} $i116 := devirtbounce(0, $p115, $i114, $p115);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, $p7, $i116);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} spin_unlock_irq($p117);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i118 := schedule_timeout(7500);
    call {:si_unique_call 67} {:cexpr "timeout"} boogie_si_record_i64($i118);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} remove_wait_queue($p119, $p6);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p120 := get_current();
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i121 := signal_pending($p120);
    call {:si_unique_call 71} {:cexpr "tmp___14"} boogie_si_record_i32($i121);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.2, $p125);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i127 := $zext.i32.i64($i110);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i128 := $eq.i64($i126, $i127);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} spin_lock_irq($p132);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i133 := $load.i64($M.2, $p103);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i134 := $load.i64($M.2, $p105);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i133, $i134);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i135 == 1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb85_dummy;

  $bb76:
    assume $i128 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i118, 0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb78;

  $bb79:
    assume $i129 == 1;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i130 := $sgt.i64($i93, 0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i130 == 1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i131 := $sub.i64(0, 5);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i23 := $i131;
    goto $bb6;

  $bb81:
    assume $i130 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i131 := $i93;
    goto $bb83;

  $bb70:
    assume $i122 == 1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i123 := $sgt.i64($i93, 0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i123 == 1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i124 := $sub.i64(0, 512);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i23 := $i124;
    goto $bb6;

  $bb72:
    assume $i123 == 1;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i124 := $i93;
    goto $bb74;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p26, $i27, $i28 := $p1, $i2, 0;
    goto $bb11;

  $bb11:
    call $p29, $i30, $i31, $p33, $i34, $i35, $i36, $i37, $p41, $p42, $p43, $i44, $p45, $i46, $p47, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p63, $i64, $i65, $i66, $i67, $p70, $i71, $i72, $i32, $p73, $i74, $i75, $i76, $i77, $i78, $i82, $i83, $i84, $p85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i94, $i95, $i96, $p26, $i27, $i28, $i97 := snd_rawmidi_write_loop_$bb11($p0, $p4, $p5, $p10, $p12, $p14, $p29, $i30, $i31, $p33, $i34, $i35, $i36, $i37, $p41, $p42, $p43, $i44, $p45, $i46, $p47, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p63, $i64, $i65, $i66, $i67, $p70, $i71, $i72, $i32, $p73, $i74, $i75, $i76, $i77, $i78, $i82, $i83, $i84, $p85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i94, $i95, $i96, $p26, $i27, $i28, $i97);
    goto $bb11_last;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} spin_lock_irq($p29);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i30 := snd_rawmidi_ready_append($p12, $i27);
    call {:si_unique_call 35} {:cexpr "tmp___6"} boogie_si_record_i32($i30);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i32 := $i28;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} spin_unlock_irq($p73);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i74 := snd_rawmidi_kernel_write1($p12, $p26, $0.ref, $i27);
    call {:si_unique_call 54} {:cexpr "tmp___7"} boogie_si_record_i64($i74);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i64.i32($i74);
    call {:si_unique_call 55} {:cexpr "count1"} boogie_si_record_i32($i75);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, 0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i77, $i78 := $i32, $i75;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i75);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i83 := $add.i64($i82, $i32);
    call {:si_unique_call 56} {:cexpr "result"} boogie_si_record_i64($i83);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i75);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p26, $mul.ref($i84, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i86 := $sext.i32.i64($i75);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i87 := $ult.i64($i86, $i27);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i75);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i95 := $sub.i64($i27, $i94);
    call {:si_unique_call 57} {:cexpr "count"} boogie_si_record_i64($i95);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i97 := $i83;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i25 := $i97;
    goto $bb10;

  $bb59:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $p26, $i27, $i28 := $p85, $i95, $i83;
    goto $bb59_dummy;

  $bb52:
    assume $i87 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.11, $p88);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 2048);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i92 := $i83;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb54;

  $bb55:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb57;

  $bb46:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i79 := $sle.i64($i77, 0);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i79 == 1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i81 := $i77;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i23 := $i81;
    goto $bb6;

  $bb48:
    assume $i79 == 1;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i78);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb50;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $p33, $i34, $i35, $i36, $i37, $p41, $p42, $p43, $i44, $p45, $i46, $p47, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p63, $i64, $i65, $i66, $i67, $p70, $i71, $i72 := snd_rawmidi_write_loop_$bb16($p0, $p4, $p5, $p10, $p12, $p14, $p33, $i34, $i35, $i36, $i37, $p41, $p42, $p43, $i44, $p45, $i46, $p47, $i48, $p49, $p50, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $i58, $i59, $i60, $p63, $i64, $i65, $i66, $i67, $p70, $i71, $i72, $i27, $i28);
    goto $bb16_last;

  $bb17:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.11, $p33);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 2048);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i37 := $i28;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p41 := get_current();
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} init_waitqueue_entry($p4, $p41);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} add_wait_queue($p42, $p4);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p5, 1);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p43 := get_current();
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.12, $p5);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 41} $i46 := devirtbounce(0, $p45, $i44, $p45);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, $p5, $i46);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} spin_unlock_irq($p47);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i48 := schedule_timeout(7500);
    call {:si_unique_call 44} {:cexpr "timeout"} boogie_si_record_i64($i48);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} remove_wait_queue($p49, $p4);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.13, $p50);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.14, $p52);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 1184)), $mul.ref(784, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.15, $p54);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p57 := get_current();
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i58 := signal_pending($p57);
    call {:si_unique_call 48} {:cexpr "tmp___5"} boogie_si_record_i32($i58);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i60 := $i28;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.2, $p63);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} spin_lock_irq($p70);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i71 := snd_rawmidi_ready_append($p12, $i27);
    call {:si_unique_call 51} {:cexpr "tmp___6"} boogie_si_record_i32($i71);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i72 == 1);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i32 := $i28;
    goto $bb15;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb43_dummy;

  $bb34:
    assume $i65 == 1;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i48, 0);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i67 := $i28;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb36;

  $bb37:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i64($i67, 0);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i68 == 1);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i69 := $sub.i64(0, 5);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i23 := $i69;
    goto $bb6;

  $bb39:
    assume $i68 == 1;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    goto $bb41;

  $bb28:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i64($i60, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i61 == 1);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64(0, 512);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i23 := $i62;
    goto $bb6;

  $bb30:
    assume $i61 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i62 := $i60;
    goto $bb32;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64(0, 19);
    goto $bb6;

  $bb18:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} spin_unlock_irq($p38);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i39 := $sgt.i64($i37, 0);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64(0, 11);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i23 := $i40;
    goto $bb6;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i40 := $i37;
    goto $bb22;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.2, $p20);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i22 := $ult.i64($i21, $i2);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64(0, 5);
    goto $bb6;

  $bb85_dummy:
    assume false;
    return;

  $bb67_last:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb43_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb59_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_166;
}



const snd_rawmidi_poll: ref;

axiom snd_rawmidi_poll == $sub.ref(0, 64718);

procedure snd_rawmidi_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_rawmidi_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.17, $p2);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.18, $p5);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.19, $p16);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.18, $p25);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.19, $p36);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i35;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.19, $p40);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i42 := snd_rawmidi_ready($p41);
    call {:si_unique_call 81} {:cexpr "tmp___0"} boogie_si_record_i32($i42);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i35;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb18;

  $bb15:
    assume $i43 == 1;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i35, 260);
    call {:si_unique_call 82} {:cexpr "mask"} boogie_si_record_i32($i44);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb17;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.18, $p29);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i31 := snd_rawmidi_ready($p30);
    call {:si_unique_call 78} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb12;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i33 := $or.i32(0, 65);
    call {:si_unique_call 79} {:cexpr "mask"} boogie_si_record_i32($i33);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb11;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.19, $p20);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.2, $p22);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} poll_wait($p0, $p24, $p1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.18, $p9);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p11);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.18, $p13);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} snd_rawmidi_input_trigger($p14, 1);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} poll_wait($p0, $p15, $p1);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_rawmidi_ioctl: ref;

axiom snd_rawmidi_ioctl == $sub.ref(0, 65750);

procedure snd_rawmidi_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.27, $M.28, $M.29, $M.30, $M.31, $CurrAddr;



implementation snd_rawmidi_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i86: i32;
  var $i94: i1;
  var $i95: i64;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i64;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p3 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p4 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    call {:si_unique_call 85} {:cexpr "snd_rawmidi_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 86} {:cexpr "snd_rawmidi_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i2);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.20, $p6);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i1, 8);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 255);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 87);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, $sub.i32(0, 1070049504));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 1074026288);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 1074026289);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, 1074026289);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} __snd_printk.i32.ref.i32.ref.i32(0, .str, 855, .str.39, $i1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 25);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} might_fault();
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p5);
    call {:si_unique_call 91} $p117 := devirtbounce.2(0, $p116);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p118 := $extractvalue($p117, 0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i119 := $extractvalue($p117, 1);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p118);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i64.i32($i120);
    call {:si_unique_call 92} {:cexpr "__ret_gu___1"} boogie_si_record_i32($i121);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i64.i32($i119);
    call {:si_unique_call 121} {:cexpr "val___0"} boogie_si_record_i32($i122);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i121, 0);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i122, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i122, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb102:
    assume $i125 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.21, $p135);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.21, $p139);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i141 := snd_rawmidi_drain_input($p140);
    call {:si_unique_call 125} {:cexpr "tmp___8"} boogie_si_record_i32($i141);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i141);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i12 := $i142;
    goto $bb3;

  $bb110:
    assume $i138 == 1;
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb100:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i122, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb104;

  $bb105:
    assume $i126 == 1;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.22, $p127);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i130 := $eq.i64($i129, 0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.22, $p131);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i133 := snd_rawmidi_drain_output($p132);
    call {:si_unique_call 123} {:cexpr "tmp___7"} boogie_si_record_i32($i133);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i133);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i12 := $i134;
    goto $bb3;

  $bb107:
    assume $i130 == 1;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb96:
    assume $i123 == 1;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 14);
    goto $bb3;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} might_fault();
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p5);
    call {:si_unique_call 88} $p100 := devirtbounce.2(0, $p99);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p101 := $extractvalue($p100, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i102 := $extractvalue($p100, 1);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p101);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i64.i32($i103);
    call {:si_unique_call 89} {:cexpr "__ret_gu___0"} boogie_si_record_i32($i104);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i102);
    call {:si_unique_call 118} {:cexpr "val"} boogie_si_record_i32($i105);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i104, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i105, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb89:
    assume $i107 == 1;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.22, $p108);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.22, $p112);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i114 := snd_rawmidi_drop_output($p113);
    call {:si_unique_call 120} {:cexpr "tmp___6"} boogie_si_record_i32($i114);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i114);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i12 := $i115;
    goto $bb3;

  $bb91:
    assume $i111 == 1;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb85:
    assume $i106 == 1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 14);
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, $sub.i32(0, 1070049504));
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb14;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p4);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i72 := copy_from_user($p71, $p5, 56);
    call {:si_unique_call 94} {:cexpr "tmp___4"} boogie_si_record_i64($i72);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.2, $p74);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i75, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb65:
    assume $i77 == 1;
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.21, $p87);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.21, $p91);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i93 := snd_rawmidi_input_status($p92, $p4);
    call {:si_unique_call 115} {:cexpr "err"} boogie_si_record_i32($i93);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i86 := $i93;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i86, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p4);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i97 := copy_to_user($p5, $p96, 56);
    call {:si_unique_call 117} {:cexpr "tmp___5"} boogie_si_record_i32($i97);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb81:
    assume $i98 == 1;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 14);
    goto $bb3;

  $bb78:
    assume $i94 == 1;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i86);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i12 := $i95;
    goto $bb3;

  $bb74:
    assume $i90 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb63:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i75, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb67;

  $bb68:
    assume $i78 == 1;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.22, $p79);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.22, $p83);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i85 := snd_rawmidi_output_status($p84, $p4);
    call {:si_unique_call 113} {:cexpr "err"} boogie_si_record_i32($i85);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb73;

  $bb70:
    assume $i82 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb59:
    assume $i73 == 1;
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 14);
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, $sub.i32(0, 2129897727));
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, $sub.i32(0, 1070573808));
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, $sub.i32(0, 1070573808));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb14;

  $bb21:
    assume $i20 == 1;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p3);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i48 := copy_from_user($p47, $p5, 48);
    call {:si_unique_call 96} {:cexpr "tmp___1"} boogie_si_record_i64($i48);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i51, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb47:
    assume $i53 == 1;
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.21, $p63);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.21, $p67);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i69 := snd_rawmidi_input_params($p68, $p3);
    call {:si_unique_call 111} {:cexpr "tmp___3"} boogie_si_record_i32($i69);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i12 := $i70;
    goto $bb3;

  $bb55:
    assume $i66 == 1;
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb45:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i51, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb49;

  $bb50:
    assume $i54 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.22, $p55);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.22, $p59);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i61 := snd_rawmidi_output_params($p60, $p3);
    call {:si_unique_call 109} {:cexpr "tmp___2"} boogie_si_record_i32($i61);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i12 := $i62;
    goto $bb3;

  $bb52:
    assume $i58 == 1;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb41:
    assume $i49 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 14);
    goto $bb3;

  $bb19:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i1, $sub.i32(0, 2129897727));
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb23:
    assume $i21 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} might_fault();
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 268)), $mul.ref(8, 1));
    call {:si_unique_call 98} $p29 := devirtbounce.2(0, $p28);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p30 := $extractvalue($p29, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i31 := $extractvalue($p29, 1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p30);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    call {:si_unique_call 99} {:cexpr "__ret_gu"} boogie_si_record_i32($i33);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i64.i32($i31);
    call {:si_unique_call 103} {:cexpr "stream"} boogie_si_record_i32($i34);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i33, 0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i34, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i34, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 22);
    goto $bb3;

  $bb35:
    assume $i37 == 1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.21, $p39);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i41 := snd_rawmidi_info_user($p40, $p27);
    call {:si_unique_call 105} {:cexpr "tmp"} boogie_si_record_i32($i41);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i12 := $i42;
    goto $bb3;

  $bb33:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i34, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb37;

  $bb38:
    assume $i38 == 1;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.22, $p43);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i45 := snd_rawmidi_info_user($p44, $p27);
    call {:si_unique_call 107} {:cexpr "tmp___0"} boogie_si_record_i32($i45);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i12 := $i46;
    goto $bb3;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 14);
    goto $bb3;

  $bb17:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, $sub.i32(0, 2147199232));
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb25:
    assume $i22 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} might_fault();
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p5);
    call {:si_unique_call 101} $i24 := devirtbounce.1(0, 131072, $p23);
    call {:si_unique_call 102} {:cexpr "__ret_pu"} boogie_si_record_i32($i24);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i26 := (if $i25 == 1 then $sub.i64(0, 14) else 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i12 := $i26;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64(0, 25);
    goto $bb3;
}



const snd_rawmidi_ioctl_compat: ref;

axiom snd_rawmidi_ioctl_compat == $sub.ref(0, 66782);

procedure snd_rawmidi_ioctl_compat($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);



const snd_rawmidi_open: ref;

axiom snd_rawmidi_open == $sub.ref(0, 67814);

procedure snd_rawmidi_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.2, $M.25, $M.26, $M.34, $M.35, $M.36, $M.37, $CurrAddr, assertsPassed, $M.38, $M.27, $M.28, $M.29, $M.30, $M.31;



implementation snd_rawmidi_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $p21: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i87: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p73: ref;
  var $i74: i32;
  var $i95: i32;
  var $i72: i32;
  var $i86: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i102: i1;
  var $i103: i32;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i101: i32;
  var $p122: ref;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $i135: i1;
  var $i136: i32;
  var $i137: i8;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i8;
  var $i145: i8;
  var $i146: i8;
  var $i147: i8;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $i158: i1;
  var $i159: i32;
  var $i160: i8;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i8;
  var $i167: i8;
  var $i168: i8;
  var $i169: i8;
  var $i170: i8;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i59: i32;
  var $i44: i32;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i13: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i4 := imajor($p0);
    call {:si_unique_call 130} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.23, $p5);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1024);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i14 := nonseekable_open($p0, $p1);
    call {:si_unique_call 132} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.2, snd_major);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i4, $i16);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i4, 14);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 6);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i23 := iminor($p0);
    call {:si_unique_call 137} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $p24 := snd_lookup_oss_minor_data($i23, 3);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p21 := $p24;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p21);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 1184)), $mul.ref(360, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.2, $p30);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i32 := try_module_get($p31);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 140} {:cexpr "tmp___4"} boogie_si_record_i8($i33);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} ldv_mutex_lock_13($p39);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i42 := snd_card_file_add($p41, $p1);
    call {:si_unique_call 144} {:cexpr "err"} boogie_si_record_i32($i42);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i45 := snd_rawmidi_file_flags($p1);
    call {:si_unique_call 149} {:cexpr "fflags"} boogie_si_record_i16($i45);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.23, $p46);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 1024);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i49 == 1);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i4, 14);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i45;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p55 := kmalloc(24, 208);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p60 := get_current();
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} init_waitqueue_entry($p2, $p60);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(424, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} add_wait_queue($p61, $p2);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    call $p62, $p64, $p65, $p66, $p67, $i68, $p69, $i70, $i71, $p75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i87, $p89, $p90, $p91, $p92, $i93, $i94, $p73, $i74, $i95, $i72, $i86, $p96, $i97, $i98, $i99, $i100, $i102, $i103, $p108, $i109, $p110, $i111, $p112, $p113, $p114, $p115, $p116, $i117, $i118, $p119, $i120, $i121 := snd_rawmidi_open_loop_$bb40($p3, $p21, $p41, $i54, $p56, $p62, $p64, $p65, $p66, $p67, $i68, $p69, $i70, $i71, $p75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i87, $p89, $p90, $p91, $p92, $i93, $i94, $p73, $i74, $i95, $i72, $i86, $p96, $i97, $i98, $i99, $i100, $i102, $i103, $p108, $i109, $p110, $i111, $p112, $p113, $p114, $p115, $p116, $i117, $i118, $p119, $i120, $i121);
    goto $bb40_last;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} _raw_read_lock($p62);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(0, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.2, $p64);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p41, $mul.ref(0, 1184)), $mul.ref(648, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i68, $i70);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 1);
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i86 := $i72;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p41, $mul.ref(0, 1184)), $mul.ref(552, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} _raw_read_unlock($p96);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i54);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i98 := rawmidi_open_priv($p21, $i86, $i97, $p56);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 162} {:cexpr "err"} boogie_si_record_i32($i98);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i99 := $sge.i32($i98, 0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i100 := $i98;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i98, $sub.i32(0, 11));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i103 := $i98;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p3, 1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p108 := get_current();
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.24, $p3);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p108, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 165} $i111 := devirtbounce(0, $p110, $i109, $p110);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p3, $i111);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} ldv_mutex_unlock_14($p112);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} schedule();
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_mutex_lock_15($p113);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.2, $p114);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 1184)), $mul.ref(784, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.2, $p116);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $p119 := get_current();
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i120 := signal_pending($p119);
    call {:si_unique_call 171} {:cexpr "tmp___15"} boogie_si_record_i32($i120);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb71_dummy;

  $bb69:
    assume $i121 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32(0, 512);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(424, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} remove_wait_queue($p122, $p2);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i101, 0);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p56, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.2, $p125);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p56, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.2, $p148);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p149);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p172, $p55);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} ldv_mutex_unlock_16($p173);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.2, $p174);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} snd_card_unref($p175);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i151 == 1;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p56, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.2, $p152);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.2, $p154);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb83;

  $bb84:
    assume $i157 == 1;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i4, 14);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i159 := $zext.i1.i32($i158);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p56, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.2, $p161);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.2, $p163);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.2, $p165);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i167 := $and.i8($i160, 1);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i168 := $shl.i8($i167, 1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i169 := $and.i8($i166, $sub.i8(0, 3));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i170 := $or.i8($i169, $i168);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p165, $i170);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb75:
    assume $i128 == 1;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p56, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.2, $p129);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.2, $p131);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb77;

  $bb78:
    assume $i134 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i4, 14);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i136 := $zext.i1.i32($i135);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p56, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.2, $p138);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.2, $p140);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.2, $p142);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i144 := $and.i8($i137, 1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i145 := $shl.i8($i144, 1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i146 := $and.i8($i143, $sub.i8(0, 3));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i147 := $or.i8($i146, $i145);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p142, $i147);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb72:
    assume $i123 == 1;
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p56);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} kfree($p124);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i59 := $i101;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} vslice_dummy_var_15 := snd_card_file_remove($p41, $p1);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i44 := $i59;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} ldv_mutex_unlock_17($p177);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.2, $p178);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p179, $mul.ref(0, 1184)), $mul.ref(360, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.2, $p180);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} module_put($p181);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.2, $p182);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} snd_card_unref($p183);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i13 := $i44;
    goto $bb6;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i118 == 1;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32(0, 19);
    goto $bb58;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.23, $p104);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 2048);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i107 == 1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i101 := $i103;
    goto $bb58;

  $bb62:
    assume $i107 == 1;
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32(0, 16);
    goto $bb58;

  $bb56:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i101 := $i100;
    goto $bb58;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i71 == 1;
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p73, $i74 := $p65, $sub.i32(0, 1);
    goto $bb44;

  $bb44:
    call $p75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i87, $p89, $p90, $p91, $p92, $i93, $i94, $p73, $i74, $i95 := snd_rawmidi_open_loop_$bb44($i70, $p75, $p76, $p77, $p78, $i79, $i80, $i81, $p82, $i83, $i84, $i85, $i87, $p89, $p90, $p91, $p92, $i93, $i94, $p73, $i74, $i95);
    goto $bb44_last;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p75 := get_current();
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p76 := task_pid($p75);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p73, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.2, $p77);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p76);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i79, $i80);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i74;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.2, $p89);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, $i70);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i95 := $i87;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i72 := $i95;
    goto $bb43;

  $bb53:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $p73, $i74 := $p90, $i87;
    goto $bb53_dummy;

  $bb46:
    assume $i81 == 1;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p73, $mul.ref(0, 232)), $mul.ref(36, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.2, $p82);
    call {:si_unique_call 159} {:cexpr "subdevice"} boogie_si_record_i32($i83);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, $sub.i32(0, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i85 := $i83;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i87 := $i83;
    goto $bb52;

  $bb48:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb50;

  $bb36:
    assume $i58 == 1;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 12);
    goto $bb38;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i45);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 4);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    call {:si_unique_call 150} {:cexpr "fflags"} boogie_si_record_i16($i53);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb31;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i44 := $i42;
    goto $bb28;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p21, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} snd_card_unref($p38);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 6);
    goto $bb6;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb22;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb6;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i18 := iminor($p0);
    call {:si_unique_call 134} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p19 := snd_lookup_minor_data($i18, 4);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p21 := $p19;
    goto $bb13;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.23, $p9);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2048);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb6;

  $bb53_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  $bb71_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p41, $mul.ref(0, 1184)), $mul.ref(552, 1));
    goto corral_source_split_740;
}



const snd_rawmidi_release: ref;

axiom snd_rawmidi_release == $sub.ref(0, 68846);

procedure snd_rawmidi_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, assertsPassed, $CurrAddr;



implementation snd_rawmidi_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.25, $p2);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} rawmidi_release_priv($p4);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} kfree($p7);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1184)), $mul.ref(360, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_16 := snd_card_file_remove($p13, $p1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} module_put($p11);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const rawmidi_release_priv: ref;

axiom rawmidi_release_priv == $sub.ref(0, 69878);

procedure rawmidi_release_priv($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, assertsPassed, $CurrAddr;



implementation rawmidi_release_priv($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} ldv_mutex_lock_18($p3);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.2, $p4);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p11);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, $0.ref);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} ldv_mutex_unlock_19($p19);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 536)), $mul.ref(424, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} __wake_up($p20, 3, 1, $0.ref);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} close_substream($p2, $p16, 1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, $0.ref);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} close_substream($p2, $p9, 1);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, $0.ref);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 70910);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} free_($p0);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    return;
}



const snd_card_file_remove: ref;

axiom snd_card_file_remove == $sub.ref(0, 71942);

procedure snd_card_file_remove($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_file_remove($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 1} true;
    call {:si_unique_call 185} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 186} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const module_put: ref;

axiom module_put == $sub.ref(0, 72974);

procedure module_put($p0: ref);
  free requires assertsPassed;



implementation module_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 74006);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 187} $free($p0);
    return;
}



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 75038);

procedure ldv_mutex_lock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} ldv_mutex_lock_open_mutex($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} mutex_lock($p0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const close_substream: ref;

axiom close_substream == $sub.ref(0, 76070);

procedure close_substream($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.2, $M.27, $M.28, $M.29, $M.30, $M.31, $CurrAddr;



implementation close_substream($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i8;
  var $p43: ref;
  var $i44: i8;
  var $i45: i8;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p62: ref;
  var vslice_dummy_var_17: i64;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 191} {:cexpr "close_substream:arg:cleanup"} boogie_si_record_i32($i2);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p7, $i6);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i2, 0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    call {:si_unique_call 197} vslice_dummy_var_18 := devirtbounce.3($p27, $p1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 336)), $mul.ref(328, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.2, $p31);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} vslice_dummy_var_19 := snd_rawmidi_runtime_free($p1);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.2, $p40);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i42 := $and.i8($i41, $sub.i8(0, 2));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p40, $i42);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.2, $p43);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i45 := $and.i8($i44, $sub.i8(0, 3));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p43, $i45);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.2, $p46);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} put_pid($p47);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, $0.ref);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.2, $p49);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref($i51, 24)), $mul.ref(4, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.2, $p54);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i55, 1);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.2, $p57);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref($i59, 24)), $mul.ref(4, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p62, $i56);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.2, $p35);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 336)), $mul.ref(328, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    call {:si_unique_call 198} devirtbounce.4($p38, $p1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.2, $p12);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(24, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.2, $p16);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i21 := snd_rawmidi_drain_output($p1);
    call {:si_unique_call 195} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, $sub.i32(0, 512));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} snd_rawmidi_output_trigger($p1, 0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p3, $sub.i8(0, 2));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} vslice_dummy_var_17 := snd_rawmidi_kernel_write($p1, $p3, 1);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} snd_rawmidi_input_trigger($p1, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 77102);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} ldv_mutex_unlock_open_mutex($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} mutex_unlock($p0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 78134);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 204} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_open_mutex: ref;

axiom ldv_mutex_unlock_open_mutex == $sub.ref(0, 79166);

procedure ldv_mutex_unlock_open_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_open_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} ldv_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 206} {:cexpr "ldv_mutex_open_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 80198);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 81230);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 207} __VERIFIER_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const snd_rawmidi_input_trigger: ref;

axiom snd_rawmidi_input_trigger == $sub.ref(0, 82262);

procedure snd_rawmidi_input_trigger($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation snd_rawmidi_input_trigger($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "snd_rawmidi_input_trigger:arg:up___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(24, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p3);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    call {:si_unique_call 209} devirtbounce.5($p10, $p0, $i1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 0);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} vslice_dummy_var_20 := cancel_work_sync($p14);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_rawmidi_kernel_write: ref;

axiom snd_rawmidi_kernel_write == $sub.ref(0, 83294);

procedure snd_rawmidi_kernel_write($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_kernel_write($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} {:cexpr "snd_rawmidi_kernel_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $i3 := snd_rawmidi_kernel_write1($p0, $0.ref, $p1, $i2);
    call {:si_unique_call 213} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_rawmidi_drain_output: ref;

axiom snd_rawmidi_drain_output == $sub.ref(0, 84326);

procedure snd_rawmidi_drain_output($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.27, $M.28, $M.29, $M.30, $M.31, $CurrAddr;



implementation snd_rawmidi_drain_output($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i8;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i32: i64;
  var $i30: i64;
  var $i31: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $i33: i64;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i1;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.2, $p4);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, $sub.i8(0, 2));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i7 := $or.i8($i6, 1);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p4, $i7);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.2, $p8);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.2, $p10);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i9, $i11);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i44 := 2500;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p45 := get_current();
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i46 := signal_pending($p45);
    call {:si_unique_call 226} {:cexpr "tmp___3"} boogie_si_record_i32($i46);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.2, $p49);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.2, $p51);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i53 := $ult.i64($i50, $i52);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i59 := $i48;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.2, $p60);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i62 := $and.i8($i61, $sub.i8(0, 2));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p60, $i62);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i59, $sub.i32(0, 512));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.2, $p64);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.2, $p66);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i69 == 1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} msleep(50);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_21 := snd_rawmidi_drop_output($p0);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i69 == 1;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.2, $p70);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.2, $p72);
    call {:si_unique_call 228} devirtbounce.4($p73, $p0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i44, 0);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb24;

  $bb25:
    assume $i54 == 1;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.2, $p55);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.2, $p57);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __snd_printk.i32.ref.i32.ref.i64.i64(0, .str, 231, .str.1, $i56, $i58);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 5);
    goto $bb27;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 512);
    goto $bb21;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $p13 := get_current();
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p14, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p16, $p13);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p17, autoremove_wake_function);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p20, $p18);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p23, $p21);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} prepare_to_wait($p24, $p1, 1);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.2, $p25);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.2, $p27);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i29 := $uge.i64($i26, $i28);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i30 := 2500;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i29 == 1);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i31 := 2500;
    goto $bb6;

  $bb6:
    call $i32, $i31, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42 := snd_rawmidi_drain_output_loop_$bb6($p1, $p24, $p25, $p27, $i32, $i31, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42);
    goto $bb6_last;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p34 := get_current();
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i35 := signal_pending($p34);
    call {:si_unique_call 220} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64(0, 512);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} finish_wait($p43, $p1);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i44 := $i33;
    goto $bb18;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i37 := schedule_timeout($i31);
    call {:si_unique_call 222} {:cexpr "__ret"} boogie_si_record_i64($i37);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} prepare_to_wait($p24, $p1, 1);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.2, $p25);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.2, $p27);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i42 := $uge.i64($i40, $i41);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i32 := $i37;
    assume true;
    goto $bb7, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i37;
    goto $bb17_dummy;

  $bb7:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i30 := $i32;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    goto $bb8;

  $bb12:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb4;

  $bb17_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const snd_rawmidi_output_trigger: ref;

axiom snd_rawmidi_output_trigger == $sub.ref(0, 85358);

procedure snd_rawmidi_output_trigger($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation snd_rawmidi_output_trigger($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "snd_rawmidi_output_trigger:arg:up___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(24, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p3);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    call {:si_unique_call 232} devirtbounce.5($p10, $p0, $i1);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_rawmidi_runtime_free: ref;

axiom snd_rawmidi_runtime_free == $sub.ref(0, 86390);

procedure snd_rawmidi_runtime_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_runtime_free($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} kfree($p4);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} kfree($p5);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, $0.ref);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const put_pid: ref;

axiom put_pid == $sub.ref(0, 87422);

procedure put_pid($p0: ref);
  free requires assertsPassed;



implementation put_pid($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 88454);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p0 := devirtbounce.6(0, current_task);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 89486);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 90518);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 91550);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 238} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 240} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 92582);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 1} true;
    call {:si_unique_call 242} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 243} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 93614);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    return;
}



const __snd_printk: ref;

axiom __snd_printk == $sub.ref(0, 94646);

procedure __snd_printk.i32.ref.i32.ref.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 245} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 247} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i64.i64($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i64, p.5: i64);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i64.i64($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i64, p.5: i64)
{

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 249} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 95678);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    return;
}



const snd_rawmidi_drop_output: ref;

axiom snd_rawmidi_drop_output == $sub.ref(0, 96710);

procedure snd_rawmidi_drop_output($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_drop_output($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} snd_rawmidi_output_trigger($p0, 0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p3);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, $sub.i8(0, 2));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p3, $i5);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p7 := spinlock_check($p6);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 254} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(40, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p9, 0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p10, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.2, $p11);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p13, $i12);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} spin_unlock_irqrestore($p14, $i8);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 97742);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 98774);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 257} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 99806);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 100838);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 101870);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 9576)), $mul.ref(8, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.4, $p2);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 263} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 102902);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 265} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 103934);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(16, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i4 := variable_test_bit($i1, $p3);
    call {:si_unique_call 268} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 104966);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 270} $i2 := devirtbounce.7(0, $p1, $i0);
    call {:si_unique_call 271} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_rawmidi_kernel_write1: ref;

axiom snd_rawmidi_kernel_write1 == $sub.ref(0, 105998);

procedure snd_rawmidi_kernel_write1($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_kernel_write1($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $i8: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i1;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i64;
  var $i77: i64;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $p107: ref;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i123: i64;
  var $i124: i64;
  var $i118: i64;
  var $i119: i64;
  var $i51: i64;
  var $i52: i64;
  var $i95: i64;
  var $i96: i64;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $i130: i32;
  var $i131: i64;
  var $p132: ref;
  var $i133: i1;
  var $i22: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} {:cexpr "snd_rawmidi_kernel_write1:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.2, $p4);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i8);
    call {:si_unique_call 273} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 275} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 278} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 279} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 281} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i27, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 284} {:cexpr "tmp___2"} boogie_si_record_i64($i36);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p39 := spinlock_check($p38);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i40 := _raw_spin_lock_irqsave($p39);
    call {:si_unique_call 287} {:cexpr "flags"} boogie_si_record_i64($i40);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(24, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.2, $p42);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i64($i3, 0);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i51, $i52 := $i40, 0;
    assume {:branchcond $i50} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i95, $i96 := $i51, $i52;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.2, $p125);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.2, $p127);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i129 := $ult.i64($i126, $i128);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i130 := $zext.i1.i32($i129);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i130);
    call {:si_unique_call 300} {:cexpr "count1"} boogie_si_record_i64($i131);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} spin_unlock_irqrestore($p132, $i95);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i131, 0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i22 := $i96;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb52:
    assume $i133 == 1;
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} snd_rawmidi_output_trigger($p0, 1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i53, $i54, $i55 := 0, $i40, $i3;
    goto $bb26;

  $bb26:
    call $p56, $i57, $p58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $p71, $p72, $p73, $i74, $p75, $p76, $i78, $i79, $p80, $p81, $p82, $p83, $i84, $p85, $p86, $i87, $i88, $i89, $p97, $p98, $i99, $i100, $i77, $p101, $i102, $i103, $p104, $p105, $i106, $p107, $i108, $i109, $p110, $p111, $i112, $i113, $p114, $i115, $i116, $i117, $i53, $i54, $i55, $p120, $i121, $i122, $i123, $i124, $i118, $i119, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2 := snd_rawmidi_kernel_write1_loop_$bb26($p1, $p2, $p5, $p56, $i57, $p58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $p71, $p72, $p73, $i74, $p75, $p76, $i78, $i79, $p80, $p81, $p82, $p83, $i84, $p85, $p86, $i87, $i88, $i89, $p97, $p98, $i99, $i100, $i77, $p101, $i102, $i103, $p104, $p105, $i106, $p107, $i108, $i109, $p110, $p111, $i112, $i113, $p114, $i115, $i116, $i117, $i53, $i54, $i55, $p120, $i121, $i122, $i123, $i124, $i118, $i119, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2);
    goto $bb26_last;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i121 := $load.i64($M.2, $p120);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i123, $i124 := $i54, $i53;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i51, $i52 := $i123, $i124;
    goto $bb25;

  $bb49:
    assume $i122 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.2, $p56);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.2, $p58);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i60 := $sub.i64($i57, $i59);
    call {:si_unique_call 289} {:cexpr "count1"} boogie_si_record_i64($i60);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i64($i60, $i55);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $i60;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.2, $p63);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i65 := $slt.i64($i64, $i62);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i68 := $i62;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p2);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p1);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i100 := $i54;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i77 := $i100;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.2, $p101);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, $i68);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p104, $i103);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.2, $p105);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.2, $p107);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i109 := $urem.i64($i106, $i108);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p110, $i109);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.2, $p111);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i113 := $sub.i64($i112, $i68);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p114, $i113);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i53, $i68);
    call {:si_unique_call 292} {:cexpr "result"} boogie_si_record_i64($i115);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i116 := $sub.i64($i55, $i68);
    call {:si_unique_call 293} {:cexpr "count"} boogie_si_record_i64($i116);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i117 := $sgt.i64($i116, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i118, $i119 := $i77, $i115;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i51, $i52 := $i118, $i119;
    goto $bb25;

  $bb47:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $i53, $i54, $i55 := $i115, $i77, $i116;
    goto $bb47_dummy;

  $bb37:
    assume $i79 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} spin_unlock_irqrestore($p80, $i54);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.2, $p81);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.2, $p83);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p82, $mul.ref($i84, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p1, $mul.ref($i53, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i87 := copy_from_user($p85, $p86, $i68);
    call {:si_unique_call 296} {:cexpr "tmp___5"} boogie_si_record_i64($i87);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i89 := $i53;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p98 := spinlock_check($p97);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $i99 := _raw_spin_lock_irqsave($p98);
    call {:si_unique_call 304} {:cexpr "flags"} boogie_si_record_i64($i99);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb46;

  $bb39:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p91 := spinlock_check($p90);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i92 := _raw_spin_lock_irqsave($p91);
    call {:si_unique_call 299} {:cexpr "flags"} boogie_si_record_i64($i92);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i64($i89, 0);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i93 == 1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i94 := $sub.i64(0, 14);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i95, $i96 := $i92, $i94;
    goto $bb44;

  $bb41:
    assume $i93 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i94 := $i89;
    goto $bb43;

  $bb34:
    assume $i70 == 1;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.2, $p71);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.2, $p73);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p72, $mul.ref($i74, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p2, $mul.ref($i53, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.2;
    cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 291} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p75, $p76, $i68, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_2;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i77 := $i54;
    goto $bb36;

  $bb31:
    assume $i65 == 1;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.2, $p66);
    call {:si_unique_call 290} {:cexpr "count1"} boogie_si_record_i64($i67);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb33;

  $bb28:
    assume $i61 == 1;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i62 := $i55;
    goto $bb30;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.2, $p46);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i48 := $slt.i64($i47, $i3);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} spin_unlock_irqrestore($p49, $i40);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 11);
    goto $bb9;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb9;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} warn_slowpath_fmt.ref.i32.ref.ref(.str, 1215, .str.2, .str.19);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 22);
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} warn_slowpath_fmt.ref.i32.ref.ref(.str, 1213, .str.2, .str.18);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb3;

  $bb47_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1385;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 107030);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.ref($p0: ref, $i1: i32, $p2: ref, p.3: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 108062);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 109094);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 310} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 311} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} might_fault();
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 314} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 318} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 322} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_22 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} warn_slowpath_fmt.ref.i32.ref(.str.20, 66, .str.21);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 320} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 316} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 110126);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const might_fault: ref;

axiom might_fault == $sub.ref(0, 111158);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 112190);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 325} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 1} true;
    call {:si_unique_call 326} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 327} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 113222);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 1} true;
    call {:si_unique_call 328} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 329} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_open_mutex: ref;

axiom ldv_mutex_lock_open_mutex == $sub.ref(0, 114254);

procedure ldv_mutex_lock_open_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_open_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} ldv_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 331} {:cexpr "ldv_mutex_open_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 115286);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    return;
}



const imajor: ref;

axiom imajor == $sub.ref(0, 116318);

procedure imajor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation imajor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(76, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.32, $p1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 20);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nonseekable_open: ref;

axiom nonseekable_open == $sub.ref(0, 117350);

procedure nonseekable_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nonseekable_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 332} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 118382);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1032)), $mul.ref(76, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.32, $p1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_lookup_minor_data: ref;

axiom snd_lookup_minor_data == $sub.ref(0, 119414);

procedure snd_lookup_minor_data($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation snd_lookup_minor_data($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} {:cexpr "snd_lookup_minor_data:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 335} {:cexpr "snd_lookup_minor_data:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p2 := external_alloc();
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const snd_lookup_oss_minor_data: ref;

axiom snd_lookup_oss_minor_data == $sub.ref(0, 120446);

procedure snd_lookup_oss_minor_data($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation snd_lookup_oss_minor_data($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} {:cexpr "snd_lookup_oss_minor_data:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 338} {:cexpr "snd_lookup_oss_minor_data:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p2 := external_alloc();
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const try_module_get: ref;

axiom try_module_get == $sub.ref(0, 121478);

procedure try_module_get($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation try_module_get($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 341} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_card_unref: ref;

axiom snd_card_unref == $sub.ref(0, 122510);

procedure snd_card_unref($p0: ref);
  free requires assertsPassed;



implementation snd_card_unref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_13: ref;

axiom ldv_mutex_lock_13 == $sub.ref(0, 123542);

procedure ldv_mutex_lock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} ldv_mutex_lock_open_mutex($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} mutex_lock($p0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const snd_card_file_add: ref;

axiom snd_card_file_add == $sub.ref(0, 124574);

procedure snd_card_file_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_file_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 344} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 345} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_rawmidi_file_flags: ref;

axiom snd_rawmidi_file_flags == $sub.ref(0, 125606);

procedure snd_rawmidi_file_flags($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation snd_rawmidi_file_flags($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(132, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.33, $p1);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb9;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb9;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 126638);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 347} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const init_waitqueue_entry: ref;

axiom init_waitqueue_entry == $sub.ref(0, 127670);

procedure init_waitqueue_entry($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36;



implementation init_waitqueue_entry($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p2, 0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p4, $p1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p5, default_wake_function);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 128702);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    return;
}



const _raw_read_lock: ref;

axiom _raw_read_lock == $sub.ref(0, 129734);

procedure _raw_read_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    return;
}



const task_pid: ref;

axiom task_pid == $sub.ref(0, 130766);

procedure task_pid($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation task_pid($p0: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 9576)), $mul.ref(1296, 1)), $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.4, $p3);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const _raw_read_unlock: ref;

axiom _raw_read_unlock == $sub.ref(0, 131798);

procedure _raw_read_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_read_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    return;
}



const rawmidi_open_priv: ref;

axiom rawmidi_open_priv == $sub.ref(0, 132830);

procedure rawmidi_open_priv($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.2, $M.38, $M.27, $M.28, $M.29, $M.30, $M.31, $CurrAddr, $M.26, assertsPassed;



implementation rawmidi_open_priv($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 351} {:cexpr "rawmidi_open_priv:arg:subdevice"} boogie_si_record_i32($i1);
    call {:si_unique_call 352} {:cexpr "rawmidi_open_priv:arg:mode"} boogie_si_record_i32($i2);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p4, $0.ref);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p5, $0.ref);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, $0.ref);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, $0.ref);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i2, 2);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i2, 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.37, $p4);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.37, $p5);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p33, $p0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.37, $p4);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p35, $p34);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.37, $p5);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p37, $p36);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.37, $p5);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i27 := open_substream($p0, $p26, $i2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 360} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i28 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.37, $p4);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i12 := $i27;
    goto $bb5;

  $bb24:
    assume $i31 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.37, $p4);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} close_substream($p0, $p32, 0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.37, $p4);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i21 := open_substream($p0, $p20, $i2);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 358} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i12 := $i21;
    goto $bb5;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i15 := assign_substream($p0, $i1, 0, $i2, $p5);
    call {:si_unique_call 356} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i12 := $i15;
    goto $bb5;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i10 := assign_substream($p0, $i1, 1, $i2, $p4);
    call {:si_unique_call 354} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb5;
}



const ldv_mutex_unlock_14: ref;

axiom ldv_mutex_unlock_14 == $sub.ref(0, 133862);

procedure ldv_mutex_unlock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} ldv_mutex_unlock_open_mutex($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} mutex_unlock($p0);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 134894);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_15: ref;

axiom ldv_mutex_lock_15 == $sub.ref(0, 135926);

procedure ldv_mutex_lock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} ldv_mutex_lock_open_mutex($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} mutex_lock($p0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 136958);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_16: ref;

axiom ldv_mutex_unlock_16 == $sub.ref(0, 137990);

procedure ldv_mutex_unlock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} ldv_mutex_unlock_open_mutex($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} mutex_unlock($p0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 139022);

procedure ldv_mutex_unlock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} ldv_mutex_unlock_open_mutex($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} mutex_unlock($p0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const assign_substream: ref;

axiom assign_substream == $sub.ref(0, 140054);

procedure assign_substream($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.37, $CurrAddr;



implementation assign_substream($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p49: ref;
  var $p47: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p33: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 371} {:cexpr "assign_substream:arg:subdevice"} boogie_si_record_i32($i1);
    call {:si_unique_call 372} {:cexpr "assign_substream:arg:stream"} boogie_si_record_i32($i2);
    call {:si_unique_call 373} {:cexpr "assign_substream:arg:mode"} boogie_si_record_i32($i3);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(192, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i2);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p10, 1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.38 := $store.i32($M.38, $p11, 2);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(28, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.2, $p12);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i2);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref($i14, 4));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.38, $p15);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i13, $i16);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $sge.i32($i1, 0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref($i8, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref($i8, 24)), $mul.ref(8, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i29, $i31);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 11);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p33 := $p26;
    goto $bb14;

  $bb14:
    call $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $i44, $i45, $i46, $i48, $p50, $i51, $i52, $p49, $p47, $p54, $p55, $p56, $p57, $i58, $i59, $p33 := assign_substream_loop_$bb14($i1, $i2, $i3, $i31, $p34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $p43, $i44, $i45, $i46, $i48, $p50, $i51, $i52, $p49, $p47, $p54, $p55, $p56, $p57, $i58, $i59, $p33);
    goto $bb14_last;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(24, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.2, $p35);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i1, 0);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p49 := $p33;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i48 == 1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p33, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, $i1);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p49 := $p33;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p47 := $p33;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.2, $p54);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, $i31);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i59 == 1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb34:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $p33 := $p55;
    goto $bb34_dummy;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p4, $p49);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb29;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i2, 1);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i3, 4);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i41 == 1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p33);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(24, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.2, $p43);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $p33;
    goto $bb25;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb19;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref($i8, 24)), $mul.ref(0, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.2, $p21);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i23 := $uge.i32($i1, $i22);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 6);
    goto $bb3;

  $bb34_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1752;
}



const open_substream: ref;

axiom open_substream == $sub.ref(0, 141086);

procedure open_substream($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.26, assertsPassed;



implementation open_substream($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i8: i32;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "open_substream:arg:mode"} boogie_si_record_i32($i2);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.2, $p48);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p51, $i50);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i6 := snd_rawmidi_runtime_create($p1);
    call {:si_unique_call 376} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    call {:si_unique_call 377} $i14 := devirtbounce.3($p13, $p1);
    call {:si_unique_call 378} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.2, $p17);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, $sub.i8(0, 2));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i20 := $or.i8($i19, 1);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p17, $i20);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.2, $p21);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, $sub.i8(0, 5));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p21, $i23);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i2, 4);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p30 := get_current();
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p31 := task_pid($p30);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p32 := get_pid($p31);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p33, $p32);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.2, $p34);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref($i36, 24)), $mul.ref(4, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.2, $p39);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref($i44, 24)), $mul.ref(4, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p47, $i41);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.2, $p26);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i27, $sub.i8(0, 3));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i29 := $or.i8($i28, 2);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p26, $i29);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_23 := snd_rawmidi_runtime_free($p1);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb5;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb5;
}



const snd_rawmidi_runtime_create: ref;

axiom snd_rawmidi_runtime_create == $sub.ref(0, 142118);

procedure snd_rawmidi_runtime_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation snd_rawmidi_runtime_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i9: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p5 := kzalloc(336, 208);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(0, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, $p0);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_24 := spinlock_check($p11);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} __raw_spin_lock_init($p15, .str.15, $p1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __init_waitqueue_head($p16, .str.16, $p2);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(240, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} __init_work($p17, 0);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p18, 4195328);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p4);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.2;
    cmdloc_dummy_var_4 := $M.2;
    call {:si_unique_call 392} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p21, $p22, 8, $zext.i32.i64(8), 0 == 1);
    $M.2 := cmdloc_dummy_var_5;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(240, 1)), $mul.ref(32, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} lockdep_init_map($p24, .str.17, $p3, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} INIT_LIST_HEAD($p26);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(240, 1)), $mul.ref(24, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, snd_rawmidi_input_event_work);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(232, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p29, $0.ref);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p30, 4096);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p31, 1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.2, $p32);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.2, $p36);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p38, $i37);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.2, $p39);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p41 := kmalloc($i40, 208);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p42, $p41);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p41);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(40, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p46, 0);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p47, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, $p5);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p6);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} kfree($p45);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p35, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;
}



const get_pid: ref;

axiom get_pid == $sub.ref(0, 143150);

procedure get_pid($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation get_pid($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} atomic_inc($p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 144182);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 398} devirtbounce.8(0, $p1, $p1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 145214);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 400} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 146246);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 147278);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 148310);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 149342);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 150374);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p1, $p0);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, $p0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    return;
}



const snd_rawmidi_input_event_work: ref;

axiom snd_rawmidi_input_event_work == $sub.ref(0, 151406);

procedure snd_rawmidi_input_event_work($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_input_event_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 336)), $mul.ref(232, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 336)), $mul.ref(232, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 240), 336)), $mul.ref(0, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    call {:si_unique_call 404} devirtbounce.4($p8, $p10);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 152438);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 153470);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 406} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p2 := ldv_malloc($i0);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 154502);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 408} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 1} true;
    call {:si_unique_call 409} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 410} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p3 := malloc($i0);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i4 := ldv_is_err($p3);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 1} true;
    call {:si_unique_call 413} __VERIFIER_assume($i7);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 155534);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 414} $r := $malloc($i0);
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 156566);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 1} true;
    call {:si_unique_call 415} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 416} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 157598);

procedure compat_ptr($i0: i32) returns ($r: ref);



const snd_rawmidi_ioctl_params_compat: ref;

axiom snd_rawmidi_ioctl_params_compat == $sub.ref(0, 158630);

procedure snd_rawmidi_ioctl_params_compat($p0: ref, $p1: ref) returns ($r: i32);



const snd_rawmidi_ioctl_status_compat: ref;

axiom snd_rawmidi_ioctl_status_compat == $sub.ref(0, 159662);

procedure snd_rawmidi_ioctl_status_compat($p0: ref, $p1: ref) returns ($r: i32);



const snd_rawmidi_output_status: ref;

axiom snd_rawmidi_output_status == $sub.ref(0, 160694);

procedure snd_rawmidi_output_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_output_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.2;
    call {:si_unique_call 417} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p4, 0, 56, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_7;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p5, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} spin_lock_irq($p6);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.2, $p7);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p9, $i8);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} spin_unlock_irq($p10);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const snd_rawmidi_input_status: ref;

axiom snd_rawmidi_input_status == $sub.ref(0, 161726);

procedure snd_rawmidi_input_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_input_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.2;
    call {:si_unique_call 420} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p4, 0, 56, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_9;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p5, 1);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} spin_lock_irq($p6);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.2, $p7);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p9, $i8);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(64, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.2, $p10);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p12, $i11);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(64, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p13, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} spin_unlock_irq($p14);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 162758);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 163790);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} _raw_spin_lock_irq($p2);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 164822);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 165854);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 166886);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    return;
}



const snd_rawmidi_output_params: ref;

axiom snd_rawmidi_output_params == $sub.ref(0, 167918);

procedure snd_rawmidi_output_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.27, $M.28, $M.29, $M.30, $M.31, $CurrAddr;



implementation snd_rawmidi_output_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $i58: i8;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $i62: i8;
  var $i12: i32;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(24, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.2, $p5);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vslice_dummy_var_25 := snd_rawmidi_drain_output($p0);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.2, $p14);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i16 := $ule.i64($i15, 31);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.2, $p17);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64($i18, 1048576);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.2, $p20);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i22 == 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.2, $p23);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.2, $p25);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i64($i24, $i26);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.2, $p28);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.2, $p30);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i29, $i31);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.2, $p47);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p49, $i48);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p1);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(24, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.2, $p51);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.2, $p57);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i59 := $and.i8($i56, 1);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i60 := $shl.i8($i59, 2);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i61 := $and.i8($i58, $sub.i8(0, 5));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i62 := $or.i8($i61, $i60);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p57, $i62);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.2, $p33);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.2, $p35);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p37 := krealloc($p34, $i36, 208);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p40, $p37);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.2, $p41);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p43, $i42);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.2, $p44);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p46, $i45);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb6;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(28, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.2, $p9);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb6;
}



const snd_rawmidi_input_params: ref;

axiom snd_rawmidi_input_params == $sub.ref(0, 168950);

procedure snd_rawmidi_input_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_input_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i11: i32;
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} vslice_dummy_var_26 := snd_rawmidi_drain_input($p0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.2, $p5);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i7 := $ule.i64($i6, 31);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.2, $p8);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i64($i9, 1048576);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.2, $p12);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.2, $p15);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.2, $p17);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i64($i16, $i18);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.2, $p20);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.2, $p22);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i21, $i23);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.2, $p36);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p38, $i37);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.2, $p27);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p29 := krealloc($p26, $i28, 208);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, $p29);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.2, $p33);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p35, $i34);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const snd_rawmidi_drain_input: ref;

axiom snd_rawmidi_drain_input == $sub.ref(0, 169982);

procedure snd_rawmidi_drain_input($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_drain_input($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} snd_rawmidi_input_trigger($p0, 0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(8, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.2, $p3);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, $sub.i8(0, 2));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p3, $i5);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p7 := spinlock_check($p6);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 432} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(40, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p9, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p10, 0);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p11, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} spin_unlock_irqrestore($p12, $i8);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const krealloc: ref;

axiom krealloc == $sub.ref(0, 171014);

procedure krealloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation krealloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} {:cexpr "krealloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 435} {:cexpr "krealloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p3 := external_alloc();
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const snd_rawmidi_info_user: ref;

axiom snd_rawmidi_info_user == $sub.ref(0, 172046);

procedure snd_rawmidi_info_user($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation snd_rawmidi_info_user($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p2 := $alloc($mul.ref(268, $zext.i32.i64(1)));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i3 := snd_rawmidi_info($p0, $p2);
    call {:si_unique_call 439} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i8 := copy_to_user($p6, $p7, 268);
    call {:si_unique_call 441} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 173078);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} might_fault();
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 445} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 174110);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 446} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 1} true;
    call {:si_unique_call 447} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 448} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_rawmidi_info: ref;

axiom snd_rawmidi_info == $sub.ref(0, 175142);

procedure snd_rawmidi_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i4: i32;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_27: ref;
  var vslice_dummy_var_28: ref;
  var vslice_dummy_var_29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(40, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.2;
    call {:si_unique_call 449} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p7, 0, 268, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_11;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(12, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p12, $i11);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.2, $p13);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(0, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p15, $i14);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(4, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p18, $i17);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(16, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.2, $p19);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(8, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p21, $i20);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(28, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(16, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p24, $i23);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(20, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(32, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} vslice_dummy_var_27 := strcpy($p26, $p28);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(84, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 536)), $mul.ref(96, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} vslice_dummy_var_28 := strcpy($p31, $p33);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(164, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(56, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_29 := strcpy($p36, $p38);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(196, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p44, $i43);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.2, $p45);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.2, $p47);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(48, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.2, $p49);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.2, $p51);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i48, $i52);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 268)), $mul.ref(200, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p54, $i53);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 19);
    goto $bb3;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 176174);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 177206);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.39, $p5);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.39, $p11);
    call {:si_unique_call 453} devirtbounce.9($p12, $p0, $p1, $p2);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const snd_rawmidi_ready: ref;

axiom snd_rawmidi_ready == $sub.ref(0, 178238);

procedure snd_rawmidi_ready($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_rawmidi_ready($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.2, $p3);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.2, $p5);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i7 := $uge.i64($i4, $i6);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const snd_rawmidi_ready_append: ref;

axiom snd_rawmidi_ready_append == $sub.ref(0, 179270);

procedure snd_rawmidi_ready_append($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation snd_rawmidi_ready_append($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i15: i1;
  var $i9: i1;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "snd_rawmidi_ready_append:arg:count"} boogie_si_record_i64($i1);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.2, $p4);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.2, $p6);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i5, $i7);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i9);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(24, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.2, $p11);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i15 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.2, $p16);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i18 := $uge.i64($i17, $i1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb5;
}



const snd_rawmidi_kernel_read1: ref;

axiom snd_rawmidi_kernel_read1 == $sub.ref(0, 180302);

procedure snd_rawmidi_kernel_read1($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_kernel_read1($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i64;
  var $i49: i1;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $i8: i64;
  var $i9: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i78: i64;
  var $i74: i64;
  var $i7: i64;
  var $i51: i64;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} {:cexpr "snd_rawmidi_kernel_read1:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.2, $p4);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i64($i3, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i51 := $i7;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, $i3;
    goto $bb4;

  $bb4:
    call $p10, $i11, $p12, $i13, $i14, $i15, $i16, $p17, $p18, $i19, $p20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $p35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $i48, $p52, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $p60, $i61, $p62, $i63, $i64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $i73, $i8, $i9, $p75, $i76, $i77, $i78, $i74, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14 := snd_rawmidi_kernel_read1_loop_$bb4($p1, $p2, $p5, $p10, $i11, $p12, $i13, $i14, $i15, $i16, $p17, $p18, $i19, $p20, $i21, $i22, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $p35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $i48, $p52, $p53, $i54, $i55, $p56, $i57, $i58, $p59, $p60, $i61, $p62, $i63, $i64, $p65, $p66, $i67, $i68, $p69, $p70, $i71, $i72, $i73, $i8, $i9, $p75, $i76, $i77, $i78, $i74, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14);
    goto $bb4_last;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.2, $p75);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i78 := $i8;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i7 := $i78;
    goto $bb3;

  $bb27:
    assume $i77 == 1;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.2, $p10);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.2, $p12);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i11, $i13);
    call {:si_unique_call 456} {:cexpr "count1"} boogie_si_record_i64($i14);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i64($i14, $i9);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p18 := spinlock_check($p17);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i19 := _raw_spin_lock_irqsave($p18);
    call {:si_unique_call 459} {:cexpr "flags"} boogie_si_record_i64($i19);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.2, $p20);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i24 := $slt.i64($i23, $i16);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p2);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p1);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i19;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.2, $p56);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i57, $i27);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p59, $i58);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.2, $p60);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.2, $p62);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i64 := $urem.i64($i61, $i63);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p65, $i64);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.2, $p66);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i68 := $sub.i64($i67, $i27);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p69, $i68);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} spin_unlock_irqrestore($p70, $i55);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i8, $i27);
    call {:si_unique_call 469} {:cexpr "result"} boogie_si_record_i64($i71);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i72 := $sub.i64($i9, $i27);
    call {:si_unique_call 470} {:cexpr "count"} boogie_si_record_i64($i72);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i73 := $sgt.i64($i72, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i74 := $i71;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i7 := $i74;
    goto $bb3;

  $bb25:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i71, $i72;
    goto $bb25_dummy;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} spin_unlock_irqrestore($p38, $i19);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p1, $mul.ref($i8, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.2, $p42);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p41, $mul.ref($i43, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i27);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i46 := copy_to_user($p39, $p44, $i45);
    call {:si_unique_call 464} {:cexpr "tmp___0"} boogie_si_record_i32($i46);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i48 := $i8;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p53 := spinlock_check($p52);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i54 := _raw_spin_lock_irqsave($p53);
    call {:si_unique_call 467} {:cexpr "flags"} boogie_si_record_i64($i54);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb24;

  $bb17:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i64($i48, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i50 := $sub.i64(0, 14);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb22;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i50 := $i48;
    goto $bb21;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p2, $mul.ref($i8, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.2, $p31);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.2, $p33);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p32, $mul.ref($i34, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.2;
    cmdloc_dummy_var_13 := $M.2;
    call {:si_unique_call 461} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p30, $p35, $i27, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_14;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.2, $p25);
    call {:si_unique_call 460} {:cexpr "count1"} boogie_si_record_i64($i26);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb11;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i16 := $i9;
    goto $bb8;

  $bb25_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;
}



const snd_rawmidi_search: ref;

axiom snd_rawmidi_search == $sub.ref(0, 181334);

procedure snd_rawmidi_search($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation snd_rawmidi_search($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p8: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "snd_rawmidi_search:arg:device"} boogie_si_record_i32($i1);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, snd_rawmidi_devices);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 8), 536));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 8), 536)), $mul.ref(8, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, $p2i.ref.i64(snd_rawmidi_devices));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $p17, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p8 := snd_rawmidi_search_loop_$bb4($p0, $i1, $p9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $p17, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p8);
    goto $bb4_last;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 8), 536));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 8), 536)), $mul.ref(8, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $p2i.ref.i64(snd_rawmidi_devices));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p23;
    goto $bb13_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, $i1);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p17 := $p8;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p18 := $p17;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;
}



const ldv_mutex_unlock_register_mutex: ref;

axiom ldv_mutex_unlock_register_mutex == $sub.ref(0, 182366);

procedure ldv_mutex_unlock_register_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_unlock_register_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i1 := $M.40;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} ldv_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 473} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_register_mutex: ref;

axiom ldv_mutex_lock_register_mutex == $sub.ref(0, 183398);

procedure ldv_mutex_lock_register_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_lock_register_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i1 := $M.40;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} ldv_error();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 475} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_rawmidi_info_select: ref;

axiom snd_rawmidi_info_select == $sub.ref(0, 184430);

procedure snd_rawmidi_info_select($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 185462);

procedure ldv_mutex_lock_20($p0: ref);



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 186494);

procedure ldv_mutex_unlock_21($p0: ref);



const snd_rawmidi_dev_free: ref;

axiom snd_rawmidi_dev_free == $sub.ref(0, 187526);

procedure snd_rawmidi_dev_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.40, assertsPassed;



implementation snd_rawmidi_dev_free($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.41, $p1);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i4 := snd_rawmidi_free($p3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 477} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const snd_rawmidi_dev_register: ref;

axiom snd_rawmidi_dev_register == $sub.ref(0, 188558);

procedure snd_rawmidi_dev_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.40, $CurrAddr, assertsPassed;



implementation snd_rawmidi_dev_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i1;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $i175: i32;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i8: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.42, $p2);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 7);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} ldv_mutex_lock_28(register_mutex);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.2, $p11);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p13 := snd_rawmidi_search($p10, $i12);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(8, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} list_add_tail($p16, snd_rawmidi_devices);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_30 := sprintf.ref.ref.i32.i32($p17, .str.23, $i21, $i23);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.2, $p27);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p4);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i31 := snd_register_device(4, $p26, $i28, snd_rawmidi_f_ops, $p29, $p30);
    call {:si_unique_call 485} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(184, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(176, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p62, 0);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.2, $p63);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.2, $p65);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.2, $p67);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref($i69, 4));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.43, $p70);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i64, $i71);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.2, $p94);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.2, $p96);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.2, $p98);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i99);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref($i100, 4));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.44, $p101);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i95, $i102);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} ldv_mutex_unlock_32(register_mutex);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p1);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.2, $p119);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_33 := sprintf.ref.ref.i32($p118, .str.26, $i120);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.2, $p122);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p1);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.2, $p125);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 1184)), $mul.ref(664, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.2, $p127);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p129 := snd_info_create_card_entry($p123, $p124, $p128);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i130 := $p2i.ref.i64($p129);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $p140 := $p129;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(520, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p141, $p140);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(184, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.2, $p142);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i145 := $eq.i64($i144, 0);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i145 == 1);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(184, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.2, $p146);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.2, $p148);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p149);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i151 := $eq.i64($i150, 0);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i151 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.2, $p152);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.2, $p154);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i157 := snd_seq_device_new($p153, $i155, .str.27, 0, $p156);
    call {:si_unique_call 508} {:cexpr "tmp___3"} boogie_si_record_i32($i157);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i158 := $sge.i32($i157, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i158 == 1;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.2, $p160);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 176)), $mul.ref(144, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p162, $p3);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.2, $p163);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p164, $mul.ref(0, 176)), $mul.ref(152, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p165, snd_rawmidi_dev_seq_free);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.2, $p166);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 176)), $mul.ref(44, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.2, $p170);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.2, $p172);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.2, $p174);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_34 := sprintf.ref.ref.i32.i32($p169, .str.28, $i173, $i175);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.2, $p177);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.2, $p179);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p180);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_35 := snd_device_register($p178, $p181);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb39;

  $bb32:
    assume $i131 == 1;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p129, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p133, $p3);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p129, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p136, snd_rawmidi_proc_info_read);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i137 := snd_info_register($p129);
    call {:si_unique_call 505} {:cexpr "tmp___2"} boogie_si_record_i32($i137);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i137, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $p139 := $p129;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p140 := $p139;
    goto $bb37;

  $bb34:
    assume $i138 == 1;
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} snd_info_free_entry($p129);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p139 := $0.ref;
    goto $bb36;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i103 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.2, $p104);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p4);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i108 := snd_register_oss_device(3, $p105, 1, snd_rawmidi_f_ops, $p106, $p107);
    call {:si_unique_call 499} {:cexpr "tmp___1"} boogie_si_record_i32($i108);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i108, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i109 == 1);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(176, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.2, $p114);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 1);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(176, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p117, $i116);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i109 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.2, $p110);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.2, $p112);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1638, .str.25, $i113, 1);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.2, $p73);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p4);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p1);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i77 := snd_register_oss_device(3, $p74, 0, snd_rawmidi_f_ops, $p75, $p76);
    call {:si_unique_call 495} {:cexpr "tmp___0"} boogie_si_record_i32($i77);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i78 == 1);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(176, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.2, $p83);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(176, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p86, $i85);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.2, $p87);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.2, $p89);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(96, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_32 := snd_oss_info_register(2, $i90, $p92);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i78 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.2, $p79);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.2, $p81);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1626, .str.25, $i82, 0);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(184, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.2, $p44);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.2, $p46);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb13;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(184, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.2, $p50);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.2, $p52);
    call {:si_unique_call 489} $i54 := devirtbounce.10($p53, $p4);
    call {:si_unique_call 490} {:cexpr "err"} boogie_si_record_i32($i54);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.2, $p56);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.2, $p58);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_31 := snd_unregister_device(4, $p57, $i59);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(8, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} list_del($p61);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} ldv_mutex_unlock_31(register_mutex);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i8 := $i54;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.2, $p33);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p37);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1608, .str.24, $i36, $i38);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(8, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} list_del($p39);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} ldv_mutex_unlock_30(register_mutex);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} ldv_mutex_unlock_29(register_mutex);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const snd_rawmidi_dev_disconnect: ref;

axiom snd_rawmidi_dev_disconnect == $sub.ref(0, 189590);

procedure snd_rawmidi_dev_disconnect($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.40, $M.26, assertsPassed;



implementation snd_rawmidi_dev_disconnect($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p20: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p75: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.45, $p1);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} ldv_mutex_lock_33(register_mutex);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} ldv_mutex_lock_34($p4);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(424, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __wake_up($p5, 3, 1, $0.ref);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(8, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} list_del_init($p6);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i14, $i18);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.2, $p79);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref(1, 24)), $mul.ref(8, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i83, $i87);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(176, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p35);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.2, $p70);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.2, $p72);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_39 := snd_unregister_device(4, $p71, $i73);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} ldv_mutex_unlock_35($p75);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} ldv_mutex_unlock_36(register_mutex);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i37 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.2, $p38);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref($i44, 4));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.43, $p45);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i39, $i46);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.2, $p56);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.2, $p58);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.2, $p60);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref($i62, 4));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.44, $p63);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i57, $i64);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(176, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p69, 0);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i65 == 1;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.2, $p66);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} vslice_dummy_var_38 := snd_unregister_oss_device(3, $p67, 1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.2, $p48);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} vslice_dummy_var_36 := snd_unregister_oss_device(3, $p49, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.2, $p51);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1184)), $mul.ref(0, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.2, $p53);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_37 := snd_oss_info_register(2, $i54, $0.ref);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb25:
    assume $i88 == 1;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p89 := $p80;
    goto $bb28;

  $bb28:
    call $p89, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p98, $p99, $p100, $p101, $i102, $i103 := snd_rawmidi_dev_disconnect_loop_$bb28($i87, $p89, $p90, $p91, $i92, $i93, $p94, $p95, $p96, $p98, $p99, $p100, $p101, $i102, $i103);
    goto $bb28_last;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.2, $p90);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p89, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.2, $p98);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, $i87);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i103 == 1);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb33:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $p89 := $p99;
    goto $bb33_dummy;

  $bb30:
    assume $i93 == 1;
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p89, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.2, $p94);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} __wake_up($p96, 3, 1, $0.ref);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    goto $bb6;

  $bb6:
    call $p21, $p22, $i23, $i24, $p25, $p26, $p27, $p29, $p30, $p31, $p32, $i33, $i34, $p20 := snd_rawmidi_dev_disconnect_loop_$bb6($i18, $p21, $p22, $i23, $i24, $p25, $p26, $p27, $p29, $p30, $p31, $p32, $i33, $i34, $p20);
    goto $bb6_last;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i18);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p20 := $p30;
    goto $bb11_dummy;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} __wake_up($p27, 3, 1, $0.ref);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb33_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  $bb11_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2790;
}



const snd_rawmidi_free: ref;

axiom snd_rawmidi_free == $sub.ref(0, 190622);

procedure snd_rawmidi_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.40, assertsPassed;



implementation snd_rawmidi_free($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(520, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} snd_info_free_entry($p4);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(520, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, $0.ref);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} ldv_mutex_lock_26(register_mutex);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(184, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} ldv_mutex_unlock_27(register_mutex);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(192, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(1, 24));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} snd_rawmidi_free_substreams($p23);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(192, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} snd_rawmidi_free_substreams($p25);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} kfree($p32);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(248, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.2, $p30);
    call {:si_unique_call 529} devirtbounce.11($p31, $p0);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(184, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 536)), $mul.ref(184, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    call {:si_unique_call 525} vslice_dummy_var_40 := devirtbounce.10($p19, $p0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_info_free_entry: ref;

axiom snd_info_free_entry == $sub.ref(0, 191654);

procedure snd_info_free_entry($p0: ref);
  free requires assertsPassed;



implementation snd_info_free_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 192686);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_mutex_lock_register_mutex($p0);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} mutex_lock($p0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 193718);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} mutex_unlock($p0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const snd_rawmidi_free_substreams: ref;

axiom snd_rawmidi_free_substreams == $sub.ref(0, 194750);

procedure snd_rawmidi_free_substreams($p0: ref);
  free requires assertsPassed;



implementation snd_rawmidi_free_substreams($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i2 := list_empty($p1);
    call {:si_unique_call 536} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p5, $p6, $p7, $p8, $p9, $i10, $i11 := snd_rawmidi_free_substreams_loop_$bb4($p0, $p1, $p5, $p6, $p7, $p8, $p9, $i10, $i11);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} list_del($p8);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p7);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} kfree($p9);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i10 := list_empty($p1);
    call {:si_unique_call 540} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 195782);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 196814);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 197846);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} __list_add($p0, $p3, $p1);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 198878);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_33: ref;

axiom ldv_mutex_lock_33 == $sub.ref(0, 199910);

procedure ldv_mutex_lock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_lock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} ldv_mutex_lock_register_mutex($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} mutex_lock($p0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_34: ref;

axiom ldv_mutex_lock_34 == $sub.ref(0, 200942);

procedure ldv_mutex_lock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ldv_mutex_lock_open_mutex($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} mutex_lock($p0);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 201974);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} __list_del_entry($p0);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} INIT_LIST_HEAD($p0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    return;
}



const snd_unregister_oss_device: ref;

axiom snd_unregister_oss_device == $sub.ref(0, 203006);

procedure snd_unregister_oss_device($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_unregister_oss_device($i0: i32, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 548} {:cexpr "snd_unregister_oss_device:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 549} {:cexpr "snd_unregister_oss_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 1} true;
    call {:si_unique_call 550} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 551} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_oss_info_register: ref;

axiom snd_oss_info_register == $sub.ref(0, 204038);

procedure snd_oss_info_register($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_oss_info_register($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 552} {:cexpr "snd_oss_info_register:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 553} {:cexpr "snd_oss_info_register:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 554} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 555} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_unregister_device: ref;

axiom snd_unregister_device == $sub.ref(0, 205070);

procedure snd_unregister_device($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_unregister_device($i0: i32, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 556} {:cexpr "snd_unregister_device:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 557} {:cexpr "snd_unregister_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 558} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 559} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 206102);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} ldv_mutex_unlock_open_mutex($p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} mutex_unlock($p0);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_36: ref;

axiom ldv_mutex_unlock_36 == $sub.ref(0, 207134);

procedure ldv_mutex_unlock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_unlock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} mutex_unlock($p0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 208166);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_28: ref;

axiom ldv_mutex_lock_28 == $sub.ref(0, 209198);

procedure ldv_mutex_lock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_lock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} ldv_mutex_lock_register_mutex($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} mutex_lock($p0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 210230);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} mutex_unlock($p0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 211262);

procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const snd_register_device: ref;

axiom snd_register_device == $sub.ref(0, 212294);

procedure snd_register_device($i0: i32, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_register_device($i0: i32, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "snd_register_device:arg:type"} boogie_si_record_i32($i0);
    call {:si_unique_call 569} {:cexpr "snd_register_device:arg:dev"} boogie_si_record_i32($i2);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p6 := snd_card_get_device_link($p1);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i7 := snd_register_device_for_dev($i0, $p1, $i2, $p3, $p4, $p5, $p6);
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_mutex_unlock_30: ref;

axiom ldv_mutex_unlock_30 == $sub.ref(0, 213326);

procedure ldv_mutex_unlock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_unlock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} mutex_unlock($p0);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_31: ref;

axiom ldv_mutex_unlock_31 == $sub.ref(0, 214358);

procedure ldv_mutex_unlock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_unlock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} mutex_unlock($p0);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const snd_register_oss_device: ref;

axiom snd_register_oss_device == $sub.ref(0, 215390);

procedure snd_register_oss_device($i0: i32, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_register_oss_device($i0: i32, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 577} {:cexpr "snd_register_oss_device:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 578} {:cexpr "snd_register_oss_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mutex_unlock_32: ref;

axiom ldv_mutex_unlock_32 == $sub.ref(0, 216422);

procedure ldv_mutex_unlock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_mutex_unlock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} ldv_mutex_unlock_register_mutex($p0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} mutex_unlock($p0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const snd_info_create_card_entry: ref;

axiom snd_info_create_card_entry == $sub.ref(0, 217454);

procedure snd_info_create_card_entry($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation snd_info_create_card_entry($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p3 := external_alloc();
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const snd_rawmidi_proc_info_read: ref;

axiom snd_rawmidi_proc_info_read == $sub.ref(0, 218486);

procedure snd_rawmidi_proc_info_read($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation snd_rawmidi_proc_info_read($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p26: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p78: ref;
  var $p109: ref;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(96, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} vslice_dummy_var_41 := snd_iprintf.ref.ref.ref($p1, .str.29, $p6);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} ldv_mutex_lock_24($p8);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(28, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.2, $p9);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(28, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.2, $p61);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 2);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} ldv_mutex_unlock_25($p109);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i64 == 1;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref(1, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.2, $p68);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref(1, 24)), $mul.ref(8, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i72, $i76);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i77 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p78 := $p69;
    goto $bb20;

  $bb20:
    call $p79, $i80, $p81, $i82, $p84, $p85, $i86, $i87, $i88, $p89, $p90, $i91, $p93, $p94, $p95, $i96, $p97, $i98, $p99, $i100, $p103, $p104, $p105, $p106, $i107, $i108, $p78, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47 := snd_rawmidi_proc_info_read_loop_$bb20($p1, $i76, $p79, $i80, $p81, $i82, $p84, $p85, $i86, $i87, $i88, $p89, $p90, $i91, $p93, $p94, $p95, $i96, $p97, $i98, $p99, $i100, $p103, $p104, $p105, $p106, $i107, $i108, $p78, vslice_dummy_var_45, vslice_dummy_var_46, vslice_dummy_var_47);
    goto $bb20_last;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.2, $p79);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p78, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.2, $p81);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_45 := snd_iprintf.ref.ref.i32.i64($p1, .str.35, $i80, $i82);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p78);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(24, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.2, $p85);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p78, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.2, $p103);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, $i76);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i108 == 1);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb25:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $p78 := $p104;
    goto $bb25_dummy;

  $bb22:
    assume $i88 == 1;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p78, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.2, $p89);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i91 := pid_vnr($p90);
    call {:si_unique_call 593} {:cexpr "tmp___0"} boogie_si_record_i32($i91);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_46 := snd_iprintf.ref.ref.i32($p1, .str.31, $i91);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p78, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.2, $p93);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.2, $p95);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p94, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i98 := $load.i64($M.2, $p97);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p94, $mul.ref(0, 336)), $mul.ref(64, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.2, $p99);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} vslice_dummy_var_47 := snd_iprintf.ref.ref.i64.i64.i64($p1, .str.36, $i96, $i98, $i100);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 536)), $mul.ref(192, 1)), $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i20, $i24);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p26 := $p17;
    goto $bb6;

  $bb6:
    call $p27, $i28, $p29, $i30, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $p51, $i52, $p55, $p56, $p57, $p58, $i59, $i60, $p26, vslice_dummy_var_42, vslice_dummy_var_43, vslice_dummy_var_44 := snd_rawmidi_proc_info_read_loop_$bb6($p1, $i24, $p27, $i28, $p29, $i30, $p32, $p33, $i34, $i35, $i36, $p37, $p38, $i39, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $p51, $i52, $p55, $p56, $p57, $p58, $i59, $i60, $p26, vslice_dummy_var_42, vslice_dummy_var_43, vslice_dummy_var_44);
    goto $bb6_last;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.2, $p27);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.2, $p29);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_42 := snd_iprintf.ref.ref.i32.i64($p1, .str.30, $i28, $i30);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p26);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(24, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.2, $p33);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.2, $p55);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, $i24);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $p26 := $p56;
    goto $bb11_dummy;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p26, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i39 := pid_vnr($p38);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_43 := snd_iprintf.ref.ref.i32($p1, .str.31, $i39);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p26, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.2, $p41);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(8, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.2, $p44);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p48 := (if $i47 == 1 then .str.33 else .str.34);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p42, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.2, $p49);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p42, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.2, $p51);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_44 := snd_iprintf.ref.ref.ref.i64.i64($p1, .str.32, $p48, $i50, $i52);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb25_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3142;

  $bb11_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3084;
}



const snd_info_register: ref;

axiom snd_info_register == $sub.ref(0, 219518);

procedure snd_info_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_info_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 597} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 598} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_seq_device_new: ref;

axiom snd_seq_device_new == $sub.ref(0, 220550);

procedure snd_seq_device_new($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_seq_device_new($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 599} {:cexpr "snd_seq_device_new:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 600} {:cexpr "snd_seq_device_new:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 601} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 602} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const snd_rawmidi_dev_seq_free: ref;

axiom snd_rawmidi_dev_seq_free == $sub.ref(0, 221582);

procedure snd_rawmidi_dev_seq_free($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation snd_rawmidi_dev_seq_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(144, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 536)), $mul.ref(528, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, $0.ref);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    return;
}



const snd_device_register: ref;

axiom snd_device_register == $sub.ref(0, 222614);

procedure snd_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 603} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 604} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_iprintf: ref;

axiom snd_iprintf == $sub.ref(0, 223646);

procedure snd_iprintf.ref.ref.i64.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation snd_iprintf.ref.ref.i64.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64, p.4: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 606} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure snd_iprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_iprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 608} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure snd_iprintf.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation snd_iprintf.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 609} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 610} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure snd_iprintf.ref.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation snd_iprintf.ref.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 1} true;
    call {:si_unique_call 611} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 612} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure snd_iprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_iprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 613} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 614} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_24: ref;

axiom ldv_mutex_lock_24 == $sub.ref(0, 224678);

procedure ldv_mutex_lock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} ldv_mutex_lock_open_mutex($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} mutex_lock($p0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const pid_vnr: ref;

axiom pid_vnr == $sub.ref(0, 225710);

procedure pid_vnr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pid_vnr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_25: ref;

axiom ldv_mutex_unlock_25 == $sub.ref(0, 226742);

procedure ldv_mutex_unlock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} ldv_mutex_unlock_open_mutex($p0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} mutex_unlock($p0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const snd_card_get_device_link: ref;

axiom snd_card_get_device_link == $sub.ref(0, 227774);

procedure snd_card_get_device_link($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation snd_card_get_device_link($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1184)), $mul.ref(896, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p5 := $p4;
    goto $bb3;
}



const snd_register_device_for_dev: ref;

axiom snd_register_device_for_dev == $sub.ref(0, 228806);

procedure snd_register_device_for_dev($i0: i32, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_register_device_for_dev($i0: i32, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} {:cexpr "snd_register_device_for_dev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 622} {:cexpr "snd_register_device_for_dev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 623} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 624} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 229838);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.24, $M.25, $M.5, $M.12, $M.16, $M.44, $M.43, $M.40, $M.49, $M.26, $M.48, $M.47, $M.78, $M.79, $M.80, $CurrAddr, $M.27, $M.28, $M.29, $M.30, $M.31, $M.34, $M.35, $M.36, $M.37, assertsPassed, $M.38;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i20: i1;
  var $i21: i64;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i19: i32;
  var $i2: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i64;
  var vslice_dummy_var_53: i32;

  $bb0:
    call {:si_unique_call 625} $initialize();
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} ldv_initialize();
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} ldv_handler_precall();
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i0 := alsa_rawmidi_init();
    call {:si_unique_call 631} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb5;

  $bb5:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i19, $i2, $i40, $i41, $i42, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53 := main_loop_$bb5($i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i19, $i2, $i40, $i41, $i42, vslice_dummy_var_48, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53);
    goto $bb5_last;

  corral_source_split_3251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 633} $i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 634} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i40);
    call {:si_unique_call 635} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i41 == 1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i2, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} ldv_handler_precall();
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} alsa_rawmidi_exit();
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} ldv_check_final_state();
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 637} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 638} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i2 := $i19;
    goto corral_source_split_3302_dummy;

  $bb16:
    assume $i8 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} ldv_handler_precall();
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_50 := snd_rawmidi_dev_disconnect($u7);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb36;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i7 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} ldv_handler_precall();
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} vslice_dummy_var_49 := snd_rawmidi_dev_register($u7);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb36;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} ldv_handler_precall();
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_48 := snd_rawmidi_dev_free($u7);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb36;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} ldv_handler_precall();
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_52 := snd_rawmidi_ioctl($u1, $u6, $u3);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb36;

  $bb19:
    assume $i9 == 1;
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} ldv_handler_precall();
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_51 := snd_rawmidi_poll($u1, $u5);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb36;

  $bb8:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i11 == 1);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i2, 3);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i2;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i19 := $i34;
    goto $bb36;

  $bb49:
    assume $i32 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} ldv_handler_precall();
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} vslice_dummy_var_53 := snd_rawmidi_release($u0, $u1);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb51;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i11 == 1;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i2, 2);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i2;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i19 := $i31;
    goto $bb36;

  $bb43:
    assume $i26 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ldv_handler_precall();
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i27 := snd_rawmidi_write($u1, $u2, $u3, $u4);
    call {:si_unique_call 663} {:cexpr "res_snd_rawmidi_write_41"} boogie_si_record_i64($i27);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} ldv_check_return_value($i28);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i29 := $slt.i64($i27, 0);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i2, 1);
    call {:si_unique_call 665} {:cexpr "ldv_s_snd_rawmidi_f_ops_file_operations"} boogie_si_record_i32($i30);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb48;

  $bb45:
    assume $i29 == 1;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb21:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i2, 1);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i25 := $i2;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i19 := $i25;
    goto $bb36;

  $bb37:
    assume $i20 == 1;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} ldv_handler_precall();
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i21 := snd_rawmidi_read($u1, $u2, $u3, $u4);
    call {:si_unique_call 658} {:cexpr "res_snd_rawmidi_read_34"} boogie_si_record_i64($i21);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} ldv_check_return_value($i22);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i23 := $slt.i64($i21, 0);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i2, 1);
    call {:si_unique_call 660} {:cexpr "ldv_s_snd_rawmidi_f_ops_file_operations"} boogie_si_record_i32($i24);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb42;

  $bb39:
    assume $i23 == 1;
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb18;

  $bb27:
    assume $i13 == 1;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i2, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb36;

  $bb29:
    assume $i14 == 1;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} ldv_handler_precall();
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i15 := snd_rawmidi_open($u0, $u1);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 651} {:cexpr "res_snd_rawmidi_open_16"} boogie_si_record_i32($i15);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} ldv_check_return_value($i15);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i2, 1);
    call {:si_unique_call 655} {:cexpr "ldv_s_snd_rawmidi_f_ops_file_operations"} boogie_si_record_i32($i17);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb35;

  $bb31:
    assume $i16 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb54;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_3302_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3251;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 230870);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.47, $M.48, $M.26, $M.49, $M.40;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 668} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 669} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 670} {:cexpr "ldv_mutex_open_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 671} {:cexpr "ldv_mutex_power_lock"} boogie_si_record_i32(1);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 672} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 231902);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    return;
}



const alsa_rawmidi_init: ref;

axiom alsa_rawmidi_init == $sub.ref(0, 232934);

procedure alsa_rawmidi_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43, $M.44;



implementation alsa_rawmidi_init() returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i32;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i32;
  var $i233: i1;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i1;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i32;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $i281: i32;
  var $i282: i32;
  var $i283: i1;
  var $i284: i32;
  var $i285: i1;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i32;
  var $i293: i1;
  var $i294: i32;
  var $i295: i1;
  var $i296: i32;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i1;
  var $i306: i32;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i32;
  var $i313: i1;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_54 := snd_ctl_register_ioctl(snd_rawmidi_control_ioctl);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_55 := snd_ctl_register_ioctl_compat(snd_rawmidi_control_ioctl);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.43, midi_map);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.43, midi_map);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 7);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.44, amidi_map);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i8 == 1);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.44, amidi_map);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 7);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(1, 4)));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i13 == 1);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(1, 4)));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 7);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(1, 4)));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i18 == 1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(1, 4)));
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, 7);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(2, 4)));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i23 == 1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(2, 4)));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 7);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(2, 4)));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i28 == 1);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(2, 4)));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i30 := $sgt.i32($i29, 7);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(3, 4)));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i33 == 1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(3, 4)));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, 7);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(3, 4)));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i38 == 1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(3, 4)));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i40 := $sgt.i32($i39, 7);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(4, 4)));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb56, $bb58;

  $bb58:
    assume !($i43 == 1);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(4, 4)));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i45 := $sgt.i32($i44, 7);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(4, 4)));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb64;

  $bb64:
    assume !($i48 == 1);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(4, 4)));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 7);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(5, 4)));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb69, $bb71;

  $bb71:
    assume !($i53 == 1);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(5, 4)));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i54, 7);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(5, 4)));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb75, $bb77;

  $bb77:
    assume !($i58 == 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(5, 4)));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, 7);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(6, 4)));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb84;

  $bb84:
    assume !($i63 == 1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(6, 4)));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, 7);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(6, 4)));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb88, $bb90;

  $bb90:
    assume !($i68 == 1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(6, 4)));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i69, 7);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(7, 4)));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb97;

  $bb97:
    assume !($i73 == 1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(7, 4)));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, 7);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(7, 4)));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb101, $bb103;

  $bb103:
    assume !($i78 == 1);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(7, 4)));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i80 := $sgt.i32($i79, 7);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(8, 4)));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 0);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb108, $bb110;

  $bb110:
    assume !($i83 == 1);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(8, 4)));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i85 := $sgt.i32($i84, 7);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(8, 4)));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i87, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb116;

  $bb116:
    assume !($i88 == 1);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(8, 4)));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i32($i89, 7);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(9, 4)));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, 0);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb123;

  $bb123:
    assume !($i93 == 1);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(9, 4)));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i95 := $sgt.i32($i94, 7);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(9, 4)));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb127, $bb129;

  $bb129:
    assume !($i98 == 1);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(9, 4)));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i100 := $sgt.i32($i99, 7);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(10, 4)));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i102, 0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb136;

  $bb136:
    assume !($i103 == 1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(10, 4)));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i105 := $sgt.i32($i104, 7);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(10, 4)));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i107, 0);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb142;

  $bb142:
    assume !($i108 == 1);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(10, 4)));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i110 := $sgt.i32($i109, 7);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(11, 4)));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i112, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb147, $bb149;

  $bb149:
    assume !($i113 == 1);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(11, 4)));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i115 := $sgt.i32($i114, 7);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(11, 4)));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i117, 0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb155;

  $bb155:
    assume !($i118 == 1);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(11, 4)));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i120 := $sgt.i32($i119, 7);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(12, 4)));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i122, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb160, $bb162;

  $bb162:
    assume !($i123 == 1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(12, 4)));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i125 := $sgt.i32($i124, 7);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(12, 4)));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i127, 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb168;

  $bb168:
    assume !($i128 == 1);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(12, 4)));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i130 := $sgt.i32($i129, 7);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(13, 4)));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i132, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb173, $bb175;

  $bb175:
    assume !($i133 == 1);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(13, 4)));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i135 := $sgt.i32($i134, 7);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(13, 4)));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i137, 0);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb179, $bb181;

  $bb181:
    assume !($i138 == 1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(13, 4)));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i140 := $sgt.i32($i139, 7);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(14, 4)));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i142, 0);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb186, $bb188;

  $bb188:
    assume !($i143 == 1);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(14, 4)));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i145 := $sgt.i32($i144, 7);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(14, 4)));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i147, 0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb192, $bb194;

  $bb194:
    assume !($i148 == 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(14, 4)));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i150 := $sgt.i32($i149, 7);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(15, 4)));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i152, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb199, $bb201;

  $bb201:
    assume !($i153 == 1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(15, 4)));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i155 := $sgt.i32($i154, 7);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(15, 4)));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i157, 0);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb205, $bb207;

  $bb207:
    assume !($i158 == 1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(15, 4)));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i160 := $sgt.i32($i159, 7);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(16, 4)));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i163 := $slt.i32($i162, 0);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb212, $bb214;

  $bb214:
    assume !($i163 == 1);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(16, 4)));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i165 := $sgt.i32($i164, 7);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(16, 4)));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i167, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb218, $bb220;

  $bb220:
    assume !($i168 == 1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(16, 4)));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i170 := $sgt.i32($i169, 7);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(17, 4)));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i173 := $slt.i32($i172, 0);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb225, $bb227;

  $bb227:
    assume !($i173 == 1);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(17, 4)));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i175 := $sgt.i32($i174, 7);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(17, 4)));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i178 := $slt.i32($i177, 0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb231, $bb233;

  $bb233:
    assume !($i178 == 1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(17, 4)));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i180 := $sgt.i32($i179, 7);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(18, 4)));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i182, 0);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb238, $bb240;

  $bb240:
    assume !($i183 == 1);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(18, 4)));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i185 := $sgt.i32($i184, 7);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(18, 4)));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i187, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb244, $bb246;

  $bb246:
    assume !($i188 == 1);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(18, 4)));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i190 := $sgt.i32($i189, 7);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(19, 4)));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i192, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb251, $bb253;

  $bb253:
    assume !($i193 == 1);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(19, 4)));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i195 := $sgt.i32($i194, 7);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(19, 4)));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i197, 0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb257, $bb259;

  $bb259:
    assume !($i198 == 1);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(19, 4)));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i200 := $sgt.i32($i199, 7);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i202 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(20, 4)));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i203 := $slt.i32($i202, 0);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb264, $bb266;

  $bb266:
    assume !($i203 == 1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(20, 4)));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i205 := $sgt.i32($i204, 7);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i207 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(20, 4)));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i207, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb270, $bb272;

  $bb272:
    assume !($i208 == 1);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(20, 4)));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i210 := $sgt.i32($i209, 7);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i210} true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(21, 4)));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i213 := $slt.i32($i212, 0);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb277, $bb279;

  $bb279:
    assume !($i213 == 1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(21, 4)));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i215 := $sgt.i32($i214, 7);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(21, 4)));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i218 := $slt.i32($i217, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb283, $bb285;

  $bb285:
    assume !($i218 == 1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(21, 4)));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i220 := $sgt.i32($i219, 7);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(22, 4)));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i223 := $slt.i32($i222, 0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb290, $bb292;

  $bb292:
    assume !($i223 == 1);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(22, 4)));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i225 := $sgt.i32($i224, 7);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(22, 4)));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i228 := $slt.i32($i227, 0);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb296, $bb298;

  $bb298:
    assume !($i228 == 1);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(22, 4)));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i230 := $sgt.i32($i229, 7);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(23, 4)));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i233 := $slt.i32($i232, 0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb303, $bb305;

  $bb305:
    assume !($i233 == 1);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(23, 4)));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i235 := $sgt.i32($i234, 7);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(23, 4)));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i238 := $slt.i32($i237, 0);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb309, $bb311;

  $bb311:
    assume !($i238 == 1);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i239 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(23, 4)));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i240 := $sgt.i32($i239, 7);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(24, 4)));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i243 := $slt.i32($i242, 0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb316, $bb318;

  $bb318:
    assume !($i243 == 1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(24, 4)));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i245 := $sgt.i32($i244, 7);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(24, 4)));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i247, 0);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb322, $bb324;

  $bb324:
    assume !($i248 == 1);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(24, 4)));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i250 := $sgt.i32($i249, 7);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(25, 4)));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i253 := $slt.i32($i252, 0);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb329, $bb331;

  $bb331:
    assume !($i253 == 1);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(25, 4)));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i255 := $sgt.i32($i254, 7);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(25, 4)));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i257, 0);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb335, $bb337;

  $bb337:
    assume !($i258 == 1);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(25, 4)));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i260 := $sgt.i32($i259, 7);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(26, 4)));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i263 := $slt.i32($i262, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb342, $bb344;

  $bb344:
    assume !($i263 == 1);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(26, 4)));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i265 := $sgt.i32($i264, 7);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(26, 4)));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i267, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb348, $bb350;

  $bb350:
    assume !($i268 == 1);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(26, 4)));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i270 := $sgt.i32($i269, 7);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(27, 4)));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i273 := $slt.i32($i272, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb355, $bb357;

  $bb357:
    assume !($i273 == 1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(27, 4)));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i275 := $sgt.i32($i274, 7);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(27, 4)));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i278 := $slt.i32($i277, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb361, $bb363;

  $bb363:
    assume !($i278 == 1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(27, 4)));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i280 := $sgt.i32($i279, 7);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(28, 4)));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i283 := $slt.i32($i282, 0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb368, $bb370;

  $bb370:
    assume !($i283 == 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(28, 4)));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i285 := $sgt.i32($i284, 7);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(28, 4)));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i287, 0);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb374, $bb376;

  $bb376:
    assume !($i288 == 1);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(28, 4)));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i290 := $sgt.i32($i289, 7);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(29, 4)));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i293 := $slt.i32($i292, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb381, $bb383;

  $bb383:
    assume !($i293 == 1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(29, 4)));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i295 := $sgt.i32($i294, 7);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(29, 4)));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i298 := $slt.i32($i297, 0);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb387, $bb389;

  $bb389:
    assume !($i298 == 1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i299 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(29, 4)));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i300 := $sgt.i32($i299, 7);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(30, 4)));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i303 := $slt.i32($i302, 0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb394, $bb396;

  $bb396:
    assume !($i303 == 1);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(30, 4)));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i305 := $sgt.i32($i304, 7);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(30, 4)));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i308 := $slt.i32($i307, 0);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb400, $bb402;

  $bb402:
    assume !($i308 == 1);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(30, 4)));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i310 := $sgt.i32($i309, 7);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(31, 4)));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i313 := $slt.i32($i312, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb407, $bb409;

  $bb409:
    assume !($i313 == 1);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(31, 4)));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i315 := $sgt.i32($i314, 7);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(31, 4)));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i318 := $slt.i32($i317, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb413, $bb415;

  $bb415:
    assume !($i318 == 1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(31, 4)));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i320 := $sgt.i32($i319, 7);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb416:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(31, 4)));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 31, $i321);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(31, 4)), 1);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb413:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb414;

  $bb410:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(31, 4)));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 31, $i316);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(31, 4)), 0);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb407:
    assume {:verifier.code 0} true;
    assume $i313 == 1;
    goto $bb408;

  $bb403:
    assume {:verifier.code 0} true;
    assume $i310 == 1;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(30, 4)));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 30, $i311);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(30, 4)), 1);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb400:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb401;

  $bb397:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $i306 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(30, 4)));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 30, $i306);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(30, 4)), 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb394:
    assume {:verifier.code 0} true;
    assume $i303 == 1;
    goto $bb395;

  $bb390:
    assume {:verifier.code 0} true;
    assume $i300 == 1;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(29, 4)));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 29, $i301);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(29, 4)), 1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb387:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb388;

  $bb384:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $i296 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(29, 4)));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 29, $i296);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(29, 4)), 0);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb381:
    assume {:verifier.code 0} true;
    assume $i293 == 1;
    goto $bb382;

  $bb377:
    assume {:verifier.code 0} true;
    assume $i290 == 1;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(28, 4)));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 28, $i291);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(28, 4)), 1);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb374:
    assume {:verifier.code 0} true;
    assume $i288 == 1;
    goto $bb375;

  $bb371:
    assume {:verifier.code 0} true;
    assume $i285 == 1;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(28, 4)));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 28, $i286);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(28, 4)), 0);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb368:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb369;

  $bb364:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(27, 4)));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 27, $i281);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(27, 4)), 1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb361:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb362;

  $bb358:
    assume {:verifier.code 0} true;
    assume $i275 == 1;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(27, 4)));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 27, $i276);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(27, 4)), 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb356;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(26, 4)));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 26, $i271);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(26, 4)), 1);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb348:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb349;

  $bb345:
    assume {:verifier.code 0} true;
    assume $i265 == 1;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(26, 4)));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 26, $i266);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(26, 4)), 0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb342:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb343;

  $bb338:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(25, 4)));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 25, $i261);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(25, 4)), 1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i258 == 1;
    goto $bb336;

  $bb332:
    assume {:verifier.code 0} true;
    assume $i255 == 1;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(25, 4)));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 25, $i256);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(25, 4)), 0);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb329:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb330;

  $bb325:
    assume {:verifier.code 0} true;
    assume $i250 == 1;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(24, 4)));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 24, $i251);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(24, 4)), 1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb322:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb323;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(24, 4)));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 24, $i246);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(24, 4)), 0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb316:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb317;

  $bb312:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(23, 4)));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 23, $i241);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(23, 4)), 1);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb310;

  $bb306:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(23, 4)));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 23, $i236);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(23, 4)), 0);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb304;

  $bb299:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(22, 4)));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 22, $i231);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(22, 4)), 1);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb296:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb297;

  $bb293:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(22, 4)));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 22, $i226);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(22, 4)), 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb290:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb291;

  $bb286:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(21, 4)));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 21, $i221);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(21, 4)), 1);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb284;

  $bb280:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(21, 4)));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 21, $i216);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(21, 4)), 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb278;

  $bb273:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(20, 4)));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 20, $i211);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(20, 4)), 1);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb270:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb271;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(20, 4)));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 20, $i206);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(20, 4)), 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb264:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb265;

  $bb260:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(19, 4)));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 19, $i201);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(19, 4)), 1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb258;

  $bb254:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(19, 4)));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 19, $i196);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(19, 4)), 0);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb251:
    assume {:verifier.code 0} true;
    assume $i193 == 1;
    goto $bb252;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(18, 4)));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 18, $i191);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(18, 4)), 1);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb245;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(18, 4)));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 18, $i186);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(18, 4)), 0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb238:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb239;

  $bb234:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(17, 4)));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 17, $i181);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(17, 4)), 1);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb232;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(17, 4)));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 17, $i176);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(17, 4)), 0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb225:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb226;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(16, 4)));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 16, $i171);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(16, 4)), 1);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb218:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb219;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(16, 4)));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 16, $i166);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(16, 4)), 0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb213;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(15, 4)));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 15, $i161);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(15, 4)), 1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb206;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(15, 4)));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 15, $i156);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(15, 4)), 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb200;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(14, 4)));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 14, $i151);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(14, 4)), 1);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb193;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(14, 4)));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 14, $i146);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(14, 4)), 0);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb186:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb187;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(13, 4)));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 13, $i141);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(13, 4)), 1);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb180;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(13, 4)));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 13, $i136);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(13, 4)), 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb174;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(12, 4)));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 12, $i131);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(12, 4)), 1);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb166:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb167;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(12, 4)));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 12, $i126);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(12, 4)), 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb161;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(11, 4)));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 11, $i121);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(11, 4)), 1);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb153:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb154;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(11, 4)));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 11, $i116);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(11, 4)), 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb148;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(10, 4)));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 10, $i111);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(10, 4)), 1);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb141;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(10, 4)));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 10, $i106);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(10, 4)), 0);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb135;

  $bb130:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(9, 4)));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 9, $i101);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(9, 4)), 1);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb128;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(9, 4)));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 9, $i96);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(9, 4)), 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb122;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(8, 4)));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 8, $i91);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(8, 4)), 1);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb115;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(8, 4)));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 8, $i86);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(8, 4)), 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb109;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(7, 4)));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 7, $i81);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(7, 4)), 1);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb102;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(7, 4)));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 7, $i76);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(7, 4)), 0);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb96;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(6, 4)));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 6, $i71);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(6, 4)), 1);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb89;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(6, 4)));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 6, $i66);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(6, 4)), 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb83;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(5, 4)));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 5, $i61);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(5, 4)), 1);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb76;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(5, 4)));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 5, $i56);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(5, 4)), 0);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb70;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(4, 4)));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 4, $i51);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(4, 4)), 1);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb63;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(4, 4)));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 4, $i46);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(4, 4)), 0);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb57;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(3, 4)));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 3, $i41);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(3, 4)), 1);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb50;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(3, 4)));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 3, $i36);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(3, 4)), 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb44;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(2, 4)));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 2, $i31);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(2, 4)), 1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb37;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(2, 4)));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 2, $i26);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(2, 4)), 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(1, 4)));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 1, $i21);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(1, 4)), 1);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(1, 4)));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 1, $i16);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(1, 4)), 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb18;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.44, amidi_map);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1740, .str.38, 0, $i11);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.44 := $store.i32($M.44, amidi_map, 1);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.43, midi_map);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str, 1736, .str.37, 0, $i6);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.43 := $store.i32($M.43, midi_map, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 233966);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    return;
}



const alsa_rawmidi_exit: ref;

axiom alsa_rawmidi_exit == $sub.ref(0, 234998);

procedure alsa_rawmidi_exit();
  free requires assertsPassed;



implementation alsa_rawmidi_exit()
{
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} vslice_dummy_var_56 := snd_ctl_unregister_ioctl(snd_rawmidi_control_ioctl);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_57 := snd_ctl_unregister_ioctl_compat(snd_rawmidi_control_ioctl);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 236030);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i0 := $M.47;
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_error();
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.48;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ldv_error();
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.26;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_error();
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.49;
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} ldv_error();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.40;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} ldv_error();
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_rawmidi_control_ioctl: ref;

axiom snd_rawmidi_control_ioctl == $sub.ref(0, 237062);

procedure snd_rawmidi_control_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);



const snd_ctl_unregister_ioctl: ref;

axiom snd_ctl_unregister_ioctl == $sub.ref(0, 238094);

procedure snd_ctl_unregister_ioctl($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_ctl_unregister_ioctl($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 1} true;
    call {:si_unique_call 747} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 748} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_ctl_unregister_ioctl_compat: ref;

axiom snd_ctl_unregister_ioctl_compat == $sub.ref(0, 239126);

procedure snd_ctl_unregister_ioctl_compat($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_ctl_unregister_ioctl_compat($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 750} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 240158);

procedure ldv_mutex_lock_22($p0: ref);



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 241190);

procedure ldv_mutex_unlock_23($p0: ref);



const snd_rawmidi_info_select_user: ref;

axiom snd_rawmidi_info_select_user == $sub.ref(0, 242222);

procedure snd_rawmidi_info_select_user($p0: ref, $p1: ref) returns ($r: i32);



const snd_ctl_register_ioctl: ref;

axiom snd_ctl_register_ioctl == $sub.ref(0, 243254);

procedure snd_ctl_register_ioctl($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_ctl_register_ioctl($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 751} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_ctl_register_ioctl_compat: ref;

axiom snd_ctl_register_ioctl_compat == $sub.ref(0, 244286);

procedure snd_ctl_register_ioctl_compat($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_ctl_register_ioctl_compat($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 753} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 754} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 245318);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 755} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 1} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 246350);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 247382);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 248414);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 249446);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 250478);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 251510);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 252542);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 253574);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 254606);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 255638);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 256670);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 257702);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 258734);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 1} true;
    call {:si_unique_call 756} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 757} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 758} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 759} __VERIFIER_assume($i4);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 259766);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 260798);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 261830);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 262862);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 263894);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 760} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 761} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 762} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 763} __VERIFIER_assume($i4);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 264926);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 265958);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 266990);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 268022);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 269054);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 765} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 766} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 767} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 768} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 769} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 770} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 771} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 772} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 1} true;
    call {:si_unique_call 773} __VERIFIER_assume($i7);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 774} __VERIFIER_assume($i11);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 270086);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 271118);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 272150);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 273182);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 274214);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 275246);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 276278);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 277310);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 278342);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 777} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 778} __VERIFIER_assume($i10);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 279374);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 1} true;
    call {:si_unique_call 779} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 780} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 781} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 280406);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 782} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 783} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 281438);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 282470);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 784} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 785} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 283502);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 284534);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 285566);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 286598);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.44, $M.43, $M.2, $M.40, $M.49, $M.26, $M.48, $M.47, $M.78, $M.79, $M.80;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 786} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.44 := $store.i32($M.44, amidi_map, 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(1, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(2, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(3, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(4, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(5, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(6, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(7, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(8, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(9, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(10, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(11, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(12, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(13, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(14, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(15, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(16, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(17, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(18, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(19, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(20, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(21, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(22, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(23, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(24, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(25, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(26, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(27, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(28, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(29, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(30, 4)), 1);
    $M.44 := $store.i32($M.44, $add.ref($add.ref(amidi_map, $mul.ref(0, 128)), $mul.ref(31, 4)), 1);
    $M.43 := $store.i32($M.43, midi_map, 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(1, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(2, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(3, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(4, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(5, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(6, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(7, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(8, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(9, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(10, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(11, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(12, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(13, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(14, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(15, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(16, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(17, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(18, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(19, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(20, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(21, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(22, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(23, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(24, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(25, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(26, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(27, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(28, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(29, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(30, 4)), 0);
    $M.43 := $store.i32($M.43, $add.ref($add.ref(midi_map, $mul.ref(0, 128)), $mul.ref(31, 4)), 0);
    $M.2 := $store.ref($M.2, snd_rawmidi_devices, snd_rawmidi_devices);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(snd_rawmidi_devices, $mul.ref(0, 16)), $mul.ref(8, 1)), snd_rawmidi_devices);
    $M.2 := $store.i32($M.2, register_mutex, 1);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.13);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(register_mutex, $mul.ref(80, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(register_mutex, $mul.ref(80, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), register_mutex);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.14);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(register_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.40 := 0;
    call {:si_unique_call 787} {:cexpr "ldv_mutex_register_mutex"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 788} {:cexpr "ldv_mutex_power_lock"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 789} {:cexpr "ldv_mutex_open_mutex"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 790} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 791} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.2 := $store.i8($M.2, .str.13, 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(1, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(2, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(3, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(4, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(7, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(9, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(10, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(13, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(14, 1)), 46);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(15, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(16, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(17, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(18, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.13, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.2 := $store.i8($M.2, .str.14, 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(2, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(3, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(4, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(6, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(7, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(9, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(11, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(13, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.14, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.78 := $store.i8($M.78, .str.23, 109);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(1, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(2, 1)), 100);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(3, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(4, 1)), 67);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(5, 1)), 37);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(6, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(7, 1)), 68);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(8, 1)), 37);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(9, 1)), 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.23, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.79 := $store.i8($M.79, .str.26, 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(1, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(2, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(3, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.26, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.80 := $store.i8($M.80, .str.28, 77);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(1, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(2, 1)), 68);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(3, 1)), 73);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(4, 1)), 32);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(5, 1)), 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(6, 1)), 100);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(7, 1)), 45);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(8, 1)), 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(9, 1)), 100);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.28, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    call {:si_unique_call 792} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 287630);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 288662);

procedure devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 793} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 289694);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 290726);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 794} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 291758);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(snd_rawmidi_dev_seq_free, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(snd_rawmidi_input_event_work, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 795} snd_rawmidi_input_event_work($p1);
    return;

  $bb3:
    assume $i4 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 796} snd_rawmidi_dev_seq_free($p2);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 292790);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 293822);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 294854);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 797} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 295886);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(snd_rawmidi_proc_info_read, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 798} snd_rawmidi_proc_info_read($p1, $p2);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 296918);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 297950);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 799} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 298982);

procedure devirtbounce.11(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation devirtbounce.11(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(snd_rawmidi_dev_seq_free, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(snd_rawmidi_input_event_work, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 800} snd_rawmidi_input_event_work($p1);
    return;

  $bb3:
    assume $i4 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 801} snd_rawmidi_dev_seq_free($p2);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: ref;

const $u2: ref;

const $u3: i64;

const $u4: ref;

const $u5: ref;

const $u6: i32;

const $u7: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.44, $M.43, $M.2, $M.40, $M.49, $M.26, $M.48, $M.47, $M.78, $M.79, $M.80, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 802} __SMACK_static_init();
    call {:si_unique_call 803} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.2, $M.24, $M.25, $M.5, $M.12, $M.16, $M.44, $M.43, $M.40, $M.49, $M.26, $M.48, $M.47, $M.78, $M.79, $M.80, $CurrAddr, $M.27, $M.28, $M.29, $M.30, $M.31, $M.34, $M.35, $M.36, $M.37, $M.38;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation snd_rawmidi_read_loop_$bb13(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p10: ref, in_$p15: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i29: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i64, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i18: i64) returns (out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i29: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i64, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1)
{

  entry:
    out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i29, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63 := in_$p25, in_$i26, in_$i27, in_$i28, in_$i30, in_$i29, in_$p34, in_$p35, in_$p36, in_$i37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$p55, in_$i56, in_$i57, in_$i58, in_$p61, in_$i62, in_$i63;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i63 == 1;
    goto $bb40_dummy;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 0);
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_$i62 := snd_rawmidi_ready(in_$p10);
    call {:si_unique_call 21} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} spin_lock_irq(out_$p61);
    goto corral_source_split_107;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_106;

  $bb35:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$i58 := in_$i18;
    assume true;
    goto $bb35;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i64(out_$i56, 0);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.2, out_$p55);
    goto corral_source_split_94;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_93;

  $bb29:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$i52 := in_$i18;
    assume true;
    goto $bb29;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} out_$i50 := signal_pending(out_$p49);
    call {:si_unique_call 18} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_81;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_$p49 := get_current();
    goto corral_source_split_80;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.8, out_$p46);
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 1184)), $mul.ref(784, 1));
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.7, out_$p44);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.6, out_$p42);
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} remove_wait_queue(out_$p41, in_$p4);
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} schedule();
    goto corral_source_split_67;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} spin_unlock_irq(out_$p40);
    goto corral_source_split_66;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_65;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.5 := $store.i64($M.5, in_$p5, out_$i39);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p36, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 12} out_$i39 := devirtbounce(0, out_$p38, out_$i37, out_$p38);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.5, in_$p5);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} out_$p36 := get_current();
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.5 := $store.i64($M.5, in_$p5, 1);
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} add_wait_queue(out_$p35, in_$p4);
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} init_waitqueue_entry(in_$p4, out_$p34);
    goto corral_source_split_56;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} out_$p34 := get_current();
    goto corral_source_split_55;

  $bb19:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$i29 := in_$i18;
    assume true;
    goto $bb19;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i64(in_$i18, 0);
    goto corral_source_split_47;

  $bb17:
    assume !(out_$i28 == 1);
    goto corral_source_split_46;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$i29 := in_$i18;
    assume true;
    goto $bb17;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, 2048);
    goto corral_source_split_38;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.3, out_$p25);
    goto corral_source_split_37;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_36;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i29, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63 := snd_rawmidi_read_loop_$bb13(in_$p0, in_$p4, in_$p5, in_$p8, in_$p10, in_$p15, out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i29, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63, in_$i18);
    return;

  exit:
    return;
}



procedure snd_rawmidi_read_loop_$bb13(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p10: ref, in_$p15: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i29: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i64, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i18: i64) returns (out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i29: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i64, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1);
  modifies $M.5, $M.34, $M.35, $M.36;



implementation snd_rawmidi_read_loop_$bb8(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p10: ref, in_$p15: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i29: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i64, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i24: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i1, in_$i68: i64, in_$i69: i32, in_$i73: i64, in_$i74: i64, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$i80: i64) returns (out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i29: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i64, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i24: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i1, out_$i68: i64, out_$i69: i32, out_$i73: i64, out_$i74: i64, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$i80: i64)
{

  entry:
    out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i29, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63, out_$i24, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i18, out_$p19, out_$i20, out_$i80 := in_$p21, in_$i22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i30, in_$i29, in_$p34, in_$p35, in_$p36, in_$i37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$p55, in_$i56, in_$i57, in_$i58, in_$p61, in_$i62, in_$i63, in_$i24, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i18, in_$p19, in_$i20, in_$i80;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_27;

  $bb49:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$p19, out_$i20 := out_$i74, out_$p76, out_$i78;
    goto $bb49_dummy;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i74;
    assume true;
    goto $bb49;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_135;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    out_$i78 := $sub.i64(out_$i20, out_$i77);
    call {:si_unique_call 27} {:cexpr "count"} boogie_si_record_i64(out_$i78);
    goto corral_source_split_134;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i66);
    goto corral_source_split_133;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(out_$p19, $mul.ref(out_$i75, 1));
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i66);
    goto corral_source_split_131;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(out_$i73, out_$i24);
    call {:si_unique_call 26} {:cexpr "result"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_130;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i66);
    goto corral_source_split_129;

  $bb44:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    out_$i68, out_$i69 := out_$i24, out_$i66;
    assume true;
    goto $bb44;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i66, 0);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i64.i32(out_$i65);
    call {:si_unique_call 25} {:cexpr "count1"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} out_$i65 := snd_rawmidi_kernel_read1(in_$p10, out_$p19, $0.ref, out_$i20);
    call {:si_unique_call 24} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i65);
    goto corral_source_split_115;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} spin_unlock_irq(out_$p64);
    goto corral_source_split_114;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_113;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb12;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i18;
    goto $bb12;

  $bb41:
    assume !(out_$i63 == 1);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 0);
    goto corral_source_split_109;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} out_$i62 := snd_rawmidi_ready(in_$p10);
    call {:si_unique_call 21} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_108;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} spin_lock_irq(out_$p61);
    goto corral_source_split_107;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_106;

  $bb35:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i18;
    assume true;
    goto $bb35;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i64(out_$i56, 0);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.2, out_$p55);
    goto corral_source_split_94;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_93;

  $bb29:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i18;
    assume true;
    goto $bb29;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_82;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} out_$i50 := signal_pending(out_$p49);
    call {:si_unique_call 18} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_81;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_$p49 := get_current();
    goto corral_source_split_80;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.8, out_$p46);
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 1184)), $mul.ref(784, 1));
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.7, out_$p44);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.6, out_$p42);
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} remove_wait_queue(out_$p41, in_$p4);
    goto corral_source_split_69;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_68;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} schedule();
    goto corral_source_split_67;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} spin_unlock_irq(out_$p40);
    goto corral_source_split_66;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_65;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.5 := $store.i64($M.5, in_$p5, out_$i39);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p36, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 12} out_$i39 := devirtbounce(0, out_$p38, out_$i37, out_$p38);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.5, in_$p5);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} out_$p36 := get_current();
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.5 := $store.i64($M.5, in_$p5, 1);
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} add_wait_queue(out_$p35, in_$p4);
    goto corral_source_split_58;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_57;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} init_waitqueue_entry(in_$p4, out_$p34);
    goto corral_source_split_56;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} out_$p34 := get_current();
    goto corral_source_split_55;

  $bb19:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i18;
    assume true;
    goto $bb19;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i30 := $sgt.i64(out_$i18, 0);
    goto corral_source_split_47;

  $bb17:
    assume !(out_$i28 == 1);
    goto corral_source_split_46;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i18;
    assume true;
    goto $bb17;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, 2048);
    goto corral_source_split_38;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.3, out_$p25);
    goto corral_source_split_37;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_36;

  $bb13:
    call out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i29, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63 := snd_rawmidi_read_loop_$bb13(in_$p0, in_$p4, in_$p5, in_$p8, in_$p10, in_$p15, out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i29, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63, out_$i18);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i63 == 1;
    assume false;
    return;

  $bb10:
    assume out_$i23 == 1;
    goto corral_source_split_34;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i18;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 0);
    goto corral_source_split_32;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} out_$i22 := snd_rawmidi_ready(in_$p10);
    call {:si_unique_call 6} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_31;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} spin_lock_irq(out_$p21);
    goto corral_source_split_30;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p15, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_29;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i29, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63, out_$i24, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i18, out_$p19, out_$i20, out_$i80 := snd_rawmidi_read_loop_$bb8(in_$p0, in_$p4, in_$p5, in_$p8, in_$p10, in_$p15, out_$p21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i29, out_$p34, out_$p35, out_$p36, out_$i37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$p55, out_$i56, out_$i57, out_$i58, out_$p61, out_$i62, out_$i63, out_$i24, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i18, out_$p19, out_$i20, out_$i80);
    return;

  exit:
    return;
}



procedure snd_rawmidi_read_loop_$bb8(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p10: ref, in_$p15: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i29: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i64, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i58: i64, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i24: i64, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i1, in_$i68: i64, in_$i69: i32, in_$i73: i64, in_$i74: i64, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i18: i64, in_$p19: ref, in_$i20: i64, in_$i80: i64) returns (out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i29: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i64, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i58: i64, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i24: i64, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i1, out_$i68: i64, out_$i69: i32, out_$i73: i64, out_$i74: i64, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i18: i64, out_$p19: ref, out_$i20: i64, out_$i80: i64);
  modifies $M.2, $M.5, $M.34, $M.35, $M.36;



implementation snd_rawmidi_write_loop_$bb67(in_$p6: ref, in_$p7: ref, in_$p14: ref, in_$p103: ref, in_$p105: ref, in_$p108: ref, in_$i109: i64, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p125: ref, in_$i126: i64, in_$i127: i64, in_$i128: i1, in_$i129: i1, in_$p132: ref, in_$i133: i64, in_$i134: i64, in_$i135: i1) returns (out_$p108: ref, out_$i109: i64, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p125: ref, out_$i126: i64, out_$i127: i64, out_$i128: i1, out_$i129: i1, out_$p132: ref, out_$i133: i64, out_$i134: i64, out_$i135: i1)
{

  entry:
    out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$p115, out_$i116, out_$p117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p132, out_$i133, out_$i134, out_$i135 := in_$p108, in_$i109, in_$i110, in_$p111, in_$p112, in_$p113, in_$i114, in_$p115, in_$i116, in_$p117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p132, in_$i133, in_$i134, in_$i135;
    goto $bb67, exit;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb85:
    assume {:verifier.code 0} true;
    assume out_$i135 == 1;
    goto $bb85_dummy;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i64(out_$i133, out_$i134);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i64($M.2, in_$p105);
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i64($M.2, in_$p103);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} spin_lock_irq(out_$p132);
    goto corral_source_split_355;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_354;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb78;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i129 == 1);
    goto $bb78;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i64(out_$i118, 0);
    goto corral_source_split_343;

  $bb76:
    assume out_$i128 == 1;
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i64(out_$i126, out_$i127);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i32.i64(out_$i110);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i64($M.2, out_$p125);
    goto corral_source_split_338;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_337;

  $bb71:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(out_$i121, 0);
    goto corral_source_split_326;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} out_$i121 := signal_pending(out_$p120);
    call {:si_unique_call 71} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} out_$p120 := get_current();
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} remove_wait_queue(out_$p119, in_$p6);
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} out_$i118 := schedule_timeout(7500);
    call {:si_unique_call 67} {:cexpr "timeout"} boogie_si_record_i64(out_$i118);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} spin_unlock_irq(out_$p117);
    goto corral_source_split_320;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_319;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, in_$p7, out_$i116);
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p113, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 64} out_$i116 := devirtbounce(0, out_$p115, out_$i114, out_$p115);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i64($M.16, in_$p7);
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_$p113 := get_current();
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.16 := $store.i64($M.16, in_$p7, 1);
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} add_wait_queue(out_$p112, in_$p6);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} init_waitqueue_entry(in_$p6, out_$p111);
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} out_$p111 := get_current();
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$i110 := $trunc.i64.i32(out_$i109);
    call {:si_unique_call 59} {:cexpr "last_avail"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i64($M.2, out_$p108);
    goto corral_source_split_307;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_306;

  $bb85_dummy:
    call {:si_unique_call 1} out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$p115, out_$i116, out_$p117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p132, out_$i133, out_$i134, out_$i135 := snd_rawmidi_write_loop_$bb67(in_$p6, in_$p7, in_$p14, in_$p103, in_$p105, out_$p108, out_$i109, out_$i110, out_$p111, out_$p112, out_$p113, out_$i114, out_$p115, out_$i116, out_$p117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p132, out_$i133, out_$i134, out_$i135);
    return;

  exit:
    return;
}



procedure snd_rawmidi_write_loop_$bb67(in_$p6: ref, in_$p7: ref, in_$p14: ref, in_$p103: ref, in_$p105: ref, in_$p108: ref, in_$i109: i64, in_$i110: i32, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i64, in_$p119: ref, in_$p120: ref, in_$i121: i32, in_$i122: i1, in_$p125: ref, in_$i126: i64, in_$i127: i64, in_$i128: i1, in_$i129: i1, in_$p132: ref, in_$i133: i64, in_$i134: i64, in_$i135: i1) returns (out_$p108: ref, out_$i109: i64, out_$i110: i32, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i64, out_$p119: ref, out_$p120: ref, out_$i121: i32, out_$i122: i1, out_$p125: ref, out_$i126: i64, out_$i127: i64, out_$i128: i1, out_$i129: i1, out_$p132: ref, out_$i133: i64, out_$i134: i64, out_$i135: i1);
  modifies $M.16, $M.34, $M.35, $M.36;



implementation snd_rawmidi_write_loop_$bb16(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i64, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$i66: i1, in_$i67: i64, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i27: i64, in_$i28: i64) returns (out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i64, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$i66: i1, out_$i67: i64, out_$p70: ref, out_$i71: i32, out_$i72: i1)
{

  entry:
    out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p70, out_$i71, out_$i72 := in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$i46, in_$p47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p70, in_$i71, in_$i72;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb43:
    assume {:verifier.code 0} true;
    assume out_$i72 == 1;
    goto $bb43_dummy;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$i71 := snd_rawmidi_ready_append(in_$p12, in_$i27);
    call {:si_unique_call 51} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} spin_lock_irq(out_$p70);
    goto corral_source_split_246;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_245;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb36;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$i67 := in_$i28;
    assume true;
    goto $bb38;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i48, 0);
    goto corral_source_split_234;

  $bb34:
    assume out_$i65 == 1;
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i64(out_$i64, 0);
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.2, out_$p63);
    goto corral_source_split_230;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_229;

  $bb29:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$i60 := in_$i28;
    assume true;
    goto $bb29;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_$i58 := signal_pending(out_$p57);
    call {:si_unique_call 48} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_217;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_$p57 := get_current();
    goto corral_source_split_216;

  $bb26:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.15, out_$p54);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 1184)), $mul.ref(784, 1));
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.14, out_$p52);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.13, out_$p50);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} remove_wait_queue(out_$p49, in_$p4);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_$i48 := schedule_timeout(7500);
    call {:si_unique_call 44} {:cexpr "timeout"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} spin_unlock_irq(out_$p47);
    goto corral_source_split_202;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, in_$p5, out_$i46);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p43, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 41} out_$i46 := devirtbounce(0, out_$p45, out_$i44, out_$p45);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.12, in_$p5);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$p43 := get_current();
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, in_$p5, 1);
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} add_wait_queue(out_$p42, in_$p4);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} init_waitqueue_entry(in_$p4, out_$p41);
    goto corral_source_split_192;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_$p41 := get_current();
    goto corral_source_split_191;

  $bb19:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i37 := in_$i28;
    assume true;
    goto $bb19;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, 2048);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.11, out_$p33);
    goto corral_source_split_176;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_175;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p70, out_$i71, out_$i72 := snd_rawmidi_write_loop_$bb16(in_$p0, in_$p4, in_$p5, in_$p10, in_$p12, in_$p14, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p70, out_$i71, out_$i72, in_$i27, in_$i28);
    return;

  exit:
    return;
}



procedure snd_rawmidi_write_loop_$bb16(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i64, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$i66: i1, in_$i67: i64, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i27: i64, in_$i28: i64) returns (out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i64, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$i66: i1, out_$i67: i64, out_$p70: ref, out_$i71: i32, out_$i72: i1);
  modifies $M.12, $M.34, $M.35, $M.36;



implementation snd_rawmidi_write_loop_$bb11(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i64, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$i66: i1, in_$i67: i64, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i32: i64, in_$p73: ref, in_$i74: i64, in_$i75: i32, in_$i76: i1, in_$i77: i64, in_$i78: i32, in_$i82: i64, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i64, in_$i94: i64, in_$i95: i64, in_$i96: i1, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i97: i64) returns (out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i64, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$i66: i1, out_$i67: i64, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i32: i64, out_$p73: ref, out_$i74: i64, out_$i75: i32, out_$i76: i1, out_$i77: i64, out_$i78: i32, out_$i82: i64, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i64, out_$i94: i64, out_$i95: i64, out_$i96: i1, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i97: i64)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p70, out_$i71, out_$i72, out_$i32, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$p26, out_$i27, out_$i28, out_$i97 := in_$p29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$i46, in_$p47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p70, in_$i71, in_$i72, in_$i32, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i82, in_$i83, in_$i84, in_$p85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i94, in_$i95, in_$i96, in_$p26, in_$i27, in_$i28, in_$i97;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  $bb59:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$p26, out_$i27, out_$i28 := out_$p85, out_$i95, out_$i83;
    goto $bb59_dummy;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i83;
    assume true;
    goto $bb59;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i64(out_$i95, 0);
    goto corral_source_split_291;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i64(out_$i27, out_$i94);
    call {:si_unique_call 57} {:cexpr "count"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_290;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i75);
    goto corral_source_split_289;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb54;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb54;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i83;
    assume true;
    goto $bb56;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i32(out_$i89, 2048);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.11, out_$p88);
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_276;

  $bb52:
    assume out_$i87 == 1;
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i87 := $ult.i64(out_$i86, out_$i27);
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$i86 := $sext.i32.i64(out_$i75);
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p26, $mul.ref(out_$i84, 1));
    goto corral_source_split_271;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i75);
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i64(out_$i82, out_$i32);
    call {:si_unique_call 56} {:cexpr "result"} boogie_si_record_i64(out_$i83);
    goto corral_source_split_269;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i75);
    goto corral_source_split_268;

  $bb47:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$i77, out_$i78 := out_$i32, out_$i75;
    assume true;
    goto $bb47;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i76 := $slt.i32(out_$i75, 0);
    goto corral_source_split_256;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i64.i32(out_$i74);
    call {:si_unique_call 55} {:cexpr "count1"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} out_$i74 := snd_rawmidi_kernel_write1(in_$p12, out_$p26, $0.ref, out_$i27);
    call {:si_unique_call 54} {:cexpr "tmp___7"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_254;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} spin_unlock_irq(out_$p73);
    goto corral_source_split_253;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_252;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb15;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i28;
    goto $bb15;

  $bb44:
    assume !(out_$i72 == 1);
    goto corral_source_split_250;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 0);
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$i71 := snd_rawmidi_ready_append(in_$p12, out_$i27);
    call {:si_unique_call 51} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} spin_lock_irq(out_$p70);
    goto corral_source_split_246;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_245;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb36;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i28;
    assume true;
    goto $bb38;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i48, 0);
    goto corral_source_split_234;

  $bb34:
    assume out_$i65 == 1;
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i64(out_$i64, 0);
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.2, out_$p63);
    goto corral_source_split_230;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_229;

  $bb29:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i28;
    assume true;
    goto $bb29;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_$i58 := signal_pending(out_$p57);
    call {:si_unique_call 48} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_217;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_$p57 := get_current();
    goto corral_source_split_216;

  $bb26:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.15, out_$p54);
    goto corral_source_split_211;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 1184)), $mul.ref(784, 1));
    goto corral_source_split_210;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.14, out_$p52);
    goto corral_source_split_209;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.13, out_$p50);
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} remove_wait_queue(out_$p49, in_$p4);
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_$i48 := schedule_timeout(7500);
    call {:si_unique_call 44} {:cexpr "timeout"} boogie_si_record_i64(out_$i48);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} spin_unlock_irq(out_$p47);
    goto corral_source_split_202;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, in_$p5, out_$i46);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p43, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 41} out_$i46 := devirtbounce(0, out_$p45, out_$i44, out_$p45);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.12, in_$p5);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} out_$p43 := get_current();
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.12 := $store.i64($M.12, in_$p5, 1);
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} add_wait_queue(out_$p42, in_$p4);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} init_waitqueue_entry(in_$p4, out_$p41);
    goto corral_source_split_192;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} out_$p41 := get_current();
    goto corral_source_split_191;

  $bb19:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i28;
    assume true;
    goto $bb19;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, 2048);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.11, out_$p33);
    goto corral_source_split_176;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 352)), $mul.ref(128, 1));
    goto corral_source_split_175;

  $bb16:
    call out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p70, out_$i71, out_$i72 := snd_rawmidi_write_loop_$bb16(in_$p0, in_$p4, in_$p5, in_$p10, in_$p12, in_$p14, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p70, out_$i71, out_$i72, out_$i27, out_$i28);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb43:
    assume {:verifier.code 0} true;
    assume out_$i72 == 1;
    assume false;
    return;

  $bb13:
    assume out_$i31 == 1;
    goto corral_source_split_173;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i28;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_171;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} out_$i30 := snd_rawmidi_ready_append(in_$p12, out_$i27);
    call {:si_unique_call 35} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} spin_lock_irq(out_$p29);
    goto corral_source_split_169;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p14, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb59_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p70, out_$i71, out_$i72, out_$i32, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$p26, out_$i27, out_$i28, out_$i97 := snd_rawmidi_write_loop_$bb11(in_$p0, in_$p4, in_$p5, in_$p10, in_$p12, in_$p14, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p70, out_$i71, out_$i72, out_$i32, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$p26, out_$i27, out_$i28, out_$i97);
    return;

  exit:
    return;
}



procedure snd_rawmidi_write_loop_$bb11(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i64, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$i66: i1, in_$i67: i64, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i32: i64, in_$p73: ref, in_$i74: i64, in_$i75: i32, in_$i76: i1, in_$i77: i64, in_$i78: i32, in_$i82: i64, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i64, in_$i94: i64, in_$i95: i64, in_$i96: i1, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i97: i64) returns (out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i64, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$i66: i1, out_$i67: i64, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i32: i64, out_$p73: ref, out_$i74: i64, out_$i75: i32, out_$i76: i1, out_$i77: i64, out_$i78: i32, out_$i82: i64, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i64, out_$i94: i64, out_$i95: i64, out_$i96: i1, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i97: i64);
  modifies $M.2, $M.12, $M.34, $M.35, $M.36;



implementation snd_rawmidi_open_loop_$bb44(in_$i70: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i87: i32, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p73: ref, in_$i74: i32, in_$i95: i32) returns (out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i87: i32, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p73: ref, out_$i74: i32, out_$i95: i32)
{

  entry:
    out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p73, out_$i74, out_$i95 := in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i87, in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$p73, in_$i74, in_$i95;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  $bb53:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$p73, out_$i74 := out_$p90, out_$i87;
    goto $bb53_dummy;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i87;
    assume true;
    goto $bb53;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i93, in_$i70);
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p92);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p91, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p90);
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.2, out_$p89);
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_778;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  $bb47:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := out_$i74;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i83;
    goto $bb52;

  $bb49:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i83;
    assume true;
    goto $bb49;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, $sub.i32(0, 1));
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.2, out_$p82);
    call {:si_unique_call 159} {:cexpr "subdevice"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p73, $mul.ref(0, 232)), $mul.ref(36, 1));
    goto corral_source_split_764;

  $bb46:
    assume out_$i81 == 1;
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i79, out_$i80);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p78);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.2, out_$p77);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p73, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} out_$p76 := task_pid(out_$p75);
    goto corral_source_split_756;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} out_$p75 := get_current();
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb53_dummy:
    call {:si_unique_call 1} out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p73, out_$i74, out_$i95 := snd_rawmidi_open_loop_$bb44(in_$i70, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p73, out_$i74, out_$i95);
    return;

  exit:
    return;
}



procedure snd_rawmidi_open_loop_$bb44(in_$i70: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i87: i32, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p73: ref, in_$i74: i32, in_$i95: i32) returns (out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i87: i32, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p73: ref, out_$i74: i32, out_$i95: i32);



implementation snd_rawmidi_open_loop_$bb40(in_$p3: ref, in_$p21: ref, in_$p41: ref, in_$i54: i16, in_$p56: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i87: i32, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p73: ref, in_$i74: i32, in_$i95: i32, in_$i72: i32, in_$i86: i32, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i102: i1, in_$i103: i32, in_$p108: ref, in_$i109: i64, in_$p110: ref, in_$i111: i64, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1) returns (out_$p62: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i87: i32, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p73: ref, out_$i74: i32, out_$i95: i32, out_$i72: i32, out_$i86: i32, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i102: i1, out_$i103: i32, out_$p108: ref, out_$i109: i64, out_$p110: ref, out_$i111: i64, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1)
{

  entry:
    out_$p62, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p73, out_$i74, out_$i95, out_$i72, out_$i86, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i102, out_$i103, out_$p108, out_$i109, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121 := in_$p62, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p69, in_$i70, in_$i71, in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i87, in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$p73, in_$i74, in_$i95, in_$i72, in_$i86, in_$p96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i102, in_$i103, in_$p108, in_$i109, in_$p110, in_$i111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p41, $mul.ref(0, 1184)), $mul.ref(552, 1));
    goto corral_source_split_740;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb71_dummy;

  $bb70:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} out_$i120 := signal_pending(out_$p119);
    call {:si_unique_call 171} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_826;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} out_$p119 := get_current();
    goto corral_source_split_825;

  $bb67:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.2, out_$p116);
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 1184)), $mul.ref(784, 1));
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.2, out_$p114);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p21, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_817;

  SeqInstr_15:
    goto corral_source_split_816;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_mutex_lock_15(out_$p113);
    goto SeqInstr_14;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p21, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} schedule();
    goto corral_source_split_814;

  SeqInstr_12:
    goto corral_source_split_813;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} ldv_mutex_unlock_14(out_$p112);
    goto SeqInstr_11;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p21, $mul.ref(0, 536)), $mul.ref(256, 1));
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, in_$p3, out_$i111);
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p108, $mul.ref(0, 9576)), $mul.ref(0, 1));
    call {:si_unique_call 165} out_$i111 := devirtbounce(0, out_$p110, out_$i109, out_$p110);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i64($M.24, in_$p3);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} out_$p108 := get_current();
    goto corral_source_split_807;

  $bb64:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, in_$p3, 1);
    goto corral_source_split_806;

  $bb61:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i98;
    assume true;
    goto $bb61;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i98, $sub.i32(0, 11));
    goto corral_source_split_794;

  $bb57:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i98;
    assume true;
    goto $bb57;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    out_$i99 := $sge.i32(out_$i98, 0);
    goto corral_source_split_775;

  SeqInstr_9:
    call {:si_unique_call 162} {:cexpr "err"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_774;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} out_$i98 := rawmidi_open_priv(in_$p21, out_$i86, out_$i97, in_$p56);
    goto SeqInstr_8;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i16.i32(in_$i54);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} _raw_read_unlock(out_$p96);
    goto corral_source_split_772;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p41, $mul.ref(0, 1184)), $mul.ref(552, 1));
    goto corral_source_split_771;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_770;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i72;
    goto $bb50;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i85;
    goto $bb50;

  $bb48:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i83;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, $sub.i32(0, 1));
    goto corral_source_split_766;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.2, out_$p82);
    call {:si_unique_call 159} {:cexpr "subdevice"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p73, $mul.ref(0, 232)), $mul.ref(36, 1));
    goto corral_source_split_764;

  $bb46:
    assume out_$i81 == 1;
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i79, out_$i80);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p78);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.2, out_$p77);
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p73, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} out_$p76 := task_pid(out_$p75);
    goto corral_source_split_756;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} out_$p75 := get_current();
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    call out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p73, out_$i74, out_$i95 := snd_rawmidi_open_loop_$bb44(out_$i70, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p73, out_$i74, out_$i95);
    goto $bb44_last;

  $bb44_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$p73, out_$i74 := out_$p65, $sub.i32(0, 1);
    goto $bb44;

  $bb53:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$p73, out_$i74 := out_$p90, out_$i87;
    assume false;
    return;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i87;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i64(out_$i93, out_$i70);
    goto corral_source_split_783;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    out_$i93 := $p2i.ref.i64(out_$p92);
    goto corral_source_split_782;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p91, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_781;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p90);
    goto corral_source_split_780;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.2, out_$p89);
    goto corral_source_split_779;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p73, $mul.ref(0, 232)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_778;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  $bb47:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := out_$i74;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i83;
    goto $bb52;

  $bb49:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb41:
    assume out_$i71 == 1;
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$i72 := $sub.i32(0, 1);
    assume true;
    goto $bb41, $bb42;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i68, out_$i70);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p41, $mul.ref(0, 1184)), $mul.ref(648, 1));
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.2, out_$p64);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(in_$p41, $mul.ref(0, 1184)), $mul.ref(648, 1)), $mul.ref(0, 1));
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} _raw_read_lock(out_$p62);
    goto corral_source_split_741;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb43;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i95;
    goto $bb43;

  $bb54:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  $bb71_dummy:
    call {:si_unique_call 1} out_$p62, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p73, out_$i74, out_$i95, out_$i72, out_$i86, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i102, out_$i103, out_$p108, out_$i109, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121 := snd_rawmidi_open_loop_$bb40(in_$p3, in_$p21, in_$p41, in_$i54, in_$p56, out_$p62, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$p73, out_$i74, out_$i95, out_$i72, out_$i86, out_$p96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i102, out_$i103, out_$p108, out_$i109, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121);
    return;

  exit:
    return;
}



procedure snd_rawmidi_open_loop_$bb40(in_$p3: ref, in_$p21: ref, in_$p41: ref, in_$i54: i16, in_$p56: ref, in_$p62: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i87: i32, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i1, in_$p73: ref, in_$i74: i32, in_$i95: i32, in_$i72: i32, in_$i86: i32, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i102: i1, in_$i103: i32, in_$p108: ref, in_$i109: i64, in_$p110: ref, in_$i111: i64, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1) returns (out_$p62: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i87: i32, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i1, out_$p73: ref, out_$i74: i32, out_$i95: i32, out_$i72: i32, out_$i86: i32, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i102: i1, out_$i103: i32, out_$p108: ref, out_$i109: i64, out_$p110: ref, out_$i111: i64, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1);
  modifies $M.26, assertsPassed, $M.24, $M.37, $M.2, $M.38, $M.27, $M.28, $M.29, $M.30, $M.31, $CurrAddr;



implementation snd_rawmidi_drain_output_loop_$bb6(in_$p1: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i32: i64, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$i38: i1, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$i42: i1) returns (out_$i32: i64, out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$i38: i1, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$i42: i1)
{

  entry:
    out_$i32, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42 := in_$i32, in_$i31, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i37;
    goto $bb17_dummy;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i37;
    assume true;
    goto $bb17;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    out_$i42 := $uge.i64(out_$i40, out_$i41);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.2, in_$p27);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.2, in_$p25);
    goto corral_source_split_1155;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} prepare_to_wait(in_$p24, in_$p1, 1);
    goto corral_source_split_1154;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i37;
    assume true;
    goto $bb13;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i64(out_$i37, 0);
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} out_$i37 := schedule_timeout(out_$i31);
    call {:si_unique_call 222} {:cexpr "__ret"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_1149;

  $bb10:
    assume out_$i36 == 1;
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} out_$i35 := signal_pending(out_$p34);
    call {:si_unique_call 220} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1145;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_$p34 := get_current();
    goto corral_source_split_1144;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i32, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42 := snd_rawmidi_drain_output_loop_$bb6(in_$p1, in_$p24, in_$p25, in_$p27, out_$i32, out_$i31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42);
    return;

  exit:
    return;
}



procedure snd_rawmidi_drain_output_loop_$bb6(in_$p1: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$i32: i64, in_$i31: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i64, in_$i38: i1, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$i42: i1) returns (out_$i32: i64, out_$i31: i64, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i64, out_$i38: i1, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$i42: i1);



implementation snd_rawmidi_kernel_write1_loop_$bb26(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$i61: i1, in_$i62: i64, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i1, in_$i89: i64, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i64, in_$i77: i64, in_$p101: ref, in_$i102: i64, in_$i103: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$i112: i64, in_$i113: i64, in_$p114: ref, in_$i115: i64, in_$i116: i64, in_$i117: i1, in_$i53: i64, in_$i54: i64, in_$i55: i64, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i64, in_$i124: i64, in_$i118: i64, in_$i119: i64, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$i61: i1, out_$i62: i64, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i1, out_$i89: i64, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i64, out_$i77: i64, out_$p101: ref, out_$i102: i64, out_$i103: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$i112: i64, out_$i113: i64, out_$p114: ref, out_$i115: i64, out_$i116: i64, out_$i117: i1, out_$i53: i64, out_$i54: i64, out_$i55: i64, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i64, out_$i124: i64, out_$i118: i64, out_$i119: i64, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8)
{

  entry:
    out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p97, out_$p98, out_$i99, out_$i100, out_$i77, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i53, out_$i54, out_$i55, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i118, out_$i119, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := in_$p56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$i74, in_$p75, in_$p76, in_$i78, in_$i79, in_$p80, in_$p81, in_$p82, in_$p83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i89, in_$p97, in_$p98, in_$i99, in_$i100, in_$i77, in_$p101, in_$i102, in_$i103, in_$p104, in_$p105, in_$i106, in_$p107, in_$i108, in_$i109, in_$p110, in_$p111, in_$i112, in_$i113, in_$p114, in_$i115, in_$i116, in_$i117, in_$i53, in_$i54, in_$i55, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i118, in_$i119, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1385;

  $bb47:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$i53, out_$i54, out_$i55 := out_$i115, out_$i77, out_$i116;
    goto $bb47_dummy;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$i118, out_$i119 := out_$i77, out_$i115;
    assume true;
    goto $bb47;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$i117 := $sgt.i64(out_$i116, 0);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$i116 := $sub.i64(out_$i55, out_$i68);
    call {:si_unique_call 293} {:cexpr "count"} boogie_si_record_i64(out_$i116);
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i64(out_$i53, out_$i68);
    call {:si_unique_call 292} {:cexpr "result"} boogie_si_record_i64(out_$i115);
    goto corral_source_split_1443;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p114, out_$i113);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1441;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    out_$i113 := $sub.i64(out_$i112, out_$i68);
    goto corral_source_split_1440;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i64($M.2, out_$p111);
    goto corral_source_split_1439;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p110, out_$i109);
    goto corral_source_split_1437;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    out_$i109 := $urem.i64(out_$i106, out_$i108);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i64($M.2, out_$p107);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i64($M.2, out_$p105);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p104, out_$i103);
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i64(out_$i102, out_$i68);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i64($M.2, out_$p101);
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1426;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i77 := out_$i100;
    goto $bb36;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i54;
    goto $bb36;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.2;
    out_cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 291} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p75, out_$p76, out_$i68, $zext.i32.i64(1), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_2;
    goto corral_source_split_1419;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref(in_$p2, $mul.ref(out_$i53, 1));
    goto corral_source_split_1418;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p72, $mul.ref(out_$i74, 1));
    goto corral_source_split_1417;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i64($M.2, out_$p73);
    goto corral_source_split_1416;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1415;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.2, out_$p71);
    goto corral_source_split_1414;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_1413;

  $bb34:
    assume out_$i70 == 1;
    goto corral_source_split_1412;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_1409;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  $bb32:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := out_$i62;
    goto $bb33;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i67;
    goto $bb33;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.2, out_$p66);
    call {:si_unique_call 290} {:cexpr "count1"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1405;

  $bb31:
    assume out_$i65 == 1;
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i64(out_$i64, out_$i62);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i64($M.2, out_$p63);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1400;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1399;

  $bb29:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := out_$i60;
    goto $bb30;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i55;
    goto $bb30;

  $bb28:
    assume out_$i61 == 1;
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    out_$i61 := $sgt.i64(out_$i60, out_$i55);
    goto corral_source_split_1395;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i64(out_$i57, out_$i59);
    call {:si_unique_call 289} {:cexpr "count1"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.2, out_$p58);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.2, out_$p56);
    goto corral_source_split_1391;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_1390;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb49:
    assume out_$i122 == 1;
    goto corral_source_split_1489;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$i123, out_$i124 := out_$i54, out_$i53;
    assume true;
    goto $bb49;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i64($M.2, out_$p120);
    goto corral_source_split_1387;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_1386;

  $bb38:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := out_$i54;
    goto $bb46;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i99;
    goto $bb46;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} out_$i99 := _raw_spin_lock_irqsave(out_$p98);
    call {:si_unique_call 304} {:cexpr "flags"} boogie_si_record_i64(out_$i99);
    goto corral_source_split_1485;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} out_$p98 := spinlock_check(out_$p97);
    goto corral_source_split_1484;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1483;

  $bb40:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i53;
    assume true;
    goto $bb40;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, 0);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} out_$i87 := copy_from_user(out_$p85, out_$p86, out_$i68);
    call {:si_unique_call 296} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i87);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(in_$p1, $mul.ref(out_$i53, 1));
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p82, $mul.ref(out_$i84, 1));
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i64($M.2, out_$p83);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.2, out_$p81);
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_1450;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} spin_unlock_irqrestore(out_$p80, out_$i54);
    goto corral_source_split_1449;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_1448;

  $bb37:
    assume out_$i79 == 1;
    goto corral_source_split_1447;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_1423;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_1422;

  $bb35:
    assume !(out_$i70 == 1);
    goto corral_source_split_1421;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p97, out_$p98, out_$i99, out_$i100, out_$i77, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i53, out_$i54, out_$i55, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i118, out_$i119, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := snd_rawmidi_kernel_write1_loop_$bb26(in_$p1, in_$p2, in_$p5, out_$p56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$p76, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$p83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$p97, out_$p98, out_$i99, out_$i100, out_$i77, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$i53, out_$i54, out_$i55, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i118, out_$i119, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    return;

  exit:
    return;
}



procedure snd_rawmidi_kernel_write1_loop_$bb26(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$i61: i1, in_$i62: i64, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i1, in_$i89: i64, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i64, in_$i77: i64, in_$p101: ref, in_$i102: i64, in_$i103: i64, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$p107: ref, in_$i108: i64, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$i112: i64, in_$i113: i64, in_$p114: ref, in_$i115: i64, in_$i116: i64, in_$i117: i1, in_$i53: i64, in_$i54: i64, in_$i55: i64, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$i123: i64, in_$i124: i64, in_$i118: i64, in_$i119: i64, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$i61: i1, out_$i62: i64, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i1, out_$i89: i64, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i64, out_$i77: i64, out_$p101: ref, out_$i102: i64, out_$i103: i64, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$p107: ref, out_$i108: i64, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$i112: i64, out_$i113: i64, out_$p114: ref, out_$i115: i64, out_$i116: i64, out_$i117: i1, out_$i53: i64, out_$i54: i64, out_$i55: i64, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$i123: i64, out_$i124: i64, out_$i118: i64, out_$i119: i64, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8);
  modifies $M.2;



implementation assign_substream_loop_$bb14(in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$i31: i64, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i48: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p49: ref, in_$p47: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p33: ref) returns (out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i48: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p49: ref, out_$p47: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p33: ref)
{

  entry:
    out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i48, out_$p50, out_$i51, out_$i52, out_$p49, out_$p47, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p33 := in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i48, in_$p50, in_$i51, in_$i52, in_$p49, in_$p47, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p33;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1752;

  $bb34:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$p33 := out_$p55;
    goto $bb34_dummy;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, in_$i31);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.2, out_$p54);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(out_$p47, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1775;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1774;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p47 := out_$p33;
    goto $bb25;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p47 := out_$p33;
    goto $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb19;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(in_$i2, 1);
    goto corral_source_split_1761;

  $bb16:
    assume out_$i38 == 1;
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i8.i32(out_$i36);
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i8($M.2, out_$p35);
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p34, $mul.ref(24, 1));
    goto corral_source_split_1755;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 0);
    goto corral_source_split_1765;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(in_$i3, 4);
    goto corral_source_split_1764;

  $bb20:
    assume !(out_$i39 == 1);
    goto corral_source_split_1763;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 0);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.2, out_$p43);
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p42, $mul.ref(24, 1));
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_1768;

  $bb22:
    assume !(out_$i41 == 1);
    goto corral_source_split_1767;

  $bb32:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$p49 := out_$p33;
    assume true;
    goto $bb32;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, in_$i1);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.2, out_$p50);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p33, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_1788;

  $bb30:
    assume !(out_$i48 == 1);
    goto corral_source_split_1787;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$p49 := out_$p33;
    assume true;
    goto $bb30;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(in_$i1, 0);
    goto corral_source_split_1782;

  $bb17:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i48, out_$p50, out_$i51, out_$i52, out_$p49, out_$p47, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p33 := assign_substream_loop_$bb14(in_$i1, in_$i2, in_$i3, in_$i31, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i48, out_$p50, out_$i51, out_$i52, out_$p49, out_$p47, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p33);
    return;

  exit:
    return;
}



procedure assign_substream_loop_$bb14(in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$i31: i64, in_$p34: ref, in_$p35: ref, in_$i36: i8, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i48: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p49: ref, in_$p47: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p33: ref) returns (out_$p34: ref, out_$p35: ref, out_$i36: i8, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i48: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p49: ref, out_$p47: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p33: ref);



implementation snd_rawmidi_kernel_read1_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i64, in_$i73: i1, in_$i8: i64, in_$i9: i64, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i64, in_$i74: i64, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i64, out_$i73: i1, out_$i8: i64, out_$i9: i64, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i64, out_$i74: i64, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8)
{

  entry:
    out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i8, out_$i9, out_$p75, out_$i76, out_$i77, out_$i78, out_$i74, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p52, in_$p53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i8, in_$i9, in_$p75, in_$i76, in_$i77, in_$i78, in_$i74, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  $bb25:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i71, out_$i72;
    goto $bb25_dummy;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i71;
    assume true;
    goto $bb25;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    out_$i73 := $sgt.i64(out_$i72, 0);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$i72 := $sub.i64(out_$i9, out_$i27);
    call {:si_unique_call 470} {:cexpr "count"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(out_$i8, out_$i27);
    call {:si_unique_call 469} {:cexpr "result"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} spin_unlock_irqrestore(out_$p70, out_$i55);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p69, out_$i68);
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$i68 := $sub.i64(out_$i67, out_$i27);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.2, out_$p66);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p65, out_$i64);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2443;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$i64 := $urem.i64(out_$i61, out_$i63);
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i64($M.2, out_$p62);
    goto corral_source_split_2441;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.2, out_$p60);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p59, out_$i58);
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i57, out_$i27);
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.2, out_$p56);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2433;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  $bb16:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := out_$i19;
    goto $bb24;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i54;
    goto $bb24;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} out_$i54 := _raw_spin_lock_irqsave(out_$p53);
    call {:si_unique_call 467} {:cexpr "flags"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} out_$p53 := spinlock_check(out_$p52);
    goto corral_source_split_2429;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2428;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i8;
    assume true;
    goto $bb18;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} out_$i46 := copy_to_user(out_$p39, out_$p44, out_$i45);
    call {:si_unique_call 464} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i64.i32(out_$i27);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p41, $mul.ref(out_$i43, 1));
    goto corral_source_split_2412;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.2, out_$p42);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.2, out_$p40);
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p1, $mul.ref(out_$i8, 1));
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} spin_unlock_irqrestore(out_$p38, out_$i19);
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2405;

  $bb15:
    assume out_$i37 == 1;
    goto corral_source_split_2404;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i64(out_$i36, 0);
    goto corral_source_split_2402;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2401;

  $bb13:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_12 := $M.2;
    out_cmdloc_dummy_var_13 := $M.2;
    call {:si_unique_call 461} out_cmdloc_dummy_var_14 := $memcpy.i8(out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_$p30, out_$p35, out_$i27, $zext.i32.i64(1), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_14;
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p32, $mul.ref(out_$i34, 1));
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.2, out_$p33);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.2, out_$p31);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(16, 1));
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(in_$p2, $mul.ref(out_$i8, 1));
    goto corral_source_split_2393;

  $bb12:
    assume out_$i29 == 1;
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_2389;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  $bb10:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := out_$i16;
    goto $bb11;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i26;
    goto $bb11;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.2, out_$p25);
    call {:si_unique_call 460} {:cexpr "count1"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2385;

  $bb9:
    assume out_$i24 == 1;
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i64(out_$i23, out_$i16);
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.2, out_$p20);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2378;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} out_$i19 := _raw_spin_lock_irqsave(out_$p18);
    call {:si_unique_call 459} {:cexpr "flags"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} out_$p18 := spinlock_check(out_$p17);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(72, 1));
    goto corral_source_split_2375;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2374;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := out_$i14;
    goto $bb8;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i9;
    goto $bb8;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$i15 := $sgt.i64(out_$i14, out_$i9);
    goto corral_source_split_2370;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i64(out_$i11, out_$i13);
    call {:si_unique_call 456} {:cexpr "count1"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.2, out_$p12);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(32, 1));
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i64($M.2, out_$p10);
    goto corral_source_split_2366;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_2365;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb27:
    assume out_$i77 == 1;
    goto corral_source_split_2458;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i8;
    assume true;
    goto $bb27;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i64($M.2, out_$p75);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p5, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_2361;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i8, out_$i9, out_$p75, out_$i76, out_$i77, out_$i78, out_$i74, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14 := snd_rawmidi_kernel_read1_loop_$bb4(in_$p1, in_$p2, in_$p5, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i8, out_$i9, out_$p75, out_$i76, out_$i77, out_$i78, out_$i74, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14);
    return;

  exit:
    return;
}



procedure snd_rawmidi_kernel_read1_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p20: ref, in_$i21: i64, in_$i22: i32, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$p56: ref, in_$i57: i64, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i64, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i64, in_$i73: i1, in_$i8: i64, in_$i9: i64, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i64, in_$i74: i64, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8) returns (out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p20: ref, out_$i21: i64, out_$i22: i32, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$p56: ref, out_$i57: i64, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i64, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i64, out_$i73: i1, out_$i8: i64, out_$i9: i64, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i64, out_$i74: i64, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8);
  modifies $M.2;



implementation snd_rawmidi_search_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p8: ref)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2472;

  $bb13:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p23;
    goto $bb13_dummy;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, $p2i.ref.i64(snd_rawmidi_devices));
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p22, $mul.ref($sub.ref(0, 8), 536)), $mul.ref(8, 1));
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p22, $mul.ref($sub.ref(0, 8), 536));
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.2, out_$p20);
    goto corral_source_split_2490;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 536)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2489;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb8;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p8;
    assume true;
    goto $bb10;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, in_$i1);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.2, out_$p14);
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p8, $mul.ref(0, 536)), $mul.ref(24, 1));
    goto corral_source_split_2481;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i11, out_$i12);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.2, out_$p9);
    goto corral_source_split_2475;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 536)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p8 := snd_rawmidi_search_loop_$bb4(in_$p0, in_$i1, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p8);
    return;

  exit:
    return;
}



procedure snd_rawmidi_search_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p8: ref) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p8: ref);



implementation snd_rawmidi_dev_disconnect_loop_$bb28(in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1) returns (out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1)
{

  entry:
    out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103 := in_$p89, in_$p90, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p98, in_$p99, in_$p100, in_$p101, in_$i102, in_$i103;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  $bb33:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$p89 := out_$p99;
    goto $bb33_dummy;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i102, in_$i87);
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p100, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$p100 := $bitcast.ref.ref(out_$p99);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.2, out_$p98);
    goto corral_source_split_2891;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref($add.ref(out_$p89, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2890;

  $bb31:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} __wake_up(out_$p96, 3, 1, $0.ref);
    goto corral_source_split_2888;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_2887;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.2, out_$p94);
    goto corral_source_split_2886;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p89, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2885;

  $bb30:
    assume out_$i93 == 1;
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$i93 := $ne.i64(out_$i92, 0);
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$i92 := $p2i.ref.i64(out_$p91);
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.2, out_$p90);
    goto corral_source_split_2880;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103 := snd_rawmidi_dev_disconnect_loop_$bb28(in_$i87, out_$p89, out_$p90, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p98, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103);
    return;

  exit:
    return;
}



procedure snd_rawmidi_dev_disconnect_loop_$bb28(in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$i92: i64, in_$i93: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i1) returns (out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$i92: i64, out_$i93: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i1);



implementation snd_rawmidi_dev_disconnect_loop_$bb6(in_$i18: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p20: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p20: ref)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20 := in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p20;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2790;

  $bb11:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p20 := out_$p30;
    goto $bb11_dummy;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i18);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.2, out_$p29);
    goto corral_source_split_2804;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p20, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2803;

  $bb9:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} __wake_up(out_$p27, 3, 1, $0.ref);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 336)), $mul.ref(144, 1));
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.2, out_$p25);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p20, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2798;

  $bb8:
    assume out_$i24 == 1;
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, 0);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.2, out_$p21);
    goto corral_source_split_2793;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20 := snd_rawmidi_dev_disconnect_loop_$bb6(in_$i18, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p20);
    return;

  exit:
    return;
}



procedure snd_rawmidi_dev_disconnect_loop_$bb6(in_$i18: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p20: ref) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p20: ref);



implementation snd_rawmidi_free_substreams_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11 := in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$i10, in_$i11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i11 == 1;
    goto $bb6_dummy;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_2975;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_$i10 := list_empty(in_$p1);
    call {:si_unique_call 540} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} kfree(out_$p9);
    goto corral_source_split_2973;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} list_del(out_$p8);
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_2970;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.2, out_$p5);
    goto corral_source_split_2968;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2967;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11 := snd_rawmidi_free_substreams_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11);
    return;

  exit:
    return;
}



procedure snd_rawmidi_free_substreams_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1);



implementation snd_rawmidi_proc_info_read_loop_$bb20(in_$p1: ref, in_$i76: i64, in_$p79: ref, in_$i80: i32, in_$p81: ref, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$i86: i8, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p97: ref, in_$i98: i64, in_$p99: ref, in_$i100: i64, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p78: ref, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32) returns (out_$p79: ref, out_$i80: i32, out_$p81: ref, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$i86: i8, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p97: ref, out_$i98: i64, out_$p99: ref, out_$i100: i64, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p78: ref, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32)
{

  entry:
    out_$p79, out_$i80, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$p93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$p99, out_$i100, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p78, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47 := in_$p79, in_$i80, in_$p81, in_$i82, in_$p84, in_$p85, in_$i86, in_$i87, in_$i88, in_$p89, in_$p90, in_$i91, in_$p93, in_$p94, in_$p95, in_$i96, in_$p97, in_$i98, in_$p99, in_$i100, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p78, in_vslice_dummy_var_45, in_vslice_dummy_var_46, in_vslice_dummy_var_47;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3142;

  $bb25:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$p78 := out_$p104;
    goto $bb25_dummy;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, in_$i76);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.2, out_$p103);
    goto corral_source_split_3171;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref(out_$p78, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3170;

  $bb23:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} out_vslice_dummy_var_47 := snd_iprintf.ref.ref.i64.i64.i64(in_$p1, .str.36, out_$i96, out_$i98, out_$i100);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i64($M.2, out_$p99);
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(out_$p94, $mul.ref(0, 336)), $mul.ref(64, 1));
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i64($M.2, out_$p97);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p94, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i64($M.2, out_$p95);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.2, out_$p93);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p78, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} out_vslice_dummy_var_46 := snd_iprintf.ref.ref.i32(in_$p1, .str.31, out_$i91);
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} out_$i91 := pid_vnr(out_$p90);
    call {:si_unique_call 593} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.2, out_$p89);
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p78, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_3156;

  $bb22:
    assume out_$i88 == 1;
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i8.i32(out_$i86);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i8($M.2, out_$p85);
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(out_$p84, $mul.ref(24, 1));
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$p84 := $bitcast.ref.ref(out_$p78);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} out_vslice_dummy_var_45 := snd_iprintf.ref.ref.i32.i64(in_$p1, .str.35, out_$i80, out_$i82);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i64($M.2, out_$p81);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p78, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.2, out_$p79);
    goto corral_source_split_3145;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p79, out_$i80, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$p93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$p99, out_$i100, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p78, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47 := snd_rawmidi_proc_info_read_loop_$bb20(in_$p1, in_$i76, out_$p79, out_$i80, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$p93, out_$p94, out_$p95, out_$i96, out_$p97, out_$i98, out_$p99, out_$i100, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p78, out_vslice_dummy_var_45, out_vslice_dummy_var_46, out_vslice_dummy_var_47);
    return;

  exit:
    return;
}



procedure snd_rawmidi_proc_info_read_loop_$bb20(in_$p1: ref, in_$i76: i64, in_$p79: ref, in_$i80: i32, in_$p81: ref, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$i86: i8, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p97: ref, in_$i98: i64, in_$p99: ref, in_$i100: i64, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p78: ref, in_vslice_dummy_var_45: i32, in_vslice_dummy_var_46: i32, in_vslice_dummy_var_47: i32) returns (out_$p79: ref, out_$i80: i32, out_$p81: ref, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$i86: i8, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p97: ref, out_$i98: i64, out_$p99: ref, out_$i100: i64, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p78: ref, out_vslice_dummy_var_45: i32, out_vslice_dummy_var_46: i32, out_vslice_dummy_var_47: i32);



implementation snd_rawmidi_proc_info_read_loop_$bb6(in_$p1: ref, in_$i24: i64, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p26: ref, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i32, in_vslice_dummy_var_44: i32) returns (out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i64, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p26: ref, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i32, out_vslice_dummy_var_44: i32)
{

  entry:
    out_$p27, out_$i28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p26, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44 := in_$p27, in_$i28, in_$p29, in_$i30, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$i39, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$p51, in_$i52, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p26, in_vslice_dummy_var_42, in_vslice_dummy_var_43, in_vslice_dummy_var_44;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3084;

  $bb11:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p56;
    goto $bb11_dummy;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, in_$i24);
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.2, out_$p55);
    goto corral_source_split_3117;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 112)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3116;

  $bb9:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} out_vslice_dummy_var_44 := snd_iprintf.ref.ref.ref.i64.i64(in_$p1, .str.32, out_$p48, out_$i50, out_$i52);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i64($M.2, out_$p51);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p42, $mul.ref(0, 336)), $mul.ref(56, 1));
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.2, out_$p49);
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p42, $mul.ref(0, 336)), $mul.ref(24, 1));
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$p48 := (if out_$i47 == 1 then .str.33 else .str.34);
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.2, out_$p44);
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p43, $mul.ref(8, 1));
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_3104;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.2, out_$p41);
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p26, $mul.ref(0, 112)), $mul.ref(88, 1));
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_vslice_dummy_var_43 := snd_iprintf.ref.ref.i32(in_$p1, .str.31, out_$i39);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} out_$i39 := pid_vnr(out_$p38);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.2, out_$p37);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p26, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_3098;

  $bb8:
    assume out_$i36 == 1;
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.2, out_$p33);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p32, $mul.ref(24, 1));
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} out_vslice_dummy_var_42 := snd_iprintf.ref.ref.i32.i64(in_$p1, .str.30, out_$i28, out_$i30);
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.2, out_$p29);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p26, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.2, out_$p27);
    goto corral_source_split_3087;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 112)), $mul.ref(20, 1));
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p26, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44 := snd_rawmidi_proc_info_read_loop_$bb6(in_$p1, in_$i24, out_$p27, out_$i28, out_$p29, out_$i30, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$i39, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p26, out_vslice_dummy_var_42, out_vslice_dummy_var_43, out_vslice_dummy_var_44);
    return;

  exit:
    return;
}



procedure snd_rawmidi_proc_info_read_loop_$bb6(in_$p1: ref, in_$i24: i64, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i64, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p26: ref, in_vslice_dummy_var_42: i32, in_vslice_dummy_var_43: i32, in_vslice_dummy_var_44: i32) returns (out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i64, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p26: ref, out_vslice_dummy_var_42: i32, out_vslice_dummy_var_43: i32, out_vslice_dummy_var_44: i32);



implementation main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i32, in_$i20: i1, in_$i21: i64, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i64, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i34: i32, in_$i19: i32, in_$i2: i32, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i64, in_vslice_dummy_var_53: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i32, out_$i20: i1, out_$i21: i64, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i64, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i34: i32, out_$i19: i32, out_$i2: i32, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i64, out_vslice_dummy_var_53: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i19, out_$i2, out_$i40, out_$i41, out_$i42, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i34, in_$i19, in_$i2, in_$i40, in_$i41, in_$i42, in_vslice_dummy_var_48, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3251;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$i2 := out_$i19;
    goto corral_source_split_3302_dummy;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3302;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i2;
    goto $bb36;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i2;
    goto $bb36;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i2;
    goto $bb36;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i2;
    goto $bb36;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i2;
    goto $bb36;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i2;
    goto $bb36;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i34;
    goto $bb36;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i31;
    goto $bb36;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i25;
    goto $bb36;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i18;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  $bb30:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := out_$i2;
    goto $bb35;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i17;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i2, 1);
    call {:si_unique_call 655} {:cexpr "ldv_s_snd_rawmidi_f_ops_file_operations"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3298;

  $bb32:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} ldv_check_return_value(out_$i15);
    goto corral_source_split_3290;

  SeqInstr_174:
    call {:si_unique_call 651} {:cexpr "res_snd_rawmidi_open_16"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3289;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} out_$i15 := snd_rawmidi_open($u0, $u1);
    goto SeqInstr_173;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} ldv_handler_precall();
    goto corral_source_split_3288;

  $bb29:
    assume out_$i14 == 1;
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i2, 0);
    goto corral_source_split_3285;

  $bb27:
    assume out_$i13 == 1;
    goto corral_source_split_3284;

  $bb25:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb21:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb8:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} out_$i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 637} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i3);
    call {:si_unique_call 638} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb56:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb54;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb55;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 633} out_$i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 634} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i40);
    call {:si_unique_call 635} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3252;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i2, 0);
    goto corral_source_split_3337;

  $bb55:
    assume !(out_$i41 == 1);
    goto corral_source_split_3336;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3315;

  $bb38:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := out_$i2;
    goto $bb42;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i24;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i2, 1);
    call {:si_unique_call 660} {:cexpr "ldv_s_snd_rawmidi_f_ops_file_operations"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_3313;

  $bb40:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i64(out_$i21, 0);
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} ldv_check_return_value(out_$i22);
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} out_$i21 := snd_rawmidi_read($u1, $u2, $u3, $u4);
    call {:si_unique_call 658} {:cexpr "res_snd_rawmidi_read_34"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} ldv_handler_precall();
    goto corral_source_split_3305;

  $bb37:
    assume out_$i20 == 1;
    goto corral_source_split_3304;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i2, 1);
    goto corral_source_split_3282;

  $bb26:
    assume !(out_$i12 == 1);
    goto corral_source_split_3281;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_3328;

  $bb44:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i2;
    goto $bb48;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i30;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i2, 1);
    call {:si_unique_call 665} {:cexpr "ldv_s_snd_rawmidi_f_ops_file_operations"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3326;

  $bb46:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i64(out_$i27, 0);
    goto corral_source_split_3322;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} ldv_check_return_value(out_$i28);
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i64.i32(out_$i27);
    goto corral_source_split_3320;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} out_$i27 := snd_rawmidi_write($u1, $u2, $u3, $u4);
    call {:si_unique_call 663} {:cexpr "res_snd_rawmidi_write_41"} boogie_si_record_i64(out_$i27);
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ldv_handler_precall();
    goto corral_source_split_3318;

  $bb43:
    assume out_$i26 == 1;
    goto corral_source_split_3317;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i2, 2);
    goto corral_source_split_3276;

  $bb23:
    assume out_$i11 == 1;
    goto corral_source_split_3275;

  $bb22:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  $bb50:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := out_$i2;
    goto $bb51;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb51;

  SeqInstr_177:
    goto corral_source_split_3332;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} out_vslice_dummy_var_53 := snd_rawmidi_release($u0, $u1);
    goto SeqInstr_176;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} ldv_handler_precall();
    goto corral_source_split_3331;

  $bb49:
    assume out_$i32 == 1;
    goto corral_source_split_3330;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i2, 3);
    goto corral_source_split_3279;

  $bb24:
    assume !(out_$i11 == 1);
    goto corral_source_split_3278;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} out_vslice_dummy_var_51 := snd_rawmidi_poll($u1, $u5);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} ldv_handler_precall();
    goto corral_source_split_3268;

  $bb19:
    assume out_$i9 == 1;
    goto corral_source_split_3267;

  $bb10:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb9:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} out_vslice_dummy_var_52 := snd_rawmidi_ioctl($u1, $u6, $u3);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} ldv_handler_precall();
    goto corral_source_split_3272;

  $bb20:
    assume !(out_$i9 == 1);
    goto corral_source_split_3271;

  SeqInstr_165:
    goto corral_source_split_3257;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} out_vslice_dummy_var_48 := snd_rawmidi_dev_free($u7);
    goto SeqInstr_164;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} ldv_handler_precall();
    goto corral_source_split_3256;

  $bb12:
    assume out_$i6 == 1;
    goto corral_source_split_3255;

  $bb11:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  SeqInstr_168:
    goto corral_source_split_3261;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} out_vslice_dummy_var_49 := snd_rawmidi_dev_register($u7);
    goto SeqInstr_167;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} ldv_handler_precall();
    goto corral_source_split_3260;

  $bb14:
    assume out_$i7 == 1;
    goto corral_source_split_3259;

  $bb13:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  SeqInstr_171:
    goto corral_source_split_3265;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} out_vslice_dummy_var_50 := snd_rawmidi_dev_disconnect($u7);
    goto SeqInstr_170;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} ldv_handler_precall();
    goto corral_source_split_3264;

  $bb16:
    assume out_$i8 == 1;
    goto corral_source_split_3263;

  $bb15:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb18;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb18;

  corral_source_split_3302_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i19, out_$i2, out_$i40, out_$i41, out_$i42, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53 := main_loop_$bb5(out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i19, out_$i2, out_$i40, out_$i41, out_$i42, out_vslice_dummy_var_48, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i18: i32, in_$i20: i1, in_$i21: i64, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i64, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i34: i32, in_$i19: i32, in_$i2: i32, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_vslice_dummy_var_48: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i64, in_vslice_dummy_var_53: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i18: i32, out_$i20: i1, out_$i21: i64, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i64, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i34: i32, out_$i19: i32, out_$i2: i32, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_vslice_dummy_var_48: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i64, out_vslice_dummy_var_53: i32);
  modifies $M.24, $M.2, $M.25, $M.26, $M.34, $M.35, $M.36, $M.37, $CurrAddr, assertsPassed, $M.38, $M.27, $M.28, $M.29, $M.30, $M.31, $M.5, $M.12, $M.16, $M.40;


