var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]ref;

var $M.3: [ref]i8;

var $M.4: [ref]i8;

var $M.5: [ref]i8;

var $M.6: [ref]i32;

var $M.7: [ref]i32;

var $M.8: [ref]i32;

var $M.9: [ref]i32;

var $M.10: [ref]i8;

var $M.11: [ref]i8;

var $M.12: [ref]i8;

var $M.13: [ref]i8;

var $M.14: [ref]i16;

var $M.15: [ref]i32;

var $M.16: [ref]i8;

var $M.17: [ref]i8;

var $M.18: [ref]i16;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: [ref]i32;

var $M.22: [ref]i8;

var $M.23: [ref]i8;

var $M.24: [ref]i8;

var $M.25: [ref]i64;

var $M.26: [ref]i64;

var $M.27: [ref]i32;

var $M.28: [ref]i8;

var $M.30: i32;

var $M.31: [ref]i8;

var $M.32: [ref]i8;

var $M.33: [ref]i64;

var $M.34: [ref]i64;

var $M.35: [ref]i8;

var $M.36: [ref]i8;

var $M.37: [ref]i8;

var $M.38: [ref]i64;

var $M.39: [ref]i64;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]i8;

var $M.65: [ref]i16;

var $M.66: [ref]i16;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 258540);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const cbq_qdisc_ops_group0: ref;

axiom cbq_qdisc_ops_group0 == $sub.ref(0, 2060);

const cbq_qdisc_ops_group1: ref;

axiom cbq_qdisc_ops_group1 == $sub.ref(0, 3092);

const cbq_class_ops_group0: ref;

axiom cbq_class_ops_group0 == $sub.ref(0, 4124);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 5152);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 6180);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 7208);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 8236);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 9264);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 10292);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 11320);

const cbq_class_ops: ref;

axiom cbq_class_ops == $sub.ref(0, 12456);

const cbq_qdisc_ops: ref;

axiom cbq_qdisc_ops == $sub.ref(0, 13616);

const {:count 8} cbq_policy: ref;

axiom cbq_policy == $sub.ref(0, 14672);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 15902);

const pfifo_qdisc_ops: ref;

axiom pfifo_qdisc_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const noop_qdisc: ref;

axiom noop_qdisc == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 50} .str.3: ref;

axiom .str.3 == $sub.ref(0, 16976);

const {:count 26} .str.1: ref;

axiom .str.1 == $sub.ref(0, 18026);

const {:count 41} .str.2: ref;

axiom .str.2 == $sub.ref(0, 19091);

const {:count 36} .str.4: ref;

axiom .str.4 == $sub.ref(0, 20151);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 21183);

const {:count 3} .str.1.18: ref;

axiom .str.1.18 == $sub.ref(0, 22210);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 23248);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 24276);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 25308);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 26340);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const cbq_enqueue: ref;

axiom cbq_enqueue == $sub.ref(0, 27372);

procedure cbq_enqueue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21;



implementation cbq_enqueue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p54: ref;
  var $i55: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := qdisc_priv($p1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i5);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p6 := cbq_classify($p0, $p1, $p2);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p6);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(80, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p1);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i26 := qdisc_enqueue($p0, $p25);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, $i26);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p2);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p2);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 65536);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.1, $p2);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i20 := $i55;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i46);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} cbq_mark_toplevel($p4, $p6);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(256, 1)), $mul.ref(8, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 1);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(256, 1)), $mul.ref(8, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i52);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} cbq_mark_toplevel($p4, $p6);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p2);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i20 := $i39;
    goto $bb6;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} cbq_activate_class($p6);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p2);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 131072);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} kfree_skb($p0);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p2);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const cbq_dequeue: ref;

axiom cbq_dequeue == $sub.ref(0, 28404);

procedure cbq_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $CurrAddr, $M.31, $M.32, $M.33, $M.34, $M.35, $M.23, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation cbq_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p38: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $p46: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p1 := qdisc_priv($p0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i3 := psched_get_time();
    call {:si_unique_call 11} {:cexpr "now"} boogie_si_record_i64($i3);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(672, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64($i3, $i5);
    call {:si_unique_call 12} {:cexpr "incr"} boogie_si_record_i64($i6);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(640, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i31 := $ult.i64($i30, $i3);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(672, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i3);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p35 := cbq_dequeue_1($p0);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p38 := $p35;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i37 == 1);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call $p39, $p47, $i48, $i49, $p51, $i52, $i53, $p54, $p56, $p57, $i58, $i59 := cbq_dequeue_loop_$bb13($p0, $p2, $p34, $p39, $p47, $i48, $i49, $p51, $i52, $i53, $p54, $p56, $p57, $i58, $i59);
    goto $bb13_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 8);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 8);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(208, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, 0);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, 0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p57 := cbq_dequeue_1($p0);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p39 := $p57;
    assume true;
    goto $bb14, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb24_dummy;

  $bb14:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p38 := $p39;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} qdisc_bstats_update($p0, $p38);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i42, 1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i43);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} qdisc_unthrottled($p0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p46 := $p38;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $r := $p46;
    return;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(208, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb19;

  $bb20:
    assume $i53 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p46 := $0.ref;
    goto $bb15;

  $bb25:
    assume $i63 == 1;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(16, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(16, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i67);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i72 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(784, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i75, $i3);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} qdisc_watchdog_schedule($p73, $i76);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb11;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i3);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(80, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(656, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i16 := qdisc_l2t($p13, $i15);
    call {:si_unique_call 14} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    call {:si_unique_call 15} {:cexpr "incr2"} boogie_si_record_i64($i17);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, $i17);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i20);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} cbq_update($p2);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i6, $i17);
    call {:si_unique_call 17} {:cexpr "incr"} boogie_si_record_i64($i22);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i23 := $slt.i64($i22, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i26, $i24);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i27);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb5;

  $bb24_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb16;
}



const qdisc_peek_dequeued: ref;

axiom qdisc_peek_dequeued == $sub.ref(0, 29436);

procedure qdisc_peek_dequeued($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $CurrAddr, $M.31, $M.32, $M.33, $M.34, $M.35, $M.23, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation qdisc_peek_dequeued($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $r := $p20;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 23} $p7 := devirtbounce($p6, $p0);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p7);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(120, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const cbq_drop: ref;

axiom cbq_drop == $sub.ref(0, 30468);

procedure cbq_drop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i41: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i64;
  var $i133: i1;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $i162: i1;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $i190: i64;
  var $i191: i1;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i64;
  var $i220: i1;
  var $p222: ref;
  var $p223: ref;
  var $i224: i64;
  var $i225: i1;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $p246: ref;
  var $i247: i64;
  var $i248: i64;
  var $i249: i1;
  var $p251: ref;
  var $p252: ref;
  var $i253: i64;
  var $i254: i1;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $i262: i64;
  var $i263: i1;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $i276: i64;
  var $i277: i64;
  var $i278: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p1 := qdisc_priv($p0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(8, 8));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb7;

  $bb7:
    call $p8, $p9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $i28, $p42, $p43, $i44, $i45, $i46 := cbq_drop_loop_$bb7($p5, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $i28, $p42, $p43, $i44, $i45, $i46);
    goto $bb7_last;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p5);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i44, $i45);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(7, 8));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p52 := $p49;
    goto $bb27;

  $bb27:
    call $p27, $i28, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $i73, $i74, $i75 := cbq_drop_loop_$bb27($p27, $i28, $p49, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $i73, $i74, $i75);
    goto $bb27_last;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p52, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p49);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i73, $i74);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(6, 8));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i79, 0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p81 := $p78;
    goto $bb42;

  $bb42:
    call $p27, $i28, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $i88, $i89, $p90, $p91, $p92, $p93, $p94, $p95, $p96, $p97, $i98, $i99, $p100, $p101, $i102, $i103, $i104 := cbq_drop_loop_$bb42($p27, $i28, $p78, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $i88, $i89, $p90, $p91, $p92, $p93, $p94, $p95, $p96, $p97, $i98, $i99, $p100, $p101, $i102, $i103, $i104);
    goto $bb42_last;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p81, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p78);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i102, $i103);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(5, 8));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i108, 0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p110 := $p107;
    goto $bb57;

  $bb57:
    call $p27, $i28, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $i131, $i132, $i133 := cbq_drop_loop_$bb57($p27, $i28, $p107, $p110, $p111, $p112, $p113, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $i131, $i132, $i133);
    goto $bb57_last;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p110, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p107);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i131, $i132);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(4, 8));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p136);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p139 := $p136;
    goto $bb72;

  $bb72:
    call $p27, $i28, $p139, $p140, $p141, $p142, $p143, $p144, $p145, $i146, $i147, $p148, $p149, $p150, $p151, $p152, $p153, $p154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $i162 := cbq_drop_loop_$bb72($p27, $i28, $p136, $p139, $p140, $p141, $p142, $p143, $p144, $p145, $i146, $i147, $p148, $p149, $p150, $p151, $p152, $p153, $p154, $p155, $i156, $i157, $p158, $p159, $i160, $i161, $i162);
    goto $bb72_last;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p141, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p145);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p139, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p136);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i162 := $ne.i64($i160, $i161);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(3, 8));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i166 := $p2i.ref.i64($p165);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i166, 0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p168 := $p165;
    goto $bb87;

  $bb87:
    call $p27, $i28, $p168, $p169, $p170, $p171, $p172, $p173, $p174, $i175, $i176, $p177, $p178, $p179, $p180, $p181, $p182, $p183, $p184, $i185, $i186, $p187, $p188, $i189, $i190, $i191 := cbq_drop_loop_$bb87($p27, $i28, $p165, $p168, $p169, $p170, $p171, $p172, $p173, $p174, $i175, $i176, $p177, $p178, $p179, $p180, $p181, $p182, $p183, $p184, $i185, $i186, $p187, $p188, $i189, $i190, $i191);
    goto $bb87_last;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p170, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p174);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i176 := $ne.i64($i175, 0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p168, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p165);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i191 := $ne.i64($i189, $i190);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(2, 8));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p194);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i196 := $eq.i64($i195, 0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p197 := $p194;
    goto $bb102;

  $bb102:
    call $p27, $i28, $p197, $p198, $p199, $p200, $p201, $p202, $p203, $i204, $i205, $p206, $p207, $p208, $p209, $p210, $p211, $p212, $p213, $i214, $i215, $p216, $p217, $i218, $i219, $i220 := cbq_drop_loop_$bb102($p27, $i28, $p194, $p197, $p198, $p199, $p200, $p201, $p202, $p203, $i204, $i205, $p206, $p207, $p208, $p209, $p210, $p211, $p212, $p213, $i214, $i215, $p216, $p217, $i218, $i219, $i220);
    goto $bb102_last;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p197, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.0, $p200);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p203);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p197, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p217);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p194);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i218, $i219);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(1, 8));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i224 := $p2i.ref.i64($p223);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i225 := $eq.i64($i224, 0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p226 := $p223;
    goto $bb117;

  $bb117:
    call $p27, $i28, $p226, $p227, $p228, $p229, $p230, $p231, $p232, $i233, $i234, $p235, $p236, $p237, $p238, $p239, $p240, $p241, $p242, $i243, $i244, $p245, $p246, $i247, $i248, $i249 := cbq_drop_loop_$bb117($p27, $i28, $p223, $p226, $p227, $p228, $p229, $p230, $p231, $p232, $i233, $i234, $p235, $p236, $p237, $p238, $p239, $p240, $p241, $p242, $i243, $i244, $p245, $p246, $i247, $i248, $i249);
    goto $bb117_last;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p226, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p228, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p230, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i234 := $ne.i64($i233, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p226, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i248 := $p2i.ref.i64($p223);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i249 := $ne.i64($i247, $i248);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(0, 8));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i253 := $p2i.ref.i64($p252);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i254 := $eq.i64($i253, 0);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p255 := $p252;
    goto $bb132;

  $bb132:
    call $p27, $i28, $p255, $p256, $p257, $p258, $p259, $p260, $p261, $i262, $i263, $p264, $p265, $p266, $p267, $p268, $p269, $p270, $p271, $i272, $i273, $p274, $p275, $i276, $i277, $i278 := cbq_drop_loop_$bb132($p27, $i28, $p252, $p255, $p256, $p257, $p258, $p259, $p260, $p261, $i262, $i263, $p264, $p265, $p266, $p267, $p268, $p269, $p270, $p271, $i272, $i273, $p274, $p275, $i276, $i277, $i278);
    goto $bb132_last;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p255, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.0, $p256);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p257, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p259, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p261 := $load.ref($M.0, $p260);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i262 := $p2i.ref.i64($p261);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i263 := $ne.i64($i262, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p255, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i276 := $p2i.ref.i64($p275);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i277 := $p2i.ref.i64($p252);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i278 := $ne.i64($i276, $i277);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb139:
    assume $i278 == 1;
    assume {:verifier.code 0} true;
    $p255 := $p275;
    goto $bb139_dummy;

  $bb133:
    assume $i263 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p255, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p265 := $load.ref($M.0, $p264);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p265, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p267, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p255, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p271 := $load.ref($M.0, $p270);
    call {:si_unique_call 35} $i272 := devirtbounce.1($p269, $p271);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p255, $i272;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p27, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $i28;
    goto $bb16;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} cbq_deactivate_class($p27);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb129:
    assume $i254 == 1;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb124:
    assume $i249 == 1;
    assume {:verifier.code 0} true;
    $p226 := $p246;
    goto $bb124_dummy;

  $bb118:
    assume $i234 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p226, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p236, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p226, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    call {:si_unique_call 34} $i243 := devirtbounce.1($p240, $p242);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i244 := $ne.i32($i243, 0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p226, $i243;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb11;

  $bb114:
    assume $i225 == 1;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb109:
    assume $i220 == 1;
    assume {:verifier.code 0} true;
    $p197 := $p217;
    goto $bb109_dummy;

  $bb103:
    assume $i205 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p197, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p197, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    call {:si_unique_call 33} $i214 := devirtbounce.1($p211, $p213);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p197, $i214;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb106:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb11;

  $bb99:
    assume $i196 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb94:
    assume $i191 == 1;
    assume {:verifier.code 0} true;
    $p168 := $p188;
    goto $bb94_dummy;

  $bb88:
    assume $i176 == 1;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p168, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p178, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p180, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p168, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    call {:si_unique_call 32} $i185 := devirtbounce.1($p182, $p184);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i186 := $ne.i32($i185, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p168, $i185;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb11;

  $bb84:
    assume $i167 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb79:
    assume $i162 == 1;
    assume {:verifier.code 0} true;
    $p139 := $p159;
    goto $bb79_dummy;

  $bb73:
    assume $i147 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p139, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p139, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    call {:si_unique_call 31} $i156 := devirtbounce.1($p153, $p155);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i156, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p139, $i156;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb11;

  $bb69:
    assume $i138 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb64:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    $p110 := $p130;
    goto $bb64_dummy;

  $bb58:
    assume $i118 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p110, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p110, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    call {:si_unique_call 30} $i127 := devirtbounce.1($p124, $p126);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p110, $i127;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb11;

  $bb54:
    assume $i109 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb49:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $p81 := $p101;
    goto $bb49_dummy;

  $bb43:
    assume $i89 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p81, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p81, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    call {:si_unique_call 29} $i98 := devirtbounce.1($p95, $p97);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p81, $i98;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb11;

  $bb39:
    assume $i80 == 1;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb34:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $p52 := $p72;
    goto $bb34_dummy;

  $bb28:
    assume $i60 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p52, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p52, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    call {:si_unique_call 28} $i69 := devirtbounce.1($p66, $p68);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p52, $i69;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb11;

  $bb24:
    assume $i51 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb19:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p43;
    goto $bb19_dummy;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 25} $i25 := devirtbounce.1($p22, $p24);
    call {:si_unique_call 26} {:cexpr "len"} boogie_si_record_i32($i25);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p8, $i25;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb11;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb139_dummy:
    assume false;
    return;

  $bb132_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_512;

  $bb124_dummy:
    assume false;
    return;

  $bb117_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_478;

  $bb109_dummy:
    assume false;
    return;

  $bb102_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  $bb94_dummy:
    assume false;
    return;

  $bb87_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_410;

  $bb79_dummy:
    assume false;
    return;

  $bb72_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  $bb64_dummy:
    assume false;
    return;

  $bb57_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_342;

  $bb49_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  $bb34_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_223;
}



const cbq_init: ref;

axiom cbq_init == $sub.ref(0, 31500);

procedure cbq_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $CurrAddr;



implementation cbq_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p71: ref;
  var $p73: ref;
  var $i74: i64;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $i92: i32;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $i8: i32;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p3 := qdisc_priv($p0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i6 := nla_parse_nested($p5, 7, $p1, cbq_policy);
    call {:si_unique_call 39} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(6, 8));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(5, 8));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(5, 8));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.2, $p17);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p19 := nla_data($p18);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(6, 8));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p23 := qdisc_get_rtab($p20, $p22);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(80, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p23);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p23);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i29 := qdisc_class_hash_init($p28);
    call {:si_unique_call 43} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(320, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(168, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p33);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(128, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p0);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(88, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p47 := qdisc_create_dflt($p44, pfifo_qdisc_ops, $i46);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(184, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p47);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(184, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(32, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, 7);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(33, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 7);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(192, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 7);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(35, 1));
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(88, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, cbq_ovl_classic);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p67 := qdisc_dev($p0);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i68 := psched_mtu($p67);
    call {:si_unique_call 48} {:cexpr "tmp___3"} boogie_si_record_i32($i68);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(104, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, $i69);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(104, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(112, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i74);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(80, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 1056)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(120, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p85, $i83);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(34, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 5);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(104, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i91 := $sdiv.i64($i90, 2);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i64.i32($i91);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(72, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i92);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(64, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p96, $sub.i64(0, 2147483647));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(784, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} qdisc_watchdog_init($p97, $p0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(688, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} hrtimer_init($p98, 1, 0);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(688, 1)), $mul.ref(40, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, cbq_undelay);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p101, 8);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i102 := psched_get_time();
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p103, $i102);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(672, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p106, $i105);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} cbq_link_class($p107);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.2, $p108);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} cbq_addprio($p4, $p118);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb21:
    assume $i111 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.2, $p112);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p114 := nla_data($p113);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p114);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_55 := cbq_set_lss($p115, $p116);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i54 == 1;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(184, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, noop_qdisc);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(80, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} qdisc_put_rtab($p121);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i8 := $i29;
    goto $bb3;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const cbq_reset: ref;

axiom cbq_reset == $sub.ref(0, 32532);

procedure cbq_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $CurrAddr;



implementation cbq_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $p50: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p37: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i22: i32;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p1 := qdisc_priv($p0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(552, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(680, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(640, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(648, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(784, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} qdisc_watchdog_cancel($p7);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(688, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vslice_dummy_var_56 := hrtimer_cancel($p8);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 8);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i11 := psched_get_time();
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i11);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(672, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(0, 8));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(1, 8));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(2, 8));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $0.ref);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(3, 8));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $0.ref);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(4, 8));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $0.ref);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(5, 8));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $0.ref);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(6, 8));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $0.ref);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(7, 8));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $0.ref);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(8, 8));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 0);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb8;

  $bb8:
    call $p24, $p25, $i26, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $i35, $i36, $p38, $p39, $p40, $p41, $p42, $i43, $p44, $p45, $i46, $p47, $p48, $i49, $p50, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $p37, $i62, $i63, $i64, $i22 := cbq_reset_loop_$bb8($p2, $p19, $p24, $p25, $i26, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $i35, $i36, $p38, $p39, $p40, $p41, $p42, $i43, $p44, $p45, $i46, $p47, $p48, $i49, $p50, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $p37, $i62, $i63, $i64, $i22);
    goto $bb8_last;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i22);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 8)), $mul.ref(0, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $p34 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i22, 1);
    call {:si_unique_call 61} {:cexpr "h"} boogie_si_record_i32($i62);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p19);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i64 := $ugt.i32($i63, $i62);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i64 == 1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb24:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i22 := $i62;
    goto $bb24_dummy;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p37 := $p34;
    goto $bb16;

  $bb16:
    call $p38, $p39, $p40, $p41, $p42, $i43, $p44, $p45, $i46, $p47, $p48, $i49, $p50, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $p37 := cbq_reset_loop_$bb16($p38, $p39, $p40, $p41, $p42, $i43, $p44, $p45, $i46, $p47, $p48, $i49, $p50, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $i60, $i61, $p37);
    goto $bb16_last;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} qdisc_reset($p39);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, 0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, $i43);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i46);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $p59 := $0.ref;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i61 == 1);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $p37 := $p59;
    goto $bb21_dummy;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p54);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p59 := $p58;
    goto $bb20;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p29);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p34 := $p33;
    goto $bb12;

  $bb21_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  $bb24_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;
}



const cbq_destroy: ref;

axiom cbq_destroy == $sub.ref(0, 33564);

procedure cbq_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p23: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i8: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i59: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p58: ref;
  var $p69: ref;
  var $p60: ref;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i43: i32;
  var $p73: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p1 := qdisc_priv($p0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 0);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i32($i41, 0);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(0, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} qdisc_class_hash_destroy($p73);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb26;

  $bb26:
    call $p45, $p46, $i47, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $i59, $i61, $p62, $p63, $p64, $i65, $i66, $p58, $p69, $p60, $i70, $i71, $i72, $i43 := cbq_destroy_loop_$bb26($p0, $p2, $p40, $p45, $p46, $i47, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $i59, $i61, $p62, $p63, $p64, $i65, $i66, $p58, $p69, $p60, $i70, $i71, $i72, $i43);
    goto $bb26_last;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i43);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p46, $mul.ref($i47, 8)), $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $p55 := $0.ref;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i43, 1);
    call {:si_unique_call 66} {:cexpr "h"} boogie_si_record_i32($i70);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p40);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i72 := $ugt.i32($i71, $i70);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i72 == 1);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb42:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i70;
    goto $bb42_dummy;

  $bb31:
    assume $i57 == 1;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p58 := $p55;
    goto $bb34;

  $bb34:
    call $i59, $i61, $p62, $p63, $p64, $i65, $i66, $p58, $p69, $p60 := cbq_destroy_loop_$bb34($p0, $i59, $i61, $p62, $p63, $p64, $i65, $i66, $p58, $p69, $p60);
    goto $bb34_last;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($add.ref($p58, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p69);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} cbq_destroy_class($p0, $p58);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p60);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i59, 0);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $p64 := $0.ref;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i66 == 1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb39:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $p58 := $p64;
    goto $bb39_dummy;

  $bb36:
    assume $i61 == 1;
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p60);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p64 := $p63;
    goto $bb38;

  $bb28:
    assume $i52 == 1;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p50);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p55 := $p54;
    goto $bb30;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $p24, $p27, $p28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $p23, $i36, $i37, $i38, $i8 := cbq_destroy_loop_$bb4($p2, $p5, $p10, $p11, $i12, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $p24, $p27, $p28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $p23, $i36, $i37, $i38, $i8);
    goto $bb4_last;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i8);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 8)), $mul.ref(0, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i8, 1);
    call {:si_unique_call 64} {:cexpr "h"} boogie_si_record_i32($i36);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p5);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i37, $i36);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb20_dummy;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p23 := $p20;
    goto $bb12;

  $bb12:
    call $p24, $p27, $p28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $p23 := cbq_destroy_loop_$bb12($p24, $p27, $p28, $i29, $i30, $p31, $p32, $p33, $i34, $i35, $p23);
    goto $bb12_last;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} tcf_destroy_chain($p24);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p23, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $p33 := $0.ref;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p23 := $p33;
    goto $bb17_dummy;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p28);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb16;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p15);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb8;

  $bb39_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  $bb42_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  $bb17_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_815;
}



const cbq_dump: ref;

axiom cbq_dump == $sub.ref(0, 34596);

procedure cbq_dump($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $CurrAddr;



implementation cbq_dump($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p2 := qdisc_priv($p0);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p4 := nla_nest_start($p1, 2);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i8 := cbq_dump_attr($p1, $p7);
    call {:si_unique_call 72} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i10 := nla_nest_end($p1, $p4);
    call {:si_unique_call 74} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} nla_nest_cancel($p1, $p4);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb8;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cbq_dump_stats: ref;

axiom cbq_dump_stats == $sub.ref(0, 35628);

procedure cbq_dump_stats($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_dump_stats($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $p2 := qdisc_priv($p0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(216, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i7);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(296, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i14 := gnet_stats_copy_app($p1, $p13, 16);
    call {:si_unique_call 77} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const qdisc_priv: ref;

axiom qdisc_priv == $sub.ref(0, 36660);

procedure qdisc_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(448, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const gnet_stats_copy_app: ref;

axiom gnet_stats_copy_app == $sub.ref(0, 37692);

procedure gnet_stats_copy_app($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gnet_stats_copy_app($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 78} {:cexpr "gnet_stats_copy_app:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 79} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 80} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nla_nest_start: ref;

axiom nla_nest_start == $sub.ref(0, 38724);

procedure nla_nest_start($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nla_nest_start($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "nla_nest_start:arg:attrtype"} boogie_si_record_i32($i1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i4 := nla_put($p0, $i1, 0, $0.ref);
    call {:si_unique_call 84} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const cbq_dump_attr: ref;

axiom cbq_dump_attr == $sub.ref(0, 39756);

procedure cbq_dump_attr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $CurrAddr;



implementation cbq_dump_attr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i2 := cbq_dump_lss($p0, $p1);
    call {:si_unique_call 86} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i5 := cbq_dump_rate($p0, $p1);
    call {:si_unique_call 88} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i7 := cbq_dump_wrr($p0, $p1);
    call {:si_unique_call 90} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i9 := cbq_dump_ovl($p0, $p1);
    call {:si_unique_call 92} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i11 := cbq_dump_police($p0, $p1);
    call {:si_unique_call 94} {:cexpr "tmp___3"} boogie_si_record_i32($i11);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i13 := cbq_dump_fopt($p0, $p1);
    call {:si_unique_call 96} {:cexpr "tmp___4"} boogie_si_record_i32($i13);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 1);
    goto $bb3;
}



const nla_nest_end: ref;

axiom nla_nest_end == $sub.ref(0, 40788);

procedure nla_nest_end($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nla_nest_end($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $i6: i64;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i16($i6);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i5, $i8);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const nla_nest_cancel: ref;

axiom nla_nest_cancel == $sub.ref(0, 41820);

procedure nla_nest_cancel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nla_nest_cancel($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} nlmsg_trim($p0, $p2);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    return;
}



const nlmsg_trim: ref;

axiom nlmsg_trim == $sub.ref(0, 42852);

procedure nlmsg_trim($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nlmsg_trim($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i5, $i9);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} skb_trim($p0, $i10);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 43884);

procedure skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation skb_trim($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} {:cexpr "skb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    return;
}



const skb_tail_pointer: ref;

axiom skb_tail_pointer == $sub.ref(0, 44916);

procedure skb_tail_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_tail_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const cbq_dump_lss: ref;

axiom cbq_dump_lss == $sub.ref(0, 45948);

procedure cbq_dump_lss($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr;



implementation cbq_dump_lss($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p2 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p3 := skb_tail_pointer($p0);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(144, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.4 := $store.i8($M.4, $p27, $i26);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(3, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $M.5 := $store.i8($M.5, $p30, $i29);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(72, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, $i32);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p37, $i36);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i64.i32($i39);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, $i40);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $M.8 := $store.i32($M.8, $p42, $i41);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(56, 1));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i44);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p46, $i45);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $M.10 := $store.i8($M.10, $p47, $sub.i8(0, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i49 := nla_put($p0, 1, 20, $p48);
    call {:si_unique_call 104} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb7:
    assume $i50 == 1;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} nlmsg_trim($p0, $p3);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 1);
    goto $bb11;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.3, $p19);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 2);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p24, $i23);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.3, $p9);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p14, $i13);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cbq_dump_rate: ref;

axiom cbq_dump_rate == $sub.ref(0, 46980);

procedure cbq_dump_rate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cbq_dump_rate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1056)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i7 := nla_put($p0, 5, 12, $p6);
    call {:si_unique_call 108} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} nlmsg_trim($p0, $p2);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb5;
}



const cbq_dump_wrr: ref;

axiom cbq_dump_wrr == $sub.ref(0, 48012);

procedure cbq_dump_wrr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $CurrAddr;



implementation cbq_dump_wrr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $p3 := skb_tail_pointer($p0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.11;
    call {:si_unique_call 112} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p4, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.11 := cmdloc_dummy_var_1;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p5, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(104, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p9, $i8);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(1, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p15, $i14);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p21, $i20);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(120, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p25, $i24);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i27 := nla_put($p0, 2, 12, $p26);
    call {:si_unique_call 114} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} nlmsg_trim($p0, $p3);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 1);
    goto $bb5;
}



const cbq_dump_ovl: ref;

axiom cbq_dump_ovl == $sub.ref(0, 49044);

procedure cbq_dump_ovl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $CurrAddr;



implementation cbq_dump_ovl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p3 := skb_tail_pointer($p0);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(35, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p6, $i5);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(33, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p12, $i11);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $M.14 := $store.i16($M.14, $p13, 0);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(96, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p17, $i16);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i19 := nla_put($p0, 4, 8, $p18);
    call {:si_unique_call 119} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} nlmsg_trim($p0, $p3);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 1);
    goto $bb5;
}



const cbq_dump_police: ref;

axiom cbq_dump_police == $sub.ref(0, 50076);

procedure cbq_dump_police($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.17, $M.18, $CurrAddr;



implementation cbq_dump_police($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $p3 := skb_tail_pointer($p0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(36, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(36, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p10, $i9);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p11, 0);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.18 := $store.i16($M.18, $p12, 0);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i14 := nla_put($p0, 7, 4, $p13);
    call {:si_unique_call 124} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} nlmsg_trim($p0, $p3);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 1);
    goto $bb8;
}



const cbq_dump_fopt: ref;

axiom cbq_dump_fopt == $sub.ref(0, 51108);

procedure cbq_dump_fopt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $CurrAddr;



implementation cbq_dump_fopt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $p2 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p3 := skb_tail_pointer($p0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $M.19 := $store.i32($M.19, $p21, $i20);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p24, $i23);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p25, $sub.i32(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p2);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i27 := nla_put($p0, 3, 12, $p26);
    call {:si_unique_call 129} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} nlmsg_trim($p0, $p3);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 1);
    goto $bb14;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const nla_put: ref;

axiom nla_put == $sub.ref(0, 52140);

procedure nla_put($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_put($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 131} {:cexpr "nla_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 132} {:cexpr "nla_put:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 134} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 53172);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const tcf_destroy_chain: ref;

axiom tcf_destroy_chain == $sub.ref(0, 54204);

procedure tcf_destroy_chain($p0: ref);
  free requires assertsPassed;



implementation tcf_destroy_chain($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    return;
}



const cbq_destroy_class: ref;

axiom cbq_destroy_class == $sub.ref(0, 55236);

procedure cbq_destroy_class($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cbq_destroy_class($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var vslice_dummy_var_57: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p2 := qdisc_priv($p0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(324, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 136} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 138} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} vslice_dummy_var_57 := ldv__builtin_expect($i15, 0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} tcf_destroy_chain($p17);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} qdisc_destroy($p19);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} qdisc_put_rtab($p21);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(240, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(280, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} gen_kill_estimator($p22, $p23);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i25, $i26);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p1);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} kfree($p28);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} warn_slowpath_null(.str, 1717);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qdisc_class_hash_destroy: ref;

axiom qdisc_class_hash_destroy == $sub.ref(0, 56268);

procedure qdisc_class_hash_destroy($p0: ref);
  free requires assertsPassed;



implementation qdisc_class_hash_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 57300);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 147} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 58332);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_destroy: ref;

axiom qdisc_destroy == $sub.ref(0, 59364);

procedure qdisc_destroy($p0: ref);
  free requires assertsPassed;



implementation qdisc_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_put_rtab: ref;

axiom qdisc_put_rtab == $sub.ref(0, 60396);

procedure qdisc_put_rtab($p0: ref);
  free requires assertsPassed;



implementation qdisc_put_rtab($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    return;
}



const gen_kill_estimator: ref;

axiom gen_kill_estimator == $sub.ref(0, 61428);

procedure gen_kill_estimator($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation gen_kill_estimator($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 62460);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} free_($p0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 63492);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 150} $free($p0);
    return;
}



const qdisc_watchdog_cancel: ref;

axiom qdisc_watchdog_cancel == $sub.ref(0, 64524);

procedure qdisc_watchdog_cancel($p0: ref);
  free requires assertsPassed;



implementation qdisc_watchdog_cancel($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    return;
}



const hrtimer_cancel: ref;

axiom hrtimer_cancel == $sub.ref(0, 65556);

procedure hrtimer_cancel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hrtimer_cancel($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 1} true;
    call {:si_unique_call 151} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 152} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const psched_get_time: ref;

axiom psched_get_time == $sub.ref(0, 66588);

procedure psched_get_time() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.22, $M.0, $CurrAddr;



implementation psched_get_time() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i2 := ktime_get();
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p3, $i2);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.22;
    cmdloc_dummy_var_3 := $M.22;
    call {:si_unique_call 156} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p4, $p5, 8, $zext.i32.i64(8), 0 == 1);
    $M.22 := cmdloc_dummy_var_4;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.22, $p6);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i8 := $ashr.i64($i7, 6);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const qdisc_reset: ref;

axiom qdisc_reset == $sub.ref(0, 67620);

procedure qdisc_reset($p0: ref);
  free requires assertsPassed;



implementation qdisc_reset($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    return;
}



const ktime_get: ref;

axiom ktime_get == $sub.ref(0, 68652);

procedure ktime_get() returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ktime_get() returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p1 := external_alloc();
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 1} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} __VERIFIER_assume($i4);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 160} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 69684);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 70716);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const nla_parse_nested: ref;

axiom nla_parse_nested == $sub.ref(0, 71748);

procedure nla_parse_nested($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_parse_nested($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} {:cexpr "nla_parse_nested:arg:maxtype"} boogie_si_record_i32($i1);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i4 := nla_len($p2);
    call {:si_unique_call 165} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p5 := nla_data($p2);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i7 := nla_parse($p0, $i1, $p6, $i4, $p3);
    call {:si_unique_call 168} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const nla_data: ref;

axiom nla_data == $sub.ref(0, 72780);

procedure nla_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation nla_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const qdisc_get_rtab: ref;

axiom qdisc_get_rtab == $sub.ref(0, 73812);

procedure qdisc_get_rtab($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_get_rtab($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $p2 := external_alloc();
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const qdisc_class_hash_init: ref;

axiom qdisc_class_hash_init == $sub.ref(0, 74844);

procedure qdisc_class_hash_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qdisc_class_hash_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 1} true;
    call {:si_unique_call 170} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 171} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qdisc_create_dflt: ref;

axiom qdisc_create_dflt == $sub.ref(0, 75876);

procedure qdisc_create_dflt($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_create_dflt($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "qdisc_create_dflt:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p3 := external_alloc();
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const cbq_ovl_classic: ref;

axiom cbq_ovl_classic == $sub.ref(0, 76908);

procedure cbq_ovl_classic($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_ovl_classic($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i1;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i1;
  var $i81: i64;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $i72: i64;
  var $p73: ref;
  var $i87: i64;
  var $i71: i64;
  var $p88: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p3 := qdisc_priv($p2);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i6, $i8);
    call {:si_unique_call 175} {:cexpr "delay"} boogie_si_record_i64($i9);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(193, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i9;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i57 == 1);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i64($i59, $i54);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 8);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    call {:si_unique_call 178} {:cexpr "base_delay"} boogie_si_record_i64($i66);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i71 := $i66;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i71);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb21:
    assume $i70 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i72, $p73 := $i66, $p68;
    goto $bb24;

  $bb24:
    call $p74, $i75, $p76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $p84, $i85, $i86, $i72, $p73, $i87 := cbq_ovl_classic_loop_$bb24($p4, $p74, $i75, $p76, $i77, $i78, $i79, $i80, $i81, $i82, $p83, $p84, $i85, $i86, $i72, $p73, $i87);
    goto $bb24_last;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i78 := $sub.i64($i75, $i77);
    call {:si_unique_call 179} {:cexpr "delay"} boogie_si_record_i64($i78);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i79 := $slt.i64($i78, $i72);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i72;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p73, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i87 := $i82;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i71 := $i87;
    goto $bb23;

  $bb32:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i72, $p73 := $i82, $p84;
    goto $bb32_dummy;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i80 := $sle.i64($i78, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $i78;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb31;

  $bb28:
    assume $i80 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i81 := 1;
    goto $bb30;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i54);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb14;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(56, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i9);
    call {:si_unique_call 176} {:cexpr "delay"} boogie_si_record_i64($i16);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i19 := $slt.i64($i18, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i16;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i37 := $slt.i64($i34, $i36);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i41 := $sle.i64($i32, 0);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $i32;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, $i42);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(4, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(4, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i50);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(193, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 1);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i54 := $i42;
    goto $bb12;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb11;

  $bb6:
    assume $i37 == 1;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p40, $i39);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, $i21);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i27 := $ashr.i64($i22, $i26);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i27, $i29);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, $i16);
    call {:si_unique_call 177} {:cexpr "delay"} boogie_si_record_i64($i31);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb5;

  $bb32_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;
}



const qdisc_dev: ref;

axiom qdisc_dev == $sub.ref(0, 77940);

procedure qdisc_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(88, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(0, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const psched_mtu: ref;

axiom psched_mtu == $sub.ref(0, 78972);

procedure psched_mtu($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation psched_mtu($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(542, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i2, $i5);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const qdisc_watchdog_init: ref;

axiom qdisc_watchdog_init == $sub.ref(0, 80004);

procedure qdisc_watchdog_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qdisc_watchdog_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    return;
}



const hrtimer_init: ref;

axiom hrtimer_init == $sub.ref(0, 81036);

procedure hrtimer_init($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation hrtimer_init($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "hrtimer_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 181} {:cexpr "hrtimer_init:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    return;
}



const cbq_undelay: ref;

axiom cbq_undelay == $sub.ref(0, 82068);

procedure cbq_undelay($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.0, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_undelay($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i1;
  var $i32: i1;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i15: i32;
  var $i16: i64;
  var $i36: i64;
  var $i14: i64;
  var $i37: i1;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 680), 904));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 680), 904)), $mul.ref(784, 1)), $mul.ref(96, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i9 := psched_get_time();
    call {:si_unique_call 186} {:cexpr "now"} boogie_si_record_i64($i9);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 680), 904)), $mul.ref(680, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 187} {:cexpr "pmask"} boogie_si_record_i32($i11);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 680), 904)), $mul.ref(680, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i11, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i14, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} qdisc_unthrottled($p8);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $p54 := qdisc_root($p8);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} __netif_schedule($p54);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i38 := ktime_set(0, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, $p39, $i38);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.23;
    cmdloc_dummy_var_9 := $M.23;
    call {:si_unique_call 195} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p40, $p41, 8, $zext.i32.i64(8), 0 == 1);
    $M.23 := cmdloc_dummy_var_10;
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.23, $p42);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i9, $i14);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i45 := $shl.i64($i44, 6);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i43, $i45);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p2);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $M.23 := $store.i64($M.23, $p47, $i46);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p2);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.23;
    cmdloc_dummy_var_12 := $M.23;
    call {:si_unique_call 196} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p48, $p49, 8, $zext.i32.i64(8), 0 == 1);
    $M.23 := cmdloc_dummy_var_13;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 680), 904)), $mul.ref(688, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.23, $p51);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vslice_dummy_var_58 := hrtimer_start($p50, $i52, 0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i11, 0;
    goto $bb4;

  $bb4:
    call $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i15, $i16, $i36 := cbq_undelay_loop_$bb4($p4, $p5, $i9, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i15, $i16, $i36);
    goto $bb4_last;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $xor.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i19 := ffz($i18);
    call {:si_unique_call 189} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    call {:si_unique_call 190} {:cexpr "prio"} boogie_si_record_i32($i20);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32(1, $i20);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i22 := $xor.i32($i21, $sub.i32(0, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $i15);
    call {:si_unique_call 191} {:cexpr "pmask"} boogie_si_record_i32($i23);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i24 := cbq_undelay_prio($p5, $i20, $i9);
    call {:si_unique_call 193} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i64($i24, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i16;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i23, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i14 := $i36;
    goto $bb3;

  $bb15:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i15, $i16 := $i23, $i34;
    goto $bb15_dummy;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 680), 904)), $mul.ref(680, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32(1, $i20);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i27, $i28);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 680), 904)), $mul.ref(680, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i31 := $slt.i64($i24, $i16);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i31 == 1);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i16, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i16;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb14;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i33 := $i24;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb9;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1559;
}



const cbq_link_class: ref;

axiom cbq_link_class == $sub.ref(0, 83100);

procedure cbq_link_class($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_link_class($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p3 := qdisc_priv($p2);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p0);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(0, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(0, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} qdisc_class_hash_insert($p8, $p9);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cbq_set_lss: ref;

axiom cbq_set_lss == $sub.ref(0, 84132);

procedure cbq_set_lss($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_set_lss($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 32);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 8);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 4);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 16);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb22:
    assume $i68 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(56, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i71);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i55 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, $i58);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i62);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i49 := $sub.i64(0, $i48);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i49);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(72, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(144, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(1, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p21 := $p23;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p21);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb8;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb5;
}



const cbq_addprio: ref;

axiom cbq_addprio == $sub.ref(0, 85164);

procedure cbq_addprio($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_addprio($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(24, 1)), $mul.ref($i5, 4));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(24, 1)), $mul.ref($i13, 4));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i9);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(60, 1)), $mul.ref($i19, 4));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(120, 1));
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i22, $i25);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(60, 1)), $mul.ref($i30, 4));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i26);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} cbq_normalize_quanta($p0, $i35);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    return;
}



const cbq_normalize_quanta: ref;

axiom cbq_normalize_quanta == $sub.ref(0, 86196);

procedure cbq_normalize_quanta($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_normalize_quanta($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i64;
  var $i76: i1;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i64;
  var $p91: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p26: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i11: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} {:cexpr "cbq_normalize_quanta:arg:prio"} boogie_si_record_i32($i1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(60, 1)), $mul.ref($i2, 4));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 0);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $p17, $p18, $i19, $i20, $p21, $p22, $p23, $i24, $i25, $p27, $i28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $p38, $i39, $i40, $i41, $i42, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $p53, $i54, $p55, $i56, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $p78, $i79, $p80, $i81, $p83, $p84, $p85, $p86, $i87, $i88, $i89, $i90, $p91, $p94, $p95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $p26, $i103, $i104, $i105, $i11, vslice_dummy_var_59, vslice_dummy_var_60 := cbq_normalize_quanta_loop_$bb8($p0, $i1, $p8, $p13, $p14, $i15, $p17, $p18, $i19, $i20, $p21, $p22, $p23, $i24, $i25, $p27, $i28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $p38, $i39, $i40, $i41, $i42, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $p53, $i54, $p55, $i56, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $p78, $i79, $p80, $i81, $p83, $p84, $p85, $p86, $i87, $i88, $i89, $i90, $p91, $p94, $p95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $p26, $i103, $i104, $i105, $i11, vslice_dummy_var_59, vslice_dummy_var_60);
    goto $bb8_last;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i11);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 8)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i103 := $add.i32($i11, 1);
    call {:si_unique_call 210} {:cexpr "h"} boogie_si_record_i32($i103);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p8);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i105 := $ugt.i32($i104, $i103);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i105 == 1);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb33:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i103;
    goto $bb33_dummy;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    goto $bb16;

  $bb16:
    call $p27, $i28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $p38, $i39, $i40, $i41, $i42, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $p53, $i54, $p55, $i56, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $p78, $i79, $p80, $i81, $p83, $p84, $p85, $p86, $i87, $i88, $i89, $i90, $p91, $p94, $p95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $p26, vslice_dummy_var_59, vslice_dummy_var_60 := cbq_normalize_quanta_loop_$bb16($p0, $i1, $p27, $i28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $p38, $i39, $i40, $i41, $i42, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $p53, $i54, $p55, $i56, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $i65, $p66, $p67, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $i76, $p78, $i79, $p80, $i81, $p83, $p84, $p85, $p86, $i87, $i88, $i89, $i90, $p91, $p94, $p95, $i96, $i97, $p98, $p99, $p100, $i101, $i102, $p26, vslice_dummy_var_59, vslice_dummy_var_60);
    goto $bb16_last;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, $i1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i51 := $sle.i64($i50, 0);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p69 := qdisc_dev($p68);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p69, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i74 := $mul.i32($i73, 32);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i64($i71, $i75);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $p100 := $0.ref;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i102 == 1);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb30:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $p26 := $p100;
    goto $bb30_dummy;

  $bb27:
    assume $i97 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p95);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p100 := $p99;
    goto $bb29;

  $bb24:
    assume $i76 == 1;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} vslice_dummy_var_60 := printk.ref.i32.i64(.str.3, $i79, $i81);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p85 := qdisc_dev($p84);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i88 := $udiv.i32($i87, 2);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i89);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p91, $i90);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_59 := printk.ref.i32.i64(.str.3, $i54, $i56);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p60 := qdisc_dev($p59);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i63 := $udiv.i32($i62, 2);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, 1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i65);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(120, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(104, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i35 := $mul.i64($i32, $i34);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(24, 1)), $mul.ref($i36, 4));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i41 := $mul.i64($i35, $i40);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(60, 1)), $mul.ref($i42, 4));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i47 := $sdiv.i64($i41, $i46);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i47);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p18);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  $bb33_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;
}



const printk: ref;

axiom printk == $sub.ref(0, 87228);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 1} true;
    call {:si_unique_call 211} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 212} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64($p0: ref, p.1: i32, p.2: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 213} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 214} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const qdisc_class_hash_insert: ref;

axiom qdisc_class_hash_insert == $sub.ref(0, 88260);

procedure qdisc_class_hash_insert($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qdisc_class_hash_insert($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    return;
}



const ffz: ref;

axiom ffz == $sub.ref(0, 89292);

procedure ffz($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ffz($i0: i64) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} {:cexpr "ffz:arg:word"} boogie_si_record_i64($i0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i1 := $xor.i64($i0, $sub.i64(0, 1));
    call {:si_unique_call 216} $i2 := devirtbounce.2(0, $i1);
    call {:si_unique_call 217} {:cexpr "word"} boogie_si_record_i64($i2);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cbq_undelay_prio: ref;

axiom cbq_undelay_prio == $sub.ref(0, 90324);

procedure cbq_undelay_prio($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_undelay_prio($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p47: ref;
  var $i48: i64;
  var $i55: i64;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} {:cexpr "cbq_undelay_prio:arg:prio"} boogie_si_record_i32($i1);
    call {:si_unique_call 219} {:cexpr "cbq_undelay_prio:arg:now"} boogie_si_record_i64($i2);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i3, 8));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 220} {:cexpr "cbq_undelay_prio:arg:sched"} boogie_si_record_i64($i2);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10, $i11 := $p6, $i2;
    goto $bb5;

  $bb5:
    call $p10, $i11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $p23, $p24, $i25, $p27, $p28, $i29, $i30, $i31, $i32, $p34, $i35, $p37, $p38, $i39, $i40, $i41, $p45, $p46, $p49, $i50, $i51, $p52, $i53, $i54, $p47, $i48, $i55, $i56, $p58, $p59, $i60, $i61, $i62 := cbq_undelay_prio_loop_$bb5($p0, $i1, $i2, $p10, $i11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $p21, $i22, $p23, $p24, $i25, $p27, $p28, $i29, $i30, $i31, $i32, $p34, $i35, $p37, $p38, $i39, $i40, $i41, $p45, $p46, $p49, $i50, $i51, $p52, $i53, $i54, $p47, $i48, $i55, $i56, $p58, $p59, $i60, $i61, $i62);
    goto $bb5_last;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(232, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, $i2);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(232, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i11);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i54 := $i11;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p47, $i48 := $p13, $i54;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p47);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i1);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i56, 8));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i55, $i60);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i62 := $i48;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i63 := $sub.i64($i62, $i2);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i9 := $i63;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb18:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $p10, $i11 := $p47, $i48;
    goto $bb18_dummy;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(232, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    call {:si_unique_call 222} {:cexpr "sched"} boogie_si_record_i64($i53);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb17;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(193, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} cbq_activate_class($p13);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i25, 8));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p13);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i29, $i30);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p10, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p47, $i48 := $p46, $i11;
    goto $bb14;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i1);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i32, 8));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p10);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i1);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i35, 8));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p13);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i39, $i40);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i41 == 1;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i42, 8));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1952;
}



const ktime_set: ref;

axiom ktime_set == $sub.ref(0, 91356);

procedure ktime_set($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.24, $CurrAddr;



implementation ktime_set($i0: i64, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 226} {:cexpr "ktime_set:arg:secs"} boogie_si_record_i64($i0);
    call {:si_unique_call 227} {:cexpr "ktime_set:arg:nsecs"} boogie_si_record_i64($i1);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i64($i0, 9223372035);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 229} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i0, 1000000000);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i1);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p15, $i14);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.24;
    cmdloc_dummy_var_18 := $M.24;
    call {:si_unique_call 231} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p16, $p17, 8, $zext.i32.i64(8), 0 == 1);
    $M.24 := cmdloc_dummy_var_19;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.24, $p18);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p10, 9223372036854775807);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.24;
    cmdloc_dummy_var_15 := $M.24;
    call {:si_unique_call 230} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p11, $p12, 8, $zext.i32.i64(8), 0 == 1);
    $M.24 := cmdloc_dummy_var_16;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hrtimer_start: ref;

axiom hrtimer_start == $sub.ref(0, 92388);

procedure hrtimer_start($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $CurrAddr;



implementation hrtimer_start($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p4, $i1);
    call {:si_unique_call 233} {:cexpr "hrtimer_start:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 235} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const qdisc_unthrottled: ref;

axiom qdisc_unthrottled == $sub.ref(0, 93420);

procedure qdisc_unthrottled($p0: ref);
  free requires assertsPassed;



implementation qdisc_unthrottled($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(128, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} clear_bit(2, $p1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_root: ref;

axiom qdisc_root == $sub.ref(0, 94452);

procedure qdisc_root($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_root($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(88, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 95484);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 96516);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 238} devirtbounce.3(0, $p1, $i0, $p1);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    return;
}



const cbq_activate_class: ref;

axiom cbq_activate_class == $sub.ref(0, 97548);

procedure cbq_activate_class($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_activate_class($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p3 := qdisc_priv($p2);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 240} {:cexpr "prio"} boogie_si_record_i32($i7);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i8, 8));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i7);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i12, 8));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p0);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p11);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(552, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32(1, $i7);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i23, $i24);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(552, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nla_len: ref;

axiom nla_len == $sub.ref(0, 98580);

procedure nla_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 4));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_parse: ref;

axiom nla_parse == $sub.ref(0, 99612);

procedure nla_parse($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_parse($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} {:cexpr "nla_parse:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 242} {:cexpr "nla_parse:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 244} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const cbq_deactivate_class: ref;

axiom cbq_deactivate_class == $sub.ref(0, 100644);

procedure cbq_deactivate_class($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_deactivate_class($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p17: ref;
  var $p18: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i64;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p19: ref;
  var $i57: i64;
  var $i58: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p3 := qdisc_priv($p2);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 246} {:cexpr "prio"} boogie_si_record_i32($i7);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i8, 8));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p17, $p18 := $p11, $p13;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p19 := $p13;
    goto $bb4;

  $bb4:
    call $p20, $p21, $p22, $i23, $i24, $p25, $p26, $p19, $i57, $i58, $p60, $p61, $i62, $i63 := cbq_deactivate_class_loop_$bb4($p4, $i7, $i15, $p20, $p21, $p22, $i23, $i24, $p25, $p26, $p19, $i57, $i58, $p60, $p61, $i62, $i63);
    goto $bb4_last;

  $bb15:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p19);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i7);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i58, 8));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i57, $i62);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, $i15);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p20, $p22;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $p19 := $p22;
    goto $bb7_dummy;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p17, $p18 := $p25, $p26;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p17, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $0.ref);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i7);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i31, 8));
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p18);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i35, $i36);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i7);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i38, 8));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p17);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i7);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i41, 8));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p18);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i45, $i46);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i7);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i48, 8));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(552, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32(1, $i7);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i54 := $xor.i32($i53, $sub.i32(0, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i52, $i54);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(552, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;
}



const qdisc_l2t: ref;

axiom qdisc_l2t == $sub.ref(0, 101676);

procedure qdisc_l2t($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation qdisc_l2t($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i32: i64;
  var $p34: ref;
  var $i35: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "qdisc_l2t:arg:pktlen"} boogie_si_record_i32($i1);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1056)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i5 := $sext.i16.i32($i4);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, $i1);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1056)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i6, $i10);
    call {:si_unique_call 248} {:cexpr "slot"} boogie_si_record_i32($i11);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1056)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i18 := $ashr.i32($i13, $i17);
    call {:si_unique_call 249} {:cexpr "slot"} boogie_si_record_i32($i18);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, 255);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i18);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1056)), $mul.ref(12, 1)), $mul.ref($i32, 4));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i31 := $i35;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1056)), $mul.ref(12, 1)), $mul.ref(255, 4));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i23 := $ashr.i32($i18, 8);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i22, $i23);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i18, 255);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1056)), $mul.ref(12, 1)), $mul.ref($i26, 4));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i24, $i29);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const cbq_update: ref;

axiom cbq_update == $sub.ref(0, 102708);

procedure cbq_update($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_update($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i32: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p8: ref;
  var $p91: ref;
  var $p92: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(640, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(656, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 250} {:cexpr "len"} boogie_si_record_i32($i4);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(640, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p2);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(648, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} cbq_update_toplevel($p0, $p2, $p92);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p8 := $p2;
    goto $bb4;

  $bb4:
    call $p9, $i10, $p12, $i13, $i14, $p16, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $i31, $p33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i32, $i45, $p46, $i47, $i48, $p49, $i50, $i51, $p52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $p72, $i73, $i74, $p75, $p76, $p77, $i78, $i79, $p80, $i81, $p82, $p83, $p84, $i85, $p86, $p87, $p88, $i89, $i90, $p8 := cbq_update_loop_$bb4($p0, $i4, $p9, $i10, $p12, $i13, $i14, $p16, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $p26, $i27, $i28, $i29, $p30, $i31, $p33, $p34, $i35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $i32, $i45, $p46, $i47, $i48, $p49, $i50, $i51, $p52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $i60, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $p72, $i73, $i74, $p75, $p76, $p77, $i78, $i79, $p80, $i81, $p82, $p83, $p84, $i85, $p86, $p87, $p88, $i89, $i90, $p8);
    goto $bb4_last;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    call {:si_unique_call 251} {:cexpr "avgidle"} boogie_si_record_i64($i10);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 1);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i14);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i4);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i19, $i20);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i21);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(200, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64($i25, $i27);
    call {:si_unique_call 252} {:cexpr "idle"} boogie_si_record_i64($i28);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64($i28, 134217728);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i35 := qdisc_l2t($p34, $i4);
    call {:si_unique_call 255} {:cexpr "tmp"} boogie_si_record_i32($i35);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64($i28, $i36);
    call {:si_unique_call 256} {:cexpr "idle"} boogie_si_record_i64($i37);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i42 := $ashr.i64($i10, $i41);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i43 := $sub.i64($i37, $i42);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i10);
    call {:si_unique_call 257} {:cexpr "avgidle"} boogie_si_record_i64($i44);
    assume {:verifier.code 0} true;
    $i32 := $i44;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i45 := $sle.i64($i32, 0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i45 == 1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i79 := $slt.i64($i78, $i32);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i79 == 1);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i32);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(200, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p86, $i85);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(144, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i90 == 1);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p88;
    goto $bb18_dummy;

  $bb15:
    assume $i79 == 1;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p82, $i81);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i45 == 1;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i64($i47, $i32);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i32;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i51);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i53 := $sub.i64(0, $i51);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i54 := $sub.i64(0, $i51);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i59 := $ashr.i64($i54, $i58);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i60 := $sub.i64($i53, $i59);
    call {:si_unique_call 259} {:cexpr "idle"} boogie_si_record_i64($i60);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(80, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i64 := qdisc_l2t($p63, $i4);
    call {:si_unique_call 261} {:cexpr "tmp___0"} boogie_si_record_i32($i64);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i66 := $sub.i64($i60, $i65);
    call {:si_unique_call 262} {:cexpr "idle"} boogie_si_record_i64($i66);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $i69 := qdisc_l2t($p68, $i4);
    call {:si_unique_call 264} {:cexpr "tmp___1"} boogie_si_record_i32($i69);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i71 := $add.i64($i70, $i66);
    call {:si_unique_call 265} {:cexpr "idle"} boogie_si_record_i64($i71);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i73 := $load.i64($M.0, $p72);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, $i71);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, $i74);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    call {:si_unique_call 258} {:cexpr "avgidle"} boogie_si_record_i64($i50);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb13;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    call {:si_unique_call 253} {:cexpr "avgidle"} boogie_si_record_i64($i31);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb8;

  $bb18_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2223;
}



const cbq_dequeue_1: ref;

axiom cbq_dequeue_1 == $sub.ref(0, 103740);

procedure cbq_dequeue_1($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.32, $M.33, $M.22, $M.34, $M.35, $M.23, $CurrAddr, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation cbq_dequeue_1($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i20: i1;
  var $i7: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p1 := qdisc_priv($p0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 904)), $mul.ref(552, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 255);
    call {:si_unique_call 268} {:cexpr "activemask"} boogie_si_record_i32($i5);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $p18, $i20, $i7 := cbq_dequeue_1_loop_$bb4($p0, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $p15, $i16, $i17, $p18, $i20, $i7);
    goto $bb4_last;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $xor.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i10 := ffz($i9);
    call {:si_unique_call 270} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 271} {:cexpr "prio"} boogie_si_record_i32($i11);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32(1, $i11);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i13 := $xor.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $i7);
    call {:si_unique_call 272} {:cexpr "activemask"} boogie_si_record_i32($i14);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p15 := cbq_dequeue_prio($p0, $i11);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p18 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i14;
    goto $bb10_dummy;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;
}



const qdisc_bstats_update: ref;

axiom qdisc_bstats_update == $sub.ref(0, 104772);

procedure qdisc_bstats_update($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation qdisc_bstats_update($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(232, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} bstats_update($p2, $p1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_watchdog_schedule: ref;

axiom qdisc_watchdog_schedule == $sub.ref(0, 105804);

procedure qdisc_watchdog_schedule($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation qdisc_watchdog_schedule($p0: ref, $i1: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} {:cexpr "qdisc_watchdog_schedule:arg:expires"} boogie_si_record_i64($i1);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i2 := $shl.i64($i1, 6);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} qdisc_watchdog_schedule_ns($p0, $i2);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_watchdog_schedule_ns: ref;

axiom qdisc_watchdog_schedule_ns == $sub.ref(0, 106836);

procedure qdisc_watchdog_schedule_ns($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation qdisc_watchdog_schedule_ns($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} {:cexpr "qdisc_watchdog_schedule_ns:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    return;
}



const bstats_update: ref;

axiom bstats_update == $sub.ref(0, 107868);

procedure bstats_update($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation bstats_update($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i2 := qdisc_pkt_len($p1);
    call {:si_unique_call 279} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i2);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i4, $i5);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i6);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i8 := skb_is_gso($p1);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 281} {:cexpr "tmp___3"} boogie_si_record_i8($i9);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $i16);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p11 := skb_end_pointer($p1);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    call {:si_unique_call 283} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const qdisc_pkt_len: ref;

axiom qdisc_pkt_len == $sub.ref(0, 108900);

procedure qdisc_pkt_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation qdisc_pkt_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p1 := qdisc_skb_cb($p0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 28)), $mul.ref(0, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_is_gso: ref;

axiom skb_is_gso == $sub.ref(0, 109932);

procedure skb_is_gso($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p1 := skb_end_pointer($p0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 110964);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const qdisc_skb_cb: ref;

axiom qdisc_skb_cb == $sub.ref(0, 111996);

procedure qdisc_skb_cb($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_skb_cb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const cbq_dequeue_prio: ref;

axiom cbq_dequeue_prio == $sub.ref(0, 113028);

procedure cbq_dequeue_prio($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.32, $M.33, $M.22, $M.34, $M.35, $M.23, $CurrAddr, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation cbq_dequeue_prio($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $i79: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i64;
  var $i88: i64;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $i112: i64;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i127: i64;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i1;
  var $p149: ref;
  var $i150: i64;
  var $p152: ref;
  var $p90: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} {:cexpr "cbq_dequeue_prio:arg:prio"} boogie_si_record_i32($i1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $p2 := qdisc_priv($p0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i4, 8));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p10, $p11, $p12 := $p7, $p7, $p9;
    goto $bb1;

  $bb1:
    call $p10, $p11, $p12, $p13, $p14, $p15, $i16, $p17, $p18, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $p30, $i31, $p32, $i33, $i34, $p35, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p91, $p92, $p94, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $p102, $p103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i127, $p129, $p130, $p131, $p132, $p134, $i135, $i136, $p137, $p138, $p36, $p37, $i38, $p139, $p140, $i141, $i142, $i143, $p144, $p145, $i146, $p147, $i148, $p149 := cbq_dequeue_prio_loop_$bb1($i1, $p3, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $p17, $p18, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $p30, $i31, $p32, $i33, $i34, $p35, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p91, $p92, $p94, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $p102, $p103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i127, $p129, $p130, $p131, $p132, $p134, $i135, $i136, $p137, $p138, $p36, $p37, $i38, $p139, $p140, $i141, $i142, $i143, $p144, $p145, $i146, $p147, $i148, $p149);
    goto $bb1_last;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16 := $p10, $p11, $p12, 0;
    goto $bb2;

  $bb2:
    call $p13, $p14, $p15, $i16, $p17, $p18, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $p30, $i31, $p32, $i33, $i34, $p35, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p91, $p92, $p94, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $p102, $p103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i127, $p129, $p130, $p131, $p132, $p134, $i135, $i136, $p137, $p138, $p36, $p37, $i38, $p139, $p140, $i141, $i142, $i143, $p144, $p145, $i146, $p147 := cbq_dequeue_prio_loop_$bb2($i1, $p3, $p13, $p14, $p15, $i16, $p17, $p18, $p20, $i21, $i22, $p23, $i24, $i25, $p26, $p27, $i28, $i29, $p30, $i31, $p32, $i33, $i34, $p35, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p91, $p92, $p94, $i95, $i96, $p97, $i98, $i99, $i100, $p101, $p102, $p103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i127, $p129, $p130, $p131, $p132, $p134, $i135, $i136, $p137, $p138, $p36, $p37, $i38, $p139, $p140, $i141, $i142, $i143, $p144, $p145, $i146, $p147);
    goto $bb2_last;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p26 := $p15;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i29 := $sle.i64($i28, 0);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    call {:si_unique_call 289} $p45 := devirtbounce($p42, $p44);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p48, $p49, $p50 := $p15, $p26, $p45;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i51 := qdisc_pkt_len($p50);
    call {:si_unique_call 291} {:cexpr "tmp___0"} boogie_si_record_i32($i51);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p48, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i51);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i55 := $sub.i64($i53, $i54);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p48, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i55);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(640, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $p48);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(648, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p49);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p49);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p48);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i59, $i60);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i74 := qdisc_pkt_len($p50);
    call {:si_unique_call 293} {:cexpr "tmp___1"} boogie_si_record_i32($i74);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(656, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p48, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i78 := $sle.i64($i77, 0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p90 := $p50;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $r := $p90;
    return;

  $bb20:
    assume $i78 == 1;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i79, 8));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p48);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p48, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.0, $p84);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p83, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i85, $i87);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p83, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p89, $i88);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i61 == 1;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 1);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 1);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(0, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i71);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p92, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 0);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i96 == 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, $i1);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $p137, $p138 := $p13, $p15;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p36, $p37, $i38 := $p137, $p138, $i16;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p37);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p36);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i141, $i142);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p144, $p145, $i146, $p147 := $p36, $p37, $i38, $p140;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i146, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p149 := $p145;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i1);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i150, 8));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p152, $p149);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p90 := $0.ref;
    goto $bb23;

  $bb45:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $p10, $p11, $p12 := $p144, $p145, $p147;
    goto $bb45_dummy;

  $bb42:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16 := $p36, $p37, $p140, $i38;
    goto $bb42_dummy;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p14, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $p102);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $0.ref);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p15);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p13);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i105, $i106);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $p130 := $p13;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p132, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p137, $p138 := $p130, $p14;
    goto $bb41;

  $bb38:
    assume $i136 == 1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} cbq_activate_class($p15);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb29:
    assume $i107 == 1;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p15);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p14);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i108, $i109);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p111 := $p15;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i127, 8));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p129, $p14);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p130 := $p14;
    goto $bb37;

  $bb31:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i1);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref($i112, 8));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p114, $0.ref);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(552, 1));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i117 := $shl.i32(1, $i1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i118 := $xor.i32($i117, $sub.i32(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i116, $i118);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(552, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p120, $i119);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p111, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p90 := $0.ref;
    goto $bb23;

  $bb33:
    assume $i126 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} cbq_activate_class($p111);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb25;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i31, $i33);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i34);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p36, $p37, $i38 := $p13, $p15, 1;
    goto $bb12;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p23 := cbq_under_limit($p15);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    goto $bb9;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb42_dummy:
    assume false;
    return;

  $bb2_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  $bb45_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2433;
}



const cbq_under_limit: ref;

axiom cbq_under_limit == $sub.ref(0, 114060);

procedure cbq_under_limit($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.32, $M.33, $M.22, $M.34, $M.35, $M.23, $CurrAddr, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation cbq_under_limit($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p23: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p46: ref;
  var $p52: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p3 := qdisc_priv($p2);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i17 := $uge.i64($i14, $i16);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p23 := $p20;
    goto $bb14;

  $bb14:
    call $p24, $p25, $p26, $i27, $i28, $p23, $p37, $i38, $i39, $p40, $i41, $i42, $p43, $i44, $i45, $p47, $i48, $p49, $i50, $i51, $p46 := cbq_under_limit_loop_$bb14($p4, $p24, $p25, $p26, $i27, $i28, $p23, $p37, $i38, $i39, $p40, $i41, $i42, $p43, $i44, $i45, $p47, $i48, $p49, $i50, $i51, $p46);
    goto $bb14_last;

  $bb18:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p23, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i39, $i41);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p23, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p46 := $p23;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p46, $mul.ref(0, 456)), $mul.ref(193, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p9 := $p46;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb22:
    assume $i45 == 1;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p23, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i51 := $ult.i64($i48, $i50);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p24, $p46 := $p23, $p23;
    assume true;
    goto $bb15, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb24;

  $bb15:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $p23 := $p26;
    goto $bb17_dummy;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(256, 1)), $mul.ref(16, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(256, 1)), $mul.ref(16, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(88, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    call {:si_unique_call 297} devirtbounce.4($p36, $p0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(193, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;
}



const cbq_update_toplevel: ref;

axiom cbq_update_toplevel == $sub.ref(0, 115092);

procedure cbq_update_toplevel($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_update_toplevel($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p20: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $p21: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i6, $i9);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 1);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p20 := $p2;
    assume {:branchcond $i19} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p21 := $p2;
    goto $bb11;

  $bb11:
    call $p22, $p23, $i24, $i25, $p26, $p21, $p31, $p32, $i33, $i34 := cbq_update_toplevel_loop_$bb11($p22, $p23, $i24, $i25, $p26, $p21, $p31, $p32, $i33, $i34);
    goto $bb11_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p22 := $p32;
    assume true;
    goto $bb12, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb12:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p26 := $p22;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p21 := $p22;
    goto $bb14_dummy;

  $bb13:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p20 := $p26;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb14_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;
}



const cbq_classify: ref;

axiom cbq_classify == $sub.ref(0, 116124);

procedure cbq_classify($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation cbq_classify($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p27: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p46: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p28: ref;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i64;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p4 := qdisc_priv($p1);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(120, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 300} {:cexpr "prio"} boogie_si_record_i32($i8);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i11 := $xor.i32($i10, $i8);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, $sub.i32(0, 65536));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 131072);
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(328, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(312, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p24 := $p6;
    assume {:branchcond $i23} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i23 == 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p25, $p26 := $p18, $p6;
    goto $bb11;

  $bb11:
    call $p27, $p25, $p26, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $p36, $i37, $i38, $p39, $i40, $i41, $i42, $p43, $i44, $p45, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p46, $i57, $i58, $p59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p77, $i78, $i79, $i80, $p81, $p82, $p84, $p85, $i86, $i87 := cbq_classify_loop_$bb11($p0, $p3, $p5, $p27, $p25, $p26, $p29, $p30, $i31, $i32, $p33, $p34, $i35, $p36, $i37, $i38, $p39, $i40, $i41, $i42, $p43, $i44, $p45, $p47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p46, $i57, $i58, $p59, $p60, $p61, $i62, $i63, $p64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $p75, $p77, $i78, $i79, $i80, $p81, $p82, $p84, $p85, $i86, $i87);
    goto $bb11_last;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i31 := tc_classify_compat($p0, $p30, $p3);
    call {:si_unique_call 303} {:cexpr "result"} boogie_si_record_i32($i31);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p33 := $p26;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.26, $p34);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p36 := $i2p.i64.ref($i35);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $p60 := $p36;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i67 := $sge.i32($i63, $i66);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p68 := $p26;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i31, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i31, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p60, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p81 := $p60;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p60, $mul.ref(0, 456)), $mul.ref(328, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p60, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p27 := $p60;
    assume true;
    goto $bb12, $bb53;

  $bb53:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $p25, $p26 := $p82, $p60;
    goto $bb53_dummy;

  $bb12:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p24 := $p27;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p28 := $p24;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i8, $sub.i32(0, 65536));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $p103 := $p28;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p17 := $p103;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb54:
    assume $i89 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i8, 15);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i91 := $zext.i32.i64($i90);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref($i91, 8));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i96 := $eq.i64($i95, 0);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $p102 := $p94;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p103 := $p102;
    goto $bb62;

  $bb56:
    assume $i96 == 1;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(0, 8));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p102 := $p99;
    goto $bb61;

  $bb58:
    assume $i101 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p17 := $p28;
    goto $bb5;

  $bb50:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p17 := $p81;
    goto $bb5;

  $bb38:
    assume $i71 == 1;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p2, 65536);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb5;

  $bb36:
    assume $i70 == 1;
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb34:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb40;

  $bb43:
    assume $i73 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb41:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i31, 1);
    assume {:verifier.code 0} true;
    $p75 := $p60;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb40;

  $bb45:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p76 := cbq_reclassify($p0, $p75);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p17 := $p76;
    goto $bb5;

  $bb30:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p28 := $p68;
    goto $bb13;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.27, $p39);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, $sub.i32(0, 65536));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.27, $p47);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 15);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p25, $mul.ref($i50, 8));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $p56 := $p52;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p46 := $p56;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p46);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p59 := $p26;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p60 := $p46;
    goto $bb29;

  $bb26:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p28 := $p59;
    goto $bb13;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p25);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p56 := $p55;
    goto $bb25;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.27, $p43);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p45 := cbq_class_lookup($p5, $i44);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p46 := $p45;
    goto $bb22;

  $bb14:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p28 := $p33;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $p14 := cbq_class_lookup($p5, $i8);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p17 := $p14;
    goto $bb5;

  $bb53_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 117156);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_enqueue: ref;

axiom qdisc_enqueue == $sub.ref(0, 118188);

procedure qdisc_enqueue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21;



implementation qdisc_enqueue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} qdisc_calculate_pkt_len($p0, $p1);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(0, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 307} $i4 := devirtbounce.5($p3, $p0, $p1);
    call {:si_unique_call 308} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const cbq_mark_toplevel: ref;

axiom cbq_mark_toplevel == $sub.ref(0, 119220);

procedure cbq_mark_toplevel($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.22, $M.0, $CurrAddr;



implementation cbq_mark_toplevel($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p25: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $p26: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 309} {:cexpr "toplevel"} boogie_si_record_i32($i3);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, $i3);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i10 := qdisc_is_throttled($p9);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 311} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i15 := psched_get_time();
    call {:si_unique_call 313} {:cexpr "now"} boogie_si_record_i64($i15);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(672, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64($i15, $i17);
    call {:si_unique_call 314} {:cexpr "incr"} boogie_si_record_i64($i18);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, $i18);
    call {:si_unique_call 315} {:cexpr "now"} boogie_si_record_i64($i21);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i24 := $ult.i64($i23, $i21);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p25 := $p1;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p26 := $p1;
    goto $bb11;

  $bb11:
    call $p27, $p28, $i29, $i30, $p31, $p26, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $i43 := cbq_mark_toplevel_loop_$bb11($i3, $i21, $p27, $p28, $i29, $i30, $p31, $p26, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $i43);
    goto $bb11_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p37, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, $i3);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p27 := $p37;
    assume true;
    goto $bb12, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb19;

  $bb12:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i30 := $ult.i64($i29, $i21);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p31 := $p27;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $p26 := $p27;
    goto $bb14_dummy;

  $bb13:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p25 := $p31;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p25, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb9;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb5;

  $bb14_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;
}



const qdisc_is_throttled: ref;

axiom qdisc_is_throttled == $sub.ref(0, 120252);

procedure qdisc_is_throttled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation qdisc_is_throttled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(128, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 317} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 121284);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const qdisc_calculate_pkt_len: ref;

axiom qdisc_calculate_pkt_len == $sub.ref(0, 122316);

procedure qdisc_calculate_pkt_len($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qdisc_calculate_pkt_len($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(32, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i4 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 320} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p3);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} __qdisc_calculate_pkt_len($p0, $p3);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i7 := rcu_read_lock_bh_held();
    call {:si_unique_call 322} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} lockdep_rcu_suspicious(.str.1, 460, .str.2);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb3;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 123348);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 325} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 326} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_lock_bh_held: ref;

axiom rcu_read_lock_bh_held == $sub.ref(0, 124380);

procedure rcu_read_lock_bh_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_bh_held() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 327} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 328} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 125412);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    return;
}



const __qdisc_calculate_pkt_len: ref;

axiom __qdisc_calculate_pkt_len == $sub.ref(0, 126444);

procedure __qdisc_calculate_pkt_len($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __qdisc_calculate_pkt_len($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    return;
}



const cbq_class_lookup: ref;

axiom cbq_class_lookup == $sub.ref(0, 127476);

procedure cbq_class_lookup($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation cbq_class_lookup($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} {:cexpr "cbq_class_lookup:arg:classid"} boogie_si_record_i32($i1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(0, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p3 := qdisc_class_find($p2, $i1);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const tc_classify_compat: ref;

axiom tc_classify_compat == $sub.ref(0, 128508);

procedure tc_classify_compat($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tc_classify_compat($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 1} true;
    call {:si_unique_call 332} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 333} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cbq_reclassify: ref;

axiom cbq_reclassify == $sub.ref(0, 129540);

procedure cbq_reclassify($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation cbq_reclassify($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p6: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $i11, $i12, $i13, $i14, $p15, $p17, $p18, $i19, $i20, $p6 := cbq_reclassify_loop_$bb4($p1, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $p15, $p17, $p18, $i19, $i20, $p6);
    goto $bb4_last;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(0, 8));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p18;
    goto $bb13_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p9);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i12, $i13);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p15 := $p9;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb9:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2993;
}



const qdisc_class_find: ref;

axiom qdisc_class_find == $sub.ref(0, 130572);

procedure qdisc_class_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_class_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p18: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} {:cexpr "qdisc_class_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i4 := qdisc_class_hash($i1, $i3);
    call {:si_unique_call 336} {:cexpr "h"} boogie_si_record_i32($i4);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i4);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 8)), $mul.ref(0, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p18 := $p15;
    goto $bb7;

  $bb7:
    call $p19, $i20, $i21, $p22, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $i32, $i33, $p18 := qdisc_class_find_loop_$bb7($i1, $p19, $i20, $i21, $p22, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $i32, $i33, $p18);
    goto $bb7_last;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, $i1);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p22 := $p18;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $p31 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p31;
    goto $bb16_dummy;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p26);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p31 := $p30;
    goto $bb15;

  $bb9:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p10);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;
}



const qdisc_class_hash: ref;

axiom qdisc_class_hash == $sub.ref(0, 131604);

procedure qdisc_class_hash($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation qdisc_class_hash($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} {:cexpr "qdisc_class_hash:arg:id"} boogie_si_record_i32($i0);
    call {:si_unique_call 338} {:cexpr "qdisc_class_hash:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i0, 8);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i3 := $xor.i32($i2, $i0);
    call {:si_unique_call 339} {:cexpr "id"} boogie_si_record_i32($i3);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i3, 4);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i5 := $xor.i32($i4, $i3);
    call {:si_unique_call 340} {:cexpr "id"} boogie_si_record_i32($i5);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $i1);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const cbq_graft: ref;

axiom cbq_graft == $sub.ref(0, 132636);

procedure cbq_graft($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.30;



implementation cbq_graft($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p16: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} {:cexpr "cbq_graft:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i1);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(36, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.28, $p17);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $p2;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} sch_tree_lock($p0);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.28, $p22);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p23);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p24, $p16);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p3);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p3);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} qdisc_tree_decrease_qlen($p25, $i29);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p3);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} qdisc_reset($p30);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} sch_tree_unlock($p0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, cbq_reshape_fail);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(88, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.28, $p10);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $p12 := qdisc_create_dflt($p8, pfifo_qdisc_ops, $i11);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $p12;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 105);
    goto $bb5;
}



const cbq_leaf: ref;

axiom cbq_leaf == $sub.ref(0, 133668);

procedure cbq_leaf($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation cbq_leaf($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} {:cexpr "cbq_leaf:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.28, $p3);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const cbq_qlen_notify: ref;

axiom cbq_qlen_notify == $sub.ref(0, 134700);

procedure cbq_qlen_notify($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_qlen_notify($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} {:cexpr "cbq_qlen_notify:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.28, $p6);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} cbq_deactivate_class($p2);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cbq_get: ref;

axiom cbq_get == $sub.ref(0, 135732);

procedure cbq_get($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_get($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "cbq_get:arg:classid"} boogie_si_record_i32($i1);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p2 := qdisc_priv($p0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p4 := cbq_class_lookup($p3, $i1);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p4);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const cbq_put: ref;

axiom cbq_put == $sub.ref(0, 136764);

procedure cbq_put($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.30;



implementation cbq_put($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "cbq_put:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.28, $p3);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p6, $i5);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.28, $p7);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p10 := qdisc_root_sleeping_lock($p0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p11 := qdisc_priv($p0);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} spin_lock_bh($p10);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} spin_unlock_bh($p10);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} cbq_destroy_class($p0, $p2);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const cbq_change_class: ref;

axiom cbq_change_class == $sub.ref(0, 137796);

procedure cbq_change_class($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.30, assertsPassed;



implementation cbq_change_class($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;
  var $i171: i64;
  var $i172: i1;
  var $i173: i32;
  var $i175: i32;
  var $i176: i1;
  var $i158: i32;
  var $i177: i32;
  var $i174: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $i153: i32;
  var $p182: ref;
  var $i183: i1;
  var $p184: ref;
  var $i185: i64;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i64;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $i223: i64;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p228: ref;
  var $i229: i32;
  var $i230: i64;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $p238: ref;
  var $i239: i64;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p255: ref;
  var $i256: i8;
  var $i257: i32;
  var $i258: i1;
  var $p260: ref;
  var $i261: i8;
  var $p262: ref;
  var $p263: ref;
  var $i264: i64;
  var $i265: i1;
  var $p267: ref;
  var $i268: i64;
  var $p269: ref;
  var $p270: ref;
  var $i271: i32;
  var $i272: i1;
  var $p274: ref;
  var $i275: i32;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i64;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p287: ref;
  var $p288: ref;
  var $i289: i64;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $i299: i1;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p305: ref;
  var $i306: i64;
  var $i149: i32;
  var $i14: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 360} {:cexpr "cbq_change_class:arg:classid"} boogie_si_record_i32($i1);
    call {:si_unique_call 361} {:cexpr "cbq_change_class:arg:parentid"} boogie_si_record_i32($i2);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p6 := qdisc_priv($p0);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p4);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i8);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref(2, 8));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i16 := nla_parse_nested($p15, 7, $p11, cbq_policy);
    call {:si_unique_call 364} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p9);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(2, 8));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.2, $p122);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i125 := $eq.i64($i124, 0);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb65, $bb67;

  $bb67:
    assume !($i125 == 1);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(5, 8));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.2, $p126);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i128, 0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i129 == 1);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.2, $p130);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(5, 8));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.2, $p134);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p136 := nla_data($p135);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(6, 8));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.2, $p138);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p140 := qdisc_get_rtab($p137, $p139);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i142 := $eq.i64($i141, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i143 := $ne.i32($i1, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i143 == 1);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, $sub.i32(0, 65536));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i157 := $or.i32($i156, 32768);
    call {:si_unique_call 389} {:cexpr "classid"} boogie_si_record_i32($i157);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i158 := 0;
    goto $bb86;

  $bb86:
    call $p159, $i160, $i161, $p162, $p163, $i164, $i165, $p166, $p167, $i168, $i169, $p170, $i171, $i172, $i173, $i175, $i176, $i158, $i177 := cbq_change_class_loop_$bb86($p7, $i157, $p159, $i160, $i161, $p162, $p163, $i164, $i165, $p166, $p167, $i168, $i169, $p170, $i171, $i172, $i173, $i175, $i176, $i158, $i177);
    goto $bb86_last;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i160, 1);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, $i161);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i165 := $ugt.i32($i164, 32767);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i169 := $or.i32($i168, $i157);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p170 := cbq_class_lookup($p7, $i169);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i172 := $eq.i64($i171, 0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i173 := $i158;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i175 := $add.i32($i158, 1);
    call {:si_unique_call 393} {:cexpr "i"} boogie_si_record_i32($i175);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i176 := $sle.i32($i175, 32767);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i177 := $i175;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i174 := $i177;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i178 := $sgt.i32($i174, 32767);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i181 := $or.i32($i180, $i157);
    call {:si_unique_call 394} {:cexpr "classid"} boogie_si_record_i32($i181);
    assume {:verifier.code 0} true;
    $i153 := $i181;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i2, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    $p187 := $p182;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p188 := kzalloc(448, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i190 := $p2i.ref.i64($p189);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i191 := $eq.i64($i190, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p3, $mul.ref(5, 8));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p193);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i195 := $ne.i64($i194, 0);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p204, $p140);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p205, 1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(88, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p208 := qdisc_create_dflt($p207, pfifo_qdisc_ops, $i153);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $p208);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i213 := $eq.i64($i212, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, $i153);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p217, $p187);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p218, $p0);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p187, $mul.ref(0, 456)), $mul.ref(104, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i220 := $load.i64($M.0, $p219);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(104, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p221, $i220);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(104, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i223 := $load.i64($M.0, $p222);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p224, $i223);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p226, $mul.ref(0, 1056)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i230 := $zext.i32.i64($i229);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(120, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p231, $i230);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} sch_tree_lock($p0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} cbq_link_class($p189);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p234, $p233);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p236);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p238);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i240 := $ne.i64($i237, $i239);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} cbq_adjust_levels($p187);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p244, $sub.i64(0, 2147483647));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.2, $p245);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p247 := nla_data($p246);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vslice_dummy_var_66 := cbq_set_lss($p189, $p248);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(2, 8));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.2, $p250);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p252 := nla_data($p251);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p252);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_67 := cbq_set_wrr($p189, $p253);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i256 := $load.i8($M.0, $p255);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i256);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 0);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i264 := $load.i64($M.0, $p263);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i265 := $eq.i64($i264, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(72, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p270);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(88, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p277, cbq_ovl_classic);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(4, 8));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.2, $p278);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i280 := $p2i.ref.i64($p279);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i281 := $ne.i64($i280, 0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(7, 8));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.2, $p287);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i289 := $p2i.ref.i64($p288);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i290 := $ne.i64($i289, 0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.2, $p296);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i298 := $p2i.ref.i64($p297);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i299 := $ne.i64($i298, 0);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} sch_tree_unlock($p0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(0, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} qdisc_class_hash_grow($p0, $p305);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p189);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, $i306);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb137:
    assume $i299 == 1;
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.2, $p300);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $p302 := nla_data($p301);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p303 := $bitcast.ref.ref($p302);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} vslice_dummy_var_70 := cbq_set_fopt($p189, $p303);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb134:
    assume $i290 == 1;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(7, 8));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.2, $p291);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p293 := nla_data($p292);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p294 := $bitcast.ref.ref($p293);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_69 := cbq_set_police($p189, $p294);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb131:
    assume $i281 == 1;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(4, 8));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.2, $p282);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p284 := nla_data($p283);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p285 := $bitcast.ref.ref($p284);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_68 := cbq_set_overlimit($p189, $p285);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i272 == 1;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(72, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.0, $p274);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(72, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p276, $i275);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb125:
    assume $i265 == 1;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(48, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i268 := $load.i64($M.0, $p267);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p269, $i268);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i258 == 1;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(34, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.0, $p260);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p262, $i261);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i240 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(144, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p243, $p242);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume $i213 == 1;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p214, noop_qdisc);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb110:
    assume $i195 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p196 := qdisc_root_sleeping_lock($p0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(240, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p189, $mul.ref(0, 456)), $mul.ref(280, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($p3, $mul.ref(5, 8));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.0, $p199);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i201 := gen_new_estimator($p197, $p198, $p196, $p200);
    call {:si_unique_call 399} {:cexpr "err"} boogie_si_record_i32($i201);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 0);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i202 == 1;
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p189);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} kfree($p203);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i149 := $i201;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} qdisc_put_rtab($p140);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i14 := $i149;
    goto $bb3;

  $bb107:
    assume $i191 == 1;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i149 := $sub.i32(0, 105);
    goto $bb80;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i183 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p184 := cbq_class_lookup($p7, $i2);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p184);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i186 := $eq.i64($i185, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p187 := $p184;
    goto $bb106;

  $bb103:
    assume $i186 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i149 := $sub.i32(0, 22);
    goto $bb80;

  $bb98:
    assume $i178 == 1;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i149 := $sub.i32(0, 63);
    goto $bb80;

  $bb95:
    assume $i176 == 1;
    assume {:verifier.code 0} true;
    $i158 := $i175;
    goto $bb95_dummy;

  $bb91:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i174 := $i173;
    goto $bb93;

  $bb88:
    assume $i165 == 1;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, 1);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb76:
    assume $i143 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i146 := $xor.i32($i145, $i1);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, $sub.i32(0, 65536));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i148 == 1);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p150 := cbq_class_lookup($p7, $i1);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i153 := $i1;
    goto $bb85;

  $bb81:
    assume $i152 == 1;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i149 := $sub.i32(0, 22);
    goto $bb80;

  $bb78:
    assume $i148 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i149 := $sub.i32(0, 22);
    goto $bb80;

  $bb73:
    assume $i142 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i129 == 1;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb66;

  $bb62:
    assume $i121 == 1;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i2, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(5, 8));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.2, $p36);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $p49 := $0.ref;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p3, $mul.ref(5, 8));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} sch_tree_lock($p0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p49);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.2, $p70);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(2, 8));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.2, $p79);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(4, 8));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.2, $p88);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(7, 8));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.2, $p97);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.2, $p106);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} sch_tree_unlock($p0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb58:
    assume $i120 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} cbq_activate_class($p9);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i109 == 1;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.2, $p110);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p112 := nla_data($p111);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_65 := cbq_set_fopt($p9, $p113);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i100 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(7, 8));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.2, $p101);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p103 := nla_data($p102);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_64 := cbq_set_police($p9, $p104);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i91 == 1;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(4, 8));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.2, $p92);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p94 := nla_data($p93);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} vslice_dummy_var_63 := cbq_set_overlimit($p9, $p95);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i82 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} cbq_rmprio($p7, $p9);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(2, 8));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.2, $p83);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p85 := nla_data($p84);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_62 := cbq_set_wrr($p9, $p86);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i73 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.2, $p74);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p76 := nla_data($p75);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_61 := cbq_set_lss($p9, $p77);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i66 == 1;
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} qdisc_put_rtab($p68);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p49);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i64 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} cbq_deactivate_class($p9);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i53 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p54 := qdisc_root_sleeping_lock($p0);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(240, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(280, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p3, $mul.ref(5, 8));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i59 := gen_replace_estimator($p55, $p56, $p54, $p58);
    call {:si_unique_call 369} {:cexpr "err"} boogie_si_record_i32($i59);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i60 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} qdisc_put_rtab($p49);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i14 := $i59;
    goto $bb3;

  $bb25:
    assume $i39 == 1;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(5, 8));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p42 := nla_data($p41);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(6, 8));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.2, $p44);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p46 := qdisc_get_rtab($p43, $p45);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p49 := $p46;
    goto $bb30;

  $bb27:
    assume $i48 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb20;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, $i2);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb14;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb95_dummy:
    assume false;
    return;

  $bb86_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;
}



const cbq_delete: ref;

axiom cbq_delete == $sub.ref(0, 138828);

procedure cbq_delete($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.30;



implementation cbq_delete($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} {:cexpr "cbq_delete:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p2 := qdisc_priv($p0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i1);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(324, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p4);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} sch_tree_lock($p0);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 420} {:cexpr "qlen"} boogie_si_record_i32($i21);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} qdisc_reset($p23);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} qdisc_tree_decrease_qlen($p25, $i21);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(648, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p4);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i32, $i33);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(640, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p4);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i40, $i41);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p4);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i47, $i48);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} cbq_unlink_class($p4);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} cbq_adjust_levels($p52);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} cbq_sync_defmap($p4);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} cbq_rmprio($p3, $p4);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} sch_tree_unlock($p0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i55, 1);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(320, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 430} {:cexpr "tmp___0"} boogie_si_record_i64($i63);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb22:
    assume $i64 == 1;
    call {:si_unique_call 431} devirtbounce.6(0, .str, 1998, 12);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    call cbq_delete_loop_$bb24();
    goto $bb24_last;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $0.ref);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(640, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(648, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(640, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(648, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p36);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} cbq_deactivate_class($p4);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 16);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb24_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto $bb24_dummy;
}



const cbq_walk: ref;

axiom cbq_walk == $sub.ref(0, 139860);

procedure cbq_walk($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.28;



implementation cbq_walk($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p26: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p2 := qdisc_priv($p0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 0);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $p17, $p18, $i19, $i20, $p21, $p22, $p23, $i24, $i25, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p42, $i43, $i44, $p45, $p48, $p49, $i50, $i51, $p52, $p53, $p54, $i55, $i56, $p26, $i57, $i58, $i59, $i11 := cbq_walk_loop_$bb8($p0, $p1, $p3, $p8, $p13, $p14, $i15, $p17, $p18, $i19, $i20, $p21, $p22, $p23, $i24, $i25, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p42, $i43, $i44, $p45, $p48, $p49, $i50, $i51, $p52, $p53, $p54, $i55, $i56, $p26, $i57, $i58, $i59, $i11);
    goto $bb8_last;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i11);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 8)), $mul.ref(0, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i11, 1);
    call {:si_unique_call 435} {:cexpr "h"} boogie_si_record_i32($i57);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p8);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i58, $i57);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i59 == 1);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb31:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i57;
    goto $bb31_dummy;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    goto $bb16;

  $bb16:
    call $p27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p42, $i43, $i44, $p45, $p48, $p49, $i50, $i51, $p52, $p53, $p54, $i55, $i56, $p26 := cbq_walk_loop_$bb16($p0, $p1, $p27, $i28, $p29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p42, $i43, $i44, $p45, $p48, $p49, $i50, $i51, $p52, $p53, $p54, $i55, $i56, $p26);
    goto $bb16_last;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i28, $i30);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p26);
    call {:si_unique_call 433} $i39 := devirtbounce.7($p37, $p0, $i38, $p1);
    call {:si_unique_call 434} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $p54 := $0.ref;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i56 == 1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb28:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $p26 := $p54;
    goto $bb28_dummy;

  $bb25:
    assume $i51 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p49);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p54 := $p53;
    goto $bb27;

  $bb22:
    assume $i40 == 1;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p18);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3768;

  $bb31_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;
}



const cbq_find_tcf: ref;

axiom cbq_find_tcf == $sub.ref(0, 140892);

procedure cbq_find_tcf($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation cbq_find_tcf($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "cbq_find_tcf:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p2 := qdisc_priv($p0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i1);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 904)), $mul.ref(96, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p8 := $p7;
    goto $bb3;
}



const cbq_bind_filter: ref;

axiom cbq_bind_filter == $sub.ref(0, 141924);

procedure cbq_bind_filter($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_bind_filter($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $i18: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} {:cexpr "cbq_bind_filter:arg:parent"} boogie_si_record_i64($i1);
    call {:si_unique_call 439} {:cexpr "cbq_bind_filter:arg:classid"} boogie_si_record_i32($i2);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p3 := qdisc_priv($p0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i1);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p6 := cbq_class_lookup($p4, $i2);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p5);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(324, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(324, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p6);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb8;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.28, $p11);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i13, $i16);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb5;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb8;
}



const cbq_unbind_filter: ref;

axiom cbq_unbind_filter == $sub.ref(0, 142956);

procedure cbq_unbind_filter($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.28;



implementation cbq_unbind_filter($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} {:cexpr "cbq_unbind_filter:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(324, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.28, $p3);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 456)), $mul.ref(324, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p6, $i5);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    return;
}



const cbq_dump_class: ref;

axiom cbq_dump_class == $sub.ref(0, 143988);

procedure cbq_dump_class($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $CurrAddr;



implementation cbq_dump_class($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} {:cexpr "cbq_dump_class:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i1);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.28, $p5);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.28, $p17);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.28, $p20);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.28, $p22);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p25 := nla_nest_start($p2, 2);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i28 := cbq_dump_attr($p2, $p4);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i30 := nla_nest_end($p2, $p25);
    call {:si_unique_call 449} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} nla_nest_cancel($p2, $p25);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 1);
    goto $bb11;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.28, $p9);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.28, $p12);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cbq_dump_class_stats: ref;

axiom cbq_dump_class_stats == $sub.ref(0, 145020);

procedure cbq_dump_class_stats($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28;



implementation cbq_dump_class_stats($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "cbq_dump_class_stats:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p3 := qdisc_priv($p0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i1);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.28, $p6);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.28, $p9);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p12, $i10);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.28, $p13);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(8, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p17, $i15);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(12, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p19, 0);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.28, $p20);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(240, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i33 := gnet_stats_copy_basic($p2, $p32);
    call {:si_unique_call 453} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(240, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(280, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i38 := gnet_stats_copy_rate_est($p2, $p36, $p37);
    call {:si_unique_call 455} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(256, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i41 := gnet_stats_copy_queue($p2, $p40);
    call {:si_unique_call 457} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(296, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i45 := gnet_stats_copy_app($p2, $p44, 16);
    call {:si_unique_call 459} {:cexpr "tmp___3"} boogie_si_record_i32($i45);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i35 := $i45;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 1);
    goto $bb6;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 1);
    goto $bb6;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.28, $p23);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i25, $i28);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(12, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p31, $i29);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gnet_stats_copy_basic: ref;

axiom gnet_stats_copy_basic == $sub.ref(0, 146052);

procedure gnet_stats_copy_basic($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gnet_stats_copy_basic($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 1} true;
    call {:si_unique_call 460} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 461} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gnet_stats_copy_rate_est: ref;

axiom gnet_stats_copy_rate_est == $sub.ref(0, 147084);

procedure gnet_stats_copy_rate_est($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gnet_stats_copy_rate_est($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gnet_stats_copy_queue: ref;

axiom gnet_stats_copy_queue == $sub.ref(0, 148116);

procedure gnet_stats_copy_queue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gnet_stats_copy_queue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 1} true;
    call {:si_unique_call 464} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const sch_tree_lock: ref;

axiom sch_tree_lock == $sub.ref(0, 149148);

procedure sch_tree_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation sch_tree_lock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $p1 := qdisc_root_sleeping_lock($p0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} spin_lock_bh($p1);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_tree_decrease_qlen: ref;

axiom qdisc_tree_decrease_qlen == $sub.ref(0, 150180);

procedure qdisc_tree_decrease_qlen($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation qdisc_tree_decrease_qlen($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} {:cexpr "qdisc_tree_decrease_qlen:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    return;
}



const cbq_unlink_class: ref;

axiom cbq_unlink_class == $sub.ref(0, 151212);

procedure cbq_unlink_class($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_unlink_class($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p16: ref;
  var $p17: ref;
  var $p25: ref;
  var $p26: ref;
  var $p18: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i64;
  var vslice_dummy_var_71: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p3 := qdisc_priv($p2);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(0, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(0, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} qdisc_class_hash_remove($p5, $p6);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p0);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i56, $i57);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    call {:si_unique_call 471} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i59);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 473} {:cexpr "tmp___0"} boogie_si_record_i64($i63);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i59, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i66 := $zext.i1.i32($i65);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i66);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_71 := ldv__builtin_expect($i67, 0);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} warn_slowpath_null(.str, 1192);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p12, $p11;
    assume {:branchcond $i15} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p18 := $p12;
    goto $bb6;

  $bb6:
    call $p19, $p20, $i21, $i22, $p23, $p24, $p18, $p27, $p28, $i29, $p30, $p31, $i32, $i33 := cbq_unlink_class_loop_$bb6($p0, $i14, $p19, $p20, $i21, $i22, $p23, $p24, $p18, $p27, $p28, $i29, $p30, $p31, $i32, $i33);
    goto $bb6_last;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p18, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i29, $i32);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p28, $p27;
    assume true;
    goto $bb7, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i38, $i39);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p42);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i48, $i49);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $0.ref);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p19);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, $i14);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p23, $p24 := $p19, $p20;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p18 := $p19;
    goto $bb9_dummy;

  $bb8:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p16, $p17 := $p23, $p24;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p16, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p26);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;

  $bb9_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;
}



const cbq_adjust_levels: ref;

axiom cbq_adjust_levels == $sub.ref(0, 152244);

procedure cbq_adjust_levels($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_adjust_levels($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $p0;
    goto $bb5;

  $bb5:
    call $p3, $p4, $p5, $i6, $i7, $p8, $i9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35 := cbq_adjust_levels_loop_$bb5($p3, $p4, $p5, $i6, $i7, $p8, $i9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $i34, $i35);
    goto $bb5_last;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $i30);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p3 := $p33;
    goto $bb16_dummy;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p8, $i9 := $p5, 0;
    goto $bb8;

  $bb8:
    call $p8, $i9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25 := cbq_adjust_levels_loop_$bb8($p3, $p8, $i9, $p10, $i11, $i12, $i13, $p14, $i15, $i16, $i17, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25);
    goto $bb8_last;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, $i9);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i9;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i20, $i23);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i25 := $i17;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb15;

  $bb12:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9 := $p19, $i17;
    goto $bb12_dummy;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    call {:si_unique_call 476} {:cexpr "level"} boogie_si_record_i32($i16);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb11;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  $bb16_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;
}



const cbq_sync_defmap: ref;

axiom cbq_sync_defmap == $sub.ref(0, 153276);

procedure cbq_sync_defmap($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_sync_defmap($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i64;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p54: ref;
  var $i55: i32;
  var $i88: i32;
  var $i53: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i37: i32;
  var $i38: i32;
  var $i36: i32;
  var $i31: i32;
  var $i92: i32;
  var $i93: i1;
  var $i21: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p105: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $p117: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $p141: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i64;
  var $i159: i1;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $p165: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i64;
  var $i182: i64;
  var $i183: i1;
  var $p184: ref;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $p189: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i64;
  var $i195: i1;
  var $p196: ref;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $p201: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $p213: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i64;
  var $i218: i64;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $p225: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i64;
  var $i230: i64;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $p237: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i64;
  var $i242: i64;
  var $i243: i1;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i1;
  var $p249: ref;
  var $p251: ref;
  var $p252: ref;
  var $i253: i64;
  var $i254: i64;
  var $i255: i1;
  var $p256: ref;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var $p261: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i64;
  var $i266: i64;
  var $i267: i1;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $p273: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p3 := qdisc_priv($p2);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(0, 8));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i12, $i13);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(1, 8));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i97, $i98);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(2, 8));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i109 := $p2i.ref.i64($p108);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p0);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i109, $i110);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(3, 8));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i121, $i122);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(4, 8));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i135 := $eq.i64($i133, $i134);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(5, 8));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i146 := $p2i.ref.i64($p0);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i147 := $eq.i64($i145, $i146);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(6, 8));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i158 := $p2i.ref.i64($p0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i159 := $eq.i64($i157, $i158);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(7, 8));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p168);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i171 := $eq.i64($i169, $i170);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(8, 8));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p0);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i183 := $eq.i64($i181, $i182);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(9, 8));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p0);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i195 := $eq.i64($i193, $i194);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(10, 8));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i207 := $eq.i64($i205, $i206);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(11, 8));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i217 := $p2i.ref.i64($p216);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p0);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i219 := $eq.i64($i217, $i218);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(12, 8));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i229 := $p2i.ref.i64($p228);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i230 := $p2i.ref.i64($p0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i231 := $eq.i64($i229, $i230);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(13, 8));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i241 := $p2i.ref.i64($p240);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($p0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i243 := $eq.i64($i241, $i242);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i243 == 1);
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(14, 8));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i253 := $p2i.ref.i64($p252);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p0);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i255 := $eq.i64($i253, $i254);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(15, 8));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.0, $p263);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i265 := $p2i.ref.i64($p264);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i266 := $p2i.ref.i64($p0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i267 := $eq.i64($i265, $i266);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb152, $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb15;

  $bb15:
    call $p22, $i23, $i24, $i25, $p27, $p28, $i29, $i30, $p33, $i34, $i35, $p40, $p41, $i42, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $i51, $i52, $p56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $p72, $p73, $i74, $i75, $i76, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p54, $i55, $i88, $i53, $i89, $i90, $i91, $i37, $i38, $i36, $i31, $i92, $i93, $i21 := cbq_sync_defmap_loop_$bb15($p4, $p6, $p22, $i23, $i24, $i25, $p27, $p28, $i29, $i30, $p33, $i34, $i35, $p40, $p41, $i42, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $i51, $i52, $p56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $p72, $p73, $i74, $i75, $i76, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p54, $i55, $i88, $i53, $i89, $i90, $i91, $i37, $i38, $i36, $i31, $i92, $i93, $i21);
    goto $bb15_last;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    call {:si_unique_call 478} {:cexpr "level"} boogie_si_record_i32($i24);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i21);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref($i25, 8));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i34, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i36 := $i21;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i31, 1);
    call {:si_unique_call 479} {:cexpr "i"} boogie_si_record_i32($i92);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i93 := $sle.i32($i92, 15);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb51:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i92;
    goto $bb51_dummy;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i37, $i38 := $i24, 0;
    goto $bb24;

  $bb24:
    call $p40, $p41, $i42, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $i51, $i52, $p56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $p72, $p73, $i74, $i75, $i76, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p54, $i55, $i88, $i53, $i89, $i90, $i91, $i37, $i38 := cbq_sync_defmap_loop_$bb24($p4, $p6, $p33, $p40, $p41, $i42, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $i51, $i52, $p56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $p72, $p73, $i74, $i75, $i76, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p54, $i55, $i88, $i53, $i89, $i90, $i91, $i37, $i38, $i21);
    goto $bb24_last;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i38);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref($i42, 8)), $mul.ref(0, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $p50 := $0.ref;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i53 := $i37;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i38, 1);
    call {:si_unique_call 481} {:cexpr "h"} boogie_si_record_i32($i89);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p33);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i91 := $ugt.i32($i90, $i89);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i91 == 1);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i36 := $i21;
    goto $bb23;

  $bb48:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i37, $i38 := $i53, $i89;
    goto $bb48_dummy;

  $bb29:
    assume $i52 == 1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p54, $i55 := $p50, $i37;
    goto $bb32;

  $bb32:
    call $p56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $p72, $p73, $i74, $i75, $i76, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p54, $i55, $i88 := cbq_sync_defmap_loop_$bb32($p6, $p56, $p57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $p72, $p73, $i74, $i75, $i76, $p79, $p80, $i81, $i82, $p83, $p84, $p85, $i86, $i87, $p54, $i55, $i88, $i21);
    goto $bb32_last;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p54, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p6);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i58, $i59);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i76 := $i55;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p54, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $p85 := $0.ref;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i88 := $i76;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i53 := $i88;
    goto $bb31;

  $bb45:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $p54, $i55 := $p85, $i76;
    goto $bb45_dummy;

  $bb42:
    assume $i82 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p80);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p85 := $p84;
    goto $bb44;

  $bb34:
    assume $i60 == 1;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p54, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, $i55);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb36;

  $bb37:
    assume $i64 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p54, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32(1, $i21);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i66, $i67);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb36;

  $bb39:
    assume $i69 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i21);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref($i70, 8));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p54);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p54, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.0, $p73);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    call {:si_unique_call 480} {:cexpr "level"} boogie_si_record_i32($i75);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb41;

  $bb26:
    assume $i47 == 1;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p45);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p50 := $p49;
    goto $bb28;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i31 := $i21;
    goto $bb19;

  $bb152:
    assume $i267 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.0, $p268);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i270 := $and.i32($i269, 32768);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i271 == 1);
    goto $bb154;

  $bb155:
    assume $i271 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(15, 8));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p273, $0.ref);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb145:
    assume $i255 == 1;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.0, $p256);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i258 := $and.i32($i257, 16384);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb147;

  $bb148:
    assume $i259 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(14, 8));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p261, $0.ref);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb138:
    assume $i243 == 1;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i246 := $and.i32($i245, 8192);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 0);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb141, $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb140;

  $bb141:
    assume $i247 == 1;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(13, 8));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p249, $0.ref);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb131:
    assume $i231 == 1;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i234 := $and.i32($i233, 4096);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb133;

  $bb134:
    assume $i235 == 1;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(12, 8));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p237, $0.ref);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb124:
    assume $i219 == 1;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i221, 2048);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb126;

  $bb127:
    assume $i223 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(11, 8));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p225, $0.ref);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb117:
    assume $i207 == 1;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i210 := $and.i32($i209, 1024);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb119;

  $bb120:
    assume $i211 == 1;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(10, 8));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p213, $0.ref);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb110:
    assume $i195 == 1;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.0, $p196);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i197, 512);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb112;

  $bb113:
    assume $i199 == 1;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(9, 8));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p201, $0.ref);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb103:
    assume $i183 == 1;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i186 := $and.i32($i185, 256);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 0);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb105;

  $bb106:
    assume $i187 == 1;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(8, 8));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p189, $0.ref);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb96:
    assume $i171 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p172);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i173, 128);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb98;

  $bb99:
    assume $i175 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(7, 8));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p177, $0.ref);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb89:
    assume $i159 == 1;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 64);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb91;

  $bb92:
    assume $i163 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(6, 8));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p165, $0.ref);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb82:
    assume $i147 == 1;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, 32);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 0);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb84;

  $bb85:
    assume $i151 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(5, 8));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p153, $0.ref);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb75:
    assume $i135 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 16);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb77;

  $bb78:
    assume $i139 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(4, 8));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p141, $0.ref);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb68:
    assume $i123 == 1;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 8);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb70;

  $bb71:
    assume $i127 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(3, 8));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p129, $0.ref);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb61:
    assume $i111 == 1;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 4);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb63;

  $bb64:
    assume $i115 == 1;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(2, 8));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p117, $0.ref);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb54:
    assume $i99 == 1;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 2);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb56;

  $bb57:
    assume $i103 == 1;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(1, 8));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p105, $0.ref);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 1);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(0, 8));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb45_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  $bb48_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;

  $bb51_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4159;
}



const cbq_rmprio: ref;

axiom cbq_rmprio == $sub.ref(0, 154308);

procedure cbq_rmprio($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_rmprio($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(24, 1)), $mul.ref($i5, 4));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(24, 1)), $mul.ref($i13, 4));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i9);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(60, 1)), $mul.ref($i19, 4));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(120, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i22, $i25);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 904)), $mul.ref(60, 1)), $mul.ref($i30, 4));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i26);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} cbq_normalize_quanta($p0, $i35);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    return;
}



const sch_tree_unlock: ref;

axiom sch_tree_unlock == $sub.ref(0, 155340);

procedure sch_tree_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation sch_tree_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p1 := qdisc_root_sleeping_lock($p0);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} spin_unlock_bh($p1);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_root_sleeping_lock: ref;

axiom qdisc_root_sleeping_lock == $sub.ref(0, 156372);

procedure qdisc_root_sleeping_lock($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_root_sleeping_lock($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p1 := qdisc_root_sleeping($p0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i2 := rtnl_is_locked();
    call {:si_unique_call 487} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 489} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p9 := qdisc_lock($p1);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_72 := printk.ref.ref.i32(.str.4, .str.1, 293);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} dump_stack();
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 157404);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} ldv_spin_unlock();
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} ldv_spin_unlock_bh_6($p0);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 158436);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.30;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 495} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_6: ref;

axiom ldv_spin_unlock_bh_6 == $sub.ref(0, 159468);

procedure ldv_spin_unlock_bh_6($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_bh_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} _raw_spin_unlock_bh($p2);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 160500);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_root_sleeping: ref;

axiom qdisc_root_sleeping == $sub.ref(0, 161532);

procedure qdisc_root_sleeping($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_root_sleeping($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(88, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 496)), $mul.ref(16, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const rtnl_is_locked: ref;

axiom rtnl_is_locked == $sub.ref(0, 162564);

procedure rtnl_is_locked() returns ($r: i32);
  free requires assertsPassed;



implementation rtnl_is_locked() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 497} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const dump_stack: ref;

axiom dump_stack == $sub.ref(0, 163596);

procedure dump_stack();
  free requires assertsPassed;



implementation dump_stack()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    return;
}



const qdisc_lock: ref;

axiom qdisc_lock == $sub.ref(0, 164628);

procedure qdisc_lock($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_lock($p0: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(24, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const qdisc_class_hash_remove: ref;

axiom qdisc_class_hash_remove == $sub.ref(0, 165660);

procedure qdisc_class_hash_remove($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qdisc_class_hash_remove($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 166692);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.30;



implementation spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} ldv_spin_lock();
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} ldv_spin_lock_bh_2($p0);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 167724);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.30;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 501} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_bh_2: ref;

axiom ldv_spin_lock_bh_2 == $sub.ref(0, 168756);

procedure ldv_spin_lock_bh_2($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_bh_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} _raw_spin_lock_bh($p2);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 169788);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    return;
}



const gen_replace_estimator: ref;

axiom gen_replace_estimator == $sub.ref(0, 170820);

procedure gen_replace_estimator($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gen_replace_estimator($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 503} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const cbq_set_wrr: ref;

axiom cbq_set_wrr == $sub.ref(0, 171852);

procedure cbq_set_wrr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_set_wrr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p4 := qdisc_priv($p3);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(1, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} cbq_addprio($p5, $p0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(1, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 255);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(33, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i39 := $sge.i32($i35, $i38);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(33, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 7);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(120, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(104, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i11);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cbq_set_overlimit: ref;

axiom cbq_set_overlimit == $sub.ref(0, 172884);

procedure cbq_set_overlimit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_set_overlimit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(88, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, cbq_ovl_rclassic);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(96, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb21;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(88, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, cbq_ovl_drop);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 7);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i17 == 1);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i25 := $sle.i32($i21, $i24);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 255);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(33, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(88, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, cbq_ovl_lowprio);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb17;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(88, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, cbq_ovl_delay);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(88, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, cbq_ovl_classic);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const cbq_set_police: ref;

axiom cbq_set_police == $sub.ref(0, 173916);

procedure cbq_set_police($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_set_police($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(36, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i3);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 368)), $mul.ref(56, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, cbq_reshape_fail);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const cbq_set_fopt: ref;

axiom cbq_set_fopt == $sub.ref(0, 174948);

procedure cbq_set_fopt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_set_fopt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} cbq_change_defmap($p0, $i3, $i5, $i7);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 175980);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 509} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} ldv_check_alloc_flags($i1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const gen_new_estimator: ref;

axiom gen_new_estimator == $sub.ref(0, 177012);

procedure gen_new_estimator($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gen_new_estimator($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 511} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 512} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const qdisc_class_hash_grow: ref;

axiom qdisc_class_hash_grow == $sub.ref(0, 178044);

procedure qdisc_class_hash_grow($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation qdisc_class_hash_grow($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 179076);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i1 := $M.30;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 180108);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 515} __VERIFIER_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const cbq_change_defmap: ref;

axiom cbq_change_defmap == $sub.ref(0, 181140);

procedure cbq_change_defmap($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_change_defmap($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p25: ref;
  var $p36: ref;
  var $p24: ref;
  var $p31: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} {:cexpr "cbq_change_defmap:arg:splitid"} boogie_si_record_i32($i1);
    call {:si_unique_call 517} {:cexpr "cbq_change_defmap:arg:def"} boogie_si_record_i32($i2);
    call {:si_unique_call 518} {:cexpr "cbq_change_defmap:arg:mask"} boogie_si_record_i32($i3);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i12, $p13 := $i1, $0.ref;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i15 == 1);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, $i12);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $p37 := $p13;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p37);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i42, $i43);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i44 == 1);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i51 := $xor.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i50, $i51);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i2, $i3);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i52, $i53);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} cbq_sync_defmap($p0);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} cbq_sync_defmap($p0);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p37);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i2, $i3);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p24 := $p21;
    assume {:branchcond $i23} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p31 := $p24;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p37 := $p31;
    goto $bb25;

  $bb13:
    assume $i23 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p25 := $p21;
    goto $bb16;

  $bb16:
    call $p27, $i28, $i29, $p30, $p32, $p33, $i34, $i35, $p25, $p36 := cbq_change_defmap_loop_$bb16($i12, $p27, $i28, $i29, $p30, $p32, $p33, $i34, $i35, $p25, $p36);
    goto $bb16_last;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, $i12);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p30 := $p25;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p25, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p36 := $p33;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p24 := $p36;
    goto $bb15;

  $bb22:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p25 := $p33;
    goto $bb22_dummy;

  $bb18:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p31 := $p30;
    goto $bb20;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 519} {:cexpr "splitid"} boogie_si_record_i32($i11);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i12, $p13 := $i11, $p6;
    goto $bb7;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb22_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4791;
}



const cbq_reshape_fail: ref;

axiom cbq_reshape_fail == $sub.ref(0, 182172);

procedure cbq_reshape_fail($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.1, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21;



implementation cbq_reshape_fail($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p46: ref;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 368)), $mul.ref(80, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $p4 := qdisc_priv($p3);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p7);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i44);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p11 := cbq_reclassify($p0, $p7);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} cbq_mark_toplevel($p5, $p11);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 904)), $mul.ref(632, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p11);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 368)), $mul.ref(80, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p3);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i20 := qdisc_enqueue($p0, $p19);
    call {:si_unique_call 526} {:cexpr "ret"} boogie_si_record_i32($i20);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i20, 65536);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb10;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(252, 1)), $mul.ref(8, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i38);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 1);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p11, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb10;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} cbq_activate_class($p11);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const cbq_ovl_delay: ref;

axiom cbq_ovl_delay == $sub.ref(0, 183204);

procedure cbq_ovl_delay($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.32, $M.33, $M.34, $M.35, $CurrAddr, $M.36, $M.37, $M.38, $M.39;



implementation cbq_ovl_delay($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $p102: ref;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p8 := qdisc_priv($p7);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i11, $i13);
    call {:si_unique_call 534} {:cexpr "delay"} boogie_si_record_i64($i14);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p17 := qdisc_root_sleeping($p16);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 368)), $mul.ref(128, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i19 := constant_test_bit(1, $p18);
    call {:si_unique_call 537} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(193, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i103 := $i14;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, $p104);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i106 := $eq.i64($i105, 0);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i106 == 1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i109 := $sgt.i64($i108, $i103);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(888, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p110, $i103);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb24;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    call {:si_unique_call 538} {:cexpr "sched"} boogie_si_record_i64($i26);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(56, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, $i14);
    call {:si_unique_call 539} {:cexpr "delay"} boogie_si_record_i64($i29);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i32 := $slt.i64($i31, 0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i29;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i50 := $slt.i64($i47, $i49);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, $i45);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i64($i45, 0);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i103 := 1;
    goto $bb22;

  $bb13:
    assume $i58 == 1;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(96, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i60, $i45);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i62 := $add.i64($i61, $i26);
    call {:si_unique_call 541} {:cexpr "sched"} boogie_si_record_i64($i62);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(232, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i62);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 8);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(680, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, 256);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(680, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i69 := $shl.i64($i62, 6);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i70 := ns_to_ktime($i69);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $M.31 := $store.i64($M.31, $p71, $i70);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p1);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p4);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.31;
    cmdloc_dummy_var_21 := $M.31;
    call {:si_unique_call 543} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p72, $p73, 8, $zext.i32.i64(8), 0 == 1);
    $M.31 := cmdloc_dummy_var_22;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(688, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i75 := hrtimer_try_to_cancel($p74);
    call {:si_unique_call 545} {:cexpr "tmp___2"} boogie_si_record_i32($i75);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(688, 1));
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_73 := hrtimer_restart($p94);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(193, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, 1);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(4, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 1);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(4, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i100);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i76 == 1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(688, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i78 := hrtimer_get_expires($p77);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p79, $i78);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p3);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p5);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.32;
    cmdloc_dummy_var_24 := $M.32;
    call {:si_unique_call 547} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p80, $p81, 8, $zext.i32.i64(8), 0 == 1);
    $M.32 := cmdloc_dummy_var_25;
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p3);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.32, $p82);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.31, $p84);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i86 := $sub.i64($i83, $i85);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p2);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p87, $i86);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p2);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.33, $p88);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i64($i89, 0);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i90 == 1;
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p9, $mul.ref(0, 904)), $mul.ref(688, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.31, $p92);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} hrtimer_set_expires($p91, $i93);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i50 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i52);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64(0, $i34);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i40 := $ashr.i64($i35, $i39);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i40, $i42);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i29);
    call {:si_unique_call 540} {:cexpr "delay"} boogie_si_record_i64($i44);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb9;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cbq_ovl_lowprio: ref;

axiom cbq_ovl_lowprio == $sub.ref(0, 184236);

procedure cbq_ovl_lowprio($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_ovl_lowprio($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p3 := qdisc_priv($p2);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(96, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i6, $i8);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(232, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i9);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(33, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i13, $i16);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} cbq_ovl_classic($p0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(33, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(680, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32(1, $i25);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i22, $i26);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(680, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(4, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(4, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cbq_ovl_drop: ref;

axiom cbq_ovl_drop == $sub.ref(0, 185268);

procedure cbq_ovl_drop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_ovl_drop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(4, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(296, 1)), $mul.ref(4, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} cbq_ovl_classic($p0);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 552} $i17 := devirtbounce.1($p14, $p16);
    call {:si_unique_call 553} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i23, 1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i24);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const cbq_ovl_rclassic: ref;

axiom cbq_ovl_rclassic == $sub.ref(0, 186300);

procedure cbq_ovl_rclassic($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cbq_ovl_rclassic($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p11: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p18: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p3 := qdisc_priv($p2);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i7, $i9);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p11 := $p0;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $i15, $i16, $i17, $p11, $p19, $p20, $i21, $i22, $p23 := cbq_ovl_rclassic_loop_$bb4($p8, $p12, $p13, $i14, $i15, $i16, $i17, $p11, $p19, $p20, $i21, $i22, $p23);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p12, $p23 := $p20, $p20;
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p18 := $p23;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p18);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $p26 := $p18;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} cbq_ovl_classic($p26);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p26 := $p0;
    goto $bb14;

  $bb5:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p8);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i15, $i16);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p11 := $p12;
    goto $bb7_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const ns_to_ktime: ref;

axiom ns_to_ktime == $sub.ref(0, 187332);

procedure ns_to_ktime($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.34, $M.35, $CurrAddr;



implementation ns_to_ktime($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 560} {:cexpr "ns_to_ktime:arg:ns"} boogie_si_record_i64($i0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p4, 0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.34, $p5);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $i0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p8, $i7);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.35;
    cmdloc_dummy_var_27 := $M.35;
    call {:si_unique_call 561} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p9, $p10, 8, $zext.i32.i64(8), 0 == 1);
    $M.35 := cmdloc_dummy_var_28;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.35, $p11);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const hrtimer_try_to_cancel: ref;

axiom hrtimer_try_to_cancel == $sub.ref(0, 188364);

procedure hrtimer_try_to_cancel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hrtimer_try_to_cancel($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 562} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 563} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hrtimer_get_expires: ref;

axiom hrtimer_get_expires == $sub.ref(0, 189396);

procedure hrtimer_get_expires($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation hrtimer_get_expires($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 566} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p5, $p6, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 567} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p7, $p8, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const hrtimer_set_expires: ref;

axiom hrtimer_set_expires == $sub.ref(0, 190428);

procedure hrtimer_set_expires($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation hrtimer_set_expires($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 569} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 570} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p9, $p10, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    return;
}



const hrtimer_restart: ref;

axiom hrtimer_restart == $sub.ref(0, 191460);

procedure hrtimer_restart($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.0, $M.37, $M.38, $M.39, $CurrAddr;



implementation hrtimer_restart($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i1 := hrtimer_start_expires($p0, 0);
    call {:si_unique_call 572} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hrtimer_start_expires: ref;

axiom hrtimer_start_expires == $sub.ref(0, 192492);

procedure hrtimer_start_expires($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36, $M.0, $M.37, $M.38, $M.39, $CurrAddr;



implementation hrtimer_start_expires($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 578} {:cexpr "hrtimer_start_expires:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i7 := hrtimer_get_softexpires($p0);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.36 := $store.i64($M.36, $p8, $i7);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.36;
    cmdloc_dummy_var_42 := $M.36;
    call {:si_unique_call 580} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p9, $p10, 8, $zext.i32.i64(8), 0 == 1);
    $M.36 := cmdloc_dummy_var_43;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i11 := hrtimer_get_expires($p0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p12, $i11);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p6);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.37;
    cmdloc_dummy_var_45 := $M.37;
    call {:si_unique_call 582} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p13, $p14, 8, $zext.i32.i64(8), 0 == 1);
    $M.37 := cmdloc_dummy_var_46;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.37, $p15);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p2);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.36, $p17);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i16, $i18);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p4);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p20, $i19);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.38, $p21);
    call {:si_unique_call 583} {:cexpr "delta"} boogie_si_record_i64($i22);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.36, $p23);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i25 := hrtimer_start_range_ns($p0, $i24, $i22, $i1);
    call {:si_unique_call 585} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;
}



const hrtimer_get_softexpires: ref;

axiom hrtimer_get_softexpires == $sub.ref(0, 193524);

procedure hrtimer_get_softexpires($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation hrtimer_get_softexpires($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 588} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p4, $p5, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 589} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p6, $p7, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const hrtimer_start_range_ns: ref;

axiom hrtimer_start_range_ns == $sub.ref(0, 194556);

procedure hrtimer_start_range_ns($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $CurrAddr;



implementation hrtimer_start_range_ns($p0: ref, $i1: i64, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p5, $i1);
    call {:si_unique_call 591} {:cexpr "hrtimer_start_range_ns:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 592} {:cexpr "hrtimer_start_range_ns:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 593} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 594} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 195588);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 595} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 1} true;
    call {:si_unique_call 596} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 597} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 598} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p4 := calloc(1, $i0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} __VERIFIER_assume($i7);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_initialize_Qdisc_ops_1: ref;

axiom ldv_initialize_Qdisc_ops_1 == $sub.ref(0, 196620);

procedure ldv_initialize_Qdisc_ops_1();
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.0, $CurrAddr;



implementation ldv_initialize_Qdisc_ops_1()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p0 := ldv_zalloc(448);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $M.40 := $p0;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p2 := ldv_zalloc(232);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.41 := $p2;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_Qdisc_class_ops_2: ref;

axiom ldv_initialize_Qdisc_class_ops_2 == $sub.ref(0, 197652);

procedure ldv_initialize_Qdisc_class_ops_2();
  free requires assertsPassed;
  modifies $M.42, $M.0, $CurrAddr;



implementation ldv_initialize_Qdisc_class_ops_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p0 := ldv_zalloc(448);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $M.42 := $p0;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 198684);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43, $M.44, $M.45, $M.46, $M.0, $M.1, $M.47, $M.48, $M.42, $M.40, $M.41, $M.28, $M.30, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $CurrAddr, $M.22, $M.23, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.24, $M.25, $M.31, $M.32, $M.33, assertsPassed, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i156: i32;
  var $i157: i1;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i1;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i1;
  var $i183: i1;
  var $i184: i1;
  var $i185: i1;
  var $i186: i1;
  var $i187: i1;
  var $i188: i1;
  var $i189: i1;
  var $i190: i1;
  var $i191: i1;
  var $i192: i1;
  var $i193: i1;
  var $i194: i1;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i237: i32;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i273: i32;
  var $i274: i1;
  var $p275: ref;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i281: i32;
  var $i282: i1;
  var $p283: ref;
  var $i285: i32;
  var $i286: i1;
  var $p287: ref;
  var $i288: i32;
  var $i289: i1;
  var $p290: ref;
  var $i291: i32;
  var $i292: i1;
  var $i294: i32;
  var $i295: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: ref;
  var vslice_dummy_var_79: ref;
  var vslice_dummy_var_80: ref;
  var vslice_dummy_var_81: ref;
  var vslice_dummy_var_82: ref;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: ref;
  var vslice_dummy_var_94: ref;
  var vslice_dummy_var_95: i64;
  var vslice_dummy_var_96: i64;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: ref;
  var vslice_dummy_var_102: ref;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i64;
  var vslice_dummy_var_106: i64;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    call {:si_unique_call 604} $initialize();
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p0 := ldv_zalloc(4);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p2 := ldv_zalloc(88);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p4 := ldv_zalloc(448);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 609} $i6 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 610} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i6);
    call {:si_unique_call 611} {:cexpr "tmp___2"} boogie_si_record_i64($i6);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p7 := ldv_zalloc(24);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p9 := ldv_zalloc(20);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 614} $i11 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 615} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i11);
    call {:si_unique_call 616} {:cexpr "tmp___5"} boogie_si_record_i64($i11);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p12 := ldv_zalloc(8);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p14 := ldv_zalloc(88);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p16 := ldv_zalloc(232);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 1} true;
    call {:si_unique_call 620} $i18 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 621} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i18);
    call {:si_unique_call 622} {:cexpr "tmp___9"} boogie_si_record_i64($i18);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 623} $i19 := __VERIFIER_nondet_u32();
    call {:si_unique_call 624} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i19);
    call {:si_unique_call 625} {:cexpr "tmp___10"} boogie_si_record_i32($i19);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 1} true;
    call {:si_unique_call 626} $i20 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 627} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i20);
    call {:si_unique_call 628} {:cexpr "tmp___11"} boogie_si_record_i64($i20);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 629} $i21 := __VERIFIER_nondet_u32();
    call {:si_unique_call 630} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i21);
    call {:si_unique_call 631} {:cexpr "tmp___12"} boogie_si_record_i32($i21);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p22 := ldv_zalloc(8);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 633} $i24 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 634} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i24);
    call {:si_unique_call 635} {:cexpr "tmp___14"} boogie_si_record_i64($i24);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 1} true;
    call {:si_unique_call 636} $i25 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 637} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i25);
    call {:si_unique_call 638} {:cexpr "tmp___15"} boogie_si_record_i64($i25);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 639} $i26 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 640} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i26);
    call {:si_unique_call 641} {:cexpr "tmp___16"} boogie_si_record_i64($i26);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} $i27 := __VERIFIER_nondet_u32();
    call {:si_unique_call 643} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i27);
    call {:si_unique_call 644} {:cexpr "tmp___17"} boogie_si_record_i32($i27);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 1} true;
    call {:si_unique_call 645} $i28 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 646} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i28);
    call {:si_unique_call 647} {:cexpr "tmp___18"} boogie_si_record_i64($i28);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p29 := ldv_zalloc(8);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i31 := __VERIFIER_nondet_u32();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i31);
    call {:si_unique_call 651} {:cexpr "tmp___20"} boogie_si_record_i32($i31);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 1} true;
    call {:si_unique_call 652} $i32 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 653} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i32);
    call {:si_unique_call 654} {:cexpr "tmp___21"} boogie_si_record_i64($i32);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 655} $i33 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 656} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i33);
    call {:si_unique_call 657} {:cexpr "tmp___22"} boogie_si_record_i64($i33);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} ldv_initialize();
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 659} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 660} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 661} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 662} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $p65, $p66, $i68, $i69, $p70, $p71, $i73, $i74, $p75, $p76, $i78, $i79, $p80, $i81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $i106, $p107, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $p127, $i129, $i130, $p131, $i133, $i134, $p135, $i137, $i138, $p139, $i141, $i142, $p143, $p144, $i146, $i147, $p148, $p149, $i151, $i152, $p153, $p154, $i156, $i157, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $p198, $i200, $i201, $p202, $i204, $i205, $p206, $i208, $i209, $p210, $i212, $i213, $p214, $i216, $i217, $p218, $i220, $i221, $p222, $i223, $i224, $p225, $i226, $i227, $p228, $i230, $i231, $p232, $i234, $i235, $p236, $i237, $i238, $i239, $i240, $p241, $i243, $i244, $p245, $i247, $i248, $p249, $i250, $i251, $p252, $i253, $i254, $p255, $i257, $i258, $p259, $i261, $i262, $p263, $i265, $i266, $p267, $i269, $i270, $p271, $i273, $i274, $p275, $i277, $i278, $p279, $i281, $i282, $p283, $i285, $i286, $p287, $i288, $i289, $p290, $i291, $i292, $i294, $i295, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111 := main_loop_$bb1($p1, $p3, $p5, $i6, $p8, $p10, $i11, $p13, $p15, $p17, $i18, $i19, $i20, $i21, $p23, $i24, $i25, $i26, $i27, $i28, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $p65, $p66, $i68, $i69, $p70, $p71, $i73, $i74, $p75, $p76, $i78, $i79, $p80, $i81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i91, $i92, $p93, $i95, $i96, $p97, $i99, $i100, $p101, $i102, $i103, $i104, $i105, $i106, $p107, $i109, $i110, $p111, $i113, $i114, $p115, $i117, $i118, $p119, $i121, $i122, $p123, $i125, $i126, $p127, $i129, $i130, $p131, $i133, $i134, $p135, $i137, $i138, $p139, $i141, $i142, $p143, $p144, $i146, $i147, $p148, $p149, $i151, $i152, $p153, $p154, $i156, $i157, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $p198, $i200, $i201, $p202, $i204, $i205, $p206, $i208, $i209, $p210, $i212, $i213, $p214, $i216, $i217, $p218, $i220, $i221, $p222, $i223, $i224, $p225, $i226, $i227, $p228, $i230, $i231, $p232, $i234, $i235, $p236, $i237, $i238, $i239, $i240, $p241, $i243, $i244, $p245, $i247, $i248, $p249, $i250, $i251, $p252, $i253, $i254, $p255, $i257, $i258, $p259, $i261, $i262, $p263, $i265, $i266, $p267, $i269, $i270, $p271, $i273, $i274, $p275, $i277, $i278, $p279, $i281, $i282, $p283, $i285, $i286, $p287, $i288, $i289, $p290, $i291, $i292, $i294, $i295, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i34, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i34, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} ldv_stop();
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb120_dummy;

  $bb7:
    assume $i37 == 1;
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i178 := $M.46;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb151:
    assume $i179 == 1;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 739} $i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i180);
    call {:si_unique_call 741} {:cexpr "tmp___26"} boogie_si_record_i32($i180);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i181 := $slt.i32($i180, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i180, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $i183 := $slt.i32($i180, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i180, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i180, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} ldv_stop();
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb162:
    assume $i185 == 1;
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i291 := $M.46;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 1);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb261:
    assume $i292 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} vslice_dummy_var_111 := ldv_probe_2();
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 794} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i294 := $M.44;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i295 := $add.i32($i294, 1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.44 := $i295;
    call {:si_unique_call 795} {:cexpr "ref_cnt"} boogie_si_record_i32($i295);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb160:
    assume $i184 == 1;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i285 := $M.46;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i288 := $M.46;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 2);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb258:
    assume $i289 == 1;
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p290 := $M.42;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} cbq_qlen_notify($p290, $i33);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb255:
    assume $i286 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p287 := $M.42;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} cbq_qlen_notify($p287, $i33);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb158:
    assume $i183 == 1;
    assume {:verifier.code 0} true;
    $i186 := $slt.i32($i180, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i186 == 1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i277 := $M.46;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 1);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i281 := $M.46;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 2);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb252:
    assume $i282 == 1;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p283 := $M.42;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_110 := cbq_change_class($p283, $i21, $i27, $p13, $p23);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    goto $bb254;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb249:
    assume $i278 == 1;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p279 := $M.42;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_109 := cbq_change_class($p279, $i21, $i27, $p13, $p23);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb251;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb165:
    assume $i186 == 1;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i269 := $M.46;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 1);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $i273 := $M.46;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 2);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb246:
    assume $i274 == 1;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p275 := $M.42;
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} vslice_dummy_var_108 := cbq_dump_class($p275, $i20, $p17, $p10);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb243:
    assume $i270 == 1;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p271 := $M.42;
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_107 := cbq_dump_class($p271, $i20, $p17, $p10);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb156:
    assume $i182 == 1;
    assume {:verifier.code 0} true;
    $i187 := $slt.i32($i180, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i180, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i188 == 1);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i261 := $M.46;
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 1);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i265 := $M.46;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 2);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb240:
    assume $i266 == 1;
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p267 := $M.42;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_106 := cbq_bind_filter($p267, $i6, $i19);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb237:
    assume $i262 == 1;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p263 := $M.42;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_105 := cbq_bind_filter($p263, $i6, $i19);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 778} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb169:
    assume $i188 == 1;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i253 := $M.46;
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 1);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $i257 := $M.46;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 2);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb234:
    assume $i258 == 1;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p259 := $M.42;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} vslice_dummy_var_104 := cbq_dump_class_stats($p259, $i18, $p15);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb231:
    assume $i254 == 1;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p255 := $M.42;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_103 := cbq_dump_class_stats($p255, $i18, $p15);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 774} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb167:
    assume $i187 == 1;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i247 := $M.46;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 1);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i250 := $M.46;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 2);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb228:
    assume $i251 == 1;
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p252 := $M.42;
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} cbq_put($p252, $i28);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb225:
    assume $i248 == 1;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p249 := $M.42;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} cbq_put($p249, $i28);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 770} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb154:
    assume $i181 == 1;
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i180, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i180, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := $slt.i32($i180, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i191 == 1);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i239 := $M.46;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 1);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i243 := $M.46;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 2);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb222:
    assume $i244 == 1;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p245 := $M.42;
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_102 := cbq_find_tcf($p245, $i24);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb219:
    assume $i240 == 1;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p241 := $M.42;
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_101 := cbq_find_tcf($p241, $i24);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb175:
    assume $i191 == 1;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i234 := $M.46;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 2);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb216:
    assume $i235 == 1;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p236 := $M.42;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} cbq_unbind_filter($p236, $i25);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i237 := $M.44;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i238 := $sub.i32($i237, 1);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $M.44 := $i238;
    call {:si_unique_call 764} {:cexpr "ref_cnt"} boogie_si_record_i32($i238);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb173:
    assume $i190 == 1;
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i180, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i192 == 1);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i226 := $M.46;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i230 := $M.46;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb213:
    assume $i231 == 1;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p232 := $M.42;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vslice_dummy_var_100 := cbq_graft($p232, $i32, $p5, $p30);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb210:
    assume $i227 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p228 := $M.42;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} vslice_dummy_var_99 := cbq_graft($p228, $i32, $p5, $p30);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb177:
    assume $i192 == 1;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i220 := $M.46;
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 1);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i223 := $M.46;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 2);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb207:
    assume $i224 == 1;
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p225 := $M.42;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} cbq_walk($p225, $p8);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb204:
    assume $i221 == 1;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p222 := $M.42;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} cbq_walk($p222, $p8);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 755} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb171:
    assume $i189 == 1;
    assume {:verifier.code 0} true;
    $i193 := $slt.i32($i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i180, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i194 == 1);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i212 := $M.46;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 1);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i216 := $M.46;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 2);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb201:
    assume $i217 == 1;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p218 := $M.42;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_98 := cbq_delete($p218, $i26);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 753} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb198:
    assume $i213 == 1;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p214 := $M.42;
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} vslice_dummy_var_97 := cbq_delete($p214, $i26);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb181:
    assume $i194 == 1;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i204 := $M.46;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 1);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i208 := $M.46;
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 2);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb195:
    assume $i209 == 1;
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p210 := $M.42;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} vslice_dummy_var_96 := cbq_get($p210, $i31);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume $i205 == 1;
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p206 := $M.42;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_95 := cbq_get($p206, $i31);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 747} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb179:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb164;

  $bb183:
    assume $i195 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i196 := $M.46;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 1);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i200 := $M.46;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 2);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb188:
    assume $i201 == 1;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p202 := $M.42;
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} vslice_dummy_var_94 := cbq_leaf($p202, $i11);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i197 == 1;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p198 := $M.42;
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_93 := cbq_leaf($p198, $i11);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb5:
    assume $i36 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i161 := $M.45;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb121:
    assume $i162 == 1;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 724} $i163 := __VERIFIER_nondet_int();
    call {:si_unique_call 725} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i163);
    call {:si_unique_call 726} {:cexpr "tmp___25"} boogie_si_record_i32($i163);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i163, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i163, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ldv_stop();
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb126:
    assume $i165 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i171 := $M.45;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 1);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb139:
    assume $i172 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i173 := cbq_module_init();
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $M.48 := $i173;
    call {:si_unique_call 731} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i173);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i174 := $M.48;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 0);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i176 := $M.48;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb144:
    assume $i177 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 737} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} ldv_check_final_state();
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb141:
    assume $i175 == 1;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 733} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ldv_initialize_Qdisc_class_ops_2();
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 735} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_initialize_Qdisc_ops_1();
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb124:
    assume $i164 == 1;
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i163, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb128;

  $bb129:
    assume $i166 == 1;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i167 := $M.45;
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 3);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb131:
    assume $i168 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i169 := $M.44;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb133;

  $bb134:
    assume $i170 == 1;
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} cbq_module_exit();
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 728} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb3:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i34, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb9;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i39 := $M.43;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 666} $i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 667} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i41);
    call {:si_unique_call 668} {:cexpr "tmp___24"} boogie_si_record_i32($i41);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i41, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i41, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i41, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} ldv_stop();
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i156 := $M.43;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb114:
    assume $i157 == 1;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} vslice_dummy_var_92 := ldv_setup_1();
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 721} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i159 := $M.44;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i160 := $add.i32($i159, 1);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $M.44 := $i160;
    call {:si_unique_call 722} {:cexpr "ref_cnt"} boogie_si_record_i32($i160);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i141 := $M.43;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 1);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i146 := $M.43;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 3);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i151 := $M.43;
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 2);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb111:
    assume $i152 == 1;
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p153 := $M.40;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p154 := $M.41;
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} vslice_dummy_var_91 := cbq_dump($p153, $p154);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 719} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i147 == 1;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p148 := $M.40;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p149 := $M.41;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} vslice_dummy_var_90 := cbq_dump($p148, $p149);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 717} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i142 == 1;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p143 := $M.40;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p144 := $M.41;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} vslice_dummy_var_89 := cbq_dump($p143, $p144);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 715} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i129 := $M.43;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i133 := $M.43;
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 3);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i137 := $M.43;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 2);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb102:
    assume $i138 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p139 := $M.40;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_88 := cbq_drop($p139);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 713} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb99:
    assume $i134 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p135 := $M.40;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} vslice_dummy_var_87 := cbq_drop($p135);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 711} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume $i130 == 1;
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p131 := $M.40;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_86 := cbq_drop($p131);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 709} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb17:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i41, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i47 == 1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i117 := $M.43;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i121 := $M.43;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 3);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i125 := $M.43;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 2);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb93:
    assume $i126 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p127 := $M.40;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_85 := cbq_dump_stats($p127, $p3);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb90:
    assume $i122 == 1;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p123 := $M.40;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} vslice_dummy_var_84 := cbq_dump_stats($p123, $p3);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 705} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i118 == 1;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p119 := $M.40;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_83 := cbq_dump_stats($p119, $p3);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 703} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb26:
    assume $i47 == 1;
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i105 := $M.43;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 1);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i109 := $M.43;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 3);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i113 := $M.43;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb84:
    assume $i114 == 1;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $p115 := $M.40;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_82 := qdisc_peek_dequeued($p115);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 701} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i110 == 1;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p111 := $M.40;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_81 := qdisc_peek_dequeued($p111);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 699} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume $i106 == 1;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p107 := $M.40;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_80 := qdisc_peek_dequeued($p107);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 697} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb15:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i41, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i50 == 1);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i99 := $M.43;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 2);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb72:
    assume $i100 == 1;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p101 := $M.40;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i102 := cbq_init($p101, $p1);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $M.47 := $i102;
    call {:si_unique_call 694} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i102);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i103 := $M.47;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb74:
    assume $i104 == 1;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 695} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb32:
    assume $i50 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i87 := $M.43;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i91 := $M.43;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 3);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i95 := $M.43;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb69:
    assume $i96 == 1;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p97 := $M.40;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_79 := cbq_dequeue($p97);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 692} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i92 == 1;
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p93 := $M.40;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_78 := cbq_dequeue($p93);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 690} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i88 == 1;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p89 := $M.40;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_77 := cbq_dequeue($p89);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 688} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb30:
    assume $i49 == 1;
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i78 := $M.43;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i81 := $M.43;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 3);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i84 := $M.43;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 2);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb60:
    assume $i85 == 1;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p86 := $M.40;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} cbq_reset($p86);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 686} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i82 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p83 := $M.40;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} cbq_reset($p83);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 684} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i79 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p80 := $M.40;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} cbq_reset($p80);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 682} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb28:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i51 == 1);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i63 := $M.43;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i68 := $M.43;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 3);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i73 := $M.43;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb51:
    assume $i74 == 1;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p75 := $M.41;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p76 := $M.40;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vslice_dummy_var_76 := cbq_enqueue($p75, $p76);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 680} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i69 == 1;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p70 := $M.41;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p71 := $M.40;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} vslice_dummy_var_75 := cbq_enqueue($p70, $p71);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 678} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i64 == 1;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p65 := $M.41;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p66 := $M.40;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_74 := cbq_enqueue($p65, $p66);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 676} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb34:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb25;

  $bb36:
    assume $i52 == 1;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i53 := $M.43;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 3);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i58 := $M.43;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 2);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i59 == 1;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $p60 := $M.40;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} cbq_destroy($p60);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 673} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i61 := $M.44;
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i61, 1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $M.44 := $i62;
    call {:si_unique_call 674} {:cexpr "ref_cnt"} boogie_si_record_i32($i62);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i54 == 1;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p55 := $M.40;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} cbq_destroy($p55);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 670} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i56 := $M.44;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i56, 1);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.44 := $i57;
    call {:si_unique_call 671} {:cexpr "ref_cnt"} boogie_si_record_i32($i57);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb120_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} $i34 := __VERIFIER_nondet_int();
    call {:si_unique_call 664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i34);
    call {:si_unique_call 665} {:cexpr "tmp___23"} boogie_si_record_i32($i34);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 199716);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 200748);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    return;
}



const ldv_setup_1: ref;

axiom ldv_setup_1 == $sub.ref(0, 201780);

procedure ldv_setup_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_setup_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 798} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 799} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 202812);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const cbq_module_exit: ref;

axiom cbq_module_exit == $sub.ref(0, 203844);

procedure cbq_module_exit();
  free requires assertsPassed;



implementation cbq_module_exit()
{
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_112 := unregister_qdisc(cbq_qdisc_ops);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    return;
}



const cbq_module_init: ref;

axiom cbq_module_init == $sub.ref(0, 204876);

procedure cbq_module_init() returns ($r: i32);
  free requires assertsPassed;



implementation cbq_module_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i0 := register_qdisc(cbq_qdisc_ops);
    call {:si_unique_call 802} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_2: ref;

axiom ldv_probe_2 == $sub.ref(0, 205908);

procedure ldv_probe_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 804} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 206940);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    return;
}



const register_qdisc: ref;

axiom register_qdisc == $sub.ref(0, 207972);

procedure register_qdisc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_qdisc($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 1} true;
    call {:si_unique_call 805} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 806} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const unregister_qdisc: ref;

axiom unregister_qdisc == $sub.ref(0, 209004);

procedure unregister_qdisc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_qdisc($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 1} true;
    call {:si_unique_call 807} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 808} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 210036);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 809} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 1} true;
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 211068);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 212100);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 213132);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 214164);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 215196);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 216228);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 217260);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 218292);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 219324);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 220356);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 221388);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 222420);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 223452);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 810} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 811} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 812} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 1} true;
    call {:si_unique_call 813} __VERIFIER_assume($i4);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 224484);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 225516);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 226548);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 227580);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 228612);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 229644);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 230676);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 231708);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 232740);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 1} true;
    call {:si_unique_call 814} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 815} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 816} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 817} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 818} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 819} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 1} true;
    call {:si_unique_call 820} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 821} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 822} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 823} __VERIFIER_assume($i7);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 824} __VERIFIER_assume($i11);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 233772);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 234804);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 235836);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 236868);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 237900);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 238932);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 239964);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 240996);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 242028);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 825} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 826} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 827} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 243060);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 828} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 829} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 244092);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 245124);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 830} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 831} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 246156);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 247188);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 248220);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 832} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 833} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 1} true;
    call {:si_unique_call 834} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 835} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p6 := malloc($i5);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    call {:si_unique_call 837} cmdloc_dummy_var_54 := $memset.i8(cmdloc_dummy_var_53, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_54;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 249252);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 250284);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.30, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 838} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := 0;
    call {:si_unique_call 839} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 840} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 841} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 843} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 844} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 845} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.50 := $store.ref($M.50, cbq_class_ops, $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), cbq_graft);
    $M.52 := $store.ref($M.52, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), cbq_leaf);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), cbq_qlen_notify);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), cbq_get);
    $M.55 := $store.ref($M.55, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), cbq_put);
    $M.56 := $store.ref($M.56, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), cbq_change_class);
    $M.57 := $store.ref($M.57, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), cbq_delete);
    $M.58 := $store.ref($M.58, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), cbq_walk);
    $M.59 := $store.ref($M.59, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), cbq_find_tcf);
    $M.60 := $store.ref($M.60, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), cbq_bind_filter);
    $M.61 := $store.ref($M.61, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), cbq_unbind_filter);
    $M.62 := $store.ref($M.62, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), cbq_dump_class);
    $M.63 := $store.ref($M.63, $add.ref($add.ref(cbq_class_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), cbq_dump_class_stats);
    $M.64 := $store.ref($M.64, cbq_qdisc_ops, $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(8, 1)), cbq_class_ops);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(0, 1)), 99);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(1, 1)), 98);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(2, 1)), 113);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(3, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(5, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(6, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(7, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(9, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(10, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(11, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(12, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(14, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(16, 1)), $mul.ref(15, 1)), 0);
    $M.64 := $store.i32($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(32, 1)), 896);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(40, 1)), cbq_enqueue);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(48, 1)), cbq_dequeue);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(56, 1)), qdisc_peek_dequeued);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(64, 1)), cbq_drop);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(72, 1)), cbq_init);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(80, 1)), cbq_reset);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(88, 1)), cbq_destroy);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(96, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(104, 1)), $0.ref);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(112, 1)), cbq_dump);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(120, 1)), cbq_dump_stats);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(cbq_qdisc_ops, $mul.ref(0, 136)), $mul.ref(128, 1)), __this_module);
    $M.65 := $store.i16($M.65, cbq_policy, 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(2, 1)), 20);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(2, 1)), 12);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(2, 1)), 12);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(2, 1)), 8);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(2, 1)), 12);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(0, 1)), 11);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(2, 1)), 1024);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(0, 1)), 0);
    $M.66 := $store.i16($M.66, $add.ref($add.ref($add.ref(cbq_policy, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(2, 1)), 4);
    call {:si_unique_call 846} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 251316);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $CurrAddr, $M.31, $M.32, $M.33, $M.34, $M.35, $M.23, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(qdisc_peek_dequeued, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(cbq_dequeue, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 847} $p1 := cbq_dequeue(arg);
    $r := $p1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 848} $p2 := qdisc_peek_dequeued(arg);
    $r := $p2;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 252348);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(cbq_undelay, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(cbq_drop, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 849} $i1 := cbq_drop(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 850} $i3 := cbq_undelay($p2);
    $r := $i3;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 253380);

procedure devirtbounce.2(funcPtr: ref, arg: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 254412);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 255444);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.32, $M.33, $M.22, $M.34, $M.35, $M.23, $CurrAddr, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(cbq_ovl_rclassic, $p0);
    assume {:branchcond $i9} true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i9 == 1);
    $i8 := $eq.ref(cbq_ovl_drop, $p0);
    assume {:branchcond $i8} true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i8 == 1);
    $i7 := $eq.ref(cbq_ovl_lowprio, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i7 == 1);
    $i6 := $eq.ref(cbq_ovl_delay, $p0);
    assume {:branchcond $i6} true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i6 == 1);
    $i5 := $eq.ref(cbq_ovl_classic, $p0);
    assume {:branchcond $i5} true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i5 == 1);
    $i4 := $eq.ref(cbq_destroy, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i4 == 1);
    $i3 := $eq.ref(cbq_reset, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 851} cbq_reset($p1);
    return;

  $bb3:
    assume $i4 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 852} cbq_destroy($p2);
    return;

  $bb4:
    assume $i5 == 1;
    call {:si_unique_call 853} cbq_ovl_classic(arg);
    return;

  $bb5:
    assume $i6 == 1;
    call {:si_unique_call 854} cbq_ovl_delay(arg);
    return;

  $bb6:
    assume $i7 == 1;
    call {:si_unique_call 855} cbq_ovl_lowprio(arg);
    return;

  $bb7:
    assume $i8 == 1;
    call {:si_unique_call 856} cbq_ovl_drop(arg);
    return;

  $bb8:
    assume $i9 == 1;
    call {:si_unique_call 857} cbq_ovl_rclassic(arg);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 256476);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.22, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(cbq_reshape_fail, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(cbq_dump_stats, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(cbq_dump, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(cbq_init, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i13 == 1);
    $i12 := $eq.ref(cbq_enqueue, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    call {:si_unique_call 858} $i1 := cbq_enqueue(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 859} $i4 := cbq_init($p2, $p3);
    $r := $i4;
    return;

  $bb4:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 860} $i7 := cbq_dump($p5, $p6);
    $r := $i7;
    return;

  $bb5:
    assume $i15 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 861} $i10 := cbq_dump_stats($p8, $p9);
    $r := $i10;
    return;

  $bb6:
    assume $i16 == 1;
    call {:si_unique_call 862} $i11 := cbq_reshape_fail(arg, arg1);
    $r := $i11;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 257508);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 258540);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(cbq_dump_class_stats, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 863} $i2 := cbq_dump_class_stats(arg, arg1, $p1);
    $r := $i2;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.30, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 864} __SMACK_static_init();
    call {:si_unique_call 865} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.43, $M.44, $M.45, $M.46, $M.0, $M.1, $M.47, $M.48, $M.42, $M.40, $M.41, $M.28, $M.30, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $CurrAddr, $M.22, $M.23, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.24, $M.25, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation cbq_dequeue_loop_$bb13(in_$p0: ref, in_$p2: ref, in_$p34: ref, in_$p39: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1) returns (out_$p39: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1)
{

  entry:
    out_$p39, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p54, out_$p56, out_$p57, out_$i58, out_$i59 := in_$p39, in_$p47, in_$i48, in_$i49, in_$p51, in_$i52, in_$i53, in_$p54, in_$p56, in_$p57, in_$i58, in_$i59;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb24_dummy;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p57;
    assume true;
    goto $bb24;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_167;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} out_$p57 := cbq_dequeue_1(in_$p0);
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, in_$p34, 0);
    goto corral_source_split_164;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p56, 0);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(208, 1));
    goto corral_source_split_162;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, 8);
    goto corral_source_split_161;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p2, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_160;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb19;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i64(out_$i52, 0);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i64($M.0, out_$p51);
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(208, 1));
    goto corral_source_split_150;

  $bb17:
    assume out_$i49 == 1;
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 8);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_146;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_145;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p39, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p54, out_$p56, out_$p57, out_$i58, out_$i59 := cbq_dequeue_loop_$bb13(in_$p0, in_$p2, in_$p34, out_$p39, out_$p47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$p54, out_$p56, out_$p57, out_$i58, out_$i59);
    return;

  exit:
    return;
}



procedure cbq_dequeue_loop_$bb13(in_$p0: ref, in_$p2: ref, in_$p34: ref, in_$p39: ref, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1) returns (out_$p39: ref, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$p54: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1);
  modifies $M.0, $M.31, $M.32, $M.33, $M.22, $M.34, $M.35, $M.23, $CurrAddr, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation cbq_drop_loop_$bb132(in_$p27: ref, in_$i28: i32, in_$p252: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$i262: i64, in_$i263: i1, in_$p264: ref, in_$p265: ref, in_$p266: ref, in_$p267: ref, in_$p268: ref, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$p275: ref, in_$i276: i64, in_$i277: i64, in_$i278: i1) returns (out_$p27: ref, out_$i28: i32, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$i262: i64, out_$i263: i1, out_$p264: ref, out_$p265: ref, out_$p266: ref, out_$p267: ref, out_$p268: ref, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$p275: ref, out_$i276: i64, out_$i277: i64, out_$i278: i1)
{

  entry:
    out_$p27, out_$i28, out_$p255, out_$p256, out_$p257, out_$p258, out_$p259, out_$p260, out_$p261, out_$i262, out_$i263, out_$p264, out_$p265, out_$p266, out_$p267, out_$p268, out_$p269, out_$p270, out_$p271, out_$i272, out_$i273, out_$p274, out_$p275, out_$i276, out_$i277, out_$i278 := in_$p27, in_$i28, in_$p255, in_$p256, in_$p257, in_$p258, in_$p259, in_$p260, in_$p261, in_$i262, in_$i263, in_$p264, in_$p265, in_$p266, in_$p267, in_$p268, in_$p269, in_$p270, in_$p271, in_$i272, in_$i273, in_$p274, in_$p275, in_$i276, in_$i277, in_$i278;
    goto $bb132, exit;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_512;

  $bb139:
    assume out_$i278 == 1;
    assume {:verifier.code 0} true;
    out_$p255 := out_$p275;
    goto $bb139_dummy;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$i278 := $ne.i64(out_$i276, out_$i277);
    goto corral_source_split_537;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$i277 := $p2i.ref.i64(in_$p252);
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$i276 := $p2i.ref.i64(out_$p275);
    goto corral_source_split_535;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    out_$p275 := $load.ref($M.0, out_$p274);
    goto corral_source_split_534;

  $bb135:
    assume {:verifier.code 0} true;
    out_$p274 := $add.ref($add.ref(out_$p255, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_533;

  $bb134:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb137:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p255, out_$i272;
    assume true;
    goto $bb137;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    out_$i273 := $ne.i32(out_$i272, 0);
    goto corral_source_split_531;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    out_$p271 := $load.ref($M.0, out_$p270);
    call {:si_unique_call 35} out_$i272 := devirtbounce.1(out_$p269, out_$p271);
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref(out_$p255, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_529;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    out_$p269 := $load.ref($M.0, out_$p268);
    goto corral_source_split_528;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref(out_$p267, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_527;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    out_$p267 := $load.ref($M.0, out_$p266);
    goto corral_source_split_526;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    out_$p266 := $add.ref($add.ref(out_$p265, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_525;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    out_$p265 := $load.ref($M.0, out_$p264);
    goto corral_source_split_524;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref(out_$p255, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_523;

  $bb133:
    assume out_$i263 == 1;
    goto corral_source_split_522;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    out_$i263 := $ne.i64(out_$i262, 0);
    goto corral_source_split_520;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    out_$i262 := $p2i.ref.i64(out_$p261);
    goto corral_source_split_519;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    out_$p261 := $load.ref($M.0, out_$p260);
    goto corral_source_split_518;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    out_$p260 := $add.ref($add.ref(out_$p259, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_517;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    out_$p259 := $load.ref($M.0, out_$p258);
    goto corral_source_split_516;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    out_$p258 := $add.ref($add.ref(out_$p257, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_515;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    out_$p257 := $load.ref($M.0, out_$p256);
    goto corral_source_split_514;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    out_$p256 := $add.ref($add.ref(out_$p255, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_513;

  $bb139_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p255, out_$p256, out_$p257, out_$p258, out_$p259, out_$p260, out_$p261, out_$i262, out_$i263, out_$p264, out_$p265, out_$p266, out_$p267, out_$p268, out_$p269, out_$p270, out_$p271, out_$i272, out_$i273, out_$p274, out_$p275, out_$i276, out_$i277, out_$i278 := cbq_drop_loop_$bb132(out_$p27, out_$i28, in_$p252, out_$p255, out_$p256, out_$p257, out_$p258, out_$p259, out_$p260, out_$p261, out_$i262, out_$i263, out_$p264, out_$p265, out_$p266, out_$p267, out_$p268, out_$p269, out_$p270, out_$p271, out_$i272, out_$i273, out_$p274, out_$p275, out_$i276, out_$i277, out_$i278);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb132(in_$p27: ref, in_$i28: i32, in_$p252: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$i262: i64, in_$i263: i1, in_$p264: ref, in_$p265: ref, in_$p266: ref, in_$p267: ref, in_$p268: ref, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$p275: ref, in_$i276: i64, in_$i277: i64, in_$i278: i1) returns (out_$p27: ref, out_$i28: i32, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$i262: i64, out_$i263: i1, out_$p264: ref, out_$p265: ref, out_$p266: ref, out_$p267: ref, out_$p268: ref, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$p275: ref, out_$i276: i64, out_$i277: i64, out_$i278: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop_loop_$bb117(in_$p27: ref, in_$i28: i32, in_$p223: ref, in_$p226: ref, in_$p227: ref, in_$p228: ref, in_$p229: ref, in_$p230: ref, in_$p231: ref, in_$p232: ref, in_$i233: i64, in_$i234: i1, in_$p235: ref, in_$p236: ref, in_$p237: ref, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$p241: ref, in_$p242: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$p246: ref, in_$i247: i64, in_$i248: i64, in_$i249: i1) returns (out_$p27: ref, out_$i28: i32, out_$p226: ref, out_$p227: ref, out_$p228: ref, out_$p229: ref, out_$p230: ref, out_$p231: ref, out_$p232: ref, out_$i233: i64, out_$i234: i1, out_$p235: ref, out_$p236: ref, out_$p237: ref, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$p241: ref, out_$p242: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$p246: ref, out_$i247: i64, out_$i248: i64, out_$i249: i1)
{

  entry:
    out_$p27, out_$i28, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$p231, out_$p232, out_$i233, out_$i234, out_$p235, out_$p236, out_$p237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i247, out_$i248, out_$i249 := in_$p27, in_$i28, in_$p226, in_$p227, in_$p228, in_$p229, in_$p230, in_$p231, in_$p232, in_$i233, in_$i234, in_$p235, in_$p236, in_$p237, in_$p238, in_$p239, in_$p240, in_$p241, in_$p242, in_$i243, in_$i244, in_$p245, in_$p246, in_$i247, in_$i248, in_$i249;
    goto $bb117, exit;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_478;

  $bb124:
    assume out_$i249 == 1;
    assume {:verifier.code 0} true;
    out_$p226 := out_$p246;
    goto $bb124_dummy;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i249 := $ne.i64(out_$i247, out_$i248);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$i248 := $p2i.ref.i64(in_$p223);
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    out_$i247 := $p2i.ref.i64(out_$p246);
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$p246 := $load.ref($M.0, out_$p245);
    goto corral_source_split_500;

  $bb120:
    assume {:verifier.code 0} true;
    out_$p245 := $add.ref($add.ref(out_$p226, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_499;

  $bb119:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb122:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p226, out_$i243;
    assume true;
    goto $bb122;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$i244 := $ne.i32(out_$i243, 0);
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$p242 := $load.ref($M.0, out_$p241);
    call {:si_unique_call 34} out_$i243 := devirtbounce.1(out_$p240, out_$p242);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$p241 := $add.ref($add.ref(out_$p226, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$p240 := $load.ref($M.0, out_$p239);
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    out_$p239 := $add.ref($add.ref(out_$p238, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$p238 := $load.ref($M.0, out_$p237);
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$p237 := $add.ref($add.ref(out_$p236, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$p236 := $load.ref($M.0, out_$p235);
    goto corral_source_split_490;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref($add.ref(out_$p226, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_489;

  $bb118:
    assume out_$i234 == 1;
    goto corral_source_split_488;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    out_$i234 := $ne.i64(out_$i233, 0);
    goto corral_source_split_486;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    out_$i233 := $p2i.ref.i64(out_$p232);
    goto corral_source_split_485;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    out_$p232 := $load.ref($M.0, out_$p231);
    goto corral_source_split_484;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    out_$p231 := $add.ref($add.ref(out_$p230, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_483;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    out_$p230 := $load.ref($M.0, out_$p229);
    goto corral_source_split_482;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(out_$p228, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_481;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    out_$p228 := $load.ref($M.0, out_$p227);
    goto corral_source_split_480;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    out_$p227 := $add.ref($add.ref(out_$p226, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_479;

  $bb124_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$p231, out_$p232, out_$i233, out_$i234, out_$p235, out_$p236, out_$p237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i247, out_$i248, out_$i249 := cbq_drop_loop_$bb117(out_$p27, out_$i28, in_$p223, out_$p226, out_$p227, out_$p228, out_$p229, out_$p230, out_$p231, out_$p232, out_$i233, out_$i234, out_$p235, out_$p236, out_$p237, out_$p238, out_$p239, out_$p240, out_$p241, out_$p242, out_$i243, out_$i244, out_$p245, out_$p246, out_$i247, out_$i248, out_$i249);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb117(in_$p27: ref, in_$i28: i32, in_$p223: ref, in_$p226: ref, in_$p227: ref, in_$p228: ref, in_$p229: ref, in_$p230: ref, in_$p231: ref, in_$p232: ref, in_$i233: i64, in_$i234: i1, in_$p235: ref, in_$p236: ref, in_$p237: ref, in_$p238: ref, in_$p239: ref, in_$p240: ref, in_$p241: ref, in_$p242: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$p246: ref, in_$i247: i64, in_$i248: i64, in_$i249: i1) returns (out_$p27: ref, out_$i28: i32, out_$p226: ref, out_$p227: ref, out_$p228: ref, out_$p229: ref, out_$p230: ref, out_$p231: ref, out_$p232: ref, out_$i233: i64, out_$i234: i1, out_$p235: ref, out_$p236: ref, out_$p237: ref, out_$p238: ref, out_$p239: ref, out_$p240: ref, out_$p241: ref, out_$p242: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$p246: ref, out_$i247: i64, out_$i248: i64, out_$i249: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop_loop_$bb102(in_$p27: ref, in_$i28: i32, in_$p194: ref, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$i204: i64, in_$i205: i1, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i64, in_$i220: i1) returns (out_$p27: ref, out_$i28: i32, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$i204: i64, out_$i205: i1, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i64, out_$i220: i1)
{

  entry:
    out_$p27, out_$i28, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$i204, out_$i205, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220 := in_$p27, in_$i28, in_$p197, in_$p198, in_$p199, in_$p200, in_$p201, in_$p202, in_$p203, in_$i204, in_$i205, in_$p206, in_$p207, in_$p208, in_$p209, in_$p210, in_$p211, in_$p212, in_$p213, in_$i214, in_$i215, in_$p216, in_$p217, in_$i218, in_$i219, in_$i220;
    goto $bb102, exit;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  $bb109:
    assume out_$i220 == 1;
    assume {:verifier.code 0} true;
    out_$p197 := out_$p217;
    goto $bb109_dummy;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    out_$i220 := $ne.i64(out_$i218, out_$i219);
    goto corral_source_split_469;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    out_$i219 := $p2i.ref.i64(in_$p194);
    goto corral_source_split_468;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    out_$i218 := $p2i.ref.i64(out_$p217);
    goto corral_source_split_467;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    out_$p217 := $load.ref($M.0, out_$p216);
    goto corral_source_split_466;

  $bb105:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(out_$p197, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_465;

  $bb104:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb107:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p197, out_$i214;
    assume true;
    goto $bb107;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    out_$i215 := $ne.i32(out_$i214, 0);
    goto corral_source_split_463;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    out_$p213 := $load.ref($M.0, out_$p212);
    call {:si_unique_call 33} out_$i214 := devirtbounce.1(out_$p211, out_$p213);
    goto corral_source_split_462;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref(out_$p197, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_461;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    out_$p211 := $load.ref($M.0, out_$p210);
    goto corral_source_split_460;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(out_$p209, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_459;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    out_$p209 := $load.ref($M.0, out_$p208);
    goto corral_source_split_458;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(out_$p207, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_457;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.0, out_$p206);
    goto corral_source_split_456;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref(out_$p197, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_455;

  $bb103:
    assume out_$i205 == 1;
    goto corral_source_split_454;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$i205 := $ne.i64(out_$i204, 0);
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$i204 := $p2i.ref.i64(out_$p203);
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_$p203 := $load.ref($M.0, out_$p202);
    goto corral_source_split_450;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(out_$p201, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$p201 := $load.ref($M.0, out_$p200);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(out_$p199, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$p199 := $load.ref($M.0, out_$p198);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(out_$p197, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_445;

  $bb109_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$i204, out_$i205, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220 := cbq_drop_loop_$bb102(out_$p27, out_$i28, in_$p194, out_$p197, out_$p198, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$i204, out_$i205, out_$p206, out_$p207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$p213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb102(in_$p27: ref, in_$i28: i32, in_$p194: ref, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$i204: i64, in_$i205: i1, in_$p206: ref, in_$p207: ref, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$p213: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i64, in_$i220: i1) returns (out_$p27: ref, out_$i28: i32, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$i204: i64, out_$i205: i1, out_$p206: ref, out_$p207: ref, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$p213: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i64, out_$i220: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop_loop_$bb87(in_$p27: ref, in_$i28: i32, in_$p165: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i175: i64, in_$i176: i1, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$i189: i64, in_$i190: i64, in_$i191: i1) returns (out_$p27: ref, out_$i28: i32, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i175: i64, out_$i176: i1, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$i189: i64, out_$i190: i64, out_$i191: i1)
{

  entry:
    out_$p27, out_$i28, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191 := in_$p27, in_$i28, in_$p168, in_$p169, in_$p170, in_$p171, in_$p172, in_$p173, in_$p174, in_$i175, in_$i176, in_$p177, in_$p178, in_$p179, in_$p180, in_$p181, in_$p182, in_$p183, in_$p184, in_$i185, in_$i186, in_$p187, in_$p188, in_$i189, in_$i190, in_$i191;
    goto $bb87, exit;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_410;

  $bb94:
    assume out_$i191 == 1;
    assume {:verifier.code 0} true;
    out_$p168 := out_$p188;
    goto $bb94_dummy;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i64(out_$i189, out_$i190);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$i190 := $p2i.ref.i64(in_$p165);
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$i189 := $p2i.ref.i64(out_$p188);
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$p188 := $load.ref($M.0, out_$p187);
    goto corral_source_split_432;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p168, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_431;

  $bb89:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb92:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p168, out_$i185;
    assume true;
    goto $bb92;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i186 := $ne.i32(out_$i185, 0);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$p184 := $load.ref($M.0, out_$p183);
    call {:si_unique_call 32} out_$i185 := devirtbounce.1(out_$p182, out_$p184);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(out_$p168, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$p182 := $load.ref($M.0, out_$p181);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(out_$p180, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$p180 := $load.ref($M.0, out_$p179);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(out_$p178, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$p178 := $load.ref($M.0, out_$p177);
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(out_$p168, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_421;

  $bb88:
    assume out_$i176 == 1;
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$i176 := $ne.i64(out_$i175, 0);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i175 := $p2i.ref.i64(out_$p174);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p174 := $load.ref($M.0, out_$p173);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(out_$p172, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    out_$p172 := $load.ref($M.0, out_$p171);
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(out_$p170, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$p170 := $load.ref($M.0, out_$p169);
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(out_$p168, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_411;

  $bb94_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191 := cbq_drop_loop_$bb87(out_$p27, out_$i28, in_$p165, out_$p168, out_$p169, out_$p170, out_$p171, out_$p172, out_$p173, out_$p174, out_$i175, out_$i176, out_$p177, out_$p178, out_$p179, out_$p180, out_$p181, out_$p182, out_$p183, out_$p184, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb87(in_$p27: ref, in_$i28: i32, in_$p165: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i175: i64, in_$i176: i1, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$p182: ref, in_$p183: ref, in_$p184: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$i189: i64, in_$i190: i64, in_$i191: i1) returns (out_$p27: ref, out_$i28: i32, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i175: i64, out_$i176: i1, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$p182: ref, out_$p183: ref, out_$p184: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$i189: i64, out_$i190: i64, out_$i191: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop_loop_$bb72(in_$p27: ref, in_$i28: i32, in_$p136: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i161: i64, in_$i162: i1) returns (out_$p27: ref, out_$i28: i32, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i161: i64, out_$i162: i1)
{

  entry:
    out_$p27, out_$i28, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162 := in_$p27, in_$i28, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$p144, in_$p145, in_$i146, in_$i147, in_$p148, in_$p149, in_$p150, in_$p151, in_$p152, in_$p153, in_$p154, in_$p155, in_$i156, in_$i157, in_$p158, in_$p159, in_$i160, in_$i161, in_$i162;
    goto $bb72, exit;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  $bb79:
    assume out_$i162 == 1;
    assume {:verifier.code 0} true;
    out_$p139 := out_$p159;
    goto $bb79_dummy;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$i162 := $ne.i64(out_$i160, out_$i161);
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$i161 := $p2i.ref.i64(in_$p136);
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    out_$i160 := $p2i.ref.i64(out_$p159);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p159 := $load.ref($M.0, out_$p158);
    goto corral_source_split_398;

  $bb75:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p139, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_397;

  $bb74:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb77:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p139, out_$i156;
    assume true;
    goto $bb77;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    out_$i157 := $ne.i32(out_$i156, 0);
    goto corral_source_split_395;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    out_$p155 := $load.ref($M.0, out_$p154);
    call {:si_unique_call 31} out_$i156 := devirtbounce.1(out_$p153, out_$p155);
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(out_$p139, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$p153 := $load.ref($M.0, out_$p152);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(out_$p151, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    out_$p151 := $load.ref($M.0, out_$p150);
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(out_$p149, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_389;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.0, out_$p148);
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p139, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_387;

  $bb73:
    assume out_$i147 == 1;
    goto corral_source_split_386;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i64(out_$i146, 0);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$i146 := $p2i.ref.i64(out_$p145);
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.0, out_$p144);
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, out_$p142);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(out_$p141, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_379;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p139, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_377;

  $bb79_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162 := cbq_drop_loop_$bb72(out_$p27, out_$i28, in_$p136, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$p144, out_$p145, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$p159, out_$i160, out_$i161, out_$i162);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb72(in_$p27: ref, in_$i28: i32, in_$p136: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$p159: ref, in_$i160: i64, in_$i161: i64, in_$i162: i1) returns (out_$p27: ref, out_$i28: i32, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$p159: ref, out_$i160: i64, out_$i161: i64, out_$i162: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop_loop_$bb57(in_$p27: ref, in_$i28: i32, in_$p107: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$i132: i64, in_$i133: i1) returns (out_$p27: ref, out_$i28: i32, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$i132: i64, out_$i133: i1)
{

  entry:
    out_$p27, out_$i28, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i133 := in_$p27, in_$i28, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$i131, in_$i132, in_$i133;
    goto $bb57, exit;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_342;

  $bb64:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$p110 := out_$p130;
    goto $bb64_dummy;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i64(out_$i131, out_$i132);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$i132 := $p2i.ref.i64(in_$p107);
    goto corral_source_split_366;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$i131 := $p2i.ref.i64(out_$p130);
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.0, out_$p129);
    goto corral_source_split_364;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p110, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_363;

  $bb59:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb62:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p110, out_$i127;
    assume true;
    goto $bb62;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i32(out_$i127, 0);
    goto corral_source_split_361;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.0, out_$p125);
    call {:si_unique_call 30} out_$i127 := devirtbounce.1(out_$p124, out_$p126);
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(out_$p110, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.0, out_$p123);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p122, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p120, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, out_$p119);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p110, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_353;

  $bb58:
    assume out_$i118 == 1;
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i64(out_$i117, 0);
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p113);
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p112, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p111);
    goto corral_source_split_344;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p110, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_343;

  $bb64_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i133 := cbq_drop_loop_$bb57(out_$p27, out_$i28, in_$p107, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$i131, out_$i132, out_$i133);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb57(in_$p27: ref, in_$i28: i32, in_$p107: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$i131: i64, in_$i132: i64, in_$i133: i1) returns (out_$p27: ref, out_$i28: i32, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$i131: i64, out_$i132: i64, out_$i133: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop_loop_$bb42(in_$p27: ref, in_$i28: i32, in_$p78: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i64, in_$i104: i1) returns (out_$p27: ref, out_$i28: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i64, out_$i104: i1)
{

  entry:
    out_$p27, out_$i28, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104 := in_$p27, in_$i28, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$p101, in_$i102, in_$i103, in_$i104;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  $bb49:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$p81 := out_$p101;
    goto $bb49_dummy;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i64(out_$i102, out_$i103);
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$i103 := $p2i.ref.i64(in_$p78);
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_330;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p81, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_329;

  $bb44:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb47:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p81, out_$i98;
    assume true;
    goto $bb47;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_327;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    call {:si_unique_call 29} out_$i98 := devirtbounce.1(out_$p95, out_$p97);
    goto corral_source_split_326;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p81, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p93, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p91, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, out_$p90);
    goto corral_source_split_320;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p81, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_319;

  $bb43:
    assume out_$i89 == 1;
    goto corral_source_split_318;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i64(out_$i88, 0);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$i88 := $p2i.ref.i64(out_$p87);
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p85, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p81, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_309;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104 := cbq_drop_loop_$bb42(out_$p27, out_$i28, in_$p78, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb42(in_$p27: ref, in_$i28: i32, in_$p78: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i64, in_$i104: i1) returns (out_$p27: ref, out_$i28: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i64, out_$i104: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop_loop_$bb27(in_$p27: ref, in_$i28: i32, in_$p49: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$i75: i1) returns (out_$p27: ref, out_$i28: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$i75: i1)
{

  entry:
    out_$p27, out_$i28, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75 := in_$p27, in_$i28, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  $bb34:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$p52 := out_$p72;
    goto $bb34_dummy;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i64(out_$i73, out_$i74);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    out_$i74 := $p2i.ref.i64(in_$p49);
    goto corral_source_split_298;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_297;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_296;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p52, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_295;

  $bb29:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb32:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p52, out_$i69;
    assume true;
    goto $bb32;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_293;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    call {:si_unique_call 28} out_$i69 := devirtbounce.1(out_$p66, out_$p68);
    goto corral_source_split_292;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p52, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_291;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_289;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_288;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_287;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_286;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p52, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_285;

  $bb28:
    assume out_$i60 == 1;
    goto corral_source_split_284;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_275;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75 := cbq_drop_loop_$bb27(out_$p27, out_$i28, in_$p49, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb27(in_$p27: ref, in_$i28: i32, in_$p49: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$i75: i1) returns (out_$p27: ref, out_$i28: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$i75: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_drop_loop_$bb7(in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i64, in_$i46: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i64, out_$i46: i1)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46 := in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_223;

  $bb19:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p43;
    goto $bb19_dummy;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i44, out_$i45);
    goto corral_source_split_265;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_264;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_262;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_261;

  $bb9:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p8, out_$i25;
    assume true;
    goto $bb12;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    call {:si_unique_call 25} out_$i25 := devirtbounce.1(out_$p22, out_$p24);
    call {:si_unique_call 26} {:cexpr "len"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_240;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_239;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_237;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_234;

  $bb8:
    assume out_$i16 == 1;
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_231;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 368)), $mul.ref(24, 1));
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_225;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_224;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46 := cbq_drop_loop_$bb7(in_$p5, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46);
    return;

  exit:
    return;
}



procedure cbq_drop_loop_$bb7(in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i64, in_$i46: i1) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i64, out_$i46: i1);
  modifies $M.0, $M.22, $M.23, $M.24, $M.25, $CurrAddr;



implementation cbq_reset_loop_$bb16(in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$p50: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p37: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$p50: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p37: ref)
{

  entry:
    out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p37 := in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$i49, in_$p50, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p37;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  $bb21:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p59;
    goto $bb21_dummy;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_770;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  $bb19:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$p59 := $0.ref;
    goto $bb20;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$p59 := out_$p58;
    goto $bb20;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p57, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_766;

  $bb18:
    assume out_$i56 == 1;
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p50, out_$i49);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p48);
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p47, out_$i46);
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_754;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.0, out_$p45);
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p44, out_$i43);
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p41, 0);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, $0.ref);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} qdisc_reset(out_$p39);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_742;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p37 := cbq_reset_loop_$bb16(out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p37);
    return;

  exit:
    return;
}



procedure cbq_reset_loop_$bb16(in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$p50: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p37: ref) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$p50: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p37: ref);
  modifies $M.0;



implementation cbq_reset_loop_$bb8(in_$p2: ref, in_$p19: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$p50: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p37: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i22: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$p50: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p37: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i22: i32)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p37, out_$i62, out_$i63, out_$i64, out_$i22 := in_$p24, in_$p25, in_$i26, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$i49, in_$p50, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p37, in_$i62, in_$i63, in_$i64, in_$i22;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  $bb24:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := out_$i62;
    goto $bb24_dummy;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    out_$i64 := $ugt.i32(out_$i63, out_$i62);
    goto corral_source_split_777;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, in_$p19);
    goto corral_source_split_776;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i22, 1);
    call {:si_unique_call 61} {:cexpr "h"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_775;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb15;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume !(out_$i61 == 1);
    goto corral_source_split_773;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_771;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_770;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  $bb19:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$p59 := $0.ref;
    goto $bb20;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    out_$p59 := out_$p58;
    goto $bb20;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p57, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_767;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_766;

  $bb18:
    assume out_$i56 == 1;
    goto corral_source_split_765;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_763;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_762;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_761;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p50, out_$i49);
    goto corral_source_split_759;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_758;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p48);
    goto corral_source_split_757;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_756;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p47, out_$i46);
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_754;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.0, out_$p45);
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p44, out_$i43);
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p41, 0);
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, $0.ref);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} qdisc_reset(out_$p39);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_742;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    call out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p37 := cbq_reset_loop_$bb16(out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p37);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_739;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p34;
    goto $bb16;

  $bb21:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$p37 := out_$p59;
    assume false;
    return;

  $bb13:
    assume out_$i36 == 1;
    goto corral_source_split_737;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, 0);
    goto corral_source_split_735;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_734;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  $bb11:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$p34 := $0.ref;
    goto $bb12;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$p34 := out_$p33;
    goto $bb12;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p32, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_730;

  $bb10:
    assume out_$i31 == 1;
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_727;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_726;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 8)), $mul.ref(0, 1));
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i32.i64(out_$i22);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_721;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p37, out_$i62, out_$i63, out_$i64, out_$i22 := cbq_reset_loop_$bb8(in_$p2, in_$p19, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p37, out_$i62, out_$i63, out_$i64, out_$i22);
    return;

  exit:
    return;
}



procedure cbq_reset_loop_$bb8(in_$p2: ref, in_$p19: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i8, in_$p50: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p37: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i22: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i8, out_$p50: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p37: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i22: i32);
  modifies $M.0;



implementation cbq_destroy_loop_$bb34(in_$p0: ref, in_$i59: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p58: ref, in_$p69: ref, in_$p60: ref) returns (out_$i59: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p58: ref, out_$p69: ref, out_$p60: ref)
{

  entry:
    out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p58, out_$p69, out_$p60 := in_$i59, in_$i61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p58, in_$p69, in_$p60;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  $bb39:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$p58 := out_$p64;
    goto $bb39_dummy;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, 0);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_901;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_900;

  $bb37:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$p64 := $0.ref;
    goto $bb38;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$p64 := out_$p63;
    goto $bb38;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p62, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_897;

  $bb36:
    assume out_$i61 == 1;
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i59, 0);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_893;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} cbq_destroy_class(in_$p0, out_$p58);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p69);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_889;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p58, out_$p69, out_$p60 := cbq_destroy_loop_$bb34(in_$p0, out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p58, out_$p69, out_$p60);
    return;

  exit:
    return;
}



procedure cbq_destroy_loop_$bb34(in_$p0: ref, in_$i59: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p58: ref, in_$p69: ref, in_$p60: ref) returns (out_$i59: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p58: ref, out_$p69: ref, out_$p60: ref);



implementation cbq_destroy_loop_$bb26(in_$p0: ref, in_$p2: ref, in_$p40: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i59: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p58: ref, in_$p69: ref, in_$p60: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i43: i32) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i59: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p58: ref, out_$p69: ref, out_$p60: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i43: i32)
{

  entry:
    out_$p45, out_$p46, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p58, out_$p69, out_$p60, out_$i70, out_$i71, out_$i72, out_$i43 := in_$p45, in_$p46, in_$i47, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i59, in_$i61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p58, in_$p69, in_$p60, in_$i70, in_$i71, in_$i72, in_$i43;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  $bb42:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i70;
    goto $bb42_dummy;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$i72 := $ugt.i32(out_$i71, out_$i70);
    goto corral_source_split_908;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, in_$p40);
    goto corral_source_split_907;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i43, 1);
    call {:si_unique_call 66} {:cexpr "h"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_906;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb33;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb40:
    assume !(out_$i66 == 1);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, 0);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_901;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_900;

  $bb37:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$p64 := $0.ref;
    goto $bb38;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$p64 := out_$p63;
    goto $bb38;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p62, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_897;

  $bb36:
    assume out_$i61 == 1;
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i59, 0);
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_893;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} cbq_destroy_class(in_$p0, out_$p58);
    goto corral_source_split_892;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p69);
    goto corral_source_split_890;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_889;

  $bb34:
    call out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p58, out_$p69, out_$p60 := cbq_destroy_loop_$bb34(in_$p0, out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p58, out_$p69, out_$p60);
    goto $bb34_last;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$p58 := out_$p55;
    goto $bb34;

  $bb39:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$p58 := out_$p64;
    assume false;
    return;

  $bb31:
    assume out_$i57 == 1;
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i64(out_$i56, 0);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_883;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_882;

  $bb29:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$p55 := $0.ref;
    goto $bb30;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p54;
    goto $bb30;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p53, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_879;

  $bb28:
    assume out_$i52 == 1;
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 8)), $mul.ref(0, 1));
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i32.i64(out_$i43);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_870;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_869;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p58, out_$p69, out_$p60, out_$i70, out_$i71, out_$i72, out_$i43 := cbq_destroy_loop_$bb26(in_$p0, in_$p2, in_$p40, out_$p45, out_$p46, out_$i47, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i59, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p58, out_$p69, out_$p60, out_$i70, out_$i71, out_$i72, out_$i43);
    return;

  exit:
    return;
}



procedure cbq_destroy_loop_$bb26(in_$p0: ref, in_$p2: ref, in_$p40: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i59: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p58: ref, in_$p69: ref, in_$p60: ref, in_$i70: i32, in_$i71: i32, in_$i72: i1, in_$i43: i32) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i59: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p58: ref, out_$p69: ref, out_$p60: ref, out_$i70: i32, out_$i71: i32, out_$i72: i1, out_$i43: i32);



implementation cbq_destroy_loop_$bb12(in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p23: ref) returns (out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p23: ref)
{

  entry:
    out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p23 := in_$p24, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p23;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  $bb17:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p33;
    goto $bb17_dummy;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_850;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_849;

  $bb15:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$p33 := $0.ref;
    goto $bb16;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$p33 := out_$p32;
    goto $bb16;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_846;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} tcf_destroy_chain(out_$p24);
    goto corral_source_split_839;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p23 := cbq_destroy_loop_$bb12(out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p23);
    return;

  exit:
    return;
}



procedure cbq_destroy_loop_$bb12(in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p23: ref) returns (out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p23: ref);



implementation cbq_destroy_loop_$bb4(in_$p2: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p23: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i8: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p23: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i8: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p23, out_$i36, out_$i37, out_$i38, out_$i8 := in_$p10, in_$p11, in_$i12, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p24, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p23, in_$i36, in_$i37, in_$i38, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_815;

  $bb20:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i36;
    goto $bb20_dummy;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    out_$i38 := $ugt.i32(out_$i37, out_$i36);
    goto corral_source_split_857;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, in_$p5);
    goto corral_source_split_856;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i8, 1);
    call {:si_unique_call 64} {:cexpr "h"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_855;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb11;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18:
    assume !(out_$i35 == 1);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_851;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_850;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_849;

  $bb15:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$p33 := $0.ref;
    goto $bb16;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$p33 := out_$p32;
    goto $bb16;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_847;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_846;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_843;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} tcf_destroy_chain(out_$p24);
    goto corral_source_split_839;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p23 := cbq_destroy_loop_$bb12(out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p23);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p20;
    goto $bb12;

  $bb17:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p33;
    assume false;
    return;

  $bb9:
    assume out_$i22 == 1;
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_831;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_830;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$p20 := $0.ref;
    goto $bb8;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p19;
    goto $bb8;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p18, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_827;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 8)), $mul.ref(0, 1));
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i32.i64(out_$i8);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_818;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p23, out_$i36, out_$i37, out_$i38, out_$i8 := cbq_destroy_loop_$bb4(in_$p2, in_$p5, out_$p10, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p24, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p23, out_$i36, out_$i37, out_$i38, out_$i8);
    return;

  exit:
    return;
}



procedure cbq_destroy_loop_$bb4(in_$p2: ref, in_$p5: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p23: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i8: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p23: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i8: i32);



implementation cbq_ovl_classic_loop_$bb24(in_$p4: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i80: i1, in_$i81: i64, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$i72: i64, in_$p73: ref, in_$i87: i64) returns (out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i80: i1, out_$i81: i64, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$i72: i64, out_$p73: ref, out_$i87: i64)
{

  entry:
    out_$p74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i72, out_$p73, out_$i87 := in_$p74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$p84, in_$i85, in_$i86, in_$i72, in_$p73, in_$i87;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  $bb32:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i72, out_$p73 := out_$i82, out_$p84;
    goto $bb32_dummy;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i82;
    assume true;
    goto $bb32;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_1518;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p73, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_1517;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  $bb27:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := out_$i72;
    goto $bb31;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i81;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_1514;

  $bb29:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i81 := out_$i78;
    goto $bb30;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$i81 := 1;
    goto $bb30;

  $bb28:
    assume out_$i80 == 1;
    goto corral_source_split_1512;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    out_$i80 := $sle.i64(out_$i78, 0);
    goto corral_source_split_1510;

  $bb26:
    assume out_$i79 == 1;
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i64(out_$i78, out_$i72);
    goto corral_source_split_1507;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    out_$i78 := $sub.i64(out_$i75, out_$i77);
    call {:si_unique_call 179} {:cexpr "delay"} boogie_si_record_i64(out_$i78);
    goto corral_source_split_1506;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.0, out_$p76);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.0, out_$p74);
    goto corral_source_split_1503;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i72, out_$p73, out_$i87 := cbq_ovl_classic_loop_$bb24(in_$p4, out_$p74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i85, out_$i86, out_$i72, out_$p73, out_$i87);
    return;

  exit:
    return;
}



procedure cbq_ovl_classic_loop_$bb24(in_$p4: ref, in_$p74: ref, in_$i75: i64, in_$p76: ref, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i80: i1, in_$i81: i64, in_$i82: i64, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$i72: i64, in_$p73: ref, in_$i87: i64) returns (out_$p74: ref, out_$i75: i64, out_$p76: ref, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i80: i1, out_$i81: i64, out_$i82: i64, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$i72: i64, out_$p73: ref, out_$i87: i64);



implementation cbq_undelay_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$i9: i64, in_$i17: i32, in_$i18: i64, in_$i19: i64, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i1, in_$i32: i1, in_$i33: i64, in_$i34: i64, in_$i35: i1, in_$i15: i32, in_$i16: i64, in_$i36: i64) returns (out_$i17: i32, out_$i18: i64, out_$i19: i64, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i1, out_$i32: i1, out_$i33: i64, out_$i34: i64, out_$i35: i1, out_$i15: i32, out_$i16: i64, out_$i36: i64)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i15, out_$i16, out_$i36 := in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i15, in_$i16, in_$i36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1559;

  $bb15:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$i16 := out_$i23, out_$i34;
    goto $bb15_dummy;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb15;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i23, 0);
    goto corral_source_split_1586;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := out_$i16;
    goto $bb14;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i33;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := out_$i16;
    goto $bb13;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i24;
    goto $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i32 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb9;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i64(out_$i24, out_$i16);
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p30, out_$i29);
    goto corral_source_split_1577;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p4, $mul.ref($sub.ref(0, 680), 904)), $mul.ref(680, 1));
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    out_$i29 := $or.i32(out_$i27, out_$i28);
    goto corral_source_split_1575;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$i28 := $shl.i32(1, out_$i20);
    goto corral_source_split_1574;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_1573;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p4, $mul.ref($sub.ref(0, 680), 904)), $mul.ref(680, 1));
    goto corral_source_split_1572;

  $bb6:
    assume out_$i25 == 1;
    goto corral_source_split_1571;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i64(out_$i24, 0);
    goto corral_source_split_1569;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} out_$i24 := cbq_undelay_prio(in_$p5, out_$i20, in_$i9);
    call {:si_unique_call 193} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_1568;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i32(out_$i22, out_$i15);
    call {:si_unique_call 191} {:cexpr "pmask"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1567;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$i22 := $xor.i32(out_$i21, $sub.i32(0, 1));
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$i21 := $shl.i32(1, out_$i20);
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i64.i32(out_$i19);
    call {:si_unique_call 190} {:cexpr "prio"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} out_$i19 := ffz(out_$i18);
    call {:si_unique_call 189} {:cexpr "tmp"} boogie_si_record_i64(out_$i19);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i32.i64(out_$i17);
    goto corral_source_split_1562;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i17 := $xor.i32(out_$i15, $sub.i32(0, 1));
    goto corral_source_split_1561;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i16, 0);
    goto corral_source_split_1581;

  $bb10:
    assume !(out_$i31 == 1);
    goto corral_source_split_1580;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i15, out_$i16, out_$i36 := cbq_undelay_loop_$bb4(in_$p4, in_$p5, in_$i9, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i15, out_$i16, out_$i36);
    return;

  exit:
    return;
}



procedure cbq_undelay_loop_$bb4(in_$p4: ref, in_$p5: ref, in_$i9: i64, in_$i17: i32, in_$i18: i64, in_$i19: i64, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i1, in_$i32: i1, in_$i33: i64, in_$i34: i64, in_$i35: i1, in_$i15: i32, in_$i16: i64, in_$i36: i64) returns (out_$i17: i32, out_$i18: i64, out_$i19: i64, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i1, out_$i32: i1, out_$i33: i64, out_$i34: i64, out_$i35: i1, out_$i15: i32, out_$i16: i64, out_$i36: i64);
  modifies $M.0;



implementation cbq_normalize_quanta_loop_$bb16(in_$p0: ref, in_$i1: i32, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i64, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i64, in_$p91: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p26: ref, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32) returns (out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i64, out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i64, out_$p91: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p26: ref, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32)
{

  entry:
    out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p26, out_vslice_dummy_var_59, out_vslice_dummy_var_60 := in_$p27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p53, in_$i54, in_$p55, in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p78, in_$i79, in_$p80, in_$i81, in_$p83, in_$p84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p91, in_$p94, in_$p95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p26, in_vslice_dummy_var_59, in_vslice_dummy_var_60;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  $bb30:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p100;
    goto $bb30_dummy;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_1919;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  $bb28:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$p100 := $0.ref;
    goto $bb29;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$p100 := out_$p99;
    goto $bb29;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p98, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p98 := $bitcast.ref.ref(out_$p95);
    goto corral_source_split_1915;

  $bb27:
    assume out_$i97 == 1;
    goto corral_source_split_1914;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i96, 0);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i96 := $p2i.ref.i64(out_$p95);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_1893;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1892;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p66, out_$i65);
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i64);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i63, 1);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i63 := $udiv.i32(out_$i62, 2);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} out_$p60 := qdisc_dev(out_$p59);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} out_vslice_dummy_var_59 := printk.ref.i32.i64(.str.3, out_$i54, out_$i56);
    goto corral_source_split_1868;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.0, out_$p55);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1866;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1864;

  $bb21:
    assume out_$i51 == 1;
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i51 := $sle.i64(out_$i50, 0);
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_1860;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1859;

  $bb19:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p48, out_$i47);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i47 := $sdiv.i64(out_$i41, out_$i46);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(60, 1)), $mul.ref(out_$i42, 4));
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(in_$i1);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i64(out_$i35, out_$i40);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(24, 1)), $mul.ref(out_$i36, 4));
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(in_$i1);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i35 := $mul.i64(out_$i32, out_$i34);
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(104, 1));
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(120, 1));
    goto corral_source_split_1841;

  $bb18:
    assume out_$i30 == 1;
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, in_$i1);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.0, out_$p27);
    goto corral_source_split_1836;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p91, out_$i90);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i32.i64(out_$i89);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i88, 1);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i88 := $udiv.i32(out_$i87, 2);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p85, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} out_$p85 := qdisc_dev(out_$p84);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_vslice_dummy_var_60 := printk.ref.i32.i64(.str.3, out_$i79, out_$i81);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.0, out_$p80);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1898;

  $bb24:
    assume out_$i76 == 1;
    goto corral_source_split_1897;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i76 := $sgt.i64(out_$i71, out_$i75);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i32.i64(out_$i74);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$i74 := $mul.i32(out_$i73, 32);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p69, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.0, out_$p70);
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} out_$p69 := qdisc_dev(out_$p68);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1881;

  $bb22:
    assume !(out_$i51 == 1);
    goto corral_source_split_1880;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p26, out_vslice_dummy_var_59, out_vslice_dummy_var_60 := cbq_normalize_quanta_loop_$bb16(in_$p0, in_$i1, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p26, out_vslice_dummy_var_59, out_vslice_dummy_var_60);
    return;

  exit:
    return;
}



procedure cbq_normalize_quanta_loop_$bb16(in_$p0: ref, in_$i1: i32, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i64, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i64, in_$p91: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p26: ref, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32) returns (out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i64, out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i64, out_$p91: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p26: ref, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32);
  modifies $M.0;



implementation cbq_normalize_quanta_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p8: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i64, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i64, in_$p91: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p26: ref, in_$i103: i32, in_$i104: i32, in_$i105: i1, in_$i11: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i64, out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i64, out_$p91: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p26: ref, out_$i103: i32, out_$i104: i32, out_$i105: i1, out_$i11: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p26, out_$i103, out_$i104, out_$i105, out_$i11, out_vslice_dummy_var_59, out_vslice_dummy_var_60 := in_$p13, in_$p14, in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p53, in_$i54, in_$p55, in_$i56, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p78, in_$i79, in_$p80, in_$i81, in_$p83, in_$p84, in_$p85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p91, in_$p94, in_$p95, in_$i96, in_$i97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p26, in_$i103, in_$i104, in_$i105, in_$i11, in_vslice_dummy_var_59, in_vslice_dummy_var_60;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  $bb33:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i103;
    goto $bb33_dummy;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    out_$i105 := $ugt.i32(out_$i104, out_$i103);
    goto corral_source_split_1926;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.0, in_$p8);
    goto corral_source_split_1925;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i32(out_$i11, 1);
    call {:si_unique_call 210} {:cexpr "h"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_1924;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb15;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb31:
    assume !(out_$i102 == 1);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_1919;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1918;

  $bb28:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$p100 := $0.ref;
    goto $bb29;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    out_$p100 := out_$p99;
    goto $bb29;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p98, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$p98 := $bitcast.ref.ref(out_$p95);
    goto corral_source_split_1915;

  $bb27:
    assume out_$i97 == 1;
    goto corral_source_split_1914;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i96, 0);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$i96 := $p2i.ref.i64(out_$p95);
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_1893;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1892;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p66, out_$i65);
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i64);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i63, 1);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$i63 := $udiv.i32(out_$i62, 2);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} out_$p60 := qdisc_dev(out_$p59);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_1870;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} out_vslice_dummy_var_59 := printk.ref.i32.i64(.str.3, out_$i54, out_$i56);
    goto corral_source_split_1868;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.0, out_$p55);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1866;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_1865;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1864;

  $bb21:
    assume out_$i51 == 1;
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i51 := $sle.i64(out_$i50, 0);
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_1860;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1859;

  $bb19:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p48, out_$i47);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i47 := $sdiv.i64(out_$i41, out_$i46);
    goto corral_source_split_1855;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(60, 1)), $mul.ref(out_$i42, 4));
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(in_$i1);
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i64(out_$i35, out_$i40);
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(24, 1)), $mul.ref(out_$i36, 4));
    goto corral_source_split_1847;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(in_$i1);
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    out_$i35 := $mul.i64(out_$i32, out_$i34);
    goto corral_source_split_1845;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(104, 1));
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(120, 1));
    goto corral_source_split_1841;

  $bb18:
    assume out_$i30 == 1;
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, in_$i1);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i8.i32(out_$i28);
    goto corral_source_split_1837;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i8($M.0, out_$p27);
    goto corral_source_split_1836;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    call out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p26, out_vslice_dummy_var_59, out_vslice_dummy_var_60 := cbq_normalize_quanta_loop_$bb16(in_$p0, in_$i1, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p26, out_vslice_dummy_var_59, out_vslice_dummy_var_60);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    goto $bb16;

  $bb30:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p100;
    assume false;
    return;

  $bb13:
    assume out_$i25 == 1;
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_1828;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$p23 := $0.ref;
    goto $bb12;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p22;
    goto $bb12;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p21, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_1824;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 8)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i11);
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_1815;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p91, out_$i90);
    goto corral_source_split_1912;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1911;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i32.i64(out_$i89);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i88, 1);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i88 := $udiv.i32(out_$i87, 2);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p85, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} out_$p85 := qdisc_dev(out_$p84);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_vslice_dummy_var_60 := printk.ref.i32.i64(.str.3, out_$i79, out_$i81);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.0, out_$p80);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_1899;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1898;

  $bb24:
    assume out_$i76 == 1;
    goto corral_source_split_1897;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i76 := $sgt.i64(out_$i71, out_$i75);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i32.i64(out_$i74);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$i74 := $mul.i32(out_$i73, 32);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_1887;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p69, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.0, out_$p70);
    goto corral_source_split_1885;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} out_$p69 := qdisc_dev(out_$p68);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(128, 1));
    goto corral_source_split_1881;

  $bb22:
    assume !(out_$i51 == 1);
    goto corral_source_split_1880;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p26, out_$i103, out_$i104, out_$i105, out_$i11, out_vslice_dummy_var_59, out_vslice_dummy_var_60 := cbq_normalize_quanta_loop_$bb8(in_$p0, in_$i1, in_$p8, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p53, out_$i54, out_$p55, out_$i56, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p78, out_$i79, out_$p80, out_$i81, out_$p83, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p94, out_$p95, out_$i96, out_$i97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p26, out_$i103, out_$i104, out_$i105, out_$i11, out_vslice_dummy_var_59, out_vslice_dummy_var_60);
    return;

  exit:
    return;
}



procedure cbq_normalize_quanta_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p8: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$i28: i8, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$i36: i64, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i64, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i64, in_$i76: i1, in_$p78: ref, in_$i79: i32, in_$p80: ref, in_$i81: i64, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i64, in_$p91: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p26: ref, in_$i103: i32, in_$i104: i32, in_$i105: i1, in_$i11: i32, in_vslice_dummy_var_59: i32, in_vslice_dummy_var_60: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$i28: i8, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$i36: i64, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i64, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i64, out_$i76: i1, out_$p78: ref, out_$i79: i32, out_$p80: ref, out_$i81: i64, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i64, out_$p91: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p26: ref, out_$i103: i32, out_$i104: i32, out_$i105: i1, out_$i11: i32, out_vslice_dummy_var_59: i32, out_vslice_dummy_var_60: i32);
  modifies $M.0;



implementation cbq_undelay_prio_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$i2: i64, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$i32: i64, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p45: ref, in_$p46: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p47: ref, in_$i48: i64, in_$i55: i64, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$i62: i64) returns (out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$i32: i64, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p45: ref, out_$p46: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p47: ref, out_$i48: i64, out_$i55: i64, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$i62: i64)
{

  entry:
    out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p45, out_$p46, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p47, out_$i48, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62 := in_$p10, in_$i11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$i35, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p45, in_$p46, in_$p49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p47, in_$i48, in_$i55, in_$i56, in_$p58, in_$p59, in_$i60, in_$i61, in_$i62;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1952;

  $bb18:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p47, out_$i48;
    goto $bb18_dummy;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i48;
    assume true;
    goto $bb18;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i55, out_$i60);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(out_$i56, 8));
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(in_$i1);
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_2005;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p47, out_$i48 := out_$p13, out_$i54;
    goto $bb14;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$p47, out_$i48 := out_$p46, out_$i11;
    goto $bb14;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_2002;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p10, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2001;

  $bb9:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i39, out_$i40);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(out_$i35, 8));
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(in_$i1);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, out_$p10);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(out_$i32, 8));
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(in_$i1);
    goto corral_source_split_1986;

  $bb8:
    assume out_$i31 == 1;
    goto corral_source_split_1985;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i29, out_$i30);
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(out_$i25, 8));
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(in_$i1);
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} cbq_activate_class(out_$p13);
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p24, 0);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p13, $mul.ref(0, 456)), $mul.ref(193, 1));
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p23, out_$i22);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p13, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.0, out_$p21);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p13, $mul.ref(0, 456)), $mul.ref(32, 1));
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p20, $0.ref);
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p13, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p19, out_$p18);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p10, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_1961;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p13, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_1960;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, in_$i2);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.0, out_$p14);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 456)), $mul.ref(232, 1));
    goto corral_source_split_1955;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p10, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_1953;

  $bb16:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := out_$i11;
    goto $bb17;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i53;
    goto $bb17;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.0, out_$p52);
    call {:si_unique_call 222} {:cexpr "sched"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p13, $mul.ref(0, 456)), $mul.ref(232, 1));
    goto corral_source_split_2013;

  $bb15:
    assume out_$i51 == 1;
    goto corral_source_split_2012;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, out_$i11);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p13, $mul.ref(0, 456)), $mul.ref(232, 1));
    goto corral_source_split_1981;

  $bb7:
    assume !(out_$i16 == 1);
    goto corral_source_split_1980;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p45, out_$p46, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p47, out_$i48, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62 := cbq_undelay_prio_loop_$bb5(in_$p0, in_$i1, in_$i2, out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p45, out_$p46, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p47, out_$i48, out_$i55, out_$i56, out_$p58, out_$p59, out_$i60, out_$i61, out_$i62);
    return;

  exit:
    return;
}



procedure cbq_undelay_prio_loop_$bb5(in_$p0: ref, in_$i1: i32, in_$i2: i64, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i8, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i31: i1, in_$i32: i64, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p45: ref, in_$p46: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p47: ref, in_$i48: i64, in_$i55: i64, in_$i56: i64, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$i62: i64) returns (out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i8, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i31: i1, out_$i32: i64, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p45: ref, out_$p46: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p47: ref, out_$i48: i64, out_$i55: i64, out_$i56: i64, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$i62: i64);
  modifies $M.0;



implementation cbq_deactivate_class_loop_$bb4(in_$p4: ref, in_$i7: i32, in_$i15: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p19: ref, in_$i57: i64, in_$i58: i64, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p19: ref, out_$i57: i64, out_$i58: i64, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1)
{

  entry:
    out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p19, out_$i57, out_$i58, out_$p60, out_$p61, out_$i62, out_$i63 := in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p19, in_$i57, in_$i58, in_$p60, in_$p61, in_$i62, in_$i63;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$p19 := out_$p22;
    goto $bb7_dummy;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    out_$p25, out_$p26 := out_$p20, out_$p22;
    assume true;
    goto $bb7;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, in_$i15);
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_2138;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2137;

  $bb5:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p19;
    assume true;
    goto $bb5;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$i63 := $ne.i64(out_$i57, out_$i62);
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(out_$i58, 8));
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(in_$i7);
    goto corral_source_split_2168;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_2167;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p19, out_$i57, out_$i58, out_$p60, out_$p61, out_$i62, out_$i63 := cbq_deactivate_class_loop_$bb4(in_$p4, in_$i7, in_$i15, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p19, out_$i57, out_$i58, out_$p60, out_$p61, out_$i62, out_$i63);
    return;

  exit:
    return;
}



procedure cbq_deactivate_class_loop_$bb4(in_$p4: ref, in_$i7: i32, in_$i15: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p19: ref, in_$i57: i64, in_$i58: i64, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1) returns (out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p19: ref, out_$i57: i64, out_$i58: i64, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1);



implementation cbq_update_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$p16: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i32: i64, in_$i45: i1, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i64, in_$i59: i64, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p8: ref) returns (out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$p16: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i32: i64, out_$i45: i1, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i64, out_$i59: i64, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p8: ref)
{

  entry:
    out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i32, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p8 := in_$p9, in_$i10, in_$p12, in_$i13, in_$i14, in_$p16, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i32, in_$i45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$p80, in_$i81, in_$p82, in_$p83, in_$p84, in_$i85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2223;

  $bb18:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p88;
    goto $bb18_dummy;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_2315;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_2314;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(144, 1));
    goto corral_source_split_2312;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p86, out_$i85);
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(200, 1));
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.0, out_$p84);
    goto corral_source_split_2309;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2308;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p75, out_$i74);
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2305;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(out_$i73, out_$i71);
    goto corral_source_split_2304;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i64($M.0, out_$p72);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2302;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i64(out_$i70, out_$i66);
    call {:si_unique_call 265} {:cexpr "idle"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_2301;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i32.i64(out_$i69);
    goto corral_source_split_2300;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} out_$i69 := qdisc_l2t(out_$p68, in_$i4);
    call {:si_unique_call 264} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i64(out_$i60, out_$i65);
    call {:si_unique_call 262} {:cexpr "idle"} boogie_si_record_i64(out_$i66);
    goto corral_source_split_2296;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i32.i64(out_$i64);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} out_$i64 := qdisc_l2t(out_$p63, in_$i4);
    call {:si_unique_call 261} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_2294;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(96, 1)), $mul.ref(80, 1));
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i64(out_$i53, out_$i59);
    call {:si_unique_call 259} {:cexpr "idle"} boogie_si_record_i64(out_$i60);
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$i59 := $ashr.i64(out_$i54, out_$i58);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i32.i64(out_$i57);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i56);
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.0, out_$p55);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i64(0, out_$i51);
    goto corral_source_split_2285;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i64(0, out_$i51);
    goto corral_source_split_2284;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p52, out_$i51);
    goto corral_source_split_2283;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_2282;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2281;

  $bb12:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := out_$i32;
    goto $bb13;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i50;
    goto $bb13;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    call {:si_unique_call 258} {:cexpr "avgidle"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_2278;

  $bb11:
    assume out_$i48 == 1;
    goto corral_source_split_2277;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i64(out_$i47, out_$i32);
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i64($M.0, out_$p46);
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(64, 1));
    goto corral_source_split_2266;

  $bb9:
    assume out_$i45 == 1;
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$i45 := $sle.i64(out_$i32, 0);
    goto corral_source_split_2263;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i43, out_$i10);
    call {:si_unique_call 257} {:cexpr "avgidle"} boogie_si_record_i64(out_$i44);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i44;
    goto $bb8;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i31;
    goto $bb8;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.0, out_$p30);
    call {:si_unique_call 253} {:cexpr "avgidle"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_2246;

  $bb6:
    assume out_$i29 == 1;
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$i29 := $ugt.i64(out_$i28, 134217728);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i64(out_$i25, out_$i27);
    call {:si_unique_call 252} {:cexpr "idle"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i64($M.0, out_$p26);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(200, 1));
    goto corral_source_split_2240;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2238;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p23, out_$i21);
    goto corral_source_split_2237;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_2236;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(out_$i19, out_$i20);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(in_$i4);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.0, out_$p18);
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p16, out_$i14);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i13, 1);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i64($M.0, out_$p9);
    call {:si_unique_call 251} {:cexpr "avgidle"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_2226;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i64(out_$i37, out_$i42);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$i42 := $ashr.i64(out_$i10, out_$i41);
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i32.i64(out_$i40);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i39);
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p38);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(34, 1));
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i64(out_$i28, out_$i36);
    call {:si_unique_call 256} {:cexpr "idle"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_2254;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i35);
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} out_$i35 := qdisc_l2t(out_$p34, in_$i4);
    call {:si_unique_call 255} {:cexpr "tmp"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(80, 1));
    goto corral_source_split_2250;

  $bb7:
    assume !(out_$i29 == 1);
    goto corral_source_split_2249;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p83, out_$i32);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p82, out_$i81);
    goto corral_source_split_2321;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.0, out_$p80);
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_2318;

  $bb15:
    assume out_$i79 == 1;
    goto corral_source_split_2317;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i64(out_$i78, out_$i32);
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i64($M.0, out_$p77);
    goto corral_source_split_2274;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(48, 1));
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p76, 0);
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2271;

  $bb10:
    assume !(out_$i45 == 1);
    goto corral_source_split_2270;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(216, 1));
    goto corral_source_split_2324;

  $bb16:
    assume !(out_$i79 == 1);
    goto corral_source_split_2323;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i32, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p8 := cbq_update_loop_$bb4(in_$p0, in_$i4, out_$p9, out_$i10, out_$p12, out_$i13, out_$i14, out_$p16, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i32, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$p80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p8);
    return;

  exit:
    return;
}



procedure cbq_update_loop_$bb4(in_$p0: ref, in_$i4: i32, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$p16: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i8, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i64, in_$i44: i64, in_$i32: i64, in_$i45: i1, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$i50: i64, in_$i51: i64, in_$p52: ref, in_$i53: i64, in_$i54: i64, in_$p55: ref, in_$i56: i8, in_$i57: i32, in_$i58: i64, in_$i59: i64, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p8: ref) returns (out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$p16: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i8, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i64, out_$i44: i64, out_$i32: i64, out_$i45: i1, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$i50: i64, out_$i51: i64, out_$p52: ref, out_$i53: i64, out_$i54: i64, out_$p55: ref, out_$i56: i8, out_$i57: i32, out_$i58: i64, out_$i59: i64, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p8: ref);
  modifies $M.0;



implementation cbq_dequeue_1_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i9: i64, in_$i10: i64, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$i20: i1, in_$i7: i32) returns (out_$i8: i32, out_$i9: i64, out_$i10: i64, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$i20: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i20, out_$i7 := in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$p18, in_$i20, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i14;
    goto $bb10_dummy;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i14, 0);
    goto corral_source_split_2359;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} out_$p15 := cbq_dequeue_prio(in_$p0, out_$i11);
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(out_$i13, out_$i7);
    call {:si_unique_call 272} {:cexpr "activemask"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$i13 := $xor.i32(out_$i12, $sub.i32(0, 1));
    goto corral_source_split_2349;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    out_$i12 := $shl.i32(1, out_$i11);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i64.i32(out_$i10);
    call {:si_unique_call 271} {:cexpr "prio"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} out_$i10 := ffz(out_$i9);
    call {:si_unique_call 270} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i10);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i32.i64(out_$i8);
    goto corral_source_split_2345;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $xor.i32(out_$i7, $sub.i32(0, 1));
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i20, out_$i7 := cbq_dequeue_1_loop_$bb4(in_$p0, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i20, out_$i7);
    return;

  exit:
    return;
}



procedure cbq_dequeue_1_loop_$bb4(in_$p0: ref, in_$i8: i32, in_$i9: i64, in_$i10: i64, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$i20: i1, in_$i7: i32) returns (out_$i8: i32, out_$i9: i64, out_$i10: i64, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$i20: i1, out_$i7: i32);
  modifies $M.0, $M.31, $M.32, $M.33, $M.22, $M.34, $M.35, $M.23, $CurrAddr, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation cbq_dequeue_prio_loop_$bb2(in_$i1: i32, in_$p3: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$p111: ref, in_$i127: i64, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i64, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$p147: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$p111: ref, out_$i127: i64, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i64, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$p147: ref)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i127, out_$p129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p36, out_$p37, out_$i38, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$i146, out_$p147 := in_$p13, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p91, in_$p92, in_$p94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i127, in_$p129, in_$p130, in_$p131, in_$p132, in_$p134, in_$i135, in_$i136, in_$p137, in_$p138, in_$p36, in_$p37, in_$i38, in_$p139, in_$p140, in_$i141, in_$i142, in_$i143, in_$p144, in_$p145, in_$i146, in_$p147;
    goto $bb2, exit;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  $bb42:
    assume out_$i143 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14, out_$p15, out_$i16 := out_$p36, out_$p37, out_$p140, out_$i38;
    goto $bb42_dummy;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p144, out_$p145, out_$i146, out_$p147 := out_$p36, out_$p37, out_$i38, out_$p140;
    assume true;
    goto $bb42;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i64(out_$i141, out_$i142);
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i142 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i141 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.0, out_$p139);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2470;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2469;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    out_$p36, out_$p37, out_$i38 := out_$p137, out_$p138, out_$i16;
    goto $bb12;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$p36, out_$p37, out_$i38 := out_$p13, out_$p15, 1;
    goto $bb12;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p35, out_$i34);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i64(out_$i31, out_$i33);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.0, out_$p30);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2461;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$i29 := $sle.i64(out_$i28, 0);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2456;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  $bb4:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p26 := out_$p15;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    goto $bb9;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} out_$p23 := cbq_under_limit(out_$p15);
    goto corral_source_split_2443;

  $bb3:
    assume out_$i22 == 1;
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2436;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;

  $bb28:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$p137, out_$p138 := out_$p13, out_$p15;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p137, out_$p138 := out_$p130, out_$p14;
    goto $bb41;

  $bb39:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} cbq_activate_class(out_$p15);
    goto corral_source_split_2590;

  $bb38:
    assume out_$i136 == 1;
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i135, 0);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, out_$p134);
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(out_$p132, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.0, out_$p131);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2583;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2582;

  $bb30:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$p130 := out_$p13;
    goto $bb37;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    out_$p130 := out_$p14;
    goto $bb37;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p129, out_$p14);
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(out_$i127, 8));
    goto corral_source_split_2579;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(in_$i1);
    goto corral_source_split_2578;

  $bb32:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$p111 := out_$p15;
    assume true;
    goto $bb32;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i64(out_$i108, out_$i109);
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$i108 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2554;

  $bb29:
    assume out_$i107 == 1;
    goto corral_source_split_2553;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i64(out_$i105, out_$i106);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    out_$i105 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p104, $0.ref);
    goto corral_source_split_2542;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p103, out_$p102);
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p14, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_2538;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2537;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i100 == 1;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i96 == 1;
    goto $bb25;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 0);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.0, out_$p94);
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(out_$p92, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_2450;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2449;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_2447;

  $bb14:
    assume out_$i47 == 1;
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$p48, out_$p49, out_$p50 := out_$p15, out_$p26, out_$p45;
    assume true;
    goto $bb14;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    call {:si_unique_call 289} out_$p45 := devirtbounce(out_$p42, out_$p44);
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_2477;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2476;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i99, in_$i1);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.0, out_$p97);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_2548;

  $bb26:
    assume !(out_$i96 == 1);
    goto corral_source_split_2547;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i127, out_$p129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p36, out_$p37, out_$i38, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$i146, out_$p147 := cbq_dequeue_prio_loop_$bb2(in_$i1, in_$p3, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i127, out_$p129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p36, out_$p37, out_$i38, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$i146, out_$p147);
    return;

  exit:
    return;
}



procedure cbq_dequeue_prio_loop_$bb2(in_$i1: i32, in_$p3: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$p111: ref, in_$i127: i64, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i64, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$p147: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$p111: ref, out_$i127: i64, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i64, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$p147: ref);
  modifies $M.0, $M.31, $M.32, $M.33, $M.22, $M.34, $M.35, $M.23, $CurrAddr, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation cbq_dequeue_prio_loop_$bb1(in_$i1: i32, in_$p3: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$p111: ref, in_$i127: i64, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i64, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$p147: ref, in_$i148: i1, in_$p149: ref) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$p111: ref, out_$i127: i64, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i64, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$p147: ref, out_$i148: i1, out_$p149: ref)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i127, out_$p129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p36, out_$p37, out_$i38, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$i146, out_$p147, out_$i148, out_$p149 := in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p91, in_$p92, in_$p94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$p101, in_$p102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i127, in_$p129, in_$p130, in_$p131, in_$p132, in_$p134, in_$i135, in_$i136, in_$p137, in_$p138, in_$p36, in_$p37, in_$i38, in_$p139, in_$p140, in_$i141, in_$i142, in_$i143, in_$p144, in_$p145, in_$i146, in_$p147, in_$i148, in_$p149;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2433;

  $bb45:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$p11, out_$p12 := out_$p144, out_$p145, out_$p147;
    goto $bb45_dummy;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$p149 := out_$p145;
    assume true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i148 := $ne.i32(out_$i146, 0);
    goto corral_source_split_2594;

  $bb43:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$p144, out_$p145, out_$i146, out_$p147 := out_$p36, out_$p37, out_$i38, out_$p140;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$i143 := $ne.i64(out_$i141, out_$i142);
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i142 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i141 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.0, out_$p139);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2470;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2469;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    out_$p36, out_$p37, out_$i38 := out_$p137, out_$p138, out_$i16;
    goto $bb12;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$p36, out_$p37, out_$i38 := out_$p13, out_$p15, 1;
    goto $bb12;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p35, out_$i34);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i64(out_$i31, out_$i33);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.0, out_$p32);
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(112, 1));
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.0, out_$p30);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2461;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$i29 := $sle.i64(out_$i28, 0);
    goto corral_source_split_2458;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(224, 1));
    goto corral_source_split_2456;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  $bb4:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p26 := out_$p15;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    goto $bb9;

  $bb6:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} out_$p23 := cbq_under_limit(out_$p15);
    goto corral_source_split_2443;

  $bb3:
    assume out_$i22 == 1;
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2437;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2436;

  $bb2:
    call out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i127, out_$p129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p36, out_$p37, out_$i38, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$i146, out_$p147 := cbq_dequeue_prio_loop_$bb2(in_$i1, in_$p3, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i127, out_$p129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p36, out_$p37, out_$i38, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$i146, out_$p147);
    goto $bb2_last;

  $bb2_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$p13, out_$p14, out_$p15, out_$i16 := out_$p10, out_$p11, out_$p12, 0;
    goto $bb2;

  $bb42:
    assume out_$i143 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14, out_$p15, out_$i16 := out_$p36, out_$p37, out_$p140, out_$i38;
    assume false;
    return;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;

  $bb28:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$p137, out_$p138 := out_$p13, out_$p15;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p137, out_$p138 := out_$p130, out_$p14;
    goto $bb41;

  $bb39:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} cbq_activate_class(out_$p15);
    goto corral_source_split_2590;

  $bb38:
    assume out_$i136 == 1;
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i135, 0);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.0, out_$p134);
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(out_$p132, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.0, out_$p131);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2583;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_2582;

  $bb30:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$p130 := out_$p13;
    goto $bb37;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    out_$p130 := out_$p14;
    goto $bb37;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p129, out_$p14);
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 904)), $mul.ref(560, 1)), $mul.ref(out_$i127, 8));
    goto corral_source_split_2579;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(in_$i1);
    goto corral_source_split_2578;

  $bb32:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$p111 := out_$p15;
    assume true;
    goto $bb32;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i64(out_$i108, out_$i109);
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    out_$i109 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$i108 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2554;

  $bb29:
    assume out_$i107 == 1;
    goto corral_source_split_2553;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i64(out_$i105, out_$i106);
    goto corral_source_split_2545;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    out_$i105 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p104, $0.ref);
    goto corral_source_split_2542;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p103, out_$p102);
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p14, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_2538;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(24, 1));
    goto corral_source_split_2537;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i100 == 1;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i96 == 1;
    goto $bb25;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 0);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.0, out_$p94);
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(out_$p92, $mul.ref(0, 368)), $mul.ref(136, 1)), $mul.ref(16, 1));
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_2450;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2449;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume out_$i25 == 1;
    goto corral_source_split_2447;

  $bb14:
    assume out_$i47 == 1;
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$p48, out_$p49, out_$p50 := out_$p15, out_$p26, out_$p45;
    assume true;
    goto $bb14;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    call {:si_unique_call 289} out_$p45 := devirtbounce(out_$p42, out_$p44);
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 368)), $mul.ref(8, 1));
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_2477;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(184, 1));
    goto corral_source_split_2476;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i100 := $ne.i32(out_$i99, in_$i1);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.0, out_$p97);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p15, $mul.ref(0, 456)), $mul.ref(192, 1));
    goto corral_source_split_2548;

  $bb26:
    assume !(out_$i96 == 1);
    goto corral_source_split_2547;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i127, out_$p129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p36, out_$p37, out_$i38, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$i146, out_$p147, out_$i148, out_$p149 := cbq_dequeue_prio_loop_$bb1(in_$i1, in_$p3, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i127, out_$p129, out_$p130, out_$p131, out_$p132, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p36, out_$p37, out_$i38, out_$p139, out_$p140, out_$i141, out_$i142, out_$i143, out_$p144, out_$p145, out_$i146, out_$p147, out_$i148, out_$p149);
    return;

  exit:
    return;
}



procedure cbq_dequeue_prio_loop_$bb1(in_$i1: i32, in_$p3: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i64, in_$p35: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$i108: i64, in_$i109: i64, in_$i110: i1, in_$p111: ref, in_$i127: i64, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p134: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i64, in_$i143: i1, in_$p144: ref, in_$p145: ref, in_$i146: i32, in_$p147: ref, in_$i148: i1, in_$p149: ref) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i64, out_$p35: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$i108: i64, out_$i109: i64, out_$i110: i1, out_$p111: ref, out_$i127: i64, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p134: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i64, out_$i143: i1, out_$p144: ref, out_$p145: ref, out_$i146: i32, out_$p147: ref, out_$i148: i1, out_$p149: ref);
  modifies $M.0, $M.31, $M.32, $M.33, $M.22, $M.34, $M.35, $M.23, $CurrAddr, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39;



implementation cbq_under_limit_loop_$bb14(in_$p4: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p23: ref, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p46: ref) returns (out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p23: ref, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p46: ref)
{

  entry:
    out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p23, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p46 := in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p23, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p46;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$p23 := out_$p26;
    goto $bb17_dummy;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i64(out_$i27, 0);
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2645;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_2644;

  $bb15:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$p24, out_$p46 := out_$p23, out_$p23;
    assume true;
    goto $bb15;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i64(out_$i48, out_$i50);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i64($M.0, out_$p49);
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p23, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.0, out_$p47);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p4, $mul.ref(0, 904)), $mul.ref(664, 1));
    goto corral_source_split_2665;

  $bb22:
    assume out_$i45 == 1;
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p23;
    assume true;
    goto $bb22;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_2662;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.0, out_$p43);
    goto corral_source_split_2661;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p23, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2660;

  $bb20:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i39, out_$i41);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p4, $mul.ref(0, 904)), $mul.ref(896, 1));
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.0, out_$p37);
    goto corral_source_split_2652;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p23, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2651;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p23, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p46 := cbq_under_limit_loop_$bb14(in_$p4, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p23, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p46);
    return;

  exit:
    return;
}



procedure cbq_under_limit_loop_$bb14(in_$p4: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p23: ref, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p46: ref) returns (out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p23: ref, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p46: ref);



implementation cbq_update_toplevel_loop_$bb11(in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p21: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p21: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1)
{

  entry:
    out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p21, out_$p31, out_$p32, out_$i33, out_$i34 := in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p21, in_$p31, in_$p32, in_$i33, in_$i34;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$p21 := out_$p22;
    goto $bb14_dummy;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p22;
    assume true;
    goto $bb14;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2708;

  $bb12:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2707;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p32;
    assume true;
    goto $bb12;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_2715;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p21, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_2714;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p21, out_$p31, out_$p32, out_$i33, out_$i34 := cbq_update_toplevel_loop_$bb11(out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p21, out_$p31, out_$p32, out_$i33, out_$i34);
    return;

  exit:
    return;
}



procedure cbq_update_toplevel_loop_$bb11(in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p21: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1) returns (out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p21: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1);



implementation cbq_classify_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$p5: ref, in_$p27: ref, in_$p25: ref, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p46: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$p75: ref, in_$p77: ref, in_$i78: i8, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1) returns (out_$p27: ref, out_$p25: ref, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p46: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$p75: ref, out_$p77: ref, out_$i78: i8, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1)
{

  entry:
    out_$p27, out_$p25, out_$p26, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p46, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$p84, out_$p85, out_$i86, out_$i87 := in_$p27, in_$p25, in_$p26, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$p34, in_$i35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$p45, in_$p47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p46, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p77, in_$i78, in_$i79, in_$i80, in_$p81, in_$p82, in_$p84, in_$p85, in_$i86, in_$i87;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  $bb53:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$p25, out_$p26 := out_$p82, out_$p60;
    goto $bb53_dummy;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p60;
    assume true;
    goto $bb53;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i64(out_$i86, 0);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p60, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p60, $mul.ref(0, 456)), $mul.ref(328, 1));
    goto corral_source_split_2829;

  $bb51:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$p81 := out_$p60;
    assume true;
    goto $bb51;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 0);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i8.i32(out_$i78);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i8($M.0, out_$p77);
    goto corral_source_split_2823;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p60, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2822;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb40;

  $bb44:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb40;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb40;

  $bb41:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i31, 1);
    assume {:verifier.code 0} true;
    out_$p75 := out_$p60;
    assume true;
    goto $bb46;

  $bb34:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i31, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p68 := out_$p26;
    assume true;
    goto $bb31;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i67 := $sge.i32(out_$i63, out_$i66);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i8.i32(out_$i65);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i8($M.0, out_$p64);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p61);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2801;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  $bb19:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$p60 := out_$p36;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p60 := out_$p46;
    goto $bb29;

  $bb27:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$p59 := out_$p26;
    assume true;
    goto $bb27;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i64(out_$i57, 0);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_2792;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p46 := out_$p56;
    goto $bb22;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p45;
    goto $bb22;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} out_$p45 := cbq_class_lookup(in_$p5, out_$i44);
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.27, out_$p43);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2777;

  $bb20:
    assume out_$i42 == 1;
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$i41 := $and.i32(out_$i40, $sub.i32(0, 65536));
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.27, out_$p39);
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2771;

  $bb18:
    assume out_$i38 == 1;
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i64(out_$i37, 0);
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$p36 := $i2p.i64.ref(out_$i35);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.26, out_$p34);
    goto corral_source_split_2765;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2764;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$p33 := out_$p26;
    assume true;
    goto $bb15;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i31, 0);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} out_$i31 := tc_classify_compat(in_$p0, out_$p30, in_$p3);
    call {:si_unique_call 303} {:cexpr "result"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(312, 1));
    goto corral_source_split_2751;

  $bb24:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$p56 := out_$p52;
    goto $bb25;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p55;
    goto $bb25;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2796;

  $bb23:
    assume out_$i54 == 1;
    goto corral_source_split_2795;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p25, $mul.ref(out_$i50, 8));
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i64(out_$i49, 15);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i32.i64(out_$i48);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.27, out_$p47);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  $bb21:
    assume !(out_$i42 == 1);
    goto corral_source_split_2781;

  $bb42:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i31, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  $bb37:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i31, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  $bb35:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i31, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  $bb53_dummy:
    call {:si_unique_call 1} out_$p27, out_$p25, out_$p26, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p46, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$p84, out_$p85, out_$i86, out_$i87 := cbq_classify_loop_$bb11(in_$p0, in_$p3, in_$p5, out_$p27, out_$p25, out_$p26, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p46, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$p84, out_$p85, out_$i86, out_$i87);
    return;

  exit:
    return;
}



procedure cbq_classify_loop_$bb11(in_$p0: ref, in_$p3: ref, in_$p5: ref, in_$p27: ref, in_$p25: ref, in_$p26: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p47: ref, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p46: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$p64: ref, in_$i65: i8, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$p75: ref, in_$p77: ref, in_$i78: i8, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1) returns (out_$p27: ref, out_$p25: ref, out_$p26: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p47: ref, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p46: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$p64: ref, out_$i65: i8, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$p75: ref, out_$p77: ref, out_$i78: i8, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1);



implementation cbq_mark_toplevel_loop_$bb11(in_$i3: i32, in_$i21: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p26: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p26: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1)
{

  entry:
    out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p26, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43 := in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p26, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$p26 := out_$p27;
    goto $bb14_dummy;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p27;
    assume true;
    goto $bb14;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    out_$i30 := $ult.i64(out_$i29, in_$i21);
    goto corral_source_split_2907;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.0, out_$p28);
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 456)), $mul.ref(208, 1));
    goto corral_source_split_2905;

  $bb12:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p37;
    assume true;
    goto $bb12;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i42, in_$i3);
    goto corral_source_split_2920;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i41);
    goto corral_source_split_2919;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i8($M.0, out_$p40);
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p37, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_2917;

  $bb17:
    assume out_$i39 == 1;
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_2913;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_2912;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_2911;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p26, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43 := cbq_mark_toplevel_loop_$bb11(in_$i3, in_$i21, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p26, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure cbq_mark_toplevel_loop_$bb11(in_$i3: i32, in_$i21: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p26: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$i41: i8, in_$i42: i32, in_$i43: i1) returns (out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p26: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$i41: i8, out_$i42: i32, out_$i43: i1);



implementation cbq_reclassify_loop_$bb4(in_$p1: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6 := in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p17, in_$p18, in_$i19, in_$i20, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2993;

  $bb13:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p18;
    goto $bb13_dummy;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3011;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3010;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p6, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_3009;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$p15 := out_$p9;
    assume true;
    goto $bb10;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i12, out_$i13);
    goto corral_source_split_3003;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3002;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_3001;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i64(out_$i10, 0);
    goto corral_source_split_2998;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_2997;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_2996;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(0, 8));
    goto corral_source_split_2995;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6 := cbq_reclassify_loop_$bb4(in_$p1, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6);
    return;

  exit:
    return;
}



procedure cbq_reclassify_loop_$bb4(in_$p1: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$i12: i64, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$i12: i64, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref);



implementation qdisc_class_find_loop_$bb7(in_$i1: i32, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p18: ref) returns (out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p18: ref)
{

  entry:
    out_$p19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p18 := in_$p19, in_$i20, in_$i21, in_$p22, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p18;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  $bb16:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p31;
    goto $bb16_dummy;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, 0);
    goto corral_source_split_3060;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_3059;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  $bb14:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$p31 := $0.ref;
    goto $bb15;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$p31 := out_$p30;
    goto $bb15;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p29, $mul.ref($sub.ref(0, 8), 24));
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3055;

  $bb13:
    assume out_$i28 == 1;
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3050;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3049;

  $bb10:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p18;
    assume true;
    goto $bb10;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, in_$i1);
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_3042;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p18 := qdisc_class_find_loop_$bb7(in_$i1, out_$p19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p18);
    return;

  exit:
    return;
}



procedure qdisc_class_find_loop_$bb7(in_$i1: i32, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p18: ref) returns (out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p18: ref);



implementation cbq_change_class_loop_$bb86(in_$p7: ref, in_$i157: i32, in_$p159: ref, in_$i160: i32, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$i168: i32, in_$i169: i32, in_$p170: ref, in_$i171: i64, in_$i172: i1, in_$i173: i32, in_$i175: i32, in_$i176: i1, in_$i158: i32, in_$i177: i32) returns (out_$p159: ref, out_$i160: i32, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$i168: i32, out_$i169: i32, out_$p170: ref, out_$i171: i64, out_$i172: i1, out_$i173: i32, out_$i175: i32, out_$i176: i1, out_$i158: i32, out_$i177: i32)
{

  entry:
    out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i176, out_$i158, out_$i177 := in_$p159, in_$i160, in_$i161, in_$p162, in_$p163, in_$i164, in_$i165, in_$p166, in_$p167, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i175, in_$i176, in_$i158, in_$i177;
    goto $bb86, exit;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;

  $bb95:
    assume out_$i176 == 1;
    assume {:verifier.code 0} true;
    out_$i158 := out_$i175;
    goto $bb95_dummy;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i177 := out_$i175;
    assume true;
    goto $bb95;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$i176 := $sle.i32(out_$i175, 32767);
    goto corral_source_split_3447;

  $bb94:
    assume {:verifier.code 0} true;
    out_$i175 := $add.i32(out_$i158, 1);
    call {:si_unique_call 393} {:cexpr "i"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_3446;

  $bb92:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    out_$i173 := out_$i158;
    assume true;
    goto $bb92;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i64(out_$i171, 0);
    goto corral_source_split_3439;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    out_$i171 := $p2i.ref.i64(out_$p170);
    goto corral_source_split_3438;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} out_$p170 := cbq_class_lookup(in_$p7, out_$i169);
    goto corral_source_split_3437;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    out_$i169 := $or.i32(out_$i168, in_$i157);
    goto corral_source_split_3436;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i32($M.0, out_$p167);
    goto corral_source_split_3435;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3434;

  $bb89:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p166, 1);
    goto corral_source_split_3432;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3431;

  $bb88:
    assume out_$i165 == 1;
    goto corral_source_split_3430;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i165 := $ugt.i32(out_$i164, 32767);
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.0, out_$p163);
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p162, out_$i161);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    out_$i161 := $add.i32(out_$i160, 1);
    goto corral_source_split_3423;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p159);
    goto corral_source_split_3422;

  $bb87:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p7, $mul.ref(0, 904)), $mul.ref(900, 1));
    goto corral_source_split_3421;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb95_dummy:
    call {:si_unique_call 1} out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i176, out_$i158, out_$i177 := cbq_change_class_loop_$bb86(in_$p7, in_$i157, out_$p159, out_$i160, out_$i161, out_$p162, out_$p163, out_$i164, out_$i165, out_$p166, out_$p167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i175, out_$i176, out_$i158, out_$i177);
    return;

  exit:
    return;
}



procedure cbq_change_class_loop_$bb86(in_$p7: ref, in_$i157: i32, in_$p159: ref, in_$i160: i32, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$i168: i32, in_$i169: i32, in_$p170: ref, in_$i171: i64, in_$i172: i1, in_$i173: i32, in_$i175: i32, in_$i176: i1, in_$i158: i32, in_$i177: i32) returns (out_$p159: ref, out_$i160: i32, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$i168: i32, out_$i169: i32, out_$p170: ref, out_$i171: i64, out_$i172: i1, out_$i173: i32, out_$i175: i32, out_$i176: i1, out_$i158: i32, out_$i177: i32);
  modifies $M.0;



implementation cbq_delete_loop_$bb24()
{

  entry:
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb24_dummy;

  $bb24_dummy:
    call {:si_unique_call 1} cbq_delete_loop_$bb24();
    return;

  exit:
    return;
}



procedure cbq_delete_loop_$bb24();



implementation cbq_walk_loop_$bb16(in_$p0: ref, in_$p1: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i32, in_$i40: i1, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p26: ref) returns (out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i32, out_$i40: i1, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p26: ref)
{

  entry:
    out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p26 := in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p42, in_$i43, in_$i44, in_$p45, in_$p48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p26;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3768;

  $bb28:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p54;
    goto $bb28_dummy;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_3808;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3807;

  $bb26:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$p54 := $0.ref;
    goto $bb27;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p53;
    goto $bb27;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p52, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_3804;

  $bb25:
    assume out_$i51 == 1;
    goto corral_source_split_3803;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_3784;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3783;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, out_$i34);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, 1);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3777;

  $bb18:
    assume out_$i31 == 1;
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i28, out_$i30);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_3771;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i44);
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 1);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_3798;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3797;

  $bb23:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, 0);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p26);
    call {:si_unique_call 433} out_$i39 := devirtbounce.7(out_$p37, in_$p0, out_$i38, in_$p1);
    call {:si_unique_call 434} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_3789;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3788;

  $bb19:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p26 := cbq_walk_loop_$bb16(in_$p0, in_$p1, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p26);
    return;

  exit:
    return;
}



procedure cbq_walk_loop_$bb16(in_$p0: ref, in_$p1: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i32, in_$i40: i1, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p26: ref) returns (out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i32, out_$i40: i1, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p26: ref);
  modifies $M.0, $M.28;



implementation cbq_walk_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p8: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i32, in_$i40: i1, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p26: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i11: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i32, out_$i40: i1, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p26: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i11: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p26, out_$i57, out_$i58, out_$i59, out_$i11 := in_$p13, in_$p14, in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p42, in_$i43, in_$i44, in_$p45, in_$p48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p26, in_$i57, in_$i58, in_$i59, in_$i11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  $bb31:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i57;
    goto $bb31_dummy;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$i59 := $ugt.i32(out_$i58, out_$i57);
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, in_$p8);
    goto corral_source_split_3814;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i11, 1);
    call {:si_unique_call 435} {:cexpr "h"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_3813;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb15;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb29:
    assume !(out_$i56 == 1);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_3808;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3807;

  $bb26:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$p54 := $0.ref;
    goto $bb27;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p53;
    goto $bb27;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p52, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_3804;

  $bb25:
    assume out_$i51 == 1;
    goto corral_source_split_3803;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_3784;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref($add.ref($add.ref(out_$p26, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_3783;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, out_$i34);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, 1);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3777;

  $bb18:
    assume out_$i31 == 1;
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i28, out_$i30);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_3771;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    call out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p26 := cbq_walk_loop_$bb16(in_$p0, in_$p1, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p26);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    goto $bb16;

  $bb28:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$p26 := out_$p54;
    assume false;
    return;

  $bb13:
    assume out_$i25 == 1;
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_3763;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3762;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$p23 := $0.ref;
    goto $bb12;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p22;
    goto $bb12;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p21, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_3759;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 8)), $mul.ref(0, 1));
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i11);
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_3750;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i44);
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 1);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    goto corral_source_split_3798;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3797;

  $bb23:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, 0);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p26);
    call {:si_unique_call 433} out_$i39 := devirtbounce.7(out_$p37, in_$p0, out_$i38, in_$p1);
    call {:si_unique_call 434} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_3789;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3788;

  $bb19:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p26, out_$i57, out_$i58, out_$i59, out_$i11 := cbq_walk_loop_$bb8(in_$p0, in_$p1, in_$p3, in_$p8, out_$p13, out_$p14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p42, out_$i43, out_$i44, out_$p45, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p26, out_$i57, out_$i58, out_$i59, out_$i11);
    return;

  exit:
    return;
}



procedure cbq_walk_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p8: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i32, in_$i40: i1, in_$p42: ref, in_$i43: i32, in_$i44: i32, in_$p45: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p26: ref, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$i11: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i32, out_$i40: i1, out_$p42: ref, out_$i43: i32, out_$i44: i32, out_$p45: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p26: ref, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$i11: i32);
  modifies $M.0, $M.28;



implementation cbq_unlink_class_loop_$bb6(in_$p0: ref, in_$i14: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p18: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p18: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p18, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33 := in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p18, in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p18 := out_$p19;
    goto $bb9_dummy;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$p23, out_$p24 := out_$p19, out_$p20;
    assume true;
    goto $bb9;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i64(out_$i21, in_$i14);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_4032;

  $bb7:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4031;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$p19, out_$p20 := out_$p28, out_$p27;
    assume true;
    goto $bb7;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i29, out_$i32);
    goto corral_source_split_4051;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_4046;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p18, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4045;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p18, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33 := cbq_unlink_class_loop_$bb6(in_$p0, in_$i14, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p18, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33);
    return;

  exit:
    return;
}



procedure cbq_unlink_class_loop_$bb6(in_$p0: ref, in_$i14: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p18: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p18: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1);



implementation cbq_adjust_levels_loop_$bb8(in_$p3: ref, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32) returns (out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32)
{

  entry:
    out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25 := in_$p8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  $bb12:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9 := out_$p19, out_$i17;
    goto $bb12_dummy;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i17;
    assume true;
    goto $bb12;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i20, out_$i23);
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p3, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4105;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4104;

  $bb10:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i9;
    goto $bb11;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i16;
    goto $bb11;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    call {:si_unique_call 476} {:cexpr "level"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4100;

  $bb9:
    assume out_$i13 == 1;
    goto corral_source_split_4099;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, out_$i9);
    goto corral_source_split_4097;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_4096;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.0, out_$p10);
    goto corral_source_split_4095;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4094;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25 := cbq_adjust_levels_loop_$bb8(in_$p3, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure cbq_adjust_levels_loop_$bb8(in_$p3: ref, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32) returns (out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32);



implementation cbq_adjust_levels_loop_$bb5(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i8, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1) returns (out_$p3: ref, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i8, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1)
{

  entry:
    out_$p3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35 := in_$p3, in_$p4, in_$p5, in_$i6, in_$i7, in_$p8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4085;

  $bb16:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p3 := out_$p33;
    goto $bb16_dummy;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_4123;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_4122;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p3, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p31, out_$i30);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p3, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4118;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i8(out_$i29);
    goto corral_source_split_4117;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, 1);
    goto corral_source_split_4116;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i8.i32(out_$i27);
    goto corral_source_split_4115;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i8(out_$i26);
    goto corral_source_split_4114;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4113;

  $bb7:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := 0;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i25;
    goto $bb15;

  $bb13:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i17;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i20, out_$i23);
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_4110;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_4109;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p3, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_4108;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(168, 1));
    goto corral_source_split_4105;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4104;

  $bb10:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i9;
    goto $bb11;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i16;
    goto $bb11;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    call {:si_unique_call 476} {:cexpr "level"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4100;

  $bb9:
    assume out_$i13 == 1;
    goto corral_source_split_4099;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, out_$i9);
    goto corral_source_split_4097;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_4096;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i8($M.0, out_$p10);
    goto corral_source_split_4095;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p8, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4094;

  $bb8:
    call out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25 := cbq_adjust_levels_loop_$bb8(out_$p3, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    out_$p8, out_$i9 := out_$p5, 0;
    goto $bb8;

  $bb12:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9 := out_$p19, out_$i17;
    assume false;
    return;

  $bb6:
    assume out_$i7 == 1;
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i64(out_$i6, 0);
    goto corral_source_split_4089;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_4088;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.0, out_$p4);
    goto corral_source_split_4087;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(out_$p3, $mul.ref(0, 456)), $mul.ref(176, 1));
    goto corral_source_split_4086;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35 := cbq_adjust_levels_loop_$bb5(out_$p3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35);
    return;

  exit:
    return;
}



procedure cbq_adjust_levels_loop_$bb5(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$i9: i32, in_$p10: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i25: i32, in_$i26: i32, in_$i27: i8, in_$i28: i32, in_$i29: i32, in_$i30: i8, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1) returns (out_$p3: ref, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$i9: i32, out_$p10: ref, out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i25: i32, out_$i26: i32, out_$i27: i8, out_$i28: i32, out_$i29: i32, out_$i30: i8, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1);
  modifies $M.0;



implementation cbq_sync_defmap_loop_$bb32(in_$p6: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p54: ref, in_$i55: i32, in_$i88: i32, in_$i21: i32) returns (out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p54: ref, out_$i55: i32, out_$i88: i32)
{

  entry:
    out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88 := in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p54, in_$i55, in_$i88;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  $bb45:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$p54, out_$i55 := out_$p85, out_$i76;
    goto $bb45_dummy;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i76;
    assume true;
    goto $bb45;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_4243;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  $bb43:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$p85 := $0.ref;
    goto $bb44;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$p85 := out_$p84;
    goto $bb44;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_4239;

  $bb42:
    assume out_$i82 == 1;
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4233;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4232;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i55;
    goto $bb41;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i75;
    goto $bb41;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    call {:si_unique_call 480} {:cexpr "level"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p72, out_$p54);
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(out_$i70, 8));
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(in_$i21);
    goto corral_source_split_4225;

  $bb39:
    assume out_$i69 == 1;
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i66, out_$i67);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$i67 := $shl.i32(1, in_$i21);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4218;

  $bb37:
    assume out_$i64 == 1;
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, out_$i55);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p61);
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4212;

  $bb34:
    assume out_$i60 == 1;
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i58, out_$i59);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(in_$p6);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_4206;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb36;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb36;

  $bb45_dummy:
    call {:si_unique_call 1} out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88 := cbq_sync_defmap_loop_$bb32(in_$p6, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, in_$i21);
    return;

  exit:
    return;
}



procedure cbq_sync_defmap_loop_$bb32(in_$p6: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p54: ref, in_$i55: i32, in_$i88: i32, in_$i21: i32) returns (out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p54: ref, out_$i55: i32, out_$i88: i32);
  modifies $M.0;



implementation cbq_sync_defmap_loop_$bb24(in_$p4: ref, in_$p6: ref, in_$p33: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p54: ref, in_$i55: i32, in_$i88: i32, in_$i53: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i37: i32, in_$i38: i32, in_$i21: i32) returns (out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p54: ref, out_$i55: i32, out_$i88: i32, out_$i53: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i37: i32, out_$i38: i32)
{

  entry:
    out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i53, out_$i89, out_$i90, out_$i91, out_$i37, out_$i38 := in_$p40, in_$p41, in_$i42, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p54, in_$i55, in_$i88, in_$i53, in_$i89, in_$i90, in_$i91, in_$i37, in_$i38;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;

  $bb48:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i37, out_$i38 := out_$i53, out_$i89;
    goto $bb48_dummy;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$i91 := $ugt.i32(out_$i90, out_$i89);
    goto corral_source_split_4250;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, in_$p33);
    goto corral_source_split_4249;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i38, 1);
    call {:si_unique_call 481} {:cexpr "h"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_4248;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb31;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i88;
    goto $bb31;

  $bb46:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i76;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_4243;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  $bb43:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$p85 := $0.ref;
    goto $bb44;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$p85 := out_$p84;
    goto $bb44;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_4239;

  $bb42:
    assume out_$i82 == 1;
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4233;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4232;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i55;
    goto $bb41;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i75;
    goto $bb41;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    call {:si_unique_call 480} {:cexpr "level"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p72, out_$p54);
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(out_$i70, 8));
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(in_$i21);
    goto corral_source_split_4225;

  $bb39:
    assume out_$i69 == 1;
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i66, out_$i67);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$i67 := $shl.i32(1, in_$i21);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4218;

  $bb37:
    assume out_$i64 == 1;
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, out_$i55);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p61);
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4212;

  $bb34:
    assume out_$i60 == 1;
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i58, out_$i59);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(in_$p6);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_4206;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    call out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88 := cbq_sync_defmap_loop_$bb32(in_$p6, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, in_$i21);
    goto $bb32_last;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$p54, out_$i55 := out_$p50, out_$i37;
    goto $bb32;

  $bb45:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$p54, out_$i55 := out_$p85, out_$i76;
    assume false;
    return;

  $bb29:
    assume out_$i52 == 1;
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i37;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_4198;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;

  $bb27:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$p50 := $0.ref;
    goto $bb28;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$p50 := out_$p49;
    goto $bb28;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p48, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4194;

  $bb26:
    assume out_$i47 == 1;
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p41, $mul.ref(out_$i42, 8)), $mul.ref(0, 1));
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i32.i64(out_$i38);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_4185;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb36;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb36;

  $bb48_dummy:
    call {:si_unique_call 1} out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i53, out_$i89, out_$i90, out_$i91, out_$i37, out_$i38 := cbq_sync_defmap_loop_$bb24(in_$p4, in_$p6, in_$p33, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i53, out_$i89, out_$i90, out_$i91, out_$i37, out_$i38, in_$i21);
    return;

  exit:
    return;
}



procedure cbq_sync_defmap_loop_$bb24(in_$p4: ref, in_$p6: ref, in_$p33: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p54: ref, in_$i55: i32, in_$i88: i32, in_$i53: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i37: i32, in_$i38: i32, in_$i21: i32) returns (out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p54: ref, out_$i55: i32, out_$i88: i32, out_$i53: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i37: i32, out_$i38: i32);
  modifies $M.0;



implementation {:SIextraRecBound 16} cbq_sync_defmap_loop_$bb15(in_$p4: ref, in_$p6: ref, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p54: ref, in_$i55: i32, in_$i88: i32, in_$i53: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i37: i32, in_$i38: i32, in_$i36: i32, in_$i31: i32, in_$i92: i32, in_$i93: i1, in_$i21: i32) returns (out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p54: ref, out_$i55: i32, out_$i88: i32, out_$i53: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i37: i32, out_$i38: i32, out_$i36: i32, out_$i31: i32, out_$i92: i32, out_$i93: i1, out_$i21: i32)
{

  entry:
    out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i53, out_$i89, out_$i90, out_$i91, out_$i37, out_$i38, out_$i36, out_$i31, out_$i92, out_$i93, out_$i21 := in_$p22, in_$i23, in_$i24, in_$i25, in_$p27, in_$p28, in_$i29, in_$i30, in_$p33, in_$i34, in_$i35, in_$p40, in_$p41, in_$i42, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p54, in_$i55, in_$i88, in_$i53, in_$i89, in_$i90, in_$i91, in_$i37, in_$i38, in_$i36, in_$i31, in_$i92, in_$i93, in_$i21;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4159;

  $bb51:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i92;
    goto $bb51_dummy;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$i93 := $sle.i32(out_$i92, 15);
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i31, 1);
    call {:si_unique_call 479} {:cexpr "i"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_4173;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4172;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i36;
    goto $bb19;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i21;
    goto $bb19;

  $bb17:
    assume out_$i30 == 1;
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_4166;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(out_$i25, 8));
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i21);
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i8.i32(out_$i23);
    call {:si_unique_call 478} {:cexpr "level"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4163;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i8($M.0, out_$p22);
    goto corral_source_split_4162;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p6, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb23;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i21;
    goto $bb23;

  $bb49:
    assume !(out_$i91 == 1);
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$i91 := $ugt.i32(out_$i90, out_$i89);
    goto corral_source_split_4250;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, out_$p33);
    goto corral_source_split_4249;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i38, 1);
    call {:si_unique_call 481} {:cexpr "h"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_4248;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb31;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i88;
    goto $bb31;

  $bb46:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i76;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_4243;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  $bb43:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$p85 := $0.ref;
    goto $bb44;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$p85 := out_$p84;
    goto $bb44;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_4239;

  $bb42:
    assume out_$i82 == 1;
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_4236;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_4233;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_4232;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i55;
    goto $bb41;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i75;
    goto $bb41;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    call {:si_unique_call 480} {:cexpr "level"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.0, out_$p73);
    goto corral_source_split_4229;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4228;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p72, out_$p54);
    goto corral_source_split_4227;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(in_$p6, $mul.ref(0, 456)), $mul.ref(328, 1)), $mul.ref(out_$i70, 8));
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i21);
    goto corral_source_split_4225;

  $bb39:
    assume out_$i69 == 1;
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i66, out_$i67);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$i67 := $shl.i32(1, out_$i21);
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(40, 1));
    goto corral_source_split_4218;

  $bb37:
    assume out_$i64 == 1;
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i63, out_$i55);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.0, out_$p61);
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_4212;

  $bb34:
    assume out_$i60 == 1;
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i64(out_$i58, out_$i59);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(in_$p6);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_4206;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p54, $mul.ref(0, 456)), $mul.ref(136, 1));
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    call out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88 := cbq_sync_defmap_loop_$bb32(in_$p6, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i21);
    goto $bb32_last;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_$p54, out_$i55 := out_$p50, out_$i37;
    goto $bb32;

  $bb45:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$p54, out_$i55 := out_$p85, out_$i76;
    assume false;
    return;

  $bb29:
    assume out_$i52 == 1;
    goto corral_source_split_4201;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i37;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_4199;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_4198;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4197;

  $bb27:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$p50 := $0.ref;
    goto $bb28;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$p50 := out_$p49;
    goto $bb28;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p48, $mul.ref($sub.ref(0, 8), 456));
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_4194;

  $bb26:
    assume out_$i47 == 1;
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_4191;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_4190;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p41, $mul.ref(out_$i42, 8)), $mul.ref(0, 1));
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto corral_source_split_4187;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i32.i64(out_$i38);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_4185;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    call out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i53, out_$i89, out_$i90, out_$i91, out_$i37, out_$i38 := cbq_sync_defmap_loop_$bb24(in_$p4, in_$p6, out_$p33, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i53, out_$i89, out_$i90, out_$i91, out_$i37, out_$i38, out_$i21);
    goto $bb24_last;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38 := out_$i24, 0;
    goto $bb24;

  $bb48:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i37, out_$i38 := out_$i53, out_$i89;
    assume false;
    return;

  $bb21:
    assume out_$i35 == 1;
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i21;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i35 := $ugt.i32(out_$i34, 0);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_4177;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 904)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4176;

  $bb18:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb36;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb36;

  $bb51_dummy:
    call {:si_unique_call 1} out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i53, out_$i89, out_$i90, out_$i91, out_$i37, out_$i38, out_$i36, out_$i31, out_$i92, out_$i93, out_$i21 := cbq_sync_defmap_loop_$bb15(in_$p4, in_$p6, out_$p22, out_$i23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$p33, out_$i34, out_$i35, out_$p40, out_$p41, out_$i42, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p54, out_$i55, out_$i88, out_$i53, out_$i89, out_$i90, out_$i91, out_$i37, out_$i38, out_$i36, out_$i31, out_$i92, out_$i93, out_$i21);
    return;

  exit:
    return;
}



procedure cbq_sync_defmap_loop_$bb15(in_$p4: ref, in_$p6: ref, in_$p22: ref, in_$i23: i8, in_$i24: i32, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p54: ref, in_$i55: i32, in_$i88: i32, in_$i53: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i37: i32, in_$i38: i32, in_$i36: i32, in_$i31: i32, in_$i92: i32, in_$i93: i1, in_$i21: i32) returns (out_$p22: ref, out_$i23: i8, out_$i24: i32, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p54: ref, out_$i55: i32, out_$i88: i32, out_$i53: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i37: i32, out_$i38: i32, out_$i36: i32, out_$i31: i32, out_$i92: i32, out_$i93: i1, out_$i21: i32);
  modifies $M.0;



implementation cbq_change_defmap_loop_$bb16(in_$i12: i32, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p25: ref, in_$p36: ref) returns (out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p25: ref, out_$p36: ref)
{

  entry:
    out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$i34, out_$i35, out_$p25, out_$p36 := in_$p27, in_$i28, in_$i29, in_$p30, in_$p32, in_$p33, in_$i34, in_$i35, in_$p25, in_$p36;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4791;

  $bb22:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p25 := out_$p33;
    goto $bb22_dummy;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p33;
    assume true;
    goto $bb22;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_4802;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p25, $mul.ref(0, 456)), $mul.ref(152, 1));
    goto corral_source_split_4801;

  $bb19:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p25;
    assume true;
    goto $bb19;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, in_$i12);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_4794;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 456)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4793;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$i34, out_$i35, out_$p25, out_$p36 := cbq_change_defmap_loop_$bb16(in_$i12, out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$i34, out_$i35, out_$p25, out_$p36);
    return;

  exit:
    return;
}



procedure cbq_change_defmap_loop_$bb16(in_$i12: i32, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p25: ref, in_$p36: ref) returns (out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p25: ref, out_$p36: ref);



implementation cbq_ovl_rclassic_loop_$bb4(in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p11: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p11: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p11, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23 := in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p11, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$p11 := out_$p12;
    goto $bb7_dummy;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i15, out_$i16);
    goto corral_source_split_5144;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, in_$p8);
    goto corral_source_split_5143;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i8.i32(out_$i14);
    goto corral_source_split_5142;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i8($M.0, out_$p13);
    goto corral_source_split_5141;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 456)), $mul.ref(194, 1));
    goto corral_source_split_5140;

  $bb5:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5139;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    out_$p12, out_$p23 := out_$p20, out_$p20;
    assume true;
    goto $bb5;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_5155;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_5154;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_5153;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p11, $mul.ref(0, 456)), $mul.ref(160, 1));
    goto corral_source_split_5152;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p11, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23 := cbq_ovl_rclassic_loop_$bb4(in_$p8, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p11, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23);
    return;

  exit:
    return;
}



procedure cbq_ovl_rclassic_loop_$bb4(in_$p8: ref, in_$p12: ref, in_$p13: ref, in_$i14: i8, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$p11: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i8, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$p11: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref);



implementation main_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i6: i64, in_$p8: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$i18: i64, in_$i19: i32, in_$i20: i64, in_$i21: i32, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$i27: i32, in_$i28: i64, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i291: i32, in_$i292: i1, in_$i294: i32, in_$i295: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: ref, in_vslice_dummy_var_78: ref, in_vslice_dummy_var_79: ref, in_vslice_dummy_var_80: ref, in_vslice_dummy_var_81: ref, in_vslice_dummy_var_82: ref, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: ref, in_vslice_dummy_var_94: ref, in_vslice_dummy_var_95: i64, in_vslice_dummy_var_96: i64, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: ref, in_vslice_dummy_var_102: ref, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i64, in_vslice_dummy_var_106: i64, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32) returns (out_$i34: i32, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i291: i32, out_$i292: i1, out_$i294: i32, out_$i295: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: ref, out_vslice_dummy_var_78: ref, out_vslice_dummy_var_79: ref, out_vslice_dummy_var_80: ref, out_vslice_dummy_var_81: ref, out_vslice_dummy_var_82: ref, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: ref, out_vslice_dummy_var_94: ref, out_vslice_dummy_var_95: i64, out_vslice_dummy_var_96: i64, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: ref, out_vslice_dummy_var_102: ref, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i64, out_vslice_dummy_var_106: i64, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32)
{

  entry:
    out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$p75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$p144, out_$i146, out_$i147, out_$p148, out_$p149, out_$i151, out_$i152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i257, out_$i258, out_$p259, out_$i261, out_$i262, out_$p263, out_$i265, out_$i266, out_$p267, out_$i269, out_$i270, out_$p271, out_$i273, out_$i274, out_$p275, out_$i277, out_$i278, out_$p279, out_$i281, out_$i282, out_$p283, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i294, out_$i295, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111 := in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i68, in_$i69, in_$p70, in_$p71, in_$i73, in_$i74, in_$p75, in_$p76, in_$i78, in_$i79, in_$p80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i91, in_$i92, in_$p93, in_$i95, in_$i96, in_$p97, in_$i99, in_$i100, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i109, in_$i110, in_$p111, in_$i113, in_$i114, in_$p115, in_$i117, in_$i118, in_$p119, in_$i121, in_$i122, in_$p123, in_$i125, in_$i126, in_$p127, in_$i129, in_$i130, in_$p131, in_$i133, in_$i134, in_$p135, in_$i137, in_$i138, in_$p139, in_$i141, in_$i142, in_$p143, in_$p144, in_$i146, in_$i147, in_$p148, in_$p149, in_$i151, in_$i152, in_$p153, in_$p154, in_$i156, in_$i157, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$p198, in_$i200, in_$i201, in_$p202, in_$i204, in_$i205, in_$p206, in_$i208, in_$i209, in_$p210, in_$i212, in_$i213, in_$p214, in_$i216, in_$i217, in_$p218, in_$i220, in_$i221, in_$p222, in_$i223, in_$i224, in_$p225, in_$i226, in_$i227, in_$p228, in_$i230, in_$i231, in_$p232, in_$i234, in_$i235, in_$p236, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$i243, in_$i244, in_$p245, in_$i247, in_$i248, in_$p249, in_$i250, in_$i251, in_$p252, in_$i253, in_$i254, in_$p255, in_$i257, in_$i258, in_$p259, in_$i261, in_$i262, in_$p263, in_$i265, in_$i266, in_$p267, in_$i269, in_$i270, in_$p271, in_$i273, in_$i274, in_$p275, in_$i277, in_$i278, in_$p279, in_$i281, in_$i282, in_$p283, in_$i285, in_$i286, in_$p287, in_$i288, in_$i289, in_$p290, in_$i291, in_$i292, in_$i294, in_$i295, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} out_$i34 := __VERIFIER_nondet_int();
    call {:si_unique_call 664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i34);
    call {:si_unique_call 665} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i34);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb120_dummy;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb13:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $M.44 := out_$i62;
    call {:si_unique_call 674} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i61, 1);
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    out_$i61 := $M.44;
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 673} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} cbq_destroy(out_$p60);
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    out_$p60 := $M.40;
    goto corral_source_split_5379;

  $bb41:
    assume out_$i59 == 1;
    goto corral_source_split_5378;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 2);
    goto corral_source_split_5376;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i58 := $M.43;
    goto corral_source_split_5375;

  $bb39:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.44 := out_$i57;
    call {:si_unique_call 671} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$i57 := $sub.i32(out_$i56, 1);
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$i56 := $M.44;
    goto corral_source_split_5371;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 670} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5370;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} cbq_destroy(out_$p55);
    goto corral_source_split_5369;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$p55 := $M.40;
    goto corral_source_split_5368;

  $bb38:
    assume out_$i54 == 1;
    goto corral_source_split_5367;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 3);
    goto corral_source_split_5365;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    out_$i53 := $M.43;
    goto corral_source_split_5364;

  $bb36:
    assume out_$i52 == 1;
    goto corral_source_split_5363;

  $bb34:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i41, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb28:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i41, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb15:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i41, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5325:
    assume {:verifier.code 1} true;
    call {:si_unique_call 666} out_$i41 := __VERIFIER_nondet_int();
    call {:si_unique_call 667} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i41);
    call {:si_unique_call 668} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i41);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i39 := $M.43;
    goto corral_source_split_5322;

  $bb10:
    assume out_$i38 == 1;
    goto corral_source_split_5321;

  $bb3:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i34, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i34, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb52:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 680} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} out_vslice_dummy_var_76 := cbq_enqueue(out_$p75, out_$p76);
    goto corral_source_split_5407;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    out_$p76 := $M.40;
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$p75 := $M.41;
    goto corral_source_split_5405;

  $bb51:
    assume out_$i74 == 1;
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 2);
    goto corral_source_split_5402;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i73 := $M.43;
    goto corral_source_split_5401;

  $bb49:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 678} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} out_vslice_dummy_var_75 := cbq_enqueue(out_$p70, out_$p71);
    goto corral_source_split_5398;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    out_$p71 := $M.40;
    goto corral_source_split_5397;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$p70 := $M.41;
    goto corral_source_split_5396;

  $bb48:
    assume out_$i69 == 1;
    goto corral_source_split_5395;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 3);
    goto corral_source_split_5393;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i68 := $M.43;
    goto corral_source_split_5392;

  $bb46:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 676} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} out_vslice_dummy_var_74 := cbq_enqueue(out_$p65, out_$p66);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$p66 := $M.40;
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$p65 := $M.41;
    goto corral_source_split_5387;

  $bb45:
    assume out_$i64 == 1;
    goto corral_source_split_5386;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 1);
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i63 := $M.43;
    goto corral_source_split_5360;

  $bb35:
    assume !(out_$i51 == 1);
    goto corral_source_split_5359;

  $bb61:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 686} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5429;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} cbq_reset(out_$p86);
    goto corral_source_split_5428;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    out_$p86 := $M.40;
    goto corral_source_split_5427;

  $bb60:
    assume out_$i85 == 1;
    goto corral_source_split_5426;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i32(out_$i84, 2);
    goto corral_source_split_5424;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i84 := $M.43;
    goto corral_source_split_5423;

  $bb58:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 684} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} cbq_reset(out_$p83);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$p83 := $M.40;
    goto corral_source_split_5419;

  $bb57:
    assume out_$i82 == 1;
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 3);
    goto corral_source_split_5416;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i81 := $M.43;
    goto corral_source_split_5415;

  $bb55:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 682} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} cbq_reset(out_$p80);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    out_$p80 := $M.40;
    goto corral_source_split_5411;

  $bb54:
    assume out_$i79 == 1;
    goto corral_source_split_5410;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 1);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$i78 := $M.43;
    goto corral_source_split_5348;

  $bb30:
    assume out_$i49 == 1;
    goto corral_source_split_5347;

  $bb29:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i41, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb70:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 692} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5450;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} out_vslice_dummy_var_79 := cbq_dequeue(out_$p97);
    goto corral_source_split_5449;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    out_$p97 := $M.40;
    goto corral_source_split_5448;

  $bb69:
    assume out_$i96 == 1;
    goto corral_source_split_5447;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 2);
    goto corral_source_split_5445;

  $bb68:
    assume {:verifier.code 0} true;
    out_$i95 := $M.43;
    goto corral_source_split_5444;

  $bb67:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 690} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} out_vslice_dummy_var_78 := cbq_dequeue(out_$p93);
    goto corral_source_split_5441;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    out_$p93 := $M.40;
    goto corral_source_split_5440;

  $bb66:
    assume out_$i92 == 1;
    goto corral_source_split_5439;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 3);
    goto corral_source_split_5437;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i91 := $M.43;
    goto corral_source_split_5436;

  $bb64:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 688} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} out_vslice_dummy_var_77 := cbq_dequeue(out_$p89);
    goto corral_source_split_5433;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$p89 := $M.40;
    goto corral_source_split_5432;

  $bb63:
    assume out_$i88 == 1;
    goto corral_source_split_5431;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    out_$i87 := $M.43;
    goto corral_source_split_5352;

  $bb32:
    assume out_$i50 == 1;
    goto corral_source_split_5351;

  $bb31:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i41, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb73:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb75:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 695} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5460;

  $bb74:
    assume out_$i104 == 1;
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 0);
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    out_$i103 := $M.47;
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $M.47 := out_$i102;
    call {:si_unique_call 694} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} out_$i102 := cbq_init(out_$p101, in_$p1);
    goto corral_source_split_5454;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    out_$p101 := $M.40;
    goto corral_source_split_5453;

  $bb72:
    assume out_$i100 == 1;
    goto corral_source_split_5452;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 2);
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$i99 := $M.43;
    goto corral_source_split_5356;

  $bb33:
    assume !(out_$i50 == 1);
    goto corral_source_split_5355;

  $bb85:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 701} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} out_vslice_dummy_var_82 := qdisc_peek_dequeued(out_$p115);
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$p115 := $M.40;
    goto corral_source_split_5479;

  $bb84:
    assume out_$i114 == 1;
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 2);
    goto corral_source_split_5476;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i113 := $M.43;
    goto corral_source_split_5475;

  $bb82:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 699} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5473;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} out_vslice_dummy_var_81 := qdisc_peek_dequeued(out_$p111);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$p111 := $M.40;
    goto corral_source_split_5471;

  $bb81:
    assume out_$i110 == 1;
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 3);
    goto corral_source_split_5468;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i109 := $M.43;
    goto corral_source_split_5467;

  $bb79:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 697} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5465;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} out_vslice_dummy_var_80 := qdisc_peek_dequeued(out_$p107);
    goto corral_source_split_5464;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$p107 := $M.40;
    goto corral_source_split_5463;

  $bb78:
    assume out_$i106 == 1;
    goto corral_source_split_5462;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 1);
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$i105 := $M.43;
    goto corral_source_split_5340;

  $bb26:
    assume out_$i47 == 1;
    goto corral_source_split_5339;

  $bb17:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i41, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb16:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i41, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb94:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 707} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} out_vslice_dummy_var_85 := cbq_dump_stats(out_$p127, in_$p3);
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$p127 := $M.40;
    goto corral_source_split_5500;

  $bb93:
    assume out_$i126 == 1;
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i125, 2);
    goto corral_source_split_5497;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i125 := $M.43;
    goto corral_source_split_5496;

  $bb91:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 705} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} out_vslice_dummy_var_84 := cbq_dump_stats(out_$p123, in_$p3);
    goto corral_source_split_5493;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$p123 := $M.40;
    goto corral_source_split_5492;

  $bb90:
    assume out_$i122 == 1;
    goto corral_source_split_5491;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 3);
    goto corral_source_split_5489;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i121 := $M.43;
    goto corral_source_split_5488;

  $bb88:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 703} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} out_vslice_dummy_var_83 := cbq_dump_stats(out_$p119, in_$p3);
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$p119 := $M.40;
    goto corral_source_split_5484;

  $bb87:
    assume out_$i118 == 1;
    goto corral_source_split_5483;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i117 := $M.43;
    goto corral_source_split_5344;

  $bb27:
    assume !(out_$i47 == 1);
    goto corral_source_split_5343;

  $bb103:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 713} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} out_vslice_dummy_var_88 := cbq_drop(out_$p139);
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    out_$p139 := $M.40;
    goto corral_source_split_5521;

  $bb102:
    assume out_$i138 == 1;
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 2);
    goto corral_source_split_5518;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i137 := $M.43;
    goto corral_source_split_5517;

  $bb100:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 711} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} out_vslice_dummy_var_87 := cbq_drop(out_$p135);
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$p135 := $M.40;
    goto corral_source_split_5513;

  $bb99:
    assume out_$i134 == 1;
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 3);
    goto corral_source_split_5510;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i133 := $M.43;
    goto corral_source_split_5509;

  $bb97:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 709} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} out_vslice_dummy_var_86 := cbq_drop(out_$p131);
    goto corral_source_split_5506;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    out_$p131 := $M.40;
    goto corral_source_split_5505;

  $bb96:
    assume out_$i130 == 1;
    goto corral_source_split_5504;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i129, 1);
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$i129 := $M.43;
    goto corral_source_split_5328;

  $bb19:
    assume out_$i44 == 1;
    goto corral_source_split_5327;

  $bb18:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i41, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb112:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 719} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5547;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} out_vslice_dummy_var_91 := cbq_dump(out_$p153, out_$p154);
    goto corral_source_split_5546;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$p154 := $M.41;
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$p153 := $M.40;
    goto corral_source_split_5544;

  $bb111:
    assume out_$i152 == 1;
    goto corral_source_split_5543;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 2);
    goto corral_source_split_5541;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i151 := $M.43;
    goto corral_source_split_5540;

  $bb109:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 717} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_5538;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} out_vslice_dummy_var_90 := cbq_dump(out_$p148, out_$p149);
    goto corral_source_split_5537;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    out_$p149 := $M.41;
    goto corral_source_split_5536;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    out_$p148 := $M.40;
    goto corral_source_split_5535;

  $bb108:
    assume out_$i147 == 1;
    goto corral_source_split_5534;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 3);
    goto corral_source_split_5532;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i146 := $M.43;
    goto corral_source_split_5531;

  $bb106:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 715} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} out_vslice_dummy_var_89 := cbq_dump(out_$p143, out_$p144);
    goto corral_source_split_5528;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    out_$p144 := $M.41;
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    out_$p143 := $M.40;
    goto corral_source_split_5526;

  $bb105:
    assume out_$i142 == 1;
    goto corral_source_split_5525;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 1);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$i141 := $M.43;
    goto corral_source_split_5332;

  $bb21:
    assume out_$i45 == 1;
    goto corral_source_split_5331;

  $bb20:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i41, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb115:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $M.44 := out_$i160;
    call {:si_unique_call 722} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i160);
    goto corral_source_split_5554;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    out_$i160 := $add.i32(out_$i159, 1);
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    out_$i159 := $M.44;
    goto corral_source_split_5552;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 721} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_5551;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} out_vslice_dummy_var_92 := ldv_setup_1();
    goto corral_source_split_5550;

  $bb114:
    assume out_$i157 == 1;
    goto corral_source_split_5549;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 1);
    goto corral_source_split_5337;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$i156 := $M.43;
    goto corral_source_split_5336;

  $bb23:
    assume out_$i46 == 1;
    goto corral_source_split_5335;

  $bb22:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i41, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} ldv_stop();
    goto corral_source_split_5556;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb25;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb25;

  $bb122:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb132:
    assume {:verifier.code 0} true;
    assume !(out_$i168 == 1);
    goto $bb133;

  $bb135:
    assume {:verifier.code 0} true;
    assume !(out_$i170 == 1);
    goto $bb133;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 0);
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$i169 := $M.44;
    goto corral_source_split_5569;

  $bb131:
    assume out_$i168 == 1;
    goto corral_source_split_5568;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 3);
    goto corral_source_split_5566;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    out_$i167 := $M.45;
    goto corral_source_split_5565;

  $bb129:
    assume out_$i166 == 1;
    goto corral_source_split_5564;

  $bb124:
    assume out_$i164 == 1;
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i163, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i164 := $slt.i32(out_$i163, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_5558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 724} out_$i163 := __VERIFIER_nondet_int();
    call {:si_unique_call 725} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i163);
    call {:si_unique_call 726} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i163);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb121:
    assume out_$i162 == 1;
    goto corral_source_split_5558;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    out_$i162 := $ne.i32(out_$i161, 0);
    goto corral_source_split_5315;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$i161 := $M.45;
    goto corral_source_split_5314;

  $bb5:
    assume out_$i36 == 1;
    goto corral_source_split_5313;

  $bb4:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i34, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb140:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb145:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i177 := $ne.i32(out_$i176, 0);
    goto corral_source_split_5592;

  $bb143:
    assume {:verifier.code 0} true;
    out_$i176 := $M.48;
    goto corral_source_split_5591;

  $bb142:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_initialize_Qdisc_ops_1();
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 735} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5588;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} ldv_initialize_Qdisc_class_ops_2();
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 733} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_5585;

  $bb141:
    assume out_$i175 == 1;
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 0);
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$i174 := $M.48;
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $M.48 := out_$i173;
    call {:si_unique_call 731} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} out_$i173 := cbq_module_init();
    goto corral_source_split_5579;

  $bb139:
    assume out_$i172 == 1;
    goto corral_source_split_5578;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 1);
    goto corral_source_split_5562;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    out_$i171 := $M.45;
    goto corral_source_split_5561;

  $bb126:
    assume out_$i165 == 1;
    goto corral_source_split_5560;

  $bb125:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i163, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ldv_stop();
    goto corral_source_split_5597;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb127:
    assume {:verifier.code 0} true;
    assume !(out_$i165 == 1);
    goto $bb128;

  $bb130:
    assume {:verifier.code 0} true;
    assume !(out_$i166 == 1);
    goto $bb128;

  $bb152:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb189:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 745} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5668;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} out_vslice_dummy_var_94 := cbq_leaf(out_$p202, in_$i11);
    goto corral_source_split_5667;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$p202 := $M.42;
    goto corral_source_split_5666;

  $bb188:
    assume out_$i201 == 1;
    goto corral_source_split_5665;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 2);
    goto corral_source_split_5663;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i200 := $M.46;
    goto corral_source_split_5662;

  $bb186:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 743} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5660;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} out_vslice_dummy_var_93 := cbq_leaf(out_$p198, in_$i11);
    goto corral_source_split_5659;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$p198 := $M.42;
    goto corral_source_split_5658;

  $bb185:
    assume out_$i197 == 1;
    goto corral_source_split_5657;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 1);
    goto corral_source_split_5655;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$i196 := $M.46;
    goto corral_source_split_5654;

  $bb183:
    assume out_$i195 == 1;
    goto corral_source_split_5653;

  $bb179:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i180, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb171:
    assume out_$i189 == 1;
    assume {:verifier.code 0} true;
    out_$i193 := $slt.i32(out_$i180, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb154:
    assume out_$i181 == 1;
    assume {:verifier.code 0} true;
    out_$i189 := $slt.i32(out_$i180, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i181 := $slt.i32(out_$i180, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_5599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 739} out_$i180 := __VERIFIER_nondet_int();
    call {:si_unique_call 740} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i180);
    call {:si_unique_call 741} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i180);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb151:
    assume out_$i179 == 1;
    goto corral_source_split_5599;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    out_$i179 := $ne.i32(out_$i178, 0);
    goto corral_source_split_5319;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    out_$i178 := $M.46;
    goto corral_source_split_5318;

  $bb7:
    assume out_$i37 == 1;
    goto corral_source_split_5317;

  $bb6:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i34, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb196:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 749} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} out_vslice_dummy_var_96 := cbq_get(out_$p210, in_$i31);
    goto corral_source_split_5680;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    out_$p210 := $M.42;
    goto corral_source_split_5679;

  $bb195:
    assume out_$i209 == 1;
    goto corral_source_split_5678;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 2);
    goto corral_source_split_5676;

  $bb194:
    assume {:verifier.code 0} true;
    out_$i208 := $M.46;
    goto corral_source_split_5675;

  $bb193:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 747} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5673;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_vslice_dummy_var_95 := cbq_get(out_$p206, in_$i31);
    goto corral_source_split_5672;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    out_$p206 := $M.42;
    goto corral_source_split_5671;

  $bb192:
    assume out_$i205 == 1;
    goto corral_source_split_5670;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 1);
    goto corral_source_split_5647;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    out_$i204 := $M.46;
    goto corral_source_split_5646;

  $bb181:
    assume out_$i194 == 1;
    goto corral_source_split_5645;

  $bb180:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    out_$i194 := $slt.i32(out_$i180, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb202:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 753} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5694;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} out_vslice_dummy_var_98 := cbq_delete(out_$p218, in_$i26);
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    out_$p218 := $M.42;
    goto corral_source_split_5692;

  $bb201:
    assume out_$i217 == 1;
    goto corral_source_split_5691;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 2);
    goto corral_source_split_5689;

  $bb200:
    assume {:verifier.code 0} true;
    out_$i216 := $M.46;
    goto corral_source_split_5688;

  $bb199:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 751} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5686;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} out_vslice_dummy_var_97 := cbq_delete(out_$p214, in_$i26);
    goto corral_source_split_5685;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    out_$p214 := $M.42;
    goto corral_source_split_5684;

  $bb198:
    assume out_$i213 == 1;
    goto corral_source_split_5683;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 1);
    goto corral_source_split_5651;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    out_$i212 := $M.46;
    goto corral_source_split_5650;

  $bb182:
    assume !(out_$i194 == 1);
    goto corral_source_split_5649;

  $bb208:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 757} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} cbq_walk(out_$p225, in_$p8);
    goto corral_source_split_5706;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    out_$p225 := $M.42;
    goto corral_source_split_5705;

  $bb207:
    assume out_$i224 == 1;
    goto corral_source_split_5704;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 2);
    goto corral_source_split_5702;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i223 := $M.46;
    goto corral_source_split_5701;

  $bb205:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 755} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5699;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} cbq_walk(out_$p222, in_$p8);
    goto corral_source_split_5698;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    out_$p222 := $M.42;
    goto corral_source_split_5697;

  $bb204:
    assume out_$i221 == 1;
    goto corral_source_split_5696;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 1);
    goto corral_source_split_5639;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$i220 := $M.46;
    goto corral_source_split_5638;

  $bb177:
    assume out_$i192 == 1;
    goto corral_source_split_5637;

  $bb173:
    assume out_$i190 == 1;
    assume {:verifier.code 0} true;
    out_$i192 := $slt.i32(out_$i180, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb172:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    out_$i190 := $slt.i32(out_$i180, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb214:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 761} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_vslice_dummy_var_100 := cbq_graft(out_$p232, in_$i32, in_$p5, in_$p30);
    goto corral_source_split_5719;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    out_$p232 := $M.42;
    goto corral_source_split_5718;

  $bb213:
    assume out_$i231 == 1;
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_5715;

  $bb212:
    assume {:verifier.code 0} true;
    out_$i230 := $M.46;
    goto corral_source_split_5714;

  $bb211:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 759} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5712;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} out_vslice_dummy_var_99 := cbq_graft(out_$p228, in_$i32, in_$p5, in_$p30);
    goto corral_source_split_5711;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    out_$p228 := $M.42;
    goto corral_source_split_5710;

  $bb210:
    assume out_$i227 == 1;
    goto corral_source_split_5709;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 1);
    goto corral_source_split_5643;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    out_$i226 := $M.46;
    goto corral_source_split_5642;

  $bb178:
    assume !(out_$i192 == 1);
    goto corral_source_split_5641;

  $bb217:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $M.44 := out_$i238;
    call {:si_unique_call 764} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$i238 := $sub.i32(out_$i237, 1);
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i237 := $M.44;
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 763} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} cbq_unbind_filter(out_$p236, in_$i25);
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$p236 := $M.42;
    goto corral_source_split_5723;

  $bb216:
    assume out_$i235 == 1;
    goto corral_source_split_5722;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 2);
    goto corral_source_split_5631;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    out_$i234 := $M.46;
    goto corral_source_split_5630;

  $bb175:
    assume out_$i191 == 1;
    goto corral_source_split_5629;

  $bb174:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    out_$i191 := $slt.i32(out_$i180, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb223:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 768} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5741;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} out_vslice_dummy_var_102 := cbq_find_tcf(out_$p245, in_$i24);
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$p245 := $M.42;
    goto corral_source_split_5739;

  $bb222:
    assume out_$i244 == 1;
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 2);
    goto corral_source_split_5736;

  $bb221:
    assume {:verifier.code 0} true;
    out_$i243 := $M.46;
    goto corral_source_split_5735;

  $bb220:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 766} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5733;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} out_vslice_dummy_var_101 := cbq_find_tcf(out_$p241, in_$i24);
    goto corral_source_split_5732;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    out_$p241 := $M.42;
    goto corral_source_split_5731;

  $bb219:
    assume out_$i240 == 1;
    goto corral_source_split_5730;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 1);
    goto corral_source_split_5635;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    out_$i239 := $M.46;
    goto corral_source_split_5634;

  $bb176:
    assume !(out_$i191 == 1);
    goto corral_source_split_5633;

  $bb229:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 772} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} cbq_put(out_$p252, in_$i28);
    goto corral_source_split_5753;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    out_$p252 := $M.42;
    goto corral_source_split_5752;

  $bb228:
    assume out_$i251 == 1;
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 2);
    goto corral_source_split_5749;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i250 := $M.46;
    goto corral_source_split_5748;

  $bb226:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 770} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} cbq_put(out_$p249, in_$i28);
    goto corral_source_split_5745;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    out_$p249 := $M.42;
    goto corral_source_split_5744;

  $bb225:
    assume out_$i248 == 1;
    goto corral_source_split_5743;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 1);
    goto corral_source_split_5619;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$i247 := $M.46;
    goto corral_source_split_5618;

  $bb167:
    assume out_$i187 == 1;
    goto corral_source_split_5617;

  $bb156:
    assume out_$i182 == 1;
    assume {:verifier.code 0} true;
    out_$i187 := $slt.i32(out_$i180, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb155:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    out_$i182 := $slt.i32(out_$i180, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb235:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 776} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5767;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} out_vslice_dummy_var_104 := cbq_dump_class_stats(out_$p259, in_$i18, in_$p15);
    goto corral_source_split_5766;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    out_$p259 := $M.42;
    goto corral_source_split_5765;

  $bb234:
    assume out_$i258 == 1;
    goto corral_source_split_5764;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 2);
    goto corral_source_split_5762;

  $bb233:
    assume {:verifier.code 0} true;
    out_$i257 := $M.46;
    goto corral_source_split_5761;

  $bb232:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 774} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5759;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} out_vslice_dummy_var_103 := cbq_dump_class_stats(out_$p255, in_$i18, in_$p15);
    goto corral_source_split_5758;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$p255 := $M.42;
    goto corral_source_split_5757;

  $bb231:
    assume out_$i254 == 1;
    goto corral_source_split_5756;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 1);
    goto corral_source_split_5623;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$i253 := $M.46;
    goto corral_source_split_5622;

  $bb169:
    assume out_$i188 == 1;
    goto corral_source_split_5621;

  $bb168:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    out_$i188 := $slt.i32(out_$i180, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb241:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 780} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5780;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_vslice_dummy_var_106 := cbq_bind_filter(out_$p267, in_$i6, in_$i19);
    goto corral_source_split_5779;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    out_$p267 := $M.42;
    goto corral_source_split_5778;

  $bb240:
    assume out_$i266 == 1;
    goto corral_source_split_5777;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 2);
    goto corral_source_split_5775;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i265 := $M.46;
    goto corral_source_split_5774;

  $bb238:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 778} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5772;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} out_vslice_dummy_var_105 := cbq_bind_filter(out_$p263, in_$i6, in_$i19);
    goto corral_source_split_5771;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    out_$p263 := $M.42;
    goto corral_source_split_5770;

  $bb237:
    assume out_$i262 == 1;
    goto corral_source_split_5769;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 1);
    goto corral_source_split_5627;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    out_$i261 := $M.46;
    goto corral_source_split_5626;

  $bb170:
    assume !(out_$i188 == 1);
    goto corral_source_split_5625;

  $bb247:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5793;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_vslice_dummy_var_108 := cbq_dump_class(out_$p275, in_$i20, in_$p17, in_$p10);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    out_$p275 := $M.42;
    goto corral_source_split_5791;

  $bb246:
    assume out_$i274 == 1;
    goto corral_source_split_5790;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i32(out_$i273, 2);
    goto corral_source_split_5788;

  $bb245:
    assume {:verifier.code 0} true;
    out_$i273 := $M.46;
    goto corral_source_split_5787;

  $bb244:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 782} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5785;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} out_vslice_dummy_var_107 := cbq_dump_class(out_$p271, in_$i20, in_$p17, in_$p10);
    goto corral_source_split_5784;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    out_$p271 := $M.42;
    goto corral_source_split_5783;

  $bb243:
    assume out_$i270 == 1;
    goto corral_source_split_5782;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 1);
    goto corral_source_split_5611;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$i269 := $M.46;
    goto corral_source_split_5610;

  $bb165:
    assume out_$i186 == 1;
    goto corral_source_split_5609;

  $bb158:
    assume out_$i183 == 1;
    assume {:verifier.code 0} true;
    out_$i186 := $slt.i32(out_$i180, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb157:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    out_$i183 := $slt.i32(out_$i180, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb253:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5806;

  SeqInstr_18:
    goto corral_source_split_5805;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_vslice_dummy_var_110 := cbq_change_class(out_$p283, in_$i21, in_$i27, in_$p13, in_$p23);
    goto SeqInstr_17;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$p283 := $M.42;
    goto corral_source_split_5804;

  $bb252:
    assume out_$i282 == 1;
    goto corral_source_split_5803;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i281, 2);
    goto corral_source_split_5801;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i281 := $M.46;
    goto corral_source_split_5800;

  $bb250:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5798;

  SeqInstr_15:
    goto corral_source_split_5797;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} out_vslice_dummy_var_109 := cbq_change_class(out_$p279, in_$i21, in_$i27, in_$p13, in_$p23);
    goto SeqInstr_14;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    out_$p279 := $M.42;
    goto corral_source_split_5796;

  $bb249:
    assume out_$i278 == 1;
    goto corral_source_split_5795;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 1);
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$i277 := $M.46;
    goto corral_source_split_5614;

  $bb166:
    assume !(out_$i186 == 1);
    goto corral_source_split_5613;

  $bb259:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5819;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} cbq_qlen_notify(out_$p290, in_$i33);
    goto corral_source_split_5818;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    out_$p290 := $M.42;
    goto corral_source_split_5817;

  $bb258:
    assume out_$i289 == 1;
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 2);
    goto corral_source_split_5814;

  $bb257:
    assume {:verifier.code 0} true;
    out_$i288 := $M.46;
    goto corral_source_split_5813;

  $bb256:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_5811;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} cbq_qlen_notify(out_$p287, in_$i33);
    goto corral_source_split_5810;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$p287 := $M.42;
    goto corral_source_split_5809;

  $bb255:
    assume out_$i286 == 1;
    goto corral_source_split_5808;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i285, 1);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$i285 := $M.46;
    goto corral_source_split_5602;

  $bb160:
    assume out_$i184 == 1;
    goto corral_source_split_5601;

  $bb159:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    out_$i184 := $slt.i32(out_$i180, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb262:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.44 := out_$i295;
    call {:si_unique_call 795} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i295);
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    out_$i295 := $add.i32(out_$i294, 1);
    goto corral_source_split_5825;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    out_$i294 := $M.44;
    goto corral_source_split_5824;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 794} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_5823;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_vslice_dummy_var_111 := ldv_probe_2();
    goto corral_source_split_5822;

  $bb261:
    assume out_$i292 == 1;
    goto corral_source_split_5821;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 1);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i291 := $M.46;
    goto corral_source_split_5606;

  $bb162:
    assume out_$i185 == 1;
    goto corral_source_split_5605;

  $bb161:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i180, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} ldv_stop();
    goto corral_source_split_5828;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb163:
    assume {:verifier.code 0} true;
    assume !(out_$i185 == 1);
    goto $bb164;

  $bb184:
    assume {:verifier.code 0} true;
    assume !(out_$i195 == 1);
    goto $bb164;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} ldv_stop();
    goto corral_source_split_5830;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb9;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb9;

  $bb120_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$p75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$p144, out_$i146, out_$i147, out_$p148, out_$p149, out_$i151, out_$i152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i257, out_$i258, out_$p259, out_$i261, out_$i262, out_$p263, out_$i265, out_$i266, out_$p267, out_$i269, out_$i270, out_$p271, out_$i273, out_$i274, out_$p275, out_$i277, out_$i278, out_$p279, out_$i281, out_$i282, out_$p283, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i294, out_$i295, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111 := main_loop_$bb1(in_$p1, in_$p3, in_$p5, in_$i6, in_$p8, in_$p10, in_$i11, in_$p13, in_$p15, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p30, in_$i31, in_$i32, in_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i68, out_$i69, out_$p70, out_$p71, out_$i73, out_$i74, out_$p75, out_$p76, out_$i78, out_$i79, out_$p80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i91, out_$i92, out_$p93, out_$i95, out_$i96, out_$p97, out_$i99, out_$i100, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i109, out_$i110, out_$p111, out_$i113, out_$i114, out_$p115, out_$i117, out_$i118, out_$p119, out_$i121, out_$i122, out_$p123, out_$i125, out_$i126, out_$p127, out_$i129, out_$i130, out_$p131, out_$i133, out_$i134, out_$p135, out_$i137, out_$i138, out_$p139, out_$i141, out_$i142, out_$p143, out_$p144, out_$i146, out_$i147, out_$p148, out_$p149, out_$i151, out_$i152, out_$p153, out_$p154, out_$i156, out_$i157, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i224, out_$p225, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i257, out_$i258, out_$p259, out_$i261, out_$i262, out_$p263, out_$i265, out_$i266, out_$p267, out_$i269, out_$i270, out_$p271, out_$i273, out_$i274, out_$p275, out_$i277, out_$i278, out_$p279, out_$i281, out_$i282, out_$p283, out_$i285, out_$i286, out_$p287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i294, out_$i295, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$p3: ref, in_$p5: ref, in_$i6: i64, in_$p8: ref, in_$p10: ref, in_$i11: i64, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$i18: i64, in_$i19: i32, in_$i20: i64, in_$i21: i32, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$i27: i32, in_$i28: i64, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$p71: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$p76: ref, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i1, in_$p89: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i95: i32, in_$i96: i1, in_$p97: ref, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$p107: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i121: i32, in_$i122: i1, in_$p123: ref, in_$i125: i32, in_$i126: i1, in_$p127: ref, in_$i129: i32, in_$i130: i1, in_$p131: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i1, in_$i165: i1, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i1, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i1, in_$i183: i1, in_$i184: i1, in_$i185: i1, in_$i186: i1, in_$i187: i1, in_$i188: i1, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i1, in_$i193: i1, in_$i194: i1, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i237: i32, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$i261: i32, in_$i262: i1, in_$p263: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i273: i32, in_$i274: i1, in_$p275: ref, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i281: i32, in_$i282: i1, in_$p283: ref, in_$i285: i32, in_$i286: i1, in_$p287: ref, in_$i288: i32, in_$i289: i1, in_$p290: ref, in_$i291: i32, in_$i292: i1, in_$i294: i32, in_$i295: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: ref, in_vslice_dummy_var_78: ref, in_vslice_dummy_var_79: ref, in_vslice_dummy_var_80: ref, in_vslice_dummy_var_81: ref, in_vslice_dummy_var_82: ref, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: ref, in_vslice_dummy_var_94: ref, in_vslice_dummy_var_95: i64, in_vslice_dummy_var_96: i64, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: ref, in_vslice_dummy_var_102: ref, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i64, in_vslice_dummy_var_106: i64, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32) returns (out_$i34: i32, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$p71: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$p76: ref, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i1, out_$p89: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i95: i32, out_$i96: i1, out_$p97: ref, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$p107: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i121: i32, out_$i122: i1, out_$p123: ref, out_$i125: i32, out_$i126: i1, out_$p127: ref, out_$i129: i32, out_$i130: i1, out_$p131: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i1, out_$i165: i1, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i1, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i1, out_$i183: i1, out_$i184: i1, out_$i185: i1, out_$i186: i1, out_$i187: i1, out_$i188: i1, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i1, out_$i193: i1, out_$i194: i1, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i237: i32, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$i261: i32, out_$i262: i1, out_$p263: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i273: i32, out_$i274: i1, out_$p275: ref, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i281: i32, out_$i282: i1, out_$p283: ref, out_$i285: i32, out_$i286: i1, out_$p287: ref, out_$i288: i32, out_$i289: i1, out_$p290: ref, out_$i291: i32, out_$i292: i1, out_$i294: i32, out_$i295: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: ref, out_vslice_dummy_var_78: ref, out_vslice_dummy_var_79: ref, out_vslice_dummy_var_80: ref, out_vslice_dummy_var_81: ref, out_vslice_dummy_var_82: ref, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: ref, out_vslice_dummy_var_94: ref, out_vslice_dummy_var_95: i64, out_vslice_dummy_var_96: i64, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: ref, out_vslice_dummy_var_102: ref, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i64, out_vslice_dummy_var_106: i64, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32);
  modifies $M.44, $M.43, $M.0, $M.1, $M.22, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.31, $M.32, $M.33, $M.34, $M.35, $M.23, $M.36, $M.37, $M.38, $M.24, $M.25, $M.39, $M.47, $M.40, $M.41, $M.42, $M.46, $M.45, $M.48, $M.30, $M.28, assertsPassed;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


