var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: i32;

var $M.3: i32;

var $M.4: i32;

var $M.5: i8;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: [ref]i32;

var $M.16: [ref]ref;

var $M.17: i8;

var $M.18: i32;

var $M.19: i32;

var $M.20: [ref]i32;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]i64;

var $M.26: [ref]i64;

var $M.27: [ref]ref;

var $M.28: [ref]i64;

var $M.29: [ref]ref;

var $M.30: [ref]i16;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: i8;

var $M.34: i32;

var $M.35: [ref]i32;

var $M.36: i8;

var $M.38: [ref]i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: ref;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i16;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.59: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $M.89: [ref]i8;

var $M.122: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 676914);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const __ksymtab_ppp_register_net_channel: ref;

axiom __ksymtab_ppp_register_net_channel == $sub.ref(0, 1040);

const {:count 25} __kstrtab_ppp_register_net_channel: ref;

axiom __kstrtab_ppp_register_net_channel == $sub.ref(0, 2089);

const ldv_linux_lib_idr_idr_units_idr_of_ppp_net: ref;

axiom ldv_linux_lib_idr_idr_units_idr_of_ppp_net == $sub.ref(0, 3117);

const ldv_linux_lib_idr_idr_p: ref;

axiom ldv_linux_lib_idr_idr_p == $sub.ref(0, 4145);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 5173);

const ldv_linux_kernel_locking_spinlock_spin_wlock_of_ppp: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_wlock_of_ppp == $sub.ref(0, 6201);

const ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device == $sub.ref(0, 7229);

const ldv_linux_kernel_locking_spinlock_spin_slock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_slock_of_NOT_ARG_SIGN == $sub.ref(0, 8257);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 9285);

const ldv_linux_kernel_locking_spinlock_spin_rlock_of_ppp: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_rlock_of_ppp == $sub.ref(0, 10313);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 11341);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 12369);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 13397);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 14425);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 15453);

const ldv_linux_kernel_locking_spinlock_spin_downl_of_channel: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_downl_of_channel == $sub.ref(0, 16481);

const ldv_linux_kernel_locking_spinlock_spin_compressor_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_compressor_list_lock == $sub.ref(0, 17509);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 18537);

const ldv_linux_kernel_locking_spinlock_spin_all_channels_lock_of_ppp_net: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_all_channels_lock_of_ppp_net == $sub.ref(0, 19565);

const ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device == $sub.ref(0, 20593);

const ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue: ref;

axiom ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue == $sub.ref(0, 21621);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 22646);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 23674);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 24702);

const ppp_mutex: ref;

axiom ppp_mutex == $sub.ref(0, 25886);

const {:count 6} npindex_to_proto: ref;

axiom npindex_to_proto == $sub.ref(0, 26934);

const ppp_tx_busylock: ref;

axiom ppp_tx_busylock == $sub.ref(0, 27966);

const ppp_netdev_ops: ref;

axiom ppp_netdev_ops == $sub.ref(0, 29494);

const ppp_device_fops: ref;

axiom ppp_device_fops == $sub.ref(0, 30758);

const ppp_net_ops: ref;

axiom ppp_net_ops == $sub.ref(0, 31838);

const ppp_class: ref;

axiom ppp_class == $sub.ref(0, 32870);

const {:count 26} __kstrtab_ppp_unregister_compressor: ref;

axiom __kstrtab_ppp_unregister_compressor == $sub.ref(0, 33920);

const {:count 24} __kstrtab_ppp_register_compressor: ref;

axiom __kstrtab_ppp_register_compressor == $sub.ref(0, 34968);

const {:count 18} __kstrtab_ppp_output_wakeup: ref;

axiom __kstrtab_ppp_output_wakeup == $sub.ref(0, 36010);

const {:count 16} __kstrtab_ppp_input_error: ref;

axiom __kstrtab_ppp_input_error == $sub.ref(0, 37050);

const {:count 10} __kstrtab_ppp_input: ref;

axiom __kstrtab_ppp_input == $sub.ref(0, 38084);

const {:count 13} __kstrtab_ppp_dev_name: ref;

axiom __kstrtab_ppp_dev_name == $sub.ref(0, 39121);

const {:count 16} __kstrtab_ppp_unit_number: ref;

axiom __kstrtab_ppp_unit_number == $sub.ref(0, 40161);

const {:count 18} __kstrtab_ppp_channel_index: ref;

axiom __kstrtab_ppp_channel_index == $sub.ref(0, 41203);

const {:count 23} __kstrtab_ppp_unregister_channel: ref;

axiom __kstrtab_ppp_unregister_channel == $sub.ref(0, 42250);

const {:count 21} __kstrtab_ppp_register_channel: ref;

axiom __kstrtab_ppp_register_channel == $sub.ref(0, 43295);

const ppp_unit_count: ref;

axiom ppp_unit_count == $sub.ref(0, 44323);

const compressor_list: ref;

axiom compressor_list == $sub.ref(0, 45363);

const compressor_list_lock: ref;

axiom compressor_list_lock == $sub.ref(0, 46459);

const mp_protocol_compress: ref;

axiom mp_protocol_compress == $sub.ref(0, 47484);

const channel_count: ref;

axiom channel_count == $sub.ref(0, 48512);

const ppp_net_id: ref;

axiom ppp_net_id == $sub.ref(0, 49540);

const {:count 6} npindex_to_ethertype: ref;

axiom npindex_to_ethertype == $sub.ref(0, 50588);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_ppp_mutex: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_ppp_mutex == $sub.ref(0, 51613);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 52638);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 53663);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 54688);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_all_ppp_mutex_of_ppp_net: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_all_ppp_mutex_of_ppp_net == $sub.ref(0, 55713);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 56741);

const ldv_thread_9: ref;

axiom ldv_thread_9 == $sub.ref(0, 57781);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 58821);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 59861);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 60901);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 61929);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 62957);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 63985);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 65013);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 66041);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 67069);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 68097);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 69123);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 70151);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 71179);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 72207);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 73235);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 74263);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 75291);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 76319);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 77347);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 78375);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 79403);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 80431);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 81459);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 82487);

const __ksymtab_ppp_unregister_compressor: ref;

axiom __ksymtab_ppp_unregister_compressor == $sub.ref(0, 83527);

const __ksymtab_ppp_register_compressor: ref;

axiom __ksymtab_ppp_register_compressor == $sub.ref(0, 84567);

const __ksymtab_ppp_output_wakeup: ref;

axiom __ksymtab_ppp_output_wakeup == $sub.ref(0, 85607);

const __ksymtab_ppp_input_error: ref;

axiom __ksymtab_ppp_input_error == $sub.ref(0, 86647);

const __ksymtab_ppp_input: ref;

axiom __ksymtab_ppp_input == $sub.ref(0, 87687);

const __ksymtab_ppp_dev_name: ref;

axiom __ksymtab_ppp_dev_name == $sub.ref(0, 88727);

const __ksymtab_ppp_unit_number: ref;

axiom __ksymtab_ppp_unit_number == $sub.ref(0, 89767);

const __ksymtab_ppp_channel_index: ref;

axiom __ksymtab_ppp_channel_index == $sub.ref(0, 90807);

const __ksymtab_ppp_unregister_channel: ref;

axiom __ksymtab_ppp_unregister_channel == $sub.ref(0, 91847);

const __ksymtab_ppp_register_channel: ref;

axiom __ksymtab_ppp_register_channel == $sub.ref(0, 92887);

const .str: ref;

axiom .str == $sub.ref(0, 93926);

const {:count 22} .str.1: ref;

axiom .str.1 == $sub.ref(0, 94972);

const {:count 10} .str.2: ref;

axiom .str.2 == $sub.ref(0, 96006);

const {:count 11} .str.28: ref;

axiom .str.28 == $sub.ref(0, 97041);

const {:count 22} .str.29: ref;

axiom .str.29 == $sub.ref(0, 98087);

const {:count 30} .str.16: ref;

axiom .str.16 == $sub.ref(0, 99141);

const {:count 28} .str.17: ref;

axiom .str.17 == $sub.ref(0, 100193);

const {:count 41} .str.18: ref;

axiom .str.18 == $sub.ref(0, 101258);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 38} .str.31: ref;

axiom .str.31 == $sub.ref(0, 102320);

const {:count 59} .str.30: ref;

axiom .str.30 == $sub.ref(0, 103403);

const {:count 28} .str.11: ref;

axiom .str.11 == $sub.ref(0, 104455);

const {:count 2} .str.5: ref;

axiom .str.5 == $sub.ref(0, 105481);

const {:count 29} .str.12: ref;

axiom .str.12 == $sub.ref(0, 106534);

const {:count 28} .str.13: ref;

axiom .str.13 == $sub.ref(0, 107586);

const {:count 31} .str.14: ref;

axiom .str.14 == $sub.ref(0, 108641);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 23} .str.10: ref;

axiom .str.10 == $sub.ref(0, 109688);

const {:count 33} .str.15: ref;

axiom .str.15 == $sub.ref(0, 110745);

const {:count 36} .str.4: ref;

axiom .str.4 == $sub.ref(0, 111805);

const {:count 18} .str.6: ref;

axiom .str.6 == $sub.ref(0, 112847);

const {:count 44} .str.7: ref;

axiom .str.7 == $sub.ref(0, 113915);

const {:count 20} .str.8: ref;

axiom .str.8 == $sub.ref(0, 114959);

const {:count 22} .str.9: ref;

axiom .str.9 == $sub.ref(0, 116005);

const {:count 26} .str.25: ref;

axiom .str.25 == $sub.ref(0, 117055);

const {:count 63} .str.26: ref;

axiom .str.26 == $sub.ref(0, 118142);

const {:count 32} .str.20: ref;

axiom .str.20 == $sub.ref(0, 119198);

const {:count 30} .str.21: ref;

axiom .str.21 == $sub.ref(0, 120252);

const {:count 51} .str.22: ref;

axiom .str.22 == $sub.ref(0, 121327);

const {:count 27} .str.23: ref;

axiom .str.23 == $sub.ref(0, 122378);

const {:count 29} .str.24: ref;

axiom .str.24 == $sub.ref(0, 123431);

const {:count 27} .str.19: ref;

axiom .str.19 == $sub.ref(0, 124482);

const {:count 21} .str.27: ref;

axiom .str.27 == $sub.ref(0, 125527);

const {:count 19} .str.38: ref;

axiom .str.38 == $sub.ref(0, 126570);

const {:count 33} .str.39: ref;

axiom .str.39 == $sub.ref(0, 127627);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 33} .str.40: ref;

axiom .str.40 == $sub.ref(0, 128684);

const {:count 34} .str.41: ref;

axiom .str.41 == $sub.ref(0, 129742);

const {:count 32} .str.42: ref;

axiom .str.42 == $sub.ref(0, 130798);

const {:count 16} .str.49: ref;

axiom .str.49 == $sub.ref(0, 131838);

const .str.3: ref;

axiom .str.3 == $sub.ref(0, 132863);

const {:count 22} .str.43: ref;

axiom .str.43 == $sub.ref(0, 133909);

const {:count 22} .str.44: ref;

axiom .str.44 == $sub.ref(0, 134955);

const {:count 6} .str.45: ref;

axiom .str.45 == $sub.ref(0, 135985);

const {:count 39} .str.46: ref;

axiom .str.46 == $sub.ref(0, 137048);

const {:count 6} .str.37: ref;

axiom .str.37 == $sub.ref(0, 138078);

const {:count 20} .str.47: ref;

axiom .str.47 == $sub.ref(0, 139122);

const {:count 10} .str.48: ref;

axiom .str.48 == $sub.ref(0, 140156);

const {:count 41} .str.32: ref;

axiom .str.32 == $sub.ref(0, 141221);

const {:count 4} .str.33: ref;

axiom .str.33 == $sub.ref(0, 142249);

const {:count 35} .str.34: ref;

axiom .str.34 == $sub.ref(0, 143308);

const {:count 44} .str.35: ref;

axiom .str.35 == $sub.ref(0, 144376);

const {:count 37} .str.36: ref;

axiom .str.36 == $sub.ref(0, 145437);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 146469);

const {:count 3} .str.1.112: ref;

axiom .str.1.112 == $sub.ref(0, 147496);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 148534);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 149562);

const ppp_register_net_channel: ref;

axiom ppp_register_net_channel == $sub.ref(0, 150594);

procedure ppp_register_net_channel($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.2, $M.3, assertsPassed;



implementation ppp_register_net_channel($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i9: i32;
  var vslice_dummy_var_9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p5 := kzalloc(680, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p10 := ppp_pernet($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p1);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(568, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p5);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(0, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} init_ppp_file($p16, 2);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(292, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i18);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(668, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $sub.i32(0, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(328, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} __init_rwsem($p22, .str, $p2);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} vslice_dummy_var_9 := spinlock_check($p23);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(488, 1)), $mul.ref(0, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} __raw_spin_lock_init($p27, .str.1, $p3);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(592, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} __rwlock_init($p28, .str.2, $p4);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(312, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} ldv_spin_lock_bh_153($p29);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(304, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(304, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(304, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 680)), $mul.ref(304, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(288, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} list_add($p38, $p39);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} atomic_inc(channel_count);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p10, $mul.ref(0, 384)), $mul.ref(312, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} ldv_spin_unlock_bh_154($p40);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 151626);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 152658);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 15} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ppp_pernet: ref;

axiom ppp_pernet == $sub.ref(0, 153690);

procedure ppp_pernet($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ppp_pernet($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 18} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := $M.1;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p8 := net_generic($p0, $i7);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 19} devirtbounce(0, .str.16, 291, 12);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const init_ppp_file: ref;

axiom init_ppp_file == $sub.ref(0, 154722);

procedure init_ppp_file($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_ppp_file($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 22} {:cexpr "init_ppp_file:arg:kind"} boogie_si_record_i32($i1);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} skb_queue_head_init($p4);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(104, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} skb_queue_head_init($p5);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(288, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} atomic_set($p6, 1);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(200, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} __init_waitqueue_head($p7, .str.28, $p2);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    return;
}



const __init_rwsem: ref;

axiom __init_rwsem == $sub.ref(0, 155754);

procedure __init_rwsem($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_rwsem($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 156786);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 157818);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    return;
}



const __rwlock_init: ref;

axiom __rwlock_init == $sub.ref(0, 158850);

procedure __rwlock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __rwlock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_bh_153: ref;

axiom ldv_spin_lock_bh_153 == $sub.ref(0, 159882);

procedure ldv_spin_lock_bh_153($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_lock_bh_153($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} ldv_linux_kernel_locking_spinlock_spin_lock_all_channels_lock_of_ppp_net();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} spin_lock_bh($p0);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 160914);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} __list_add($p0, $p1, $p3);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 161946);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} ldv_linux_usb_dev_atomic_inc($p0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_bh_154: ref;

axiom ldv_spin_unlock_bh_154 == $sub.ref(0, 162978);

procedure ldv_spin_unlock_bh_154($p0: ref);
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_spin_unlock_bh_154($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} ldv_linux_kernel_locking_spinlock_spin_unlock_all_channels_lock_of_ppp_net();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} spin_unlock_bh($p0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_all_channels_lock_of_ppp_net: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_all_channels_lock_of_ppp_net == $sub.ref(0, 164010);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_all_channels_lock_of_ppp_net();
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_all_channels_lock_of_ppp_net()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} ldv_assume($i5);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.2 := 1;
    call {:si_unique_call 35} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_all_channels_lock_of_ppp_net"} boogie_si_record_i32(1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 165042);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} _raw_spin_unlock_bh($p2);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 166074);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 167106);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 38} __VERIFIER_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 168138);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_linux_usb_dev_atomic_inc: ref;

axiom ldv_linux_usb_dev_atomic_inc == $sub.ref(0, 169170);

procedure ldv_linux_usb_dev_atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_inc($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 170202);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_all_channels_lock_of_ppp_net: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_all_channels_lock_of_ppp_net == $sub.ref(0, 171234);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_all_channels_lock_of_ppp_net();
  free requires assertsPassed;
  modifies $M.2, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_all_channels_lock_of_ppp_net()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i3 := $M.2;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} ldv_assume($i5);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.2 := 2;
    call {:si_unique_call 42} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_all_channels_lock_of_ppp_net"} boogie_si_record_i32(2);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 172266);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} _raw_spin_lock_bh($p2);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 173298);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 174330);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 45} __VERIFIER_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_queue_head_init: ref;

axiom skb_queue_head_init == $sub.ref(0, 175362);

procedure skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation skb_queue_head_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_10 := spinlock_check($p2);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __raw_spin_lock_init($p6, .str.29, $p1);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} __skb_queue_head_init($p0);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 176394);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 177426);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    return;
}



const __skb_queue_head_init: ref;

axiom __skb_queue_head_init == $sub.ref(0, 178458);

procedure __skb_queue_head_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_head_init($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 179490);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 52} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const net_generic: ref;

axiom net_generic == $sub.ref(0, 180522);

procedure net_generic($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation net_generic($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} {:cexpr "net_generic:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} rcu_read_lock();
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6472)), $mul.ref(4416, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i4 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 56} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 0);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 61} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i1, $i15);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 64} {:cexpr "tmp___2"} boogie_si_record_i64($i19);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(24, 1)), $mul.ref($i22, 8));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} rcu_read_unlock();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 68} {:cexpr "tmp___3"} boogie_si_record_i64($i30);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb16:
    assume $i31 == 1;
    call {:si_unique_call 69} devirtbounce(0, .str.17, 45, 12);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    assume false;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i20 == 1;
    call {:si_unique_call 65} devirtbounce(0, .str.17, 41, 12);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb10:
    assume $i13 == 1;
    call {:si_unique_call 62} devirtbounce(0, .str.17, 41, 12);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1(1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i7 := rcu_read_lock_held();
    call {:si_unique_call 58} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} lockdep_rcu_suspicious(.str.17, 40, .str.18);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb3;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 181554);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.3;



implementation rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} ldv_linux_kernel_rcu_update_lock_rcu_read_lock();
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    return;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 182586);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 71} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 72} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 183618);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 1} true;
    call {:si_unique_call 73} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 74} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 184650);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 185682);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} ldv_linux_kernel_rcu_update_lock_rcu_read_unlock();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_rcu_read_unlock: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_read_unlock == $sub.ref(0, 186714);

procedure ldv_linux_kernel_rcu_update_lock_rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i2);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i3 := $M.3;
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $M.3 := $i4;
    call {:si_unique_call 78} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32($i4);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_rcu_update_lock__more_unlocks: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__more_unlocks == $sub.ref(0, 187746);

procedure ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__more_unlocks:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} __VERIFIER_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_rcu_update_lock_rcu_read_lock: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_read_lock == $sub.ref(0, 188778);

procedure ldv_linux_kernel_rcu_update_lock_rcu_read_lock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_linux_kernel_rcu_update_lock_rcu_read_lock()
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.3 := $i1;
    call {:si_unique_call 81} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32($i1);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 189810);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 83} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} ldv_check_alloc_flags($i1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p2 := ldv_zalloc($i0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ldv_after_alloc($p2);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 190842);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 191874);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 192906);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 193938);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 93} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i2 := ldv_undef_int();
    call {:si_unique_call 95} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p4 := calloc($i0, $i1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} ldv_assume($i7);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i8 := ldv_is_err($p4);
    call {:si_unique_call 99} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} ldv_assume($i10);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 194970);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 196002);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 197034);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 106} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 198066);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 199098);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} __VERIFIER_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 200130);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i0 := $M.5;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 201162);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} __VERIFIER_error();
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ppp_register_channel: ref;

axiom ppp_register_channel == $sub.ref(0, 202194);

procedure ppp_register_channel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.2, assertsPassed, $M.3;



implementation ppp_register_channel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p1 := get_current();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 10680)), $mul.ref(2792, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i6 := ppp_register_net_channel($p5, $p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 116} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 203226);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 117} $p3 := devirtbounce.1(0, current_task);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 204258);

procedure __bad_percpu_size();



const ppp_unregister_channel: ref;

axiom ppp_unregister_channel == $sub.ref(0, 205290);

procedure ppp_unregister_channel($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.10, $M.6, assertsPassed, $M.8, $M.9, $M.3, $M.11, $M.18, $M.7, $M.19, $M.16, $CurrAddr, $M.33, $M.34;



implementation ppp_unregister_channel($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var vslice_dummy_var_11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(328, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} down_write($p7);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} ldv_spin_lock_bh_166($p8);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} ldv_spin_unlock_bh_167($p10);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(328, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} up_write($p11);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_11 := ppp_disconnect_channel($p3);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(568, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p15 := ppp_pernet($p14);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 384)), $mul.ref(312, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} ldv_spin_lock_bh_153($p16);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(304, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} list_del($p17);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 384)), $mul.ref(312, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} ldv_spin_unlock_bh_154($p18);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(300, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} __wake_up($p22, 1, 1, $0.ref);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $i25 := atomic_dec_and_test($p24);
    call {:si_unique_call 133} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} ppp_destroy_channel($p3);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 206322);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_bh_166: ref;

axiom ldv_spin_lock_bh_166 == $sub.ref(0, 207354);

procedure ldv_spin_lock_bh_166($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_spin_lock_bh_166($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} ldv_linux_kernel_locking_spinlock_spin_lock_downl_of_channel();
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} spin_lock_bh($p0);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_bh_167: ref;

axiom ldv_spin_unlock_bh_167 == $sub.ref(0, 208386);

procedure ldv_spin_unlock_bh_167($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_spin_unlock_bh_167($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} ldv_linux_kernel_locking_spinlock_spin_unlock_downl_of_channel();
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} spin_unlock_bh($p0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 209418);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    return;
}



const ppp_disconnect_channel: ref;

axiom ppp_disconnect_channel == $sub.ref(0, 210450);

procedure ppp_disconnect_channel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.8, $M.9, assertsPassed, $M.2, $M.11, $M.18, $M.7, $M.10, $M.3, $M.19, $M.16, $CurrAddr, $M.33, $M.34;



implementation ppp_disconnect_channel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_linux_kernel_locking_rwlock_write_lock();
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} ldv_linux_kernel_locking_rwlock_write_unlock();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p2);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} ldv_spin_lock_bh_131($p6);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} ldv_spin_lock_bh_132($p7);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(576, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} list_del($p8);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} ldv_spin_unlock_bh_133($p18);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} ldv_spin_unlock_bh_134($p19);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i22 := atomic_dec_and_test($p21);
    call {:si_unique_call 148} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} ppp_destroy_interface($p2);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __wake_up($p17, 1, 1, $0.ref);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 211482);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 212514);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 151} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 213546);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i1 := ldv_linux_usb_dev_atomic_dec_and_test($p0);
    call {:si_unique_call 153} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ppp_destroy_channel: ref;

axiom ppp_destroy_channel == $sub.ref(0, 214578);

procedure ppp_destroy_channel($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ppp_destroy_channel($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} atomic_dec(channel_count);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(300, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} skb_queue_purge($p7);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} skb_queue_purge($p9);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} kfree($p10);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_12 := printk.ref.ref(.str.31, $p0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 215610);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_dec($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} ldv_linux_usb_dev_atomic_dec($p0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 216642);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 160} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 161} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 1} true;
    call {:si_unique_call 162} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 163} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64($p0: ref, p.1: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 1} true;
    call {:si_unique_call 164} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 165} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 1} true;
    call {:si_unique_call 166} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 167} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_queue_purge: ref;

axiom skb_queue_purge == $sub.ref(0, 217674);

procedure skb_queue_purge($p0: ref);
  free requires assertsPassed;



implementation skb_queue_purge($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 218706);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} free_($p0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 219738);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 169} $free($p0);
    return;
}



const ldv_linux_usb_dev_atomic_dec: ref;

axiom ldv_linux_usb_dev_atomic_dec == $sub.ref(0, 220770);

procedure ldv_linux_usb_dev_atomic_dec($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_dec($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_dev_atomic_dec_and_test: ref;

axiom ldv_linux_usb_dev_atomic_dec_and_test == $sub.ref(0, 221802);

procedure ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ldv_linux_kernel_locking_rwlock_write_lock: ref;

axiom ldv_linux_kernel_locking_rwlock_write_lock == $sub.ref(0, 222834);

procedure ldv_linux_kernel_locking_rwlock_write_lock();
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_write_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i0 := $M.6;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} ldv_assert_linux_kernel_locking_rwlock__double_write_lock($i2);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.6 := 2;
    call {:si_unique_call 171} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(2);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_write_unlock: ref;

axiom ldv_linux_kernel_locking_rwlock_write_unlock == $sub.ref(0, 223866);

procedure ldv_linux_kernel_locking_rwlock_write_unlock();
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_write_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i0 := $M.6;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} ldv_assert_linux_kernel_locking_rwlock__double_write_unlock($i2);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 173} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_bh_131: ref;

axiom ldv_spin_lock_bh_131 == $sub.ref(0, 224898);

procedure ldv_spin_lock_bh_131($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_spin_lock_bh_131($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} ldv_linux_kernel_locking_spinlock_spin_lock_wlock_of_ppp();
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} spin_lock_bh($p0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_bh_132: ref;

axiom ldv_spin_lock_bh_132 == $sub.ref(0, 225930);

procedure ldv_spin_lock_bh_132($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_lock_bh_132($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} ldv_linux_kernel_locking_spinlock_spin_lock_rlock_of_ppp();
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} spin_lock_bh($p0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_bh_133: ref;

axiom ldv_spin_unlock_bh_133 == $sub.ref(0, 226962);

procedure ldv_spin_unlock_bh_133($p0: ref);
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_spin_unlock_bh_133($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} ldv_linux_kernel_locking_spinlock_spin_unlock_rlock_of_ppp();
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} spin_unlock_bh($p0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_bh_134: ref;

axiom ldv_spin_unlock_bh_134 == $sub.ref(0, 227994);

procedure ldv_spin_unlock_bh_134($p0: ref);
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_spin_unlock_bh_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} ldv_linux_kernel_locking_spinlock_spin_unlock_wlock_of_ppp();
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} spin_unlock_bh($p0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const ppp_destroy_interface: ref;

axiom ppp_destroy_interface == $sub.ref(0, 229026);

procedure ppp_destroy_interface($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, assertsPassed, $M.2, $M.11, $M.18, $M.7, $M.10, $M.6, $M.3, $M.19, $M.16, $CurrAddr, $M.33, $M.34;



implementation ppp_destroy_interface($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} atomic_dec(ppp_unit_count);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(300, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} ppp_ccp_closed($p0);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} skb_queue_purge($p23);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} skb_queue_purge($p25);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} skb_queue_purge($p26);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} kfree_skb($p42);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} ldv_free_netdev_219($p44);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} bpf_prog_destroy($p39);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} bpf_prog_destroy($p32);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} slhc_free($p20);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(300, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} netdev_err.ref.ref.ref.i32.i32($p9, .str.30, $p0, $i12, $i14);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 230058);

procedure netdev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    return;
}



const ppp_ccp_closed: ref;

axiom ppp_ccp_closed == $sub.ref(0, 231090);

procedure ppp_ccp_closed($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, assertsPassed, $M.2, $M.11, $M.18, $M.7, $M.10, $M.6, $M.3, $M.19, $M.16, $CurrAddr, $M.33, $M.34;



implementation ppp_ccp_closed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} ldv_spin_lock_bh_131($p1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ldv_spin_lock_bh_132($p2);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 193));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} ldv_spin_unlock_bh_133($p19);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} ldv_spin_unlock_bh_134($p20);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p11);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p17);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p15, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    call {:si_unique_call 199} devirtbounce.2($p30, $p17);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} ldv_module_put_196($p32);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 197} devirtbounce.2($p24, $p11);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p9, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} ldv_module_put_195($p26);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const slhc_free: ref;

axiom slhc_free == $sub.ref(0, 232122);

procedure slhc_free($p0: ref);
  free requires assertsPassed;



implementation slhc_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    return;
}



const bpf_prog_destroy: ref;

axiom bpf_prog_destroy == $sub.ref(0, 233154);

procedure bpf_prog_destroy($p0: ref);
  free requires assertsPassed;



implementation bpf_prog_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    return;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 234186);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_219: ref;

axiom ldv_free_netdev_219 == $sub.ref(0, 235218);

procedure ldv_free_netdev_219($p0: ref);
  free requires assertsPassed;



implementation ldv_free_netdev_219($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} free_netdev($p0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} ldv_free_netdev($0.ref, $p0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 236250);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev: ref;

axiom ldv_free_netdev == $sub.ref(0, 237282);

procedure ldv_free_netdev($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_netdev($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} ldv_free($p2);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 238314);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} free_($p0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_195: ref;

axiom ldv_module_put_195 == $sub.ref(0, 239346);

procedure ldv_module_put_195($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_module_put_195($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} ldv_linux_kernel_module_module_put($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const ldv_module_put_196: ref;

axiom ldv_module_put_196 == $sub.ref(0, 240378);

procedure ldv_module_put_196($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_module_put_196($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} ldv_linux_kernel_module_module_put($p0);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_module_put: ref;

axiom ldv_linux_kernel_module_module_put == $sub.ref(0, 241410);

procedure ldv_linux_kernel_module_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_linux_kernel_module_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i3 := $M.7;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 1);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} ldv_assert_linux_kernel_module__less_initial_decrement($i5);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i6 := $M.7;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $M.7 := $i7;
    call {:si_unique_call 208} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32($i7);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_module__less_initial_decrement: ref;

axiom ldv_assert_linux_kernel_module__less_initial_decrement == $sub.ref(0, 242442);

procedure ldv_assert_linux_kernel_module__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} {:cexpr "ldv_assert_linux_kernel_module__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 1} true;
    call {:si_unique_call 210} __VERIFIER_error();
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_wlock_of_ppp: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_wlock_of_ppp == $sub.ref(0, 243474);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_wlock_of_ppp();
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_wlock_of_ppp()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i0 := $M.8;
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i3 := $M.8;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} ldv_assume($i5);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 213} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_wlock_of_ppp"} boogie_si_record_i32(1);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_rlock_of_ppp: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_rlock_of_ppp == $sub.ref(0, 244506);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_rlock_of_ppp();
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_rlock_of_ppp()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i0 := $M.9;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i3 := $M.9;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} ldv_assume($i5);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 216} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_rlock_of_ppp"} boogie_si_record_i32(1);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_rlock_of_ppp: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_rlock_of_ppp == $sub.ref(0, 245538);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_rlock_of_ppp();
  free requires assertsPassed;
  modifies $M.9, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_rlock_of_ppp()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i0 := $M.9;
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i3 := $M.9;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} ldv_assume($i5);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $M.9 := 2;
    call {:si_unique_call 219} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_rlock_of_ppp"} boogie_si_record_i32(2);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_wlock_of_ppp: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_wlock_of_ppp == $sub.ref(0, 246570);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_wlock_of_ppp();
  free requires assertsPassed;
  modifies $M.8, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_wlock_of_ppp()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i0 := $M.8;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i3 := $M.8;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} ldv_assume($i5);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $M.8 := 2;
    call {:si_unique_call 222} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_wlock_of_ppp"} boogie_si_record_i32(2);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_rwlock__double_write_unlock: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__double_write_unlock == $sub.ref(0, 247602);

procedure ldv_assert_linux_kernel_locking_rwlock__double_write_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__double_write_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__double_write_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 1} true;
    call {:si_unique_call 224} __VERIFIER_error();
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__double_write_lock: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__double_write_lock == $sub.ref(0, 248634);

procedure ldv_assert_linux_kernel_locking_rwlock__double_write_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__double_write_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__double_write_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 1} true;
    call {:si_unique_call 226} __VERIFIER_error();
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_downl_of_channel: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_downl_of_channel == $sub.ref(0, 249666);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_downl_of_channel();
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_downl_of_channel()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} ldv_assume($i5);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 229} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_downl_of_channel"} boogie_si_record_i32(1);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_downl_of_channel: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_downl_of_channel == $sub.ref(0, 250698);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_downl_of_channel();
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_downl_of_channel()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} ldv_assume($i5);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $M.10 := 2;
    call {:si_unique_call 232} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_downl_of_channel"} boogie_si_record_i32(2);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const ppp_channel_index: ref;

axiom ppp_channel_index == $sub.ref(0, 251730);

procedure ppp_channel_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ppp_channel_index($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const ppp_unit_number: ref;

axiom ppp_unit_number == $sub.ref(0, 252762);

procedure ppp_unit_number($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ppp_unit_number($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ldv_linux_kernel_locking_rwlock_read_lock();
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} ldv_linux_kernel_locking_rwlock_read_unlock();
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 234} {:cexpr "unit"} boogie_si_record_i32($i14);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb5;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_read_lock: ref;

axiom ldv_linux_kernel_locking_rwlock_read_lock == $sub.ref(0, 253794);

procedure ldv_linux_kernel_locking_rwlock_read_lock();
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i0 := $M.6;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} ldv_assert_linux_kernel_locking_rwlock__read_lock_on_write_lock($i2);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i3 := $M.11;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $M.11 := $i4;
    call {:si_unique_call 237} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32($i4);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_read_unlock: ref;

axiom ldv_linux_kernel_locking_rwlock_read_unlock == $sub.ref(0, 254826);

procedure ldv_linux_kernel_locking_rwlock_read_unlock();
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i0 := $M.11;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 1);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} ldv_assert_linux_kernel_locking_rwlock__more_read_unlocks($i2);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i3 := $M.11;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $M.11 := $i4;
    call {:si_unique_call 239} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32($i4);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_rwlock__more_read_unlocks: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__more_read_unlocks == $sub.ref(0, 255858);

procedure ldv_assert_linux_kernel_locking_rwlock__more_read_unlocks($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__more_read_unlocks($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__more_read_unlocks:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} __VERIFIER_error();
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_on_write_lock: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_on_write_lock == $sub.ref(0, 256890);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_on_write_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_on_write_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_on_write_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} __VERIFIER_error();
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ppp_dev_name: ref;

axiom ppp_dev_name == $sub.ref(0, 257922);

procedure ppp_dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ppp_dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} ldv_linux_kernel_locking_rwlock_read_lock();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p22 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} ldv_linux_kernel_locking_rwlock_read_unlock();
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb9;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb5;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 3216)), $mul.ref(0, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p22 := $p19;
    goto $bb8;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const ppp_input: ref;

axiom ppp_input == $sub.ref(0, 258954);

procedure ppp_input($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.0, assertsPassed, $M.9, $M.8, $M.16, $M.2, $M.18, $CurrAddr, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_input($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $p40: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p46: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} ldv_linux_kernel_locking_rwlock_read_lock();
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i7 := pskb_may_pull($p1, 2);
    call {:si_unique_call 249} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i31 := get_unaligned_be16($p30);
    call {:si_unique_call 254} {:cexpr "tmp___0"} boogie_si_record_i16($i31);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    call {:si_unique_call 255} {:cexpr "proto"} boogie_si_record_i32($i32);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i36 == 1);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i32, 49151);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i32, 33019);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} ppp_do_recv($p56, $p1, $p4);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} ldv_linux_kernel_locking_rwlock_read_unlock();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} skb_queue_tail($p40, $p1);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(104, 1)), $mul.ref(16, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i45 := $ugt.i32($i44, 32);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} __wake_up($p54, 1, 1, $0.ref);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    call $i47, $i48, $p50, $p46, $i51, $i52 := ppp_input_loop_$bb22($p4, $p43, $i47, $i48, $p50, $p46, $i51, $i52);
    goto $bb22_last;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p46 := skb_dequeue($p50);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p46);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} kfree_skb($p46);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p43);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i32($i47, 32);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb24_dummy;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb13;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} kfree_skb($p1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 1);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i20);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} ppp_receive_error($p28);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} kfree_skb($p1);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1005;
}



const pskb_may_pull: ref;

axiom pskb_may_pull == $sub.ref(0, 259986);

procedure pskb_may_pull($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pskb_may_pull($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "pskb_may_pull:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i2 := skb_headlen($p0);
    call {:si_unique_call 263} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i1, $i2);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 265} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i1, $i10);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 267} {:cexpr "tmp___1"} boogie_si_record_i64($i14);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i16 := skb_headlen($p0);
    call {:si_unique_call 269} {:cexpr "tmp___2"} boogie_si_record_i32($i16);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i1, $i16);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p18 := __pskb_pull_tail($p0, $i17);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i8 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;
}



const ppp_receive_error: ref;

axiom ppp_receive_error == $sub.ref(0, 261018);

procedure ppp_receive_error($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ppp_receive_error($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i6);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} vslice_dummy_var_13 := slhc_toss($p16);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_unaligned_be16: ref;

axiom get_unaligned_be16 == $sub.ref(0, 262050);

procedure get_unaligned_be16($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation get_unaligned_be16($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i2 := __be16_to_cpup($p1);
    call {:si_unique_call 273} {:cexpr "tmp"} boogie_si_record_i16($i2);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_queue_tail: ref;

axiom skb_queue_tail == $sub.ref(0, 263082);

procedure skb_queue_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_queue_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    return;
}



const skb_dequeue: ref;

axiom skb_dequeue == $sub.ref(0, 264114);

procedure skb_dequeue($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_dequeue($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $p1 := external_alloc();
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ppp_do_recv: ref;

axiom ppp_do_recv == $sub.ref(0, 265146);

procedure ppp_do_recv($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.9, $M.0, assertsPassed, $M.8, $M.16, $M.2, $M.11, $M.18, $CurrAddr, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_do_recv($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} ldv_spin_lock_bh_132($p3);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(600, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} kfree_skb($p1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} ldv_spin_unlock_bh_133($p7);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} ppp_receive_frame($p0, $p1, $p2);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const ppp_receive_frame: ref;

axiom ppp_receive_frame == $sub.ref(0, 266178);

procedure ppp_receive_frame($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.16, $M.2, $M.11, $M.18, $CurrAddr, $M.9, assertsPassed, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_receive_frame($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} kfree_skb($p1);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} ppp_receive_error($p0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i8 := get_unaligned_be16($p7);
    call {:si_unique_call 280} {:cexpr "tmp"} boogie_si_record_i16($i8);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 61);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} ppp_receive_nonmp_frame($p0, $p1);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} ppp_receive_mp_frame($p0, $p1, $p2);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const ppp_receive_mp_frame: ref;

axiom ppp_receive_mp_frame == $sub.ref(0, 267210);

procedure ppp_receive_mp_frame($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.16, $M.2, $M.11, $M.18, $CurrAddr, $M.9, assertsPassed, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_receive_mp_frame($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i31: i32;
  var $i32: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i85: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i1;
  var $p123: ref;
  var $i124: i32;
  var $i140: i32;
  var $i122: i32;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i64;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i64;
  var $i182: i1;
  var $p167: ref;
  var vslice_dummy_var_14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 2048);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 4 else 6);
    call {:si_unique_call 285} {:cexpr "mphdrlen"} boogie_si_record_i32($i7);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i9 := pskb_may_pull($p1, $i8);
    call {:si_unique_call 287} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(612, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2048);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(3, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i38 := $shl.i32($i37, 16);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(4, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i44 := $shl.i32($i43, 8);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i38, $i44);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(5, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i45, $i50);
    call {:si_unique_call 291} {:cexpr "seq"} boogie_si_record_i32($i51);
    assume {:verifier.code 0} true;
    $i31, $i32 := 16777215, $i51;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(2, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i55);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_14 := skb_pull($p1, $i7);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i64 := $sext.i8.i32($i63);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i75 := $xor.i32($i31, $sub.i32(0, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i74, $i75);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i32, $i76);
    call {:si_unique_call 294} {:cexpr "seq"} boogie_si_record_i32($i77);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, $i77);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i81 := $lshr.i32($i31, 1);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i80, $i81);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i82 == 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32($i77, $i87);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i89 := $lshr.i32($i31, 1);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i32($i88, $i89);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i93 := $i77;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i85 := $i93;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i85);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 680)), $mul.ref(668, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i85);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(616, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i85, $i99);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p115, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(576, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i118, $i120);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i122 := $i85;
    assume {:branchcond $i121} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i143 := $sub.i32($i142, $i122);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, 0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} ppp_mp_insert($p0, $p1);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i147 := skb_queue_len($p146);
    call {:si_unique_call 302} {:cexpr "tmp___2"} boogie_si_record_i32($i147);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i148 := $ugt.i32($i147, 127);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p164 := ppp_mp_reconstruct($p0);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i166 == 1;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p167 := $p164;
    goto $bb50;

  $bb50:
    call $i168, $i169, $p170, $p171, $p173, $i174, $i175, $p176, $p177, $p179, $p180, $i181, $i182, $p167 := ppp_receive_mp_frame_loop_$bb50($p0, $i168, $i169, $p170, $p171, $p173, $i174, $i175, $p176, $p177, $p179, $p180, $i181, $i182, $p167);
    goto $bb50_last;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i168 := pskb_may_pull($p167, 2);
    call {:si_unique_call 306} {:cexpr "tmp___3"} boogie_si_record_i32($i168);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i168, 0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i169 == 1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p171, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i174 := $load.i64($M.0, $p173);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i175 := $add.i64($i174, 1);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p177, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p179, $i175);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} kfree_skb($p167);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} ppp_receive_error($p0);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p180 := ppp_mp_reconstruct($p0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i182 := $ne.i64($i181, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i182 == 1);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb55:
    assume $i182 == 1;
    assume {:verifier.code 0} true;
    $p167 := $p180;
    goto $bb55_dummy;

  $bb52:
    assume $i169 == 1;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} ppp_receive_nonmp_frame($p0, $p167);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i148 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p150 := skb_peek($p149);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p150, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i157 := $sub.i32($i152, $i156);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i157, 0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i158 == 1;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p150, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p163, $i162);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb38:
    assume $i144 == 1;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p145, $i122);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb27:
    assume $i121 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p123, $i124 := $p116, $i85;
    goto $bb30;

  $bb30:
    call $p125, $i126, $i127, $i128, $p129, $i130, $i131, $p133, $p134, $p135, $p136, $p137, $i138, $i139, $p123, $i124, $i140 := ppp_receive_mp_frame_loop_$bb30($i120, $p125, $i126, $i127, $i128, $p129, $i130, $i131, $p133, $p134, $p135, $p136, $p137, $i138, $i139, $p123, $i124, $i140);
    goto $bb30_last;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p123, $mul.ref(0, 680)), $mul.ref(668, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i127 := $sub.i32($i126, $i124);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i127, 0);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i131 := $i124;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p123, $mul.ref(0, 680)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p135, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p135, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(576, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p137);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, $i120);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i140 := $i131;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i122 := $i140;
    goto $bb29;

  $bb35:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    $p123, $i124 := $p136, $i131;
    goto $bb35_dummy;

  $bb32:
    assume $i128 == 1;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p123, $mul.ref(0, 680)), $mul.ref(668, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    call {:si_unique_call 299} {:cexpr "seq"} boogie_si_record_i32($i130);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i131 := $i130;
    goto $bb34;

  $bb23:
    assume $i101 == 1;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} kfree_skb($p1);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p103, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.0, $p105);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i107 := $add.i64($i106, 1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p109, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p111, $i107);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} ppp_receive_error($p0);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i90 == 1;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i77, $i31);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i91, 1);
    call {:si_unique_call 296} {:cexpr "seq"} boogie_si_record_i32($i92);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb22;

  $bb17:
    assume $i82 == 1;
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i77, $i31);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 1);
    call {:si_unique_call 295} {:cexpr "seq"} boogie_si_record_i32($i84);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb19;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 1);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb13;

  $bb14:
    assume $i71 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $p72 := skb_push($p1, 1);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, 0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(2, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 15);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i23, 8);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(3, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i24, $i29);
    call {:si_unique_call 290} {:cexpr "seq"} boogie_si_record_i32($i30);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i31, $i32 := 4095, $i30;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} kfree_skb($p1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} ppp_receive_error($p0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb55_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  $bb35_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;
}



const ppp_receive_nonmp_frame: ref;

axiom ppp_receive_nonmp_frame == $sub.ref(0, 268242);

procedure ppp_receive_nonmp_frame($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.16, $M.2, $M.11, $M.18, $CurrAddr, $M.9, assertsPassed, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_receive_nonmp_frame($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p54: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $i81: i32;
  var $p82: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i64;
  var $p112: ref;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i64;
  var $i120: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p126: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $i133: i32;
  var $i134: i1;
  var $p136: ref;
  var $p132: ref;
  var $i137: i64;
  var $i138: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $i176: i1;
  var $i177: i64;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $i190: i64;
  var $p191: ref;
  var $i193: i64;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i201: i64;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $p211: ref;
  var $i212: i32;
  var $i213: i16;
  var $i214: i32;
  var $i215: i16;
  var $i216: i16;
  var $p217: ref;
  var $p20: ref;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: ref;
  var vslice_dummy_var_17: ref;
  var vslice_dummy_var_18: ref;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $p1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4194304);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i23 := get_unaligned_be16($p22);
    call {:si_unique_call 315} {:cexpr "tmp"} boogie_si_record_i16($i23);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    call {:si_unique_call 316} {:cexpr "proto"} boogie_si_record_i32($i24);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 45);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, 47);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 33021);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i81, $p82 := $i24, $p11;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.0, $p108);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i110 := $add.i64($i109, 1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p112, $i110);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(16, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.0, $p114);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p82, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i118 := $sub.i32($i117, 2);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i119 := $zext.i32.i64($i118);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i120 := $add.i64($i115, $i119);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(16, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p122, $i120);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i123 := proto_to_npindex($i81);
    call {:si_unique_call 335} {:cexpr "npi"} boogie_si_record_i32($i123);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i124 == 1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb79, $bb81;

  $bb81:
    assume !($i144 == 1);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i148 == 1);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i193 := $load.i64($M.0, jiffies);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(584, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p194, $i193);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p196, $mul.ref(0, 3216)), $mul.ref(552, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.0, $p197);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i199 := $and.i32($i198, 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 0);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb104, $bb106;

  $bb106:
    assume !($i200 == 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i123);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref($i201, 4));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.0, $p203);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i205 == 1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_18 := skb_pull_rcsum($p82, 2);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p82, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p209, $p208);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i210 := $sext.i32.i64($i123);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref(npindex_to_ethertype, $mul.ref(0, 24)), $mul.ref($i210, 4));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.12, $p211);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i16($i212);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i16($i214);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i216 := __fswab16($i215);
    call {:si_unique_call 358} {:cexpr "tmp___9"} boogie_si_record_i16($i216);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p82, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, $i216);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} skb_reset_mac_header($p82);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_19 := netif_rx($p82);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    return;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} kfree_skb($p82);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb105;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i149 := skb_unclone($p82, 32);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    call {:si_unique_call 346} {:cexpr "tmp___5"} boogie_si_record_i32($i149);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p151 := skb_push($p82, 2);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i175 := $p2i.ref.i64($p174);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i176 := $eq.i64($i175, 0);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i176 == 1);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p180, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    call {:si_unique_call 352} $i188 := devirtbounce.3($p182, $p82, $p187);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    call {:si_unique_call 353} {:cexpr "tmp___8"} boogie_si_record_i32($i188);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} vslice_dummy_var_17 := __skb_pull($p82, 2);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i189 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i190 := $load.i64($M.0, jiffies);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(584, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p191, $i190);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i176 == 1;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i177 := $load.i64($M.0, jiffies);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(584, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p178, $i177);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb87:
    assume $i155 == 1;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    call {:si_unique_call 348} $i165 := devirtbounce.3($p159, $p82, $p164);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    call {:si_unique_call 349} {:cexpr "tmp___7"} boogie_si_record_i32($i165);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb89:
    assume $i166 == 1;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 1);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} kfree_skb($p82);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i170 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} netdev_printk.ref.ref.ref(.str.5, $p172, .str.14);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    goto $bb93;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i150 == 1;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p20 := $p82;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} kfree_skb($p20);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} ppp_receive_error($p0);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb94;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb80;

  $bb65:
    assume $i124 == 1;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} skb_queue_tail($p126, $p82);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(104, 1)), $mul.ref(16, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i131 := $ugt.i32($i130, 32);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} __wake_up($p140, 1, 1, $0.ref);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb67:
    assume $i131 == 1;
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    call $i133, $i134, $p136, $p132, $i137, $i138 := ppp_receive_nonmp_frame_loop_$bb70($p0, $p129, $i133, $i134, $p136, $p132, $i137, $i138);
    goto $bb70_last;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $p132 := skb_dequeue($p136);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p132);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i138 := $ne.i64($i137, 0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i138 == 1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume $i138 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} kfree_skb($p132);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p129);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i134 := $ugt.i32($i133, 32);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i134 == 1);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb72_dummy;

  $bb22:
    assume $i27 == 1;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} ppp_ccp_peek($p0, $p11, 1);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i81, $p82 := $i24, $p11;
    goto $bb52;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i86 == 1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 32);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i93 := pskb_may_pull($p11, $i92);
    call {:si_unique_call 337} {:cexpr "tmp___3"} boogie_si_record_i32($i93);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(2, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32($i101, 2);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i103 := slhc_remember($p96, $p99, $i102);
    call {:si_unique_call 339} {:cexpr "tmp___4"} boogie_si_record_i32($i103);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i104 := $sle.i32($i103, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i81, $p82 := 33, $p11;
    goto $bb52;

  $bb62:
    assume $i104 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} netdev_err.ref.ref($p106, .str.13);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    goto $bb12;

  $bb59:
    assume $i94 == 1;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    goto $bb12;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    goto $bb12;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb54;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i31 == 1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 32);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i36 := skb_tailroom($p11);
    call {:si_unique_call 319} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i36, 123);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i37 == 1);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i38 := skb_cloned($p11);
    call {:si_unique_call 321} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i39 == 1);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(144, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, $sub.i32(0, 1537));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i57);
    assume {:verifier.code 0} true;
    $p54 := $p11;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p54, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(2, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p54, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i64, 2);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i66 := slhc_uncompress($p59, $p62, $i65);
    call {:si_unique_call 329} {:cexpr "len"} boogie_si_record_i32($i66);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i67 := $sle.i32($i66, 0);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i66, 2);
    call {:si_unique_call 331} {:cexpr "len"} boogie_si_record_i32($i70);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p54, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i73 := $ugt.i32($i70, $i72);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i73 == 1);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p54, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i80 := $ult.i32($i70, $i79);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i81, $p82 := 33, $p54;
    goto $bb52;

  $bb49:
    assume $i80 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} skb_trim($p54, $i70);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i73 == 1;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p54, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32($i70, $i75);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} vslice_dummy_var_16 := skb_put($p54, $i76);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i67 == 1;
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} netdev_printk.ref.ref.ref(.str.5, $p69, .str.12);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p20 := $p54;
    goto $bb12;

  $bb36:
    assume $i39 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 128);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p43 := dev_alloc_skb($i42);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} skb_reserve($p43, 2);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p50 := skb_put($p43, $i49);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p11, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} vslice_dummy_var_15 := skb_copy_bits($p11, 0, $p50, $i52);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} consume_skb($p11);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p54 := $p43;
    goto $bb41;

  $bb38:
    assume $i45 == 1;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} netdev_err.ref.ref($p47, .str.11);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    goto $bb12;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i37 == 1;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    goto $bb12;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb28;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 8388608);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(123, 4));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 8192);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p10 := ppp_decompress_frame($p0, $p1);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb6;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb72_dummy:
    assume false;
    return;

  $bb70_last:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1556;
}



const ppp_decompress_frame: ref;

axiom ppp_decompress_frame == $sub.ref(0, 269274);

procedure ppp_decompress_frame($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation ppp_decompress_frame($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i19: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p51: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p70: ref;
  var vslice_dummy_var_20: ref;
  var vslice_dummy_var_21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i4 := get_unaligned_be16($p3);
    call {:si_unique_call 362} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 363} {:cexpr "proto"} boogie_si_record_i32($i5);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i8 := pskb_may_pull($p1, $i7);
    call {:si_unique_call 365} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 253);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p51 := $p1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p70 := $p51;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $r := $p70;
    return;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref($sub.ref(0, 2), 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, 2);
    call {:si_unique_call 377} devirtbounce.5($p61, $p63, $p66, $i69);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 18);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(480, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 4);
    call {:si_unique_call 368} {:cexpr "obuff_size"} boogie_si_record_i32($i22);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p23 := dev_alloc_skb($i19);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 128)), $mul.ref(88, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref($sub.ref(0, 2), 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 2);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p23, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    call {:si_unique_call 371} $i42 := devirtbounce.4($p31, $p33, $p36, $i39, $p41, $i19);
    call {:si_unique_call 372} {:cexpr "len"} boogie_si_record_i32($i42);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} consume_skb($p1);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_20 := skb_put($p23, $i42);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} vslice_dummy_var_21 := skb_pull($p23, 2);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p51 := $p23;
    goto $bb23;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i42, $sub.i32(0, 2));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} kfree_skb($p23);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, 4194304);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} ppp_receive_error($p0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p70 := $p1;
    goto $bb27;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 8388608);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} netdev_err.ref.ref($p27, .str.15);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(480, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 5);
    call {:si_unique_call 367} {:cexpr "obuff_size"} boogie_si_record_i32($i18);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 270306);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 379} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const skb_cloned: ref;

axiom skb_cloned == $sub.ref(0, 271338);

procedure skb_cloned($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_cloned($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(142, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p6 := skb_end_pointer($p0);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 320)), $mul.ref(32, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i9 := atomic_read($p8);
    call {:si_unique_call 382} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 65535);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb5;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 272370);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 273402);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 274434);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p2 := external_alloc();
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_copy_bits: ref;

axiom skb_copy_bits == $sub.ref(0, 275466);

procedure skb_copy_bits($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_copy_bits($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 388} {:cexpr "skb_copy_bits:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 389} {:cexpr "skb_copy_bits:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 391} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 276498);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    return;
}



const slhc_uncompress: ref;

axiom slhc_uncompress == $sub.ref(0, 277530);

procedure slhc_uncompress($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation slhc_uncompress($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 392} {:cexpr "slhc_uncompress:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 393} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 394} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netdev_printk: ref;

axiom netdev_printk == $sub.ref(0, 278562);

procedure netdev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation netdev_printk.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_printk.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation netdev_printk.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_printk.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation netdev_printk.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    return;
}



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 279594);

procedure skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation skb_trim($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "skb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    return;
}



const slhc_remember: ref;

axiom slhc_remember == $sub.ref(0, 280626);

procedure slhc_remember($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation slhc_remember($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 396} {:cexpr "slhc_remember:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 397} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ppp_ccp_peek: ref;

axiom ppp_ccp_peek == $sub.ref(0, 281658);

procedure ppp_ccp_peek($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.11, $M.18, $M.10, $M.6, assertsPassed, $M.3, $M.19, $M.8, $M.9, $M.16, $CurrAddr, $M.7, $M.33, $M.34;



implementation ppp_ccp_peek($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i64;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} {:cexpr "ppp_ccp_peek:arg:inbound"} boogie_si_record_i32($i2);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i3 := pskb_may_pull($p1, 6);
    call {:si_unique_call 401} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(2, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p7);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 5);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p7);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 6);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p7);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p7);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 15);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 128);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i2, 0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i119 == 1);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb69:
    assume $i141 == 1;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 4096);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb71;

  $bb72:
    assume $i145 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    call {:si_unique_call 411} devirtbounce.2($p149, $p151);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i119 == 1;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i123 := $ne.i64($i122, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb62:
    assume $i123 == 1;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 8192);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb64;

  $bb65:
    assume $i127 == 1;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 128)), $mul.ref(80, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    call {:si_unique_call 410} devirtbounce.2($p131, $p133);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i136 := $and.i32($i135, $sub.i32(0, 4194305));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i136);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb67;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i118 == 1;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 192);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 64);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $i44 := $add.i64(2, 2);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p6, $mul.ref($i44, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i47, 8);
    $i49 := $add.i64(2, 3);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p6, $mul.ref($i49, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i48, $i52);
    call {:si_unique_call 402} {:cexpr "len"} boogie_si_record_i32($i53);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 2);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i55 := pskb_may_pull($p1, $i54);
    call {:si_unique_call 404} {:cexpr "tmp___0"} boogie_si_record_i32($i55);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $i57 := $add.i64(2, 4);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p6, $mul.ref($i57, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i53, $sub.i32(0, 4));
    call {:si_unique_call 405} {:cexpr "len"} boogie_si_record_i32($i59);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i60 := $sle.i32($i59, 1);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i60 == 1);
    $i61 := $add.i64($i57, 1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p6, $mul.ref($i61, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i59, $i64);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i2, 0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i66 == 1);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    call {:si_unique_call 408} $i109 := devirtbounce.7($p101, $p103, $p58, $i59, $i106, 0, $i108);
    call {:si_unique_call 409} {:cexpr "tmp___2"} boogie_si_record_i32($i109);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb54:
    assume $i110 == 1;
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 4096);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i113);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i97 == 1;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb42:
    assume $i66 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 128)), $mul.ref(72, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(480, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    call {:si_unique_call 406} $i84 := devirtbounce.6($p74, $p76, $p58, $i59, $i79, 0, $i81, $i83);
    call {:si_unique_call 407} {:cexpr "tmp___1"} boogie_si_record_i32($i84);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i85 == 1;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 8192);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, $sub.i32(0, 12582913));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i92);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i70 == 1;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb37;

  $bb33:
    assume $i56 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb30:
    assume $i43 == 1;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, $sub.i32(0, 8193));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, $sub.i32(0, 4097));
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i2, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i23 == 1);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, $sub.i32(0, 8193));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i23 == 1;
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 4097));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const proto_to_npindex: ref;

axiom proto_to_npindex == $sub.ref(0, 282690);

procedure proto_to_npindex($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation proto_to_npindex($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "proto_to_npindex:arg:proto"} boogie_si_record_i32($i0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 33);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 87);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 43);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 41);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 641);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 643);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb21:
    assume $i6 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i7 := 5;
    goto $bb26;

  $bb17:
    assume $i5 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i7 := 4;
    goto $bb26;

  $bb13:
    assume $i4 == 1;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb26;

  $bb9:
    assume $i3 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb26;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb26;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb26;
}



const skb_unclone: ref;

axiom skb_unclone == $sub.ref(0, 283722);

procedure skb_unclone($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation skb_unclone($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} {:cexpr "skb_unclone:arg:pri"} boogie_si_record_i32($i1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i4 := skb_cloned($p0);
    call {:si_unique_call 416} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i6 := ldv_pskb_expand_head_98($p0, 0, 0, $i1);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 418} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb6;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __might_sleep(.str.10, 1088, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const skb_push: ref;

axiom skb_push == $sub.ref(0, 284754);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_push($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} {:cexpr "skb_push:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p2 := external_alloc();
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __skb_pull: ref;

axiom __skb_pull == $sub.ref(0, 285786);

procedure __skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "__skb_pull:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, $i1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32($i7, $i9);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 423} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i1);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 424} devirtbounce(0, .str.10, 1690, 12);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const skb_pull_rcsum: ref;

axiom skb_pull_rcsum == $sub.ref(0, 286818);

procedure skb_pull_rcsum($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull_rcsum($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "skb_pull_rcsum:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p2 := external_alloc();
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 287850);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const skb_reset_mac_header: ref;

axiom skb_reset_mac_header == $sub.ref(0, 288882);

procedure skb_reset_mac_header($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_mac_header($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i16($i8);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(198, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    return;
}



const netif_rx: ref;

axiom netif_rx == $sub.ref(0, 289914);

procedure netif_rx($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 428} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 429} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 290946);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 430} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 431} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 291978);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 433} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pskb_expand_head_98: ref;

axiom ldv_pskb_expand_head_98 == $sub.ref(0, 293010);

procedure ldv_pskb_expand_head_98($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_pskb_expand_head_98($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} {:cexpr "ldv_pskb_expand_head_98:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 435} {:cexpr "ldv_pskb_expand_head_98:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    call {:si_unique_call 436} {:cexpr "ldv_pskb_expand_head_98:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} ldv_check_alloc_flags($i3);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p4 := ldv_malloc_unknown_size();
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 294042);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i0 := ldv_undef_int();
    call {:si_unique_call 440} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p2 := external_allocated_data();
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} ldv_assume($i5);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i6 := ldv_is_err($p2);
    call {:si_unique_call 444} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} ldv_assume($i8);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 295074);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p0 := external_alloc();
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 296106);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p2 := ldv___netdev_alloc_skb_103($p0, $i1, 32);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const ldv___netdev_alloc_skb_103: ref;

axiom ldv___netdev_alloc_skb_103 == $sub.ref(0, 297138);

procedure ldv___netdev_alloc_skb_103($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_103($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} {:cexpr "ldv___netdev_alloc_skb_103:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 450} {:cexpr "ldv___netdev_alloc_skb_103:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_check_alloc_flags($i2);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 298170);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 299202);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 300234);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 301266);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p2 := external_alloc();
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ppp_mp_insert: ref;

axiom ppp_mp_insert == $sub.ref(0, 302298);

procedure ppp_mp_insert($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ppp_mp_insert($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p14: ref;
  var $p29: ref;
  var $p13: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 455} {:cexpr "seq"} boogie_si_record_i32($i6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1)), $mul.ref(0, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, $i11);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $p13;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} __skb_queue_before($p2, $p22, $p1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p14 := $p8;
    goto $bb4;

  $bb4:
    call $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p23, $p24, $p25, $p26, $i27, $i28, $p14, $p29 := ppp_mp_insert_loop_$bb4($i6, $i11, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p23, $p24, $p25, $p26, $i27, $i28, $p14, $p29);
    goto $bb4_last;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i6, $i18);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p21 := $p14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i11);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p29 := $p26;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p13 := $p29;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p26;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2257;
}



const skb_queue_len: ref;

axiom skb_queue_len == $sub.ref(0, 303330);

procedure skb_queue_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_peek: ref;

axiom skb_peek == $sub.ref(0, 304362);

procedure skb_peek($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_peek($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p7 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;
}



const ppp_mp_reconstruct: ref;

axiom ppp_mp_reconstruct == $sub.ref(0, 305394);

procedure ppp_mp_reconstruct($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ppp_mp_reconstruct($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i42: i32;
  var $i43: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i40: i32;
  var $i41: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i73: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i59: i32;
  var $i60: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p118: ref;
  var $p119: ref;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $p149: ref;
  var $p150: ref;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p179: ref;
  var $p22: ref;
  var $p64: ref;
  var $p65: ref;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $p196: ref;
  var $i197: i64;
  var $i198: i1;
  var $i201: i64;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i1;
  var $p199: ref;
  var $p200: ref;
  var $p220: ref;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $p234: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i64;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $i243: i64;
  var $i244: i64;
  var $i245: i1;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $i254: i64;
  var $p255: ref;
  var $i256: i64;
  var $i257: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p267: ref;
  var $i268: i32;
  var $p269: ref;
  var $i270: i32;
  var $i271: i32;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $p275: ref;
  var $i276: i32;
  var $i277: i32;
  var $p278: ref;
  var $p279: ref;
  var $i280: i32;
  var $p281: ref;
  var $i282: i32;
  var $i283: i32;
  var $p284: ref;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $i292: i64;
  var $i293: i1;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $i297: i32;
  var $i298: i32;
  var $p299: ref;
  var $p300: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(616, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 457} {:cexpr "seq"} boogie_si_record_i32($i2);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 458} {:cexpr "minseq"} boogie_si_record_i32($i4);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(612, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1)), $mul.ref(0, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1)), $mul.ref(0, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p13);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p5);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i18, $i20);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p22 := $p11;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p64, $p65 := $0.ref, $p22;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p64);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $p300 := $0.ref;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p9 := $p300;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb65:
    assume $i181 == 1;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p183, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(616, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i185, $i187);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p65);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i244 := $p2i.ref.i64($p64);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i243, $i244);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i245 == 1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} __skb_unlink($p65, $p5);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p64, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p295 := $bitcast.ref.ref($p294);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p295, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p296);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i298 := $add.i32($i297, 1);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(616, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p299, $i298);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p300 := $p65;
    goto $bb103;

  $bb88:
    assume $i245 == 1;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p246 := skb_end_pointer($p65);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p247 := $bitcast.ref.ref($p246);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p247, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p249 := skb_queue_next($p5, $p65);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} __skb_unlink($p65, $p5);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p249, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p251, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.0, $p252);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p249);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p255 := $bitcast.ref.ref($p5);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i256 := $p2i.ref.i64($p255);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i257 := $ne.i64($i254, $i256);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i257 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb90:
    assume $i257 == 1;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p258, $p259, $p260 := $p248, $p249, $p253;
    goto $bb93;

  $bb93:
    call $p261, $p262, $p263, $p264, $p265, $p267, $i268, $p269, $i270, $i271, $p272, $p273, $i274, $p275, $i276, $i277, $p278, $p279, $i280, $p281, $i282, $i283, $p284, $i285, $i286, $i287, $p288, $p289, $p290, $p291, $i292, $i293, $p258, $p259, $p260 := ppp_mp_reconstruct_loop_$bb93($p5, $p64, $p65, $i256, $p261, $p262, $p263, $p264, $p265, $p267, $i268, $p269, $i270, $i271, $p272, $p273, $i274, $p275, $i276, $i277, $p278, $p279, $i280, $p281, $i282, $i283, $p284, $i285, $i286, $i287, $p288, $p289, $p290, $p291, $i292, $i293, $p258, $p259, $p260);
    goto $bb93_last;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} __skb_unlink($p259, $p5);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p258, $p259);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p259, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p262 := $bitcast.ref.ref($p261);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p262, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p263, $0.ref);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p259, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p259, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.0, $p269);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i271 := $add.i32($i268, $i270);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p272, $i271);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.0, $p273);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p259, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i276 := $load.i32($M.0, $p275);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i277 := $add.i32($i274, $i276);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p278, $i277);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p259, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p281);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i283 := $add.i32($i280, $i282);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p284, $i283);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p259);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p64);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i287 := $eq.i64($i285, $i286);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p260, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p289, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i292 := $p2i.ref.i64($p260);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i293 := $ne.i64($i292, $i256);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i293 == 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb99:
    assume $i293 == 1;
    assume {:verifier.code 0} true;
    $p258, $p259, $p260 := $p259, $p260, $p291;
    goto $bb99_dummy;

  $bb95:
    assume $i287 == 1;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb67:
    assume $i188 == 1;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(624, 1)), $mul.ref(0, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p190);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p5);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p196);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i198 := $ne.i64($i195, $i197);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i198 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.0, $p220);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i221, 1);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p234, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i237 := $load.i64($M.0, $p236);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i238 := $add.i64($i237, 1);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p240, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p242, $i238);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} ppp_receive_error($p0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb84:
    assume $i223 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(616, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p65, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p229, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i232 := $sub.i32($i231, 1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} netdev_printk.ref.ref.ref.i32.i32(.str.5, $p225, .str.9, $i227, $i232);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb69:
    assume $i198 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p199, $p200 := $p190, $p194;
    goto $bb72;

  $bb72:
    call $i201, $i202, $i203, $p204, $i205, $i206, $i207, $p208, $p209, $p210, $p211, $p212, $i213, $p214, $p215, $p216, $p217, $i218, $i219, $p199, $p200 := ppp_mp_reconstruct_loop_$bb72($p0, $p5, $p65, $i197, $i201, $i202, $i203, $p204, $i205, $i206, $i207, $p208, $p209, $p210, $p211, $p212, $i213, $p214, $p215, $p216, $p217, $i218, $i219, $p199, $p200);
    goto $bb72_last;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p199);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p65);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i203 := $eq.i64($i201, $i202);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 1);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} __skb_unlink($p199, $p5);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} kfree_skb($p199);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p200, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p200);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i218, $i197);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i219 == 1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb81:
    assume $i219 == 1;
    assume {:verifier.code 0} true;
    $p199, $p200 := $p200, $p217;
    goto $bb81_dummy;

  $bb78:
    assume $i207 == 1;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p199, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p211, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} netdev_printk.ref.ref.ref.i32(.str.5, $p209, .str.8, $i213);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb74:
    assume $i203 == 1;
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i23, $i24, $p25, $p26, $p27, $i28 := $i2, 0, $p13, $p17, $p11, 0;
    goto $bb8;

  $bb8:
    call $p29, $p30, $p31, $i32, $i33, $i34, $i42, $i43, $i35, $p36, $p37, $i38, $i39, $p44, $p45, $p46, $p47, $p48, $i49, $i40, $i41, $p54, $p55, $p56, $i57, $i58, $i61, $i62, $p63, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $p74, $p75, $p76, $i77, $i73, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i87, $i59, $i60, $p88, $p89, $p90, $i91, $i92, $i93, $i94, $p95, $i96, $p97, $i98, $i99, $i100, $p101, $p102, $p103, $i104, $i105, $i106, $i107, $p108, $p109, $p110, $i111, $i112, $i113, $p114, $i115, $i116, $i117, $p120, $p121, $p123, $i124, $i125, $p126, $p127, $p129, $p130, $p131, $p118, $p119, $i132, $p133, $p134, $p135, $p136, $i137, $i138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $p146, $i147, $i148, $p151, $i152, $i153, $i154, $p155, $p156, $p157, $p158, $p159, $i160, $p161, $p162, $p163, $p164, $i165, $i166, $p149, $p150, $p167, $i168, $i169, $p170, $p171, $i172, $i50, $p51, $i52, $i53, $p173, $p174, $p175, $p176, $i177, $i178, $i23, $i24, $p25, $p26, $p27, $i28, $p179 := ppp_mp_reconstruct_loop_$bb8($p0, $i4, $p5, $i20, $p29, $p30, $p31, $i32, $i33, $i34, $i42, $i43, $i35, $p36, $p37, $i38, $i39, $p44, $p45, $p46, $p47, $p48, $i49, $i40, $i41, $p54, $p55, $p56, $i57, $i58, $i61, $i62, $p63, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $p74, $p75, $p76, $i77, $i73, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i87, $i59, $i60, $p88, $p89, $p90, $i91, $i92, $i93, $i94, $p95, $i96, $p97, $i98, $i99, $i100, $p101, $p102, $p103, $i104, $i105, $i106, $i107, $p108, $p109, $p110, $i111, $i112, $i113, $p114, $i115, $i116, $i117, $p120, $p121, $p123, $i124, $i125, $p126, $p127, $p129, $p130, $p131, $p118, $p119, $i132, $p133, $p134, $p135, $p136, $i137, $i138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $p146, $i147, $i148, $p151, $i152, $i153, $i154, $p155, $p156, $p157, $p158, $p159, $i160, $p161, $p162, $p163, $p164, $i165, $i166, $p149, $p150, $p167, $i168, $i169, $p170, $p171, $i172, $i50, $p51, $i52, $i53, $p173, $p174, $p175, $p176, $i177, $i178, $i23, $i24, $p25, $p26, $p27, $i28, $p179);
    goto $bb8_last;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, $i23);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i35, $p36, $p37, $i38, $i39 := $i24, $p25, $p27, $i28, $i23;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i34 == 1);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i40, $i41 := $i23, $i28;
    goto $bb13;

  $bb13:
    call $i42, $i43, $i40, $i41, $p54, $p55, $p56, $i57, $i58, $i61, $i62, $p63, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $p74, $p75, $p76, $i77, $i73, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i87, $i59, $i60 := ppp_mp_reconstruct_loop_$bb13($p0, $i4, $p31, $i42, $i43, $i40, $i41, $p54, $p55, $p56, $i57, $i58, $i61, $i62, $p63, $p66, $p67, $p68, $i69, $i70, $i71, $i72, $p74, $p75, $p76, $i77, $i73, $p78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i87, $i59, $i60, $p25, $p27);
    goto $bb13_last;

  $bb16:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, $i40);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i59, $i60 := $i41, $i40;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i92 := $sext.i8.i32($i91);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, 0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94, $p95, $i96 := $i59, $p27, $i24;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i96, $i98);
    call {:si_unique_call 463} {:cexpr "len"} boogie_si_record_i32($i99);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i94, 0);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i138, 64);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $p171 := $p95;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i60, 1);
    call {:si_unique_call 469} {:cexpr "seq"} boogie_si_record_i32($i172);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i50, $p51, $i52, $i53 := $i94, $p171, $i99, $i172;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p26, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p26);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i177, $i20);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p179 := $p51;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p22 := $p179;
    goto $bb7;

  $bb62:
    assume $i178 == 1;
    assume {:verifier.code 0} true;
    $i23, $i24, $p25, $p26, $p27, $i28 := $i53, $i52, $p26, $p176, $p51, $i50;
    goto $bb62_dummy;

  $bb45:
    assume $i140 == 1;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p25);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p5);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i145, $i147);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p167 := skb_peek($p5);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p167);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i169 := $eq.i64($i168, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p170 := $p167;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p171 := $p167;
    goto $bb61;

  $bb58:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p64, $p65 := $0.ref, $p170;
    goto $bb21;

  $bb47:
    assume $i148 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p149, $p150 := $p144, $p25;
    goto $bb50;

  $bb50:
    call $p151, $i152, $i153, $i154, $p155, $p156, $p157, $p158, $p159, $i160, $p161, $p162, $p163, $p164, $i165, $i166, $p149, $p150 := ppp_mp_reconstruct_loop_$bb50($p0, $p5, $i147, $p151, $i152, $i153, $i154, $p155, $p156, $p157, $p158, $p159, $i160, $p161, $p162, $p163, $p164, $i165, $i166, $p149, $p150);
    goto $bb50_last;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i152, 1);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __skb_unlink($p150, $p5);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} kfree_skb($p150);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p149, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p149);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, $i147);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i166 == 1);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb55:
    assume $i166 == 1;
    assume {:verifier.code 0} true;
    $p149, $p150 := $p164, $p149;
    goto $bb55_dummy;

  $bb52:
    assume $i154 == 1;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p150, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} netdev_printk.ref.ref.ref.i32(.str.5, $p156, .str.8, $i160);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb34:
    assume $i100 == 1;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 64);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb36;

  $bb37:
    assume $i107 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p95, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i112 := $sext.i8.i32($i111);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i112, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb36;

  $bb39:
    assume $i113 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(612, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 2);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i117 := $sgt.i32($i99, $i116);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p118, $p119 := $p25, $p95;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p64, $p65 := $p118, $p119;
    goto $bb21;

  $bb41:
    assume $i117 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p121, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i124 := $load.i64($M.0, $p123);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i125 := $add.i64($i124, 1);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p127, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p129, $i125);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} netdev_printk.ref.ref.ref.i32(.str.5, $p131, .str.7, $i99);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i60, 1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(616, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, $i132);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb31:
    assume $i93 == 1;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i94, $p95, $i96 := 0, $p25, 0;
    goto $bb33;

  $bb17:
    assume $i58 == 1;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i40, $i4);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p63 := $p27;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i4, $i69);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i71 == 1);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i73 := $i77;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 1);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p31);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, $i73);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i42, $i43 := 1, $i73;
    assume true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i40, $i41 := $i73, 1;
    goto $bb29_dummy;

  $bb14:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i35, $p36, $p37, $i38, $i39 := $i24, $p25, $p27, $i42, $i43;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} netdev_err.ref.ref.i32.i32($p45, .str.4, $i49, $i39);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __skb_unlink($p25, $p5);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} kfree_skb($p36);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i50, $p51, $i52, $i53 := $i38, $p37, $i35, $i39;
    goto $bb15;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i73, 1);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} netdev_printk.ref.ref.ref.i32.i32(.str.5, $p83, .str.6, $i40, $i84);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i71 == 1;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i4, 1);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb25;

  $bb19:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p64, $p65 := $0.ref, $p63;
    goto $bb21;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb99_dummy:
    assume false;
    return;

  $bb93_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  $bb81_dummy:
    assume false;
    return;

  $bb72_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;

  $bb55_dummy:
    assume false;
    return;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  $bb29_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb62_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;
}



const __skb_unlink: ref;

axiom __skb_unlink == $sub.ref(0, 306426);

procedure __skb_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $0.ref);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p13);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p9);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_next: ref;

axiom skb_queue_next == $sub.ref(0, 307458);

procedure skb_queue_next($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_queue_next($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i2 := skb_queue_is_last($p0, $p1);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 481} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i64($i4);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 483} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 484} devirtbounce(0, .str.10, 1032, 12);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const skb_queue_is_last: ref;

axiom skb_queue_is_last == $sub.ref(0, 308490);

procedure skb_queue_is_last($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_queue_is_last($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i6, $i8);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __skb_queue_before: ref;

axiom __skb_queue_before == $sub.ref(0, 309522);

procedure __skb_queue_before($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_queue_before($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} __skb_insert($p2, $p6, $p1, $p0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    return;
}



const __skb_insert: ref;

axiom __skb_insert == $sub.ref(0, 310554);

procedure __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __skb_insert($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p2);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    return;
}



const __be16_to_cpup: ref;

axiom __be16_to_cpup == $sub.ref(0, 311586);

procedure __be16_to_cpup($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __be16_to_cpup($p0: ref) returns ($r: i16)
{
  var $i1: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i1 := __swab16p($p0);
    call {:si_unique_call 487} {:cexpr "tmp"} boogie_si_record_i16($i1);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __swab16p: ref;

axiom __swab16p == $sub.ref(0, 312618);

procedure __swab16p($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation __swab16p($p0: ref) returns ($r: i16)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i1 := $load.i16($M.0, $p0);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i4 := __fswab16($i3);
    call {:si_unique_call 489} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const slhc_toss: ref;

axiom slhc_toss == $sub.ref(0, 313650);

procedure slhc_toss($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation slhc_toss($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 490} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 491} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 314682);

procedure skb_headlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __pskb_pull_tail: ref;

axiom __pskb_pull_tail == $sub.ref(0, 315714);

procedure __pskb_pull_tail($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __pskb_pull_tail($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} {:cexpr "__pskb_pull_tail:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p2 := external_alloc();
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ppp_input_error: ref;

axiom ppp_input_error == $sub.ref(0, 316746);

procedure ppp_input_error($p0: ref, $i1: i32);



const alloc_skb: ref;

axiom alloc_skb == $sub.ref(0, 317778);

procedure alloc_skb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_skb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} {:cexpr "alloc_skb:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 495} {:cexpr "alloc_skb:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} ldv_check_alloc_flags($i1);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ppp_output_wakeup: ref;

axiom ppp_output_wakeup == $sub.ref(0, 318810);

procedure ppp_output_wakeup($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.0, assertsPassed, $M.8, $M.16, $CurrAddr, $M.2, $M.9, $M.33, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation ppp_output_wakeup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} ppp_channel_push($p3);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ppp_channel_push: ref;

axiom ppp_channel_push == $sub.ref(0, 319842);

procedure ppp_channel_push($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.10, $M.0, assertsPassed, $M.8, $M.16, $CurrAddr, $M.2, $M.9, $M.33, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation ppp_channel_push($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} ldv_spin_lock_bh_166($p1);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} skb_queue_purge($p29);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} ldv_spin_unlock_bh_167($p30);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i33 := skb_queue_empty($p32);
    call {:si_unique_call 511} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} ldv_linux_kernel_locking_rwlock_read_lock();
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} ldv_linux_kernel_locking_rwlock_read_unlock();
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} ppp_xmit_process($p36);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i8 := skb_queue_empty($p7);
    call {:si_unique_call 501} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $i26, $i27 := ppp_channel_push_loop_$bb6($p0, $p7, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $i26, $i27);
    goto $bb6_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p12 := skb_dequeue($p11);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    call {:si_unique_call 504} $i21 := devirtbounce.8($p18, $p20, $p12);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p23 := $p12;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i26 := skb_queue_empty($p7);
    call {:si_unique_call 508} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} skb_queue_head($p25, $p23);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const skb_queue_head: ref;

axiom skb_queue_head == $sub.ref(0, 320874);

procedure skb_queue_head($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_queue_head($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    return;
}



const skb_queue_empty: ref;

axiom skb_queue_empty == $sub.ref(0, 321906);

procedure skb_queue_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_queue_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ppp_xmit_process: ref;

axiom ppp_xmit_process == $sub.ref(0, 322938);

procedure ppp_xmit_process($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.0, $M.16, assertsPassed, $M.10, $CurrAddr, $M.2, $M.11, $M.18, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_xmit_process($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p9: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} ldv_spin_lock_bh_131($p1);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(600, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} ldv_spin_unlock_bh_134($p32);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} ppp_push($p0);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} netif_stop_queue($p31);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p23 := skb_peek($p22);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} netif_stop_queue($p29);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} netif_wake_queue($p27);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p10, $i11, $i12, $p14, $p9, $i15, $i16 := ppp_xmit_process_loop_$bb6($p0, $p5, $p10, $i11, $i12, $p14, $p9, $i15, $i16);
    goto $bb6_last;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $p9 := skb_dequeue($p14);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p9);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} ppp_send_frame($p0, $p9);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p5);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8_dummy;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2891;
}



const ppp_push: ref;

axiom ppp_push == $sub.ref(0, 323970);

procedure ppp_push($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, assertsPassed, $M.8, $M.16, $CurrAddr, $M.2, $M.9, $M.33, $M.11, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation ppp_push($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i6 := list_empty($p5);
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 1024);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i35 := ppp_mp_explode($p0, $p2);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    call {:si_unique_call 533} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} kfree_skb($p2);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(488, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} ldv_spin_lock_bh_166($p17);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(320, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} kfree_skb($p2);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(488, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_spin_unlock_bh_167($p34);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(320, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(320, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 528} $i30 := devirtbounce.8($p27, $p29, $p2);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 529} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i31 == 1;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} kfree_skb($p2);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ppp_send_frame: ref;

axiom ppp_send_frame == $sub.ref(0, 325002);

procedure ppp_send_frame($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.16, $M.10, $CurrAddr, $M.8, $M.2, $M.11, $M.18, assertsPassed, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_send_frame($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i64;
  var $p48: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p55: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $p65: ref;
  var $i66: i1;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i16;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i1;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i8;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $p141: ref;
  var $i136: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $i145: i8;
  var $p146: ref;
  var $p147: ref;
  var $p124: ref;
  var $i125: i32;
  var $p76: ref;
  var $i77: i32;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $p176: ref;
  var $i177: i32;
  var $i178: i1;
  var $p180: ref;
  var $p182: ref;
  var $p183: ref;
  var $p92: ref;
  var $p184: ref;
  var $p185: ref;
  var $p187: ref;
  var $i188: i64;
  var $i189: i64;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var vslice_dummy_var_22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $i5 := get_unaligned_be16($p4);
    call {:si_unique_call 537} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 538} {:cexpr "proto"} boogie_si_record_i32($i6);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i7 := $sle.i32($i6, 32767);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(8, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 1);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(8, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p55, $i53);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(24, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32($i60, 2);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i58, $i62);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(24, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p65, $i63);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i6, 33);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i6, 33021);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p76, $i77 := $p1, $i6;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i149, 4096);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p169 := $p76;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 512);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(536, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p183, $p169);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} ppp_push($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i173 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(104, 1)), $mul.ref(16, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i178 := $ugt.i32($i177, 32);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} skb_queue_tail($p180, $p169);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __wake_up($p182, 1, 1, $0.ref);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb67:
    assume $i178 == 1;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p92 := $p169;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} kfree_skb($p92);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p185, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i188 := $load.i64($M.0, $p187);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i189 := $add.i64($i188, 1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p193, $i189);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb46:
    assume $i151 == 1;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.0, $p152);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb48;

  $bb49:
    assume $i155 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i77, 49185);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb48;

  $bb51:
    assume $i156 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i77, 33021);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb48;

  $bb53:
    assume $i157 == 1;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($p158, $mul.ref(121, 4));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 4194304);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p166 := pad_compress_skb($p0, $p76);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p169 := $p166;
    goto $bb64;

  $bb61:
    assume $i168 == 1;
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p92 := $p166;
    goto $bb38;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i161 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $i162 := net_ratelimit();
    call {:si_unique_call 558} {:cexpr "tmp___3"} boogie_si_record_i32($i162);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p92 := $p76;
    goto $bb38;

  $bb57:
    assume $i163 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} netdev_err.ref.ref($p165, .str.22);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb24:
    assume $i67 == 1;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} ppp_ccp_peek($p0, $p1, 0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p76, $i77 := $p1, $i6;
    goto $bb34;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i66 == 1;
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i71 == 1);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 4);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i79, $i84);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, 2);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p87 := alloc_skb($i86, 32);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i96 := $load.i16($M.0, $p95);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i97 := $zext.i16.i32($i96);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, $sub.i32(0, 2));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} skb_reserve($p87, $i98);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref(2, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p2, $p101);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.16, $p2);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i107 := $sub.i32($i106, 2);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p87, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(2, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i112, 8);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i115 := $zext.i1.i32($i114);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i116 := slhc_compress($p103, $p104, $i107, $p110, $p2, $i115);
    call {:si_unique_call 553} {:cexpr "len"} boogie_si_record_i32($i116);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.16, $p2);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i118 := $p2i.ref.i64($p117);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(2, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i118, $i122);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i123 == 1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.16, $p2);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.0, $p126);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i128 := $sext.i8.i32($i127);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i128, 0);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i129 == 1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p138, $mul.ref(2, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.0, $p139);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.16, $p2);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, $i140);
    assume {:verifier.code 0} true;
    $i136 := 47;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} consume_skb($p1);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i116, 2);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p143 := skb_put($p87, $i142);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p2, $p143);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.16, $p2);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p144, 0);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i8($i136);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.16, $p2);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p146, $mul.ref(1, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, $i145);
    assume {:verifier.code 0} true;
    $p124, $i125 := $p87, $i136;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p76, $i77 := $p124, $i125;
    goto $bb34;

  $bb43:
    assume $i129 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.16, $p2);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i133 := $and.i32($i132, 127);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i32.i8($i133);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.16, $p2);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, $i134);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i136 := 45;
    goto $bb45;

  $bb40:
    assume $i123 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} consume_skb($p87);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p124, $i125 := $p1, $i6;
    goto $bb42;

  $bb36:
    assume $i89 == 1;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} netdev_err.ref.ref($p91, .str.21);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p92 := $p1;
    goto $bb38;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p76, $i77 := $p1, $i6;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb30;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p8 := skb_push($p1, 2);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    call {:si_unique_call 544} $i45 := devirtbounce.3($p39, $p1, $p44);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    call {:si_unique_call 545} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_22 := skb_pull($p1, 2);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, jiffies);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(576, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i47);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, jiffies);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(576, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i34);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 32)), $mul.ref(32, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    call {:si_unique_call 540} $i22 := devirtbounce.3($p16, $p1, $p21);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    call {:si_unique_call 541} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 1);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} kfree_skb($p1);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} netdev_printk.ref.ref.ref(.str.5, $p29, .str.20);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 326034);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} netif_tx_wake_queue($p1);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    return;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 327066);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} netif_tx_stop_queue($p1);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 328098);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(968, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 329130);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 569} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 571} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 574} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} set_bit(0, $p15);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_23 := printk.ref(.str.26);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} warn_slowpath_null(.str.25, 2547);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 330162);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 331194);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 579} devirtbounce.9(0, $p1, $i0, $p1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 332226);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    return;
}



const slhc_compress: ref;

axiom slhc_compress == $sub.ref(0, 333258);

procedure slhc_compress($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation slhc_compress($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 580} {:cexpr "slhc_compress:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 581} {:cexpr "slhc_compress:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const net_ratelimit: ref;

axiom net_ratelimit == $sub.ref(0, 334290);

procedure net_ratelimit() returns ($r: i32);
  free requires assertsPassed;



implementation net_ratelimit() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 585} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const pad_compress_skb: ref;

axiom pad_compress_skb == $sub.ref(0, 335322);

procedure pad_compress_skb($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation pad_compress_skb($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $i70: i1;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p71: ref;
  var $p69: ref;
  var $p34: ref;
  var vslice_dummy_var_24: ref;
  var vslice_dummy_var_25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(568, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i5, $i9);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i10, $i15);
    call {:si_unique_call 586} {:cexpr "new_skb_size"} boogie_si_record_i32($i16);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 3216)), $mul.ref(568, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i20, $i24);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 4);
    call {:si_unique_call 587} {:cexpr "compressor_skb_size"} boogie_si_record_i32($i26);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p27 := alloc_skb($i16, 32);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i40 := $ugt.i32($i39, 4);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref($sub.ref(0, 2), 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p27, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i59, 2);
    call {:si_unique_call 593} $i61 := devirtbounce.10($p50, $p52, $p55, $p57, $i60, $i26);
    call {:si_unique_call 594} {:cexpr "len"} boogie_si_record_i32($i61);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i61, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i72 := net_ratelimit();
    call {:si_unique_call 600} {:cexpr "tmp___0"} boogie_si_record_i32($i72);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} kfree_skb($p1);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} consume_skb($p27);
    assume {:verifier.code 0} true;
    $p71 := $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p69 := $p71;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p34 := $p69;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $r := $p34;
    return;

  $bb20:
    assume $i73 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} netdev_err.ref.ref($p75, .str.24);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} consume_skb($p27);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p71 := $p1;
    goto $bb19;

  $bb11:
    assume $i62 == 1;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 128);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb13;

  $bb14:
    assume $i66 == 1;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} consume_skb($p1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_24 := skb_put($p27, $i61);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_25 := skb_pull($p27, 2);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p69 := $p27;
    goto $bb16;

  $bb8:
    assume $i40 == 1;
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, $sub.i32(0, 4));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} skb_reserve($p27, $i46);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i30 := net_ratelimit();
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p34 := $0.ref;
    goto $bb6;

  $bb3:
    assume $i31 == 1;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} netdev_err.ref.ref($p33, .str.23);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 336354);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ppp_mp_explode: ref;

axiom ppp_mp_explode == $sub.ref(0, 337386);

procedure ppp_mp_explode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, assertsPassed, $M.8, $M.16, $CurrAddr, $M.2, $M.9, $M.33, $M.11, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation ppp_mp_explode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p41: ref;
  var $i40: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i58: i32;
  var $i59: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $i109: i8;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p122: ref;
  var $i123: i32;
  var $i136: i32;
  var $p137: ref;
  var $i120: i32;
  var $p121: ref;
  var $i131: i32;
  var $p132: ref;
  var $i138: i1;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $p161: ref;
  var $p163: ref;
  var $i164: i64;
  var $p165: ref;
  var $i166: i64;
  var $i167: i1;
  var $i168: i32;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $i185: i1;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $p193: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $i198: i1;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $i202: i32;
  var $i204: i32;
  var $p205: ref;
  var $p206: ref;
  var $i207: i32;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i212: i32;
  var $i213: i32;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i225: i1;
  var $i227: i1;
  var $p228: ref;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $i236: i32;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i32;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i247: i32;
  var $i248: i32;
  var $i249: i1;
  var $i250: i32;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i32;
  var $i256: i32;
  var $p257: ref;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $i261: i32;
  var $i262: i32;
  var $i263: i32;
  var $i237: i32;
  var $i238: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $p278: ref;
  var $p279: ref;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $p275: ref;
  var $p276: ref;
  var $i277: i32;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $i286: i32;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $i291: i1;
  var $i292: i32;
  var $i293: i32;
  var $i294: i32;
  var $i295: i1;
  var $i296: i32;
  var $i297: i32;
  var $p298: ref;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $i302: i32;
  var $p303: ref;
  var $p304: ref;
  var $i305: i32;
  var $i306: i32;
  var $i307: i1;
  var $i308: i8;
  var $i309: i32;
  var $p310: ref;
  var $i311: i32;
  var $i312: i32;
  var $i313: i8;
  var $i314: i32;
  var $i315: i32;
  var $i316: i32;
  var $i317: i8;
  var $p318: ref;
  var $p319: ref;
  var $i320: i32;
  var $i321: i8;
  var $p322: ref;
  var $i323: i8;
  var $p324: ref;
  var $p325: ref;
  var $i326: i32;
  var $i327: i32;
  var $i328: i8;
  var $p329: ref;
  var $p330: ref;
  var $i331: i32;
  var $i332: i32;
  var $i333: i8;
  var $p334: ref;
  var $p335: ref;
  var $i336: i32;
  var $i337: i8;
  var $p338: ref;
  var $i339: i64;
  var $p340: ref;
  var $i341: i64;
  var $p342: ref;
  var $p343: ref;
  var $p345: ref;
  var $i346: i32;
  var $i347: i1;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $p357: ref;
  var $p358: ref;
  var $i359: i64;
  var $p360: ref;
  var $i361: i32;
  var $p362: ref;
  var $i363: i32;
  var $i364: i32;
  var $p365: ref;
  var $p366: ref;
  var $i367: i1;
  var $i153: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $p369: ref;
  var $i370: i32;
  var $i186: i32;
  var $i203: i32;
  var $p162: ref;
  var $i173: i32;
  var $i226: i32;
  var $i139: i32;
  var $i368: i32;
  var $i371: i32;
  var $i280: i32;
  var $i372: i32;
  var $i169: i32;
  var $i373: i32;
  var $i224: i32;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $i377: i32;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $p383: ref;
  var $p385: ref;
  var $i386: i64;
  var $i387: i64;
  var $p388: ref;
  var $p389: ref;
  var $p391: ref;
  var $p392: ref;
  var $i393: i32;
  var $i394: i32;
  var $p395: ref;
  var $i101: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 16384);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 4 else 6);
    call {:si_unique_call 604} {:cexpr "hdrlen"} boogie_si_record_i32($i6);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(576, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19, $i20, $i21 := 0, 0, 0, 0, 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i20, 0);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i98 == 1);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i99 := $sdiv.i32($i21, 2);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i20, $i99);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    call {:si_unique_call 613} {:cexpr "len"} boogie_si_record_i32($i105);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p103);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p113, $i114 := $p103, $i105;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i115 := $srem.i32($i114, $i20);
    call {:si_unique_call 615} {:cexpr "nbigger"} boogie_si_record_i32($i115);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(604, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i119 := $slt.i32(0, $i118);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i120, $p121 := 0, $p116;
    assume {:branchcond $i119} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i131, $p132 := $i120, $p121;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i138 := $sgt.i32($i114, 0);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i139 := $i131;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i371 := $i139;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i372 := $i371;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i373 := $i372;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i224 := $i373;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(604, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p374, $i224);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i101 := 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $r := $i101;
    return;

  $bb55:
    assume $i138 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i140, $p141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152 := $i138, $p132, $i114, $i114, $i131, 128, $p113, $i21, $i20, $i19, $i115, $i18, $i17;
    goto $bb58;

  $bb58:
    call $i140, $p141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $p161, $p163, $i164, $p165, $i166, $i167, $i168, $p170, $p171, $i172, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $i185, $p187, $p188, $i189, $p182, $p183, $i184, $p193, $p190, $p191, $i192, $p194, $p195, $p196, $i197, $i198, $p199, $i200, $i201, $i202, $i204, $p205, $p206, $i207, $p208, $i209, $i210, $i211, $p214, $i215, $i216, $i212, $i213, $p217, $p218, $i219, $i220, $i221, $i222, $i223, $i225, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $i237, $i238, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p278, $p279, $i272, $i273, $i274, $p275, $p276, $i277, $p281, $p282, $p283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $i299, $i300, $p301, $i302, $p303, $p304, $i305, $i306, $i307, $i308, $i309, $p310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $p318, $p319, $i320, $i321, $p322, $i323, $p324, $p325, $i326, $i327, $i328, $p329, $p330, $i331, $i332, $i333, $p334, $p335, $i336, $i337, $p338, $i339, $p340, $i341, $p342, $p343, $p345, $i346, $i347, $p349, $p350, $p351, $p352, $p353, $i354, $i355, $p357, $p358, $i359, $p360, $i361, $p362, $i363, $i364, $p365, $p366, $i367, $i153, $p154, $i155, $i156, $i157, $p158, $i159, $i160, $p369, $i370, $i186, $i203, $p162, $i173, $i226, $i368, $i280, $i169, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2 := ppp_mp_explode_loop_$bb58($p0, $i6, $i140, $p141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152, $p161, $p163, $i164, $p165, $i166, $i167, $i168, $p170, $p171, $i172, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $i185, $p187, $p188, $i189, $p182, $p183, $i184, $p193, $p190, $p191, $i192, $p194, $p195, $p196, $i197, $i198, $p199, $i200, $i201, $i202, $i204, $p205, $p206, $i207, $p208, $i209, $i210, $i211, $p214, $i215, $i216, $i212, $i213, $p217, $p218, $i219, $i220, $i221, $i222, $i223, $i225, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $i237, $i238, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p278, $p279, $i272, $i273, $i274, $p275, $p276, $i277, $p281, $p282, $p283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $i299, $i300, $p301, $i302, $p303, $p304, $i305, $i306, $i307, $i308, $i309, $p310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $p318, $p319, $i320, $i321, $p322, $i323, $p324, $p325, $i326, $i327, $i328, $p329, $p330, $i331, $i332, $i333, $p334, $p335, $i336, $i337, $p338, $i339, $p340, $i341, $p342, $p343, $p345, $i346, $i347, $p349, $p350, $p351, $p352, $p353, $i354, $i355, $p357, $p358, $i359, $p360, $i361, $p362, $i363, $i364, $p365, $p366, $i367, $i153, $p154, $i155, $i156, $i157, $p158, $i159, $i160, $p369, $i370, $i186, $i203, $p162, $i173, $i226, $i368, $i280, $i169, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2);
    goto $bb58_last;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i153, $p154, $i155, $i156, $i157, $p158, $i159, $i160 := $i140, $p141, $i142, $i144, $i145, $p146, $i148, $i150;
    goto $bb59;

  $bb59:
    call $p161, $p163, $i164, $p165, $i166, $i167, $i168, $p170, $p171, $i172, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $i185, $p187, $p188, $i189, $p182, $p183, $i184, $p193, $p190, $p191, $i192, $p194, $p195, $p196, $i197, $i198, $p199, $i200, $i201, $i202, $i204, $p205, $p206, $i207, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $i237, $i238, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p278, $p279, $i272, $i273, $i274, $p275, $p276, $i277, $p281, $p282, $p283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $i299, $i300, $p301, $i302, $p303, $p304, $i305, $i306, $i307, $i308, $i309, $p310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $p318, $p319, $i320, $i321, $p322, $i323, $p324, $p325, $i326, $i327, $i328, $p329, $p330, $i331, $i332, $i333, $p334, $p335, $i336, $i337, $p338, $i339, $p340, $i341, $p342, $p343, $p345, $i346, $i347, $p349, $p350, $p351, $p352, $p353, $i354, $i355, $p357, $p358, $i359, $p360, $i361, $p362, $i363, $i364, $p365, $p366, $i367, $i153, $p154, $i155, $i156, $i157, $p158, $i159, $i160, $p369, $i370, $i186, $i203, $p162, $i173, $i368, $i280, $i169, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2 := ppp_mp_explode_loop_$bb59($p0, $i6, $i143, $i149, $i151, $i152, $p161, $p163, $i164, $p165, $i166, $i167, $i168, $p170, $p171, $i172, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $i185, $p187, $p188, $i189, $p182, $p183, $i184, $p193, $p190, $p191, $i192, $p194, $p195, $p196, $i197, $i198, $p199, $i200, $i201, $i202, $i204, $p205, $p206, $i207, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $i237, $i238, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p278, $p279, $i272, $i273, $i274, $p275, $p276, $i277, $p281, $p282, $p283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $i299, $i300, $p301, $i302, $p303, $p304, $i305, $i306, $i307, $i308, $i309, $p310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $p318, $p319, $i320, $i321, $p322, $i323, $p324, $p325, $i326, $i327, $i328, $p329, $p330, $i331, $i332, $i333, $p334, $p335, $i336, $i337, $p338, $i339, $p340, $i341, $p342, $p343, $p345, $i346, $i347, $p349, $p350, $p351, $p352, $p353, $i354, $i355, $p357, $p358, $i359, $p360, $i361, $p362, $i363, $i364, $p365, $p366, $i367, $i153, $p154, $i155, $i156, $i157, $p158, $i159, $i160, $p369, $i370, $i186, $i203, $p162, $i173, $i368, $i280, $i169, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2);
    goto $bb59_last;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p369, $i370, $i186, $i203 := $p154, $i156, $i159, $i160;
    goto $bb135;

  $bb135:
    call $p161, $p163, $i164, $p165, $i166, $i167, $i168, $p170, $p171, $i172, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $i185, $p187, $p188, $i189, $p182, $p183, $i184, $p193, $p190, $p191, $i192, $p194, $p195, $p196, $i197, $i198, $p199, $i200, $i201, $i202, $i204, $p205, $p206, $i207, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $i237, $i238, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p278, $p279, $i272, $i273, $i274, $p275, $p276, $i277, $p369, $i370, $i186, $i203, $p162, $i173, $i280, $i169 := ppp_mp_explode_loop_$bb135($p0, $i6, $i143, $i149, $i151, $i152, $p161, $p163, $i164, $p165, $i166, $i167, $i168, $p170, $p171, $i172, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $i185, $p187, $p188, $i189, $p182, $p183, $i184, $p193, $p190, $p191, $i192, $p194, $p195, $p196, $i197, $i198, $p199, $i200, $i201, $i202, $i204, $p205, $p206, $i207, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i239, $i240, $i241, $i242, $i243, $p244, $i245, $i246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $i237, $i238, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p278, $p279, $i272, $i273, $i274, $p275, $p276, $i277, $i153, $i155, $i157, $p158, $p369, $i370, $i186, $i203, $p162, $i173, $i280, $i169);
    goto $bb135_last;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p162, $i173 := $p369, $i370;
    goto $bb136;

  $bb136:
    call $p161, $p163, $i164, $p165, $i166, $i167, $i168, $p170, $p171, $i172, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $i185, $p187, $p188, $i189, $p182, $p183, $i184, $p162, $i173, $i169 := ppp_mp_explode_loop_$bb136($p0, $p161, $p163, $i164, $p165, $i166, $i167, $i168, $p170, $p171, $i172, $p174, $i175, $i176, $i177, $p178, $i179, $i180, $i181, $i185, $p187, $p188, $i189, $p182, $p183, $i184, $i153, $i186, $p162, $i173, $i169);
    goto $bb136_last;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p162, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p161);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i166 := $p2i.ref.i64($p165);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i167 := $eq.i64($i164, $i166);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p163);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p170, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i173, 1);
    call {:si_unique_call 617} {:cexpr "i"} boogie_si_record_i32($i172);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.0, $p178);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 1);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p182, $p183, $i184 := $p163, $p171, $i172;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p183, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p193, 1);
    assume {:verifier.code 0} true;
    $p190, $p191, $i192 := $p182, $p183, $i184;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p191, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv_spin_lock_bh_166($p194);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p191, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.0, $p195);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p196);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i198 := $eq.i64($i197, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p199, $i200, $i201, $i202, $i204, $p205, $p206, $i207 := $p158, $i157, $i155, $i203, $i186, $p190, $p191, $i192;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i227 := $sgt.i32($i186, 0);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    $i265, $i266, $i267 := $i203, $i186, $i155;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i268 := $sle.i32($i266, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb102;

  $bb102:
    assume !($i268 == 1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i269 := $sgt.i32($i267, $i155);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    $i270 := $i267;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i271 := $sle.i32($i270, 0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i272, $i273, $i274, $p275, $p276, $i277 := $i265, $i266, $i270, $p190, $p191, $i192;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p276, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p282 := $load.ref($M.0, $p281);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p282, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p283);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i285 := $sub.i32(2, $i6);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i286 := $add.i32($i284, $i285);
    call {:si_unique_call 633} {:cexpr "mtu"} boogie_si_record_i32($i286);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i287 := $sle.i32($i286, 3);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    $i288 := $i286;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i289 := $sgt.i32($i274, $i288);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    $i290 := $i274;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, $i155);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    $i293 := $i157;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i294 := $add.i32($i290, $i6);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i290, 0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i296 := $zext.i1.i32($i295);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i297 := $add.i32($i294, $i296);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p298 := alloc_skb($i297, 32);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i299 := $p2i.ref.i64($p298);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i300 := $eq.i64($i299, 0);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p301 := $p276;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i302 := $add.i32($i290, $i6);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p303 := skb_put($p298, $i302);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} put_unaligned_be16(61, $p303);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.0, $p304);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i306 := $and.i32($i305, 16384);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i307 == 1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i323 := $trunc.i32.i8($i293);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($p303, $mul.ref(2, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p324, $i323);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i326 := $load.i32($M.0, $p325);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i327 := $lshr.i32($i326, 16);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i8($i327);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($p303, $mul.ref(3, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p329, $i328);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.0, $p330);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i332 := $lshr.i32($i331, 8);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i32.i8($i332);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($p303, $mul.ref(4, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p334, $i333);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.0, $p335);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i32.i8($i336);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($p303, $mul.ref(5, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p338, $i337);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i339 := $sext.i32.i64($i6);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($p303, $mul.ref($i339, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i341 := $sext.i32.i64($i290);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 639} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p340, $p158, $i341, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p276, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.0, $p342);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i346 := skb_queue_empty($p345);
    call {:si_unique_call 641} {:cexpr "tmp___0"} boogie_si_record_i32($i346);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 0);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i347 == 1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p343, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.0, $p350);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p351, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    call {:si_unique_call 643} $i354 := devirtbounce.8($p353, $p343, $p298);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 644} {:cexpr "tmp___1"} boogie_si_record_i32($i354);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 0);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p276, $mul.ref(0, 680)), $mul.ref(665, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p358, 1);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i359 := $sext.i32.i64($i290);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($p158, $mul.ref($i359, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i361 := $sub.i32($i155, $i290);
    call {:si_unique_call 645} {:cexpr "len"} boogie_si_record_i32($i361);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i363 := $load.i32($M.0, $p362);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i364 := $add.i32($i363, 1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p365, $i364);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p276, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} ldv_spin_unlock_bh_167($p366);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i367 := $sgt.i32($i361, 0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i368 := $i277;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i371 := $i368;
    goto $bb137;

  $bb133:
    assume $i367 == 1;
    assume {:verifier.code 0} true;
    $i153, $p154, $i155, $i156, $i157, $p158, $i159, $i160 := $i367, $p275, $i361, $i277, 0, $p360, $i273, $i272;
    goto $bb133_dummy;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i355 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} skb_queue_tail($p357, $p298);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb132;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb127:
    assume $i347 == 1;
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} skb_queue_tail($p349, $p298);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i307 == 1;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i8($i293);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i309 := $zext.i8.i32($i308);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.0, $p310);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i312 := $lshr.i32($i311, 8);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i32.i8($i312);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i314 := $zext.i8.i32($i313);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i315 := $and.i32($i314, 15);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i316 := $add.i32($i309, $i315);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i317 := $trunc.i32.i8($i316);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($p303, $mul.ref(2, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p318, $i317);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i320 := $load.i32($M.0, $p319);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i321 := $trunc.i32.i8($i320);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($p303, $mul.ref(3, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p322, $i321);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb120:
    assume $i300 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p301, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} ldv_spin_unlock_bh_167($p375);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i377 := $load.i32($M.0, $p376);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i378 := $and.i32($i377, 1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i379 := $ne.i32($i378, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p383 := $load.ref($M.0, $p382);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($p383, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i386 := $load.i64($M.0, $p385);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i387 := $add.i64($i386, 1);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.0, $p388);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p389, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p391, $i387);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i393 := $load.i32($M.0, $p392);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i394 := $add.i32($i393, 1);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p395, $i394);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i101 := 1;
    goto $bb35;

  $bb141:
    assume $i379 == 1;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p381 := $load.ref($M.0, $p380);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} netdev_err.ref.ref($p381, .str.19);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb143;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb117:
    assume $i291 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i292 := $or.i32($i157, 64);
    call {:si_unique_call 634} {:cexpr "bits"} boogie_si_record_i32($i292);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i293 := $i292;
    goto $bb119;

  $bb114:
    assume $i289 == 1;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i290 := $i288;
    goto $bb116;

  $bb111:
    assume $i287 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i288 := 4;
    goto $bb113;

  $bb106:
    assume $i271 == 1;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p191, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p278, 2);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p191, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} ldv_spin_unlock_bh_167($p279);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i280 := $i192;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i372 := $i280;
    goto $bb138;

  $bb108:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $p369, $i370, $i186, $i203 := $p190, $i192, $i266, $i265;
    goto $bb108_dummy;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i270 := $i155;
    goto $bb105;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb101;

  $bb88:
    assume $i227 == 1;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i230 == 1);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i239 := $sub.i32($i152, $i149);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i240 := $mul.i32($i6, $i152);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i241 := $add.i32($i143, $i240);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i242 := $mul.i32($i239, $i241);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i243 := $mul.i32($i151, $i152);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i246 := $sdiv.i32($i243, $i245);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i247 := $sdiv.i32($i242, $i246);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i248 := $sub.i32($i247, $i6);
    call {:si_unique_call 626} {:cexpr "flen"} boogie_si_record_i32($i248);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i249 := $sgt.i32($i203, 0);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    $i262, $i263 := $i203, $i248;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i237, $i238 := $i262, $i263;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i264 := $sub.i32($i186, 1);
    call {:si_unique_call 629} {:cexpr "nfree"} boogie_si_record_i32($i264);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i265, $i266, $i267 := $i237, $i264, $i238;
    goto $bb99;

  $bb96:
    assume $i249 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i250 := $sub.i32($i152, $i149);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.0, $p251);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i253 := $mul.i32($i250, $i252);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i254 := $sdiv.i32($i253, $i151);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i248, $i254);
    call {:si_unique_call 630} {:cexpr "flen"} boogie_si_record_i32($i255);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i256 := $sub.i32($i152, $i149);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.0, $p257);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i259 := $mul.i32($i256, $i258);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i260 := $sdiv.i32($i259, $i151);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i261 := $sub.i32($i203, $i260);
    call {:si_unique_call 631} {:cexpr "nbigger"} boogie_si_record_i32($i261);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i262, $i263 := $i261, $i255;
    goto $bb98;

  $bb90:
    assume $i230 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i231 := $sdiv.i32($i155, $i186);
    call {:si_unique_call 625} {:cexpr "flen"} boogie_si_record_i32($i231);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i232 := $sgt.i32($i203, 0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    $i235, $i236 := $i203, $i231;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i237, $i238 := $i235, $i236;
    goto $bb95;

  $bb92:
    assume $i232 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i231, 1);
    call {:si_unique_call 627} {:cexpr "flen"} boogie_si_record_i32($i233);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i234 := $sub.i32($i203, 1);
    call {:si_unique_call 628} {:cexpr "nbigger"} boogie_si_record_i32($i234);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i235, $i236 := $i234, $i233;
    goto $bb94;

  $bb76:
    assume $i198 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p206, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i210 == 1);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p206, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i216 := $sub.i32($i151, $i215);
    call {:si_unique_call 620} {:cexpr "totspeed"} boogie_si_record_i32($i216);
    assume {:verifier.code 0} true;
    $i212, $i213 := $i216, $i149;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p206, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} ldv_spin_unlock_bh_167($p217);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p206, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p218, 0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i219 := $sub.i32($i152, 1);
    call {:si_unique_call 622} {:cexpr "totfree"} boogie_si_record_i32($i219);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i220 := $sub.i32($i204, 1);
    call {:si_unique_call 623} {:cexpr "nfree"} boogie_si_record_i32($i220);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i221 := $sub.i32($i147, 1);
    call {:si_unique_call 624} {:cexpr "navail"} boogie_si_record_i32($i221);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 0);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i223 := $i207;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i225 := $sgt.i32($i201, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i226 := $i207;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i139 := $i226;
    goto $bb57;

  $bb85:
    assume $i225 == 1;
    assume {:verifier.code 0} true;
    $i140, $p141, $i142, $i143, $i144, $i145, $p146, $i147, $i148, $i149, $i150, $i151, $i152 := $i225, $p205, $i201, $i201, $i207, $i200, $p199, $i221, $i220, $i213, $i202, $i212, $i219;
    goto $bb85_dummy;

  $bb81:
    assume $i222 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i224 := $i223;
    goto $bb83;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i210 == 1;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i211 := $sub.i32($i149, 1);
    call {:si_unique_call 619} {:cexpr "nzero"} boogie_si_record_i32($i211);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i212, $i213 := $i151, $i211;
    goto $bb80;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i181 == 1;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i185 := $sgt.i32($i186, 0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p187, $p188, $i189 := $p163, $p171, $i172;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p190, $p191, $i192 := $p187, $p188, $i189;
    goto $bb75;

  $bb72:
    assume $i185 == 1;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i168 := $i172;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i169 := $i168;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i373 := $i169;
    goto $bb139;

  $bb64:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $p162, $i173 := $p163, $i168;
    goto $bb64_dummy;

  $bb67:
    assume $i177 == 1;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i168 := $i172;
    goto $bb63;

  $bb61:
    assume $i167 == 1;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i168 := 0;
    goto $bb63;

  $bb43:
    assume $i119 == 1;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p122, $i123 := $p116, 0;
    goto $bb46;

  $bb46:
    call $p124, $p125, $i126, $p127, $i128, $i129, $p130, $i133, $i134, $i135, $p122, $i123, $i136, $p137 := ppp_mp_explode_loop_$bb46($p0, $p117, $p124, $p125, $i126, $p127, $i128, $i129, $p130, $i133, $i134, $i135, $p122, $i123, $i136, $p137);
    goto $bb46_last;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p122, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i126, $i128);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p130 := $p125;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i123, 1);
    call {:si_unique_call 616} {:cexpr "i"} boogie_si_record_i32($i133);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p117);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i133, $i134);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i136, $p137 := $i133, $p125;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i120, $p121 := $i136, $p137;
    goto $bb45;

  $bb52:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $p122, $i123 := $p125, $i133;
    goto $bb52_dummy;

  $bb48:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i131, $p132 := 0, $p130;
    goto $bb50;

  $bb37:
    assume $i108 == 1;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i109 := $M.17;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i109);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb39;

  $bb40:
    assume $i110 == 1;
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p103, $mul.ref(1, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i112 := $sub.i32($i105, 1);
    call {:si_unique_call 614} {:cexpr "len"} boogie_si_record_i32($i112);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p113, $i114 := $p111, $i112;
    goto $bb42;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i101 := 0;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb31;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p22, $i23, $i24, $i25, $i26, $i27, $i28 := $p11, 0, 0, 0, 0, 0, 0;
    goto $bb4;

  $bb4:
    call $p29, $p30, $i31, $i32, $p33, $i34, $p35, $p36, $p37, $i38, $p39, $p41, $i40, $p42, $i43, $i44, $i45, $p47, $i48, $i49, $p50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $p60, $i61, $i62, $i58, $i59, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $p71, $i72, $i73, $i74, $p75, $i76, $i77, $p78, $p79, $i80, $i81, $i82, $i83, $i84, $p86, $p87, $p88, $p89, $p90, $i91, $i92, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i93, $i94, $i95, $i96, $i97 := ppp_mp_explode_loop_$bb4($p0, $i15, $p29, $p30, $i31, $i32, $p33, $i34, $p35, $p36, $p37, $i38, $p39, $p41, $i40, $p42, $i43, $i44, $i45, $p47, $i48, $i49, $p50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $p60, $i61, $i62, $i58, $i59, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $p71, $i72, $i73, $i74, $p75, $i76, $i77, $p78, $p79, $i80, $i81, $i82, $i83, $i84, $p86, $p87, $p88, $p89, $p90, $i91, $i92, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i93, $i94, $i95, $i96, $i97);
    goto $bb4_last;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 0);
    assume {:verifier.code 0} true;
    $i40 := $i24;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $p79, $i80, $i81, $i82, $i83 := $p22, $i28, $i27, $i26, $i25;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i23, 1);
    call {:si_unique_call 612} {:cexpr "i"} boogie_si_record_i32($i84);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 680)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p88, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(576, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, $i15);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i93, $i94, $i95, $i96, $i97 := $i80, $i81, $i82, $i83, $i40;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19, $i20, $i21 := $i93, $i94, $i95, $i96, $i97;
    goto $bb3;

  $bb27:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $p22, $i23, $i24, $i25, $i26, $i27, $i28 := $p89, $i84, $i40, $i83, $i82, $i81, $i80;
    goto $bb27_dummy;

  $bb9:
    assume $i45 == 1;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i48 := skb_queue_empty($p47);
    call {:si_unique_call 607} {:cexpr "tmp"} boogie_si_record_i32($i48);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i49 == 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(665, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $p66, $i67, $i68, $i69, $i70 := $p22, $i28, $i27, $i26, $i25;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(665, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p79, $i80, $i81, $i82, $i83 := $p66, $i67, $i68, $i69, $i70;
    goto $bb26;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(604, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i23, $i76);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb22;

  $bb23:
    assume $i77 == 1;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(604, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i23);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i56 == 1);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i27, $i61);
    call {:si_unique_call 609} {:cexpr "totspeed"} boogie_si_record_i32($i62);
    assume {:verifier.code 0} true;
    $i58, $i59 := $i62, $i26;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 2);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i25, 1);
    call {:si_unique_call 610} {:cexpr "nfree"} boogie_si_record_i32($i64);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i28, 1);
    call {:si_unique_call 611} {:cexpr "totfree"} boogie_si_record_i32($i65);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p66, $i67, $i68, $i69, $i70 := $p22, $i65, $i58, $i59, $i64;
    goto $bb19;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i26, 1);
    call {:si_unique_call 608} {:cexpr "nzero"} boogie_si_record_i32($i57);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i27, $i57;
    goto $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb12;

  $bb6:
    assume $i32 == 1;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 1);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i24, 1);
    call {:si_unique_call 605} {:cexpr "navail"} boogie_si_record_i32($i34);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p22, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i40 := $i34;
    goto $bb8;

  $bb64_dummy:
    assume false;
    return;

  $bb136_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  $bb108_dummy:
    assume false;
    return;

  $bb135_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  $bb133_dummy:
    assume false;
    return;

  $bb59_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3585;

  $bb85_dummy:
    assume false;
    return;

  $bb58_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3583;

  $bb52_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;

  $bb27_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3444;
}



const put_unaligned_be16: ref;

axiom put_unaligned_be16 == $sub.ref(0, 338418);

procedure put_unaligned_be16($i0: i16, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_be16($i0: i16, $p1: ref)
{
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} {:cexpr "put_unaligned_be16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i4 := __fswab16($i3);
    call {:si_unique_call 651} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $i4);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 339450);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const ppp_register_compressor: ref;

axiom ppp_register_compressor == $sub.ref(0, 340482);

procedure ppp_register_compressor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.18, assertsPassed;



implementation ppp_register_compressor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} ldv_spin_lock_197(compressor_list_lock);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p3 := find_comp_entry($i2);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p7 := kmalloc(24, 32);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} list_add($p12, compressor_list);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} ldv_spin_unlock_198(compressor_list_lock);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 17);
    goto $bb3;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_197: ref;

axiom ldv_spin_lock_197 == $sub.ref(0, 341514);

procedure ldv_spin_lock_197($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_spin_lock_197($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} ldv_linux_kernel_locking_spinlock_spin_lock_compressor_list_lock();
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} spin_lock($p0);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const find_comp_entry: ref;

axiom find_comp_entry == $sub.ref(0, 342546);

procedure find_comp_entry($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation find_comp_entry($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p6: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} {:cexpr "find_comp_entry:arg:proto"} boogie_si_record_i32($i0);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, compressor_list);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $p2i.ref.i64(compressor_list));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $i10, $i11, $p12, $p15, $p16, $p17, $p18, $i19, $i20, $p6 := find_comp_entry_loop_$bb4($i0, $p7, $p8, $p9, $i10, $i11, $p12, $p15, $p16, $p17, $p18, $i19, $i20, $p6);
    goto $bb4_last;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(compressor_list));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p16;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3928;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 343578);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 661} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} ldv_check_alloc_flags($i1);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} ldv_after_alloc($p2);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_198: ref;

axiom ldv_spin_unlock_198 == $sub.ref(0, 344610);

procedure ldv_spin_unlock_198($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_spin_unlock_198($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} ldv_linux_kernel_locking_spinlock_spin_unlock_compressor_list_lock();
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} spin_unlock($p0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_compressor_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_compressor_list_lock == $sub.ref(0, 345642);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_compressor_list_lock();
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_compressor_list_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i0 := $M.18;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i3 := $M.18;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} ldv_assume($i5);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 669} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_compressor_list_lock"} boogie_si_record_i32(1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 346674);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} _raw_spin_unlock($p2);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 347706);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_compressor_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_compressor_list_lock == $sub.ref(0, 348738);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_compressor_list_lock();
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_compressor_list_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i0 := $M.18;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i3 := $M.18;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} ldv_assume($i5);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.18 := 2;
    call {:si_unique_call 673} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_compressor_list_lock"} boogie_si_record_i32(2);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 349770);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} _raw_spin_lock($p2);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 350802);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    return;
}



const ppp_unregister_compressor: ref;

axiom ppp_unregister_compressor == $sub.ref(0, 351834);

procedure ppp_unregister_compressor($p0: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed;



implementation ppp_unregister_compressor($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} ldv_spin_lock_197(compressor_list_lock);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p3 := find_comp_entry($i2);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ldv_spin_unlock_198(compressor_list_lock);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} list_del($p11);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} kfree($p12);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const ppp_init_net: ref;

axiom ppp_init_net == $sub.ref(0, 352866);

procedure ppp_init_net($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.19, assertsPassed;



implementation ppp_init_net($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p4 := net_generic($p0, $i3);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} ldv_idr_init_156($p6);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} __mutex_init($p7, .str.38, $p1);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(272, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} INIT_LIST_HEAD($p8);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(288, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} INIT_LIST_HEAD($p9);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(312, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_26 := spinlock_check($p10);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} __raw_spin_lock_init($p14, .str.39, $p2);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const ppp_exit_net: ref;

axiom ppp_exit_net == $sub.ref(0, 353898);

procedure ppp_exit_net($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.19, assertsPassed;



implementation ppp_exit_net($p0: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p2 := net_generic($p0, $i1);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} ldv_idr_destroy_157($p4);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;
}



const ldv_idr_destroy_157: ref;

axiom ldv_idr_destroy_157 == $sub.ref(0, 354930);

procedure ldv_idr_destroy_157($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_idr_destroy_157($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} ldv_linux_lib_idr_idr_destroy_units_idr_of_ppp_net();
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_destroy_units_idr_of_ppp_net: ref;

axiom ldv_linux_lib_idr_idr_destroy_units_idr_of_ppp_net == $sub.ref(0, 355962);

procedure ldv_linux_lib_idr_idr_destroy_units_idr_of_ppp_net();
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_linux_lib_idr_idr_destroy_units_idr_of_ppp_net()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i0 := $M.19;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i3 := $M.19;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $M.19 := 3;
    call {:si_unique_call 694} {:cexpr "ldv_linux_lib_idr_idr_units_idr_of_ppp_net"} boogie_si_record_i32(3);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_lib_idr__not_initialized: ref;

axiom ldv_assert_linux_lib_idr__not_initialized == $sub.ref(0, 356994);

procedure ldv_assert_linux_lib_idr__not_initialized($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__not_initialized($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} {:cexpr "ldv_assert_linux_lib_idr__not_initialized:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 696} __VERIFIER_error();
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__destroyed_before_usage: ref;

axiom ldv_assert_linux_lib_idr__destroyed_before_usage == $sub.ref(0, 358026);

procedure ldv_assert_linux_lib_idr__destroyed_before_usage($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__destroyed_before_usage($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} {:cexpr "ldv_assert_linux_lib_idr__destroyed_before_usage:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 698} __VERIFIER_error();
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_idr_init_156: ref;

axiom ldv_idr_init_156 == $sub.ref(0, 359058);

procedure ldv_idr_init_156($p0: ref);
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_idr_init_156($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} ldv_linux_lib_idr_idr_init_units_idr_of_ppp_net();
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 360090);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 361122);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_idr_idr_init_units_idr_of_ppp_net: ref;

axiom ldv_linux_lib_idr_idr_init_units_idr_of_ppp_net == $sub.ref(0, 362154);

procedure ldv_linux_lib_idr_idr_init_units_idr_of_ppp_net();
  free requires assertsPassed;
  modifies $M.19, assertsPassed;



implementation ldv_linux_lib_idr_idr_init_units_idr_of_ppp_net()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i0 := $M.19;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} ldv_assert_linux_lib_idr__double_init($i2);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.19 := 1;
    call {:si_unique_call 701} {:cexpr "ldv_linux_lib_idr_idr_units_idr_of_ppp_net"} boogie_si_record_i32(1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_lib_idr__double_init: ref;

axiom ldv_assert_linux_lib_idr__double_init == $sub.ref(0, 363186);

procedure ldv_assert_linux_lib_idr__double_init($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__double_init($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} {:cexpr "ldv_assert_linux_lib_idr__double_init:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 703} __VERIFIER_error();
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 364218);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 704} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 705} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 1} true;
    call {:si_unique_call 706} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 707} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ppp_read: ref;

axiom ppp_read == $sub.ref(0, 365250);

procedure ppp_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.11, $CurrAddr, assertsPassed;



implementation ppp_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i64;
  var $p49: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p50: ref;
  var $i51: i64;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $p83: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i64;
  var $i104: i64;
  var $i99: i64;
  var $i23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 713} {:cexpr "ppp_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p12 := get_current();
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p13, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p15, $p12);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p16, default_wake_function);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p18, $0.ref);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p20, $0.ref);
    call {:si_unique_call 715} {:cexpr "ppp_read:arg:ret"} boogie_si_record_i64($i2);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p11);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(200, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} add_wait_queue($p24, $p4);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i25 := $i2;
    goto $bb5;

  $bb5:
    call $i25, $p26, $p27, $p40, $i41, $p42, $i43, $p44, $p45, $i46, $i47, $i48, $p49, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $p72, $p73, $i74, $i75, $p76 := ppp_read_loop_$bb5($p0, $p7, $p11, $i25, $p26, $p27, $p40, $i41, $p42, $i43, $p44, $p45, $i46, $i47, $i48, $p49, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $i71, $p72, $p73, $i74, $i75, $p76);
    goto $bb5_last;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p26 := get_current();
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p7, 1);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p40 := get_current();
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.25, $p7);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 719} $i43 := devirtbounce.11(0, $p42, $i41, $p42);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p7, $i43);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(104, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $p45 := skb_dequeue($p44);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i48, $p49 := $i25, $p45;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(300, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p55 := $p45;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 2048);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p72 := $p45;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p73 := get_current();
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $i74 := signal_pending($p73);
    call {:si_unique_call 731} {:cexpr "tmp___6"} boogie_si_record_i32($i74);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p76 := $p45;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} schedule();
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 512);
    goto corral_source_split_4196_dummy;

  $bb32:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p50, $i51 := $p76, $sub.i64(0, 512);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p77 := get_current();
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p78, 1);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p8, 0);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $p92 := get_current();
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.26, $p8);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p92, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 734} $i95 := devirtbounce.11(0, $p94, $i93, $p94);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p8, $i95);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p83 := $p50;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(200, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} remove_wait_queue($p96, $p4);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p83);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i101);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i103 := $ugt.i64($i102, $i2);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p105, $p1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $M.28 := $store.i64($M.28, $p106, $i2);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} iov_iter_init($p6, 0, $p5, 1, $i2);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i109 := skb_copy_datagram_iter($p83, 0, $p6, $i108);
    call {:si_unique_call 746} {:cexpr "tmp___12"} boogie_si_record_i32($i109);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p83, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i113 := $zext.i32.i64($i112);
    call {:si_unique_call 747} {:cexpr "ret"} boogie_si_record_i64($i113);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i104 := $i113;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} kfree_skb($p83);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i99 := $i104;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i23 := $i99;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb50:
    assume $i110 == 1;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i104 := $sub.i64(0, 14);
    goto $bb48;

  $bb46:
    assume $i103 == 1;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i104 := $sub.i64(0, 75);
    goto $bb48;

  $bb42:
    assume $i98 == 1;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i99 := $i51;
    goto $bb44;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p50, $i51 := $p72, $sub.i64(0, 11);
    goto $bb15;

  $bb20:
    assume $i58 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p11);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p59, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 512);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p67 := $p45;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb24;

  $bb25:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p50, $i51 := $p67, 0;
    goto $bb15;

  $bb17:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p50, $i51 := $p55, 0;
    goto $bb15;

  $bb13:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p50, $i51 := $p49, $i48;
    goto $bb15;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64(0, 6);
    goto $bb3;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  corral_source_split_4196_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4121;
}



const ppp_write: ref;

axiom ppp_write == $sub.ref(0, 366282);

procedure ppp_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.8, $M.16, $M.10, assertsPassed, $CurrAddr, $M.2, $M.18, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i17: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} {:cexpr "ppp_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(292, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i12);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p14 := alloc_skb($i13, 208);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(292, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} skb_reserve($p14, $i19);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p21 := skb_put($p14, $i20);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i22 := copy_from_user($p21, $p1, $i2);
    call {:si_unique_call 753} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} skb_queue_tail($p24, $p14);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call {:si_unique_call 758} {:cexpr "ppp_write:arg:ret"} boogie_si_record_i64($i2);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i17 := $i2;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p6);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} ppp_channel_push($p32);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p6);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} ppp_xmit_process($p31);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} kfree_skb($p14);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 14);
    goto $bb7;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64(0, 12);
    goto $bb7;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 6);
    goto $bb3;
}



const ppp_poll: ref;

axiom ppp_poll == $sub.ref(0, 367314);

procedure ppp_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ppp_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(200, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} poll_wait($p0, $p8, $p1);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(104, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p10 := skb_peek($p9);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i14 := 260;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(300, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i14;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i33;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i32 := $i14;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb19;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 512);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i14, 65);
    call {:si_unique_call 763} {:cexpr "mask"} boogie_si_record_i32($i31);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb18;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i14, 16);
    call {:si_unique_call 762} {:cexpr "mask"} boogie_si_record_i32($i18);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i13 := $or.i32(260, 65);
    call {:si_unique_call 761} {:cexpr "mask"} boogie_si_record_i32($i13);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const ppp_ioctl: ref;

axiom ppp_ioctl == $sub.ref(0, 368346);

procedure ppp_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.30, $M.32, $M.11, $M.35, $M.6, $M.31, $M.8, $M.9, $CurrAddr, $M.36, $M.33, $M.2, $M.7, assertsPassed, $M.18, $M.10, $M.3, $M.19, $M.34, $M.16;



implementation ppp_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p41: ref;
  var $i42: i64;
  var $i40: i32;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i58: i32;
  var $i79: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i64;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $i178: i64;
  var $p179: ref;
  var $i180: i64;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $i192: i64;
  var $i193: i32;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $i214: i1;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i64;
  var $i222: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $i226: i1;
  var $i227: i1;
  var $i228: i64;
  var $p230: ref;
  var $i231: i32;
  var $p232: ref;
  var $p233: ref;
  var $i234: i64;
  var $i235: i1;
  var $p236: ref;
  var $i237: i32;
  var $i238: i64;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i1;
  var $i245: i16;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i1;
  var $i253: i32;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i32;
  var $i271: i32;
  var $i272: i1;
  var $i273: i16;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i64;
  var $i280: i1;
  var $i281: i32;
  var $i282: i32;
  var $i283: i1;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $i288: i64;
  var $i289: i1;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i32;
  var $p299: ref;
  var $p300: ref;
  var $i301: i64;
  var $i302: i64;
  var $i303: i32;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i106: i32;
  var $i309: i64;
  var $i25: i64;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p10 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 772} {:cexpr "ppp_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 773} {:cexpr "ppp_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i2);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p13);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 1074033724);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p13, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_mutex_lock_130(ppp_mutex);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p13);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i1, 1074033746);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i1, 1074033753);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i1, $sub.i32(0, 2147191718));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i1, 1074820173);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i1, $sub.i32(0, 2147191722));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i1, 1074033728);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i1, $sub.i32(0, 2147191743));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i1, $sub.i32(0, 2146405313));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i1, 1074033745);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i1, $sub.i32(0, 1073187764));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i1, 1074295883);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i1, 1074820167);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i1, 1074820166);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i1, 1074033723);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 25);
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} ldv_mutex_unlock_149(ppp_mutex);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i309 := $sext.i32.i64($i106);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i25 := $i309;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i98 == 1;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} might_fault();
    call {:si_unique_call 835} $p299 := devirtbounce.12(0, $p15, 4);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p300 := $extractvalue($p299, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i301 := $extractvalue($p299, 1);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p300);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i303 := $trunc.i64.i32($i302);
    call {:si_unique_call 836} {:cexpr "__ret_gu___4"} boogie_si_record_i32($i303);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i304 := $trunc.i64.i32($i301);
    call {:si_unique_call 837} {:cexpr "val"} boogie_si_record_i32($i304);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i303, 0);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_spin_lock_bh_132($p306);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(612, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p307, $i304);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_spin_unlock_bh_133($p308);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb200:
    assume $i305 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb91:
    assume $i97 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i271 := get_filter($p14, $p8);
    call {:si_unique_call 833} {:cexpr "err"} boogie_si_record_i32($i271);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i272 := $sge.i32($i271, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i298 := $i271;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i106 := $i298;
    goto $bb102;

  $bb188:
    assume $i272 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p9, $0.ref);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i273 := $trunc.i32.i16($i271);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p274, $i273);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.31, $p8);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p276, $p275);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.32, $p277);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i279 := $p2i.ref.i64($p278);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    $i282 := 0;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i282, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.31, $p8);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p296);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} kfree($p297);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i298 := $i282;
    goto $bb199;

  $bb193:
    assume $i283 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_spin_lock_bh_131($p284);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_spin_lock_bh_132($p285);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.0, $p286);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i288 := $p2i.ref.i64($p287);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i289 := $ne.i64($i288, 0);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.29, $p9);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p293, $p292);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_spin_unlock_bh_133($p294);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_spin_unlock_bh_134($p295);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    goto $bb198;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb195:
    assume $i289 == 1;
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} bpf_prog_destroy($p291);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb197;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb190:
    assume $i280 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i281 := bpf_prog_create($p9, $p10);
    call {:si_unique_call 886} {:cexpr "err"} boogie_si_record_i32($i281);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i282 := $i281;
    goto $bb192;

  $bb87:
    assume $i96 == 1;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i243 := get_filter($p14, $p5);
    call {:si_unique_call 831} {:cexpr "err"} boogie_si_record_i32($i243);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i244 := $sge.i32($i243, 0);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    $i270 := $i243;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i106 := $i270;
    goto $bb102;

  $bb176:
    assume $i244 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p6, $0.ref);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i32.i16($i243);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.30 := $store.i16($M.30, $p246, $i245);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.31, $p5);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p248, $p247);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.32, $p249);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p250);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i252 := $ne.i64($i251, 0);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    $i254 := 0;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i255} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.31, $p5);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} kfree($p269);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i270 := $i254;
    goto $bb187;

  $bb181:
    assume $i255 == 1;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_spin_lock_bh_131($p256);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_spin_lock_bh_132($p257);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i261 := $ne.i64($i260, 0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p264 := $load.ref($M.29, $p6);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p265, $p264);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_spin_unlock_bh_133($p266);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_spin_unlock_bh_134($p267);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb186;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb183:
    assume $i261 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.0, $p262);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} bpf_prog_destroy($p263);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    goto $bb185;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb178:
    assume $i252 == 1;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $i253 := bpf_prog_create($p6, $p7);
    call {:si_unique_call 878} {:cexpr "err"} boogie_si_record_i32($i253);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i254 := $i253;
    goto $bb180;

  $bb83:
    assume $i95 == 1;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p4);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i221 := copy_from_user($p220, $p14, 8);
    call {:si_unique_call 829} {:cexpr "tmp___4"} boogie_si_record_i64($i221);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i222 := $ne.i64($i221, 0);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i225 := proto_to_npindex($i224);
    call {:si_unique_call 873} {:cexpr "err"} boogie_si_record_i32($i225);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i226 := $slt.i32($i225, 0);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i1, $sub.i32(0, 1073187764));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i227 == 1);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i238 := $sext.i32.i64($i225);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref($i238, 4));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, $i237);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} netif_wake_queue($p242);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  $bb170:
    assume $i227 == 1;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i228 := $sext.i32.i64($i225);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref($i228, 4));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, $i231);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p233 := $bitcast.ref.ref($p4);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i234 := copy_to_user($p14, $p233, 8);
    call {:si_unique_call 875} {:cexpr "tmp___5"} boogie_si_record_i64($i234);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i235 := $ne.i64($i234, 0);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb172:
    assume $i235 == 1;
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb167:
    assume $i226 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i106 := $i225;
    goto $bb102;

  $bb164:
    assume $i222 == 1;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb79:
    assume $i94 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb75:
    assume $i93 == 1;
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} might_fault();
    call {:si_unique_call 825} $p189 := devirtbounce.12(0, $p15, 4);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p190 := $extractvalue($p189, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i191 := $extractvalue($p189, 1);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p190);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i64.i32($i192);
    call {:si_unique_call 826} {:cexpr "__ret_gu___3"} boogie_si_record_i32($i193);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i64.i32($i191);
    call {:si_unique_call 827} {:cexpr "val"} boogie_si_record_i32($i194);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i193, 0);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i196 := $ashr.i32($i194, 16);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    $i200, $i201 := $i194, 15;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i201, 1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i203 := $add.i32($i200, 1);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p204 := slhc_init($i202, $i203);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i206 := $eq.i64($i205, 0);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_spin_lock_bh_131($p209);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_spin_lock_bh_132($p210);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i214 := $ne.i64($i213, 0);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p217, $p204);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_spin_unlock_bh_133($p218);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_spin_unlock_bh_134($p219);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb161:
    assume $i214 == 1;
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} slhc_free($p216);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    goto $bb163;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb158:
    assume $i206 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} netdev_err.ref.ref($p208, .str.42);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 12);
    goto $bb102;

  $bb155:
    assume $i197 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i198 := $ashr.i32($i194, 16);
    call {:si_unique_call 863} {:cexpr "val2"} boogie_si_record_i32($i198);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i199 := $and.i32($i194, 65535);
    call {:si_unique_call 864} {:cexpr "val"} boogie_si_record_i32($i199);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i200, $i201 := $i199, $i198;
    goto $bb157;

  $bb152:
    assume $i195 == 1;
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb71:
    assume $i92 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i174 := $load.i64($M.0, jiffies);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(576, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i176 := $load.i64($M.0, $p175);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i177 := $sub.i64($i174, $i176);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i178 := $udiv.i64($i177, 250);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p179, $i178);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i180 := $load.i64($M.0, jiffies);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(584, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.0, $p181);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i183 := $sub.i64($i180, $i182);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i184 := $udiv.i64($i183, 250);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p185, $i184);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p3);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i187 := copy_to_user($p14, $p186, 16);
    call {:si_unique_call 823} {:cexpr "tmp___3"} boogie_si_record_i64($i187);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  $bb149:
    assume $i188 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb67:
    assume $i91 == 1;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} might_fault();
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    call {:si_unique_call 821} {:cexpr "__pu_val___1"} boogie_si_record_i32($i167);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    call {:si_unique_call 857} $i170 := devirtbounce.14(0, $i167, $p15);
    call {:si_unique_call 858} {:cexpr "__ret_pu___1"} boogie_si_record_i32($i170);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i170, 0);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  $bb146:
    assume $i173 == 1;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb63:
    assume $i90 == 1;
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} might_fault();
    call {:si_unique_call 817} $p158 := devirtbounce.12(0, $p15, 4);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p159 := $extractvalue($p158, 0);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i160 := $extractvalue($p158, 1);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p159);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i64.i32($i161);
    call {:si_unique_call 818} {:cexpr "__ret_gu___2"} boogie_si_record_i32($i162);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i64.i32($i160);
    call {:si_unique_call 819} {:cexpr "val"} boogie_si_record_i32($i163);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i162, 0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, $i163);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  $bb136:
    assume $i164 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb59:
    assume $i89 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} might_fault();
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    call {:si_unique_call 815} {:cexpr "__pu_val___0"} boogie_si_record_i32($i151);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    call {:si_unique_call 851} $i154 := devirtbounce.14(0, $i151, $p15);
    call {:si_unique_call 852} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i154);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i154, 0);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  $bb133:
    assume $i157 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb55:
    assume $i88 == 1;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i148 := ppp_set_compress($p84, $i2);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    call {:si_unique_call 813} {:cexpr "err"} boogie_si_record_i32($i148);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i106 := $i148;
    goto $bb102;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i87 == 1;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i138 := $or.i32($i135, $i137);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i141 := $or.i32($i138, $i140);
    call {:si_unique_call 810} {:cexpr "val"} boogie_si_record_i32($i141);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} might_fault();
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    call {:si_unique_call 845} $i144 := devirtbounce.14(0, $i141, $p15);
    call {:si_unique_call 846} {:cexpr "__ret_pu"} boogie_si_record_i32($i144);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i144, 0);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  $bb123:
    assume $i147 == 1;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb47:
    assume $i86 == 1;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} might_fault();
    call {:si_unique_call 807} $p108 := devirtbounce.12(0, $p15, 4);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p109 := $extractvalue($p108, 0);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i110 := $extractvalue($p108, 1);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p109);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i64.i32($i111);
    call {:si_unique_call 808} {:cexpr "__ret_gu___1"} boogie_si_record_i32($i112);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i64.i32($i110);
    call {:si_unique_call 809} {:cexpr "val"} boogie_si_record_i32($i113);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i114 := $ne.i32($i112, 0);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} ldv_spin_lock_bh_131($p115);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} ldv_spin_lock_bh_132($p116);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i119 := $xor.i32($i113, $sub.i32(0, 1));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i118, $i119);
    call {:si_unique_call 841} {:cexpr "cflags"} boogie_si_record_i32($i120);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 1024);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i113, 4214508);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i128);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} ldv_spin_unlock_bh_133($p130);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ldv_spin_unlock_bh_134($p131);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i120, 64);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  $bb113:
    assume $i133 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ppp_ccp_closed($p84);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i124 == 1;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i125 := $and.i32($i113, 1024);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb109;

  $bb110:
    assume $i126 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(616, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p127, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i114 == 1;
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  $bb43:
    assume $i85 == 1;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} might_fault();
    call {:si_unique_call 803} $p99 := devirtbounce.12(0, $p15, 4);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p100 := $extractvalue($p99, 0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i101 := $extractvalue($p99, 1);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p100);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i102);
    call {:si_unique_call 804} {:cexpr "__ret_gu___0"} boogie_si_record_i32($i103);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i64.i32($i101);
    call {:si_unique_call 805} {:cexpr "val"} boogie_si_record_i32($i104);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i103, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p84, $mul.ref(0, 776)), $mul.ref(480, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i104);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i106 := 0;
    goto $bb102;

  $bb100:
    assume $i105 == 1;
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 14);
    goto $bb102;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i82 == 1;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} vslice_dummy_var_29 := printk.ref(.str.41);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64(0, 22);
    goto $bb3;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_mutex_lock_128(ppp_mutex);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p13);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i1, 1074033722);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i1, 29753);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p48, $mul.ref(0, 680)), $mul.ref(328, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} down_read($p61);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p48, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32(0, 25);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p48, $mul.ref(0, 680)), $mul.ref(328, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} up_read($p78);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i58 := $i77;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} ldv_mutex_unlock_129(ppp_mutex);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i58);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i25 := $i79;
    goto $bb3;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i65 == 1;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p63, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb34;

  $bb35:
    assume $i71 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p63, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    call {:si_unique_call 797} $i76 := devirtbounce.13($p75, $p63, $i1, $i2);
    call {:si_unique_call 798} {:cexpr "err"} boogie_si_record_i32($i76);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb37;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i60 := ppp_disconnect_channel($p48);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    call {:si_unique_call 792} {:cexpr "err"} boogie_si_record_i32($i60);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i58 := $i60;
    goto $bb30;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} might_fault();
    call {:si_unique_call 788} $p51 := devirtbounce.12(0, $p15, 4);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p52 := $extractvalue($p51, 0);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i53 := $extractvalue($p51, 1);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p52);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    call {:si_unique_call 789} {:cexpr "__ret_gu"} boogie_si_record_i32($i55);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i53);
    call {:si_unique_call 790} {:cexpr "unit"} boogie_si_record_i32($i56);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i55, 0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i59 := ppp_connect_channel($p48, $i56);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    call {:si_unique_call 796} {:cexpr "err"} boogie_si_record_i32($i59);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i58 := $i59;
    goto $bb30;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i57 == 1;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 14);
    goto $bb30;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} ldv_mutex_lock_126(ppp_mutex);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(120, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i37 := atomic_long_read($p36);
    call {:si_unique_call 780} {:cexpr "tmp___2"} boogie_si_record_i64($i37);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i38 := $sle.i64($i37, 1);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(120, 1));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i42 := atomic_long_read($p41);
    call {:si_unique_call 783} {:cexpr "tmp___1"} boogie_si_record_i64($i42);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_28 := printk.ref.i64(.str.40, $i42);
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} ldv_mutex_unlock_127(ppp_mutex);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i40);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i25 := $i44;
    goto $bb3;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_27 := ppp_release($0.ref, $p0);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb15;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p13);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref(0, 776)), $mul.ref(304, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i31, $i34);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ppp_shutdown_interface($p30);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p18 := get_current();
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 10680)), $mul.ref(2792, 1));
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i23 := ppp_unattached_ioctl($p22, $p13, $p0, $i1, $i2);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 776} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb3;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;
}



const ppp_open: ref;

axiom ppp_open == $sub.ref(0, 369378);

procedure ppp_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ppp_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i2 := capable(12);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 896} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const ppp_release: ref;

axiom ppp_release == $sub.ref(0, 370410);

procedure ppp_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.33, assertsPassed, $M.2, $M.11, $M.18, $M.7, $M.3, $M.34, $M.10, $M.6, $M.19, $M.16, $CurrAddr;



implementation ppp_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(288, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i18 := atomic_dec_and_test($p17);
    call {:si_unique_call 899} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p4);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ppp_destroy_channel($p27);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ppp_destroy_interface($p26);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(304, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i12, $i15);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ppp_shutdown_interface($p11);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_604:
    assume !assertsPassed;
    return;
}



const ppp_shutdown_interface: ref;

axiom ppp_shutdown_interface == $sub.ref(0, 371442);

procedure ppp_shutdown_interface($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.33, assertsPassed, $M.3, $M.34, $M.11, $CurrAddr, $M.2, $M.18, $M.19;



implementation ppp_shutdown_interface($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(736, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p3 := ppp_pernet($p2);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_mutex_lock_210($p4);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_spin_lock_bh_131($p5);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} ldv_spin_lock_bh_132($p6);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(600, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ldv_spin_unlock_bh_133($p19);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ldv_spin_unlock_bh_134($p20);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(300, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 1);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(304, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} __wake_up($p25, 1, 1, $0.ref);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ldv_mutex_unlock_218($p26);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(600, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} ldv_spin_unlock_bh_133($p11);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} ldv_spin_unlock_bh_134($p12);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_unregister_netdev_215($p14);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} unit_put($p15, $i18);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_210: ref;

axiom ldv_mutex_lock_210 == $sub.ref(0, 372474);

procedure ldv_mutex_lock_210($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_lock_210($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_linux_kernel_locking_mutex_mutex_lock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;
}



const ldv_unregister_netdev_215: ref;

axiom ldv_unregister_netdev_215 == $sub.ref(0, 373506);

procedure ldv_unregister_netdev_215($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.2, $M.18, $M.3, $M.19, assertsPassed;



implementation ldv_unregister_netdev_215($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} unregister_netdev($p0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ldv_unregister_netdev($0.ref, $p0);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const unit_put: ref;

axiom unit_put == $sub.ref(0, 374538);

procedure unit_put($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation unit_put($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} {:cexpr "unit_put:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} ldv_idr_remove_234($p0, $i1);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_218: ref;

axiom ldv_mutex_unlock_218 == $sub.ref(0, 375570);

procedure ldv_mutex_unlock_218($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_unlock_218($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net == $sub.ref(0, 376602);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i1 := $M.33;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 921} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_all_ppp_mutex_of_ppp_net"} boogie_si_record_i8(0);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 377634);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} __VERIFIER_error();
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_idr_remove_234: ref;

axiom ldv_idr_remove_234 == $sub.ref(0, 378666);

procedure ldv_idr_remove_234($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ldv_idr_remove_234($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} {:cexpr "ldv_idr_remove_234:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} ldv_linux_lib_idr_idr_remove_p();
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_remove_p: ref;

axiom ldv_linux_lib_idr_idr_remove_p == $sub.ref(0, 379698);

procedure ldv_linux_lib_idr_idr_remove_p();
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ldv_linux_lib_idr_idr_remove_p()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i0 := $M.34;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i3 := $M.34;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 928} {:cexpr "ldv_linux_lib_idr_idr_p"} boogie_si_record_i32(2);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  SeqInstr_664:
    assume !assertsPassed;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 380730);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_netdev: ref;

axiom ldv_unregister_netdev == $sub.ref(0, 381762);

procedure ldv_unregister_netdev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.2, $M.18, $M.3, $M.19, assertsPassed;



implementation ldv_unregister_netdev($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(520, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 504)), $mul.ref(24, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_dispatch_deregister_7_1($p1);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(520, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 504)), $mul.ref(24, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} ldv_unregister_netdev_stop_7_2($p11, $p1);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_670:
    assume !assertsPassed;
    return;
}



const ldv_unregister_netdev_stop_7_2: ref;

axiom ldv_unregister_netdev_stop_7_2 == $sub.ref(0, 382794);

procedure ldv_unregister_netdev_stop_7_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.2, $M.18, $M.3, $M.19, assertsPassed;



implementation ldv_unregister_netdev_stop_7_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} vslice_dummy_var_30 := devirtbounce.15($p0, $p1);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_deregister_7_1: ref;

axiom ldv_dispatch_deregister_7_1 == $sub.ref(0, 383826);

procedure ldv_dispatch_deregister_7_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_7_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_all_ppp_mutex_of_ppp_net: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_all_ppp_mutex_of_ppp_net == $sub.ref(0, 384858);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_all_ppp_mutex_of_ppp_net($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_all_ppp_mutex_of_ppp_net($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i1 := $M.33;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 933} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_all_ppp_mutex_of_ppp_net"} boogie_si_record_i8(1);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 385890);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} __VERIFIER_error();
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 386922);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 936} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 937} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 938} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ppp_unattached_ioctl: ref;

axiom ppp_unattached_ioctl == $sub.ref(0, 387954);

procedure ppp_unattached_ioctl($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.0, $M.36, $M.33, $M.2, $CurrAddr, assertsPassed, $M.34, $M.3, $M.11, $M.18, $M.19, $M.8, $M.16, $M.9, $M.10, $M.6, $M.7;



implementation ppp_unattached_ioctl($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i64;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 940} {:cexpr "ppp_unattached_ioctl:arg:cmd"} boogie_si_record_i32($i3);
    call {:si_unique_call 941} {:cexpr "ppp_unattached_ioctl:arg:arg"} boogie_si_record_i64($i4);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p5, $sub.i32(0, 14));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i4);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ldv_mutex_lock_150(ppp_mutex);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, $sub.i32(0, 1073449922));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 1074033725);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 1074033720);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p5, $sub.i32(0, 25));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} ldv_mutex_unlock_155(ppp_mutex);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.35, $p5);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} might_fault();
    call {:si_unique_call 952} $p51 := devirtbounce.12(0, $p6, 4);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p52 := $extractvalue($p51, 0);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i53 := $extractvalue($p51, 1);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p52);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    call {:si_unique_call 953} {:cexpr "__ret_gu___1"} boogie_si_record_i32($i55);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i53);
    call {:si_unique_call 954} {:cexpr "unit"} boogie_si_record_i32($i56);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i55, 0);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p5, $sub.i32(0, 6));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p58 := ppp_pernet($p0);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 384)), $mul.ref(312, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} ldv_spin_lock_bh_153($p59);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p60 := ppp_find_channel($p58, $i56);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p58, $mul.ref(0, 384)), $mul.ref(312, 1));
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} ldv_spin_unlock_bh_154($p68);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i62 == 1;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} atomic_inc($p64);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p60, $mul.ref(0, 680)), $mul.ref(0, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p60);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p5, 0);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i57 == 1;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} might_fault();
    call {:si_unique_call 948} $p33 := devirtbounce.12(0, $p6, 4);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p34 := $extractvalue($p33, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i35 := $extractvalue($p33, 1);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p34);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    call {:si_unique_call 949} {:cexpr "__ret_gu___0"} boogie_si_record_i32($i37);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i35);
    call {:si_unique_call 950} {:cexpr "unit"} boogie_si_record_i32($i38);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i37, 0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p5, $sub.i32(0, 6));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p40 := ppp_pernet($p0);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_mutex_lock_151($p41);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p42 := ppp_find_unit($p40, $i38);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p40, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} ldv_mutex_unlock_152($p50);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i44 == 1;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} atomic_inc($p46);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p42, $mul.ref(0, 776)), $mul.ref(0, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p42);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p5, 0);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i39 == 1;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} might_fault();
    call {:si_unique_call 944} $p10 := devirtbounce.12(0, $p6, 4);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p11 := $extractvalue($p10, 0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i12 := $extractvalue($p10, 1);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p11);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 945} {:cexpr "__ret_gu"} boogie_si_record_i32($i14);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i12);
    call {:si_unique_call 946} {:cexpr "unit"} boogie_si_record_i32($i15);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i14, 0);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p17 := ppp_create_interface($p0, $i15, $p5);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 776)), $mul.ref(0, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p17);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p17, $mul.ref(0, 776)), $mul.ref(304, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p2);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p5, $sub.i32(0, 14));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} might_fault();
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 958} {:cexpr "__pu_val"} boogie_si_record_i32($i26);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call {:si_unique_call 959} $i29 := devirtbounce.14(0, $i26, $p6);
    call {:si_unique_call 960} {:cexpr "__ret_pu"} boogie_si_record_i32($i29);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i29, 0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p5, 0);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb28:
    assume $i32 == 1;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb18:
    assume $i19 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_682:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_126: ref;

axiom ldv_mutex_lock_126 == $sub.ref(0, 388986);

procedure ldv_mutex_lock_126($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_lock_126($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} ldv_linux_kernel_locking_mutex_mutex_lock_ppp_mutex($p0);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;
}



const atomic_long_read: ref;

axiom atomic_long_read == $sub.ref(0, 390018);

procedure atomic_long_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic_long_read($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i1 := atomic64_read($p0);
    call {:si_unique_call 977} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_127: ref;

axiom ldv_mutex_unlock_127 == $sub.ref(0, 391050);

procedure ldv_mutex_unlock_127($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_unlock_127($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} ldv_linux_kernel_locking_mutex_mutex_unlock_ppp_mutex($p0);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_128: ref;

axiom ldv_mutex_lock_128 == $sub.ref(0, 392082);

procedure ldv_mutex_lock_128($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_lock_128($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} ldv_linux_kernel_locking_mutex_mutex_lock_ppp_mutex($p0);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 393114);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    return;
}



const ppp_connect_channel: ref;

axiom ppp_connect_channel == $sub.ref(0, 394146);

procedure ppp_connect_channel($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.0, $M.33, $M.8, $M.9, assertsPassed, $M.3, $M.34;



implementation ppp_connect_channel($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $i39: i16;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i14: i32;
  var $i9: i32;
  var $p54: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} {:cexpr "ppp_connect_channel:arg:unit"} boogie_si_record_i32($i1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(568, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p4 := ppp_pernet($p3);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_mutex_lock_220($p5);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p6 := ppp_find_unit($p4, $i1);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} ldv_linux_kernel_locking_rwlock_write_lock();
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} ldv_spin_lock_bh_131($p15);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} ldv_spin_lock_bh_132($p16);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(292, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(292, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i19, $i22);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(292, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 2);
    call {:si_unique_call 989} {:cexpr "hdrlen"} boogie_si_record_i32($i32);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i32, $i37);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(576, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} list_add_tail($p43, $p44);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 1);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(560, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p6);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} atomic_inc($p51);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} ldv_spin_unlock_bh_133($p52);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} ldv_spin_unlock_bh_134($p53);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} ldv_linux_kernel_locking_rwlock_write_unlock();
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} ldv_mutex_unlock_225($p54);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i32);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p42, $i39);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(292, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(292, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i26);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb7;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 6);
    goto $bb3;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 395178);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    return;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 396210);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_129: ref;

axiom ldv_mutex_unlock_129 == $sub.ref(0, 397242);

procedure ldv_mutex_unlock_129($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_unlock_129($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} ldv_linux_kernel_locking_mutex_mutex_unlock_ppp_mutex($p0);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_130: ref;

axiom ldv_mutex_lock_130 == $sub.ref(0, 398274);

procedure ldv_mutex_lock_130($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_lock_130($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_linux_kernel_locking_mutex_mutex_lock_ppp_mutex($p0);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;
}



const ppp_set_compress: ref;

axiom ppp_set_compress == $sub.ref(0, 399306);

procedure ppp_set_compress($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.7, $M.9, $CurrAddr, $M.18, assertsPassed, $M.2, $M.11, $M.10, $M.6, $M.3, $M.19, $M.16, $M.33, $M.34;



implementation ppp_set_compress($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $p51: ref;
  var $p43: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $i83: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $i113: i32;
  var $i86: i32;
  var $i8: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 998} {:cexpr "ppp_set_compress:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i1);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i6 := copy_from_user($p4, $p5, 16);
    call {:si_unique_call 1000} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 32);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 32);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i26 := $ule.i32($i25, 1);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i29, $i31);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p36 := find_compressor($i35);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p41 := $i2p.i64.ref($i40);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i42 := $ne.ref($p41, $0.ref);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_31 := __request_module.i1.ref.i32(1, .str.49, $i46);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $p51 := find_compressor($i50);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    assume {:verifier.code 0} true;
    $p43 := $p51;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p43);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p43, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p3);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    call {:si_unique_call 1007} $p92 := devirtbounce.16($p88, $p89, $i91);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i94 == 1);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p43, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} ldv_module_put_190($p115);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    assume {:verifier.code 0} true;
    $i113 := $sub.i32(0, 105);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i86 := $i113;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i8 := $i86;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i94 == 1;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} ldv_spin_lock_bh_132($p95);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, $sub.i32(0, 8193));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(492, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p43);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p105, $p92);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} ldv_spin_unlock_bh_133($p106);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p103);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i113 := 0;
    goto $bb39;

  $bb36:
    assume $i108 == 1;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p101, $mul.ref(0, 128)), $mul.ref(64, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    call {:si_unique_call 1016} devirtbounce.2($p110, $p103);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p101, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} ldv_module_put_189($p112);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p43, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p3);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    call {:si_unique_call 1006} $p62 := devirtbounce.16($p58, $p59, $i61);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i64 == 1);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p43, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} ldv_module_put_186($p85);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32(0, 105);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i86 := $i83;
    goto $bb33;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i64 == 1;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} ldv_spin_lock_bh_131($p65);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, $sub.i32(0, 4097));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(488, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p43);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $p62);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_spin_unlock_bh_134($p76);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p73);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb32;

  $bb29:
    assume $i78 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p71, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    call {:si_unique_call 1011} devirtbounce.2($p80, $p73);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p71, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} ldv_module_put_185($p82);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p43 := $p41;
    goto $bb21;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i18 := copy_from_user($p12, $p14, $i17);
    call {:si_unique_call 1002} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 400338);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} might_fault();
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1021} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1025} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i18 := _copy_to_user($p0, $p1, $i17);
    call {:si_unique_call 1027} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i9 := _copy_to_user($p0, $p1, $i8);
    call {:si_unique_call 1023} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const slhc_init: ref;

axiom slhc_init == $sub.ref(0, 401370);

procedure slhc_init($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation slhc_init($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} {:cexpr "slhc_init:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1030} {:cexpr "slhc_init:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p2 := external_alloc();
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 402402);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} might_fault();
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1035} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1039} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i18 := _copy_from_user($p0, $p1, $i17);
    call {:si_unique_call 1041} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i9 := _copy_from_user($p0, $p1, $i8);
    call {:si_unique_call 1037} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const get_filter: ref;

axiom get_filter == $sub.ref(0, 403434);

procedure get_filter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $CurrAddr;



implementation get_filter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i4 := copy_from_user($p3, $p0, 16);
    call {:si_unique_call 1045} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, 8);
    call {:si_unique_call 1046} {:cexpr "len"} boogie_si_record_i32($i14);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i14);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p19 := memdup_user($p17, $i18);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i22 := IS_ERR($p21);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 1049} {:cexpr "tmp___2"} boogie_si_record_i8($i23);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p1, $p19);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i6 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p20);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i26 := PTR_ERR($p25);
    call {:si_unique_call 1051} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i6 := $i27;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p1, $0.ref);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 14);
    goto $bb3;
}



const bpf_prog_create: ref;

axiom bpf_prog_create == $sub.ref(0, 404466);

procedure bpf_prog_create($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bpf_prog_create($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1052} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1053} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_149: ref;

axiom ldv_mutex_unlock_149 == $sub.ref(0, 405498);

procedure ldv_mutex_unlock_149($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_unlock_149($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} ldv_linux_kernel_locking_mutex_mutex_unlock_ppp_mutex($p0);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_ppp_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_ppp_mutex == $sub.ref(0, 406530);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_ppp_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_ppp_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i1 := $M.36;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1056} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_ppp_mutex"} boogie_si_record_i8(0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;
}



const memdup_user: ref;

axiom memdup_user == $sub.ref(0, 407562);

procedure memdup_user($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation memdup_user($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} {:cexpr "memdup_user:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p2 := external_alloc();
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 408594);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1060} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 409626);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 1062} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 410658);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 411690);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1063} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1064} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1065} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 412722);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 413754);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1066} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1067} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1068} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 414786);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    return;
}



const find_compressor: ref;

axiom find_compressor == $sub.ref(0, 415818);

procedure find_compressor($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.18, assertsPassed, $M.7;



implementation find_compressor($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} {:cexpr "find_compressor:arg:type"} boogie_si_record_i32($i0);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ldv_spin_lock_197(compressor_list_lock);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p1 := find_comp_entry($i0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} ldv_spin_unlock_198(compressor_list_lock);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i8 := ldv_try_module_get_202($p7);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1073} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p13 := $p5;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb9;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb8;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  SeqInstr_799:
    assume !assertsPassed;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 416850);

procedure __request_module.i1.ref.i32($i0: i1, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref.i32($i0: i1, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1075} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1076} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1077} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_185: ref;

axiom ldv_module_put_185 == $sub.ref(0, 417882);

procedure ldv_module_put_185($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_module_put_185($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} ldv_linux_kernel_module_module_put($p0);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;
}



const ldv_module_put_186: ref;

axiom ldv_module_put_186 == $sub.ref(0, 418914);

procedure ldv_module_put_186($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_module_put_186($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} ldv_linux_kernel_module_module_put($p0);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;
}



const ldv_module_put_189: ref;

axiom ldv_module_put_189 == $sub.ref(0, 419946);

procedure ldv_module_put_189($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_module_put_189($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} ldv_linux_kernel_module_module_put($p0);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;
}



const ldv_module_put_190: ref;

axiom ldv_module_put_190 == $sub.ref(0, 420978);

procedure ldv_module_put_190($p0: ref);
  free requires assertsPassed;
  modifies $M.7, assertsPassed;



implementation ldv_module_put_190($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} ldv_linux_kernel_module_module_put($p0);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_202: ref;

axiom ldv_try_module_get_202 == $sub.ref(0, 422010);

procedure ldv_try_module_get_202($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_try_module_get_202($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i1 := ldv_linux_kernel_module_try_module_get($p0);
    call {:si_unique_call 1083} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_kernel_module_try_module_get: ref;

axiom ldv_linux_kernel_module_try_module_get == $sub.ref(0, 423042);

procedure ldv_linux_kernel_module_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7;



implementation ldv_linux_kernel_module_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i3 := ldv_undef_int();
    call {:si_unique_call 1085} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i5 := $M.7;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $M.7 := $i6;
    call {:si_unique_call 1086} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_ppp_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_ppp_mutex == $sub.ref(0, 424074);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_ppp_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_ppp_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i1 := $M.36;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1088} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_ppp_mutex"} boogie_si_record_i8(1);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_220: ref;

axiom ldv_mutex_lock_220 == $sub.ref(0, 425106);

procedure ldv_mutex_lock_220($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_lock_220($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} ldv_linux_kernel_locking_mutex_mutex_lock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;
}



const ppp_find_unit: ref;

axiom ppp_find_unit == $sub.ref(0, 426138);

procedure ppp_find_unit($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ppp_find_unit($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} {:cexpr "ppp_find_unit:arg:unit"} boogie_si_record_i32($i1);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p3 := unit_find($p2, $i1);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 427170);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} __list_add($p0, $p3, $p1);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_225: ref;

axiom ldv_mutex_unlock_225 == $sub.ref(0, 428202);

procedure ldv_mutex_unlock_225($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_unlock_225($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;
}



const unit_find: ref;

axiom unit_find == $sub.ref(0, 429234);

procedure unit_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation unit_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} {:cexpr "unit_find:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p2 := ldv_idr_find_235($p0, $i1);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;
}



const ldv_idr_find_235: ref;

axiom ldv_idr_find_235 == $sub.ref(0, 430266);

procedure ldv_idr_find_235($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ldv_idr_find_235($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} {:cexpr "ldv_idr_find_235:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} ldv_linux_lib_idr_idr_find_p();
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $p2 := ldv_undef_ptr();
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_find_p: ref;

axiom ldv_linux_lib_idr_idr_find_p == $sub.ref(0, 431298);

procedure ldv_linux_lib_idr_idr_find_p();
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ldv_linux_lib_idr_idr_find_p()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i0 := $M.34;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i3 := $M.34;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1101} {:cexpr "ldv_linux_lib_idr_idr_p"} boogie_si_record_i32(2);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 432330);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const atomic64_read: ref;

axiom atomic64_read == $sub.ref(0, 433362);

procedure atomic64_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic64_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_lock_150: ref;

axiom ldv_mutex_lock_150 == $sub.ref(0, 434394);

procedure ldv_mutex_lock_150($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_lock_150($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} ldv_linux_kernel_locking_mutex_mutex_lock_ppp_mutex($p0);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;
}



const ppp_create_interface: ref;

axiom ppp_create_interface == $sub.ref(0, 435426);

procedure ppp_create_interface($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.35, $M.0, $M.33, $CurrAddr, $M.34, $M.3, assertsPassed, $M.11, $M.2, $M.18, $M.19, $M.8, $M.16, $M.9, $M.10, $M.6, $M.7;



implementation ppp_create_interface($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i41: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i40: i32;
  var $p65: ref;
  var $i8: i32;
  var $p64: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var vslice_dummy_var_32: ref;
  var vslice_dummy_var_33: ref;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1107} {:cexpr "ppp_create_interface:arg:unit"} boogie_si_record_i32($i1);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $p5 := ldv_alloc_netdev_mqs_204(776, .str.3, 0, ppp_setup, 1, 1);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $p9 := ppp_pernet($p0);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p10 := netdev_priv($p5);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(480, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1500);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(0, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} init_ppp_file($p14, 1);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(292, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 2);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref(0, 4));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref(1, 4));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref(2, 4));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref(3, 4));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 0);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref(4, 4));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref(5, 4));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} INIT_LIST_HEAD($p19);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_32 := spinlock_check($p20);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} __raw_spin_lock_init($p24, .str.43, $p3);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} vslice_dummy_var_33 := spinlock_check($p25);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(408, 1)), $mul.ref(0, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __raw_spin_lock_init($p29, .str.44, $p4);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(620, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $sub.i32(0, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(624, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} skb_queue_head_init($p31);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(720, 1));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $0.ref);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(728, 1));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} dev_net_set($p5, $p0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} ldv_mutex_lock_205($p34);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i1, 0);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p43 := unit_find($p42, $i1);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p11);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i48 := unit_set($p46, $p47, $i1);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    call {:si_unique_call 1129} {:cexpr "unit"} boogie_si_record_i32($i48);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i41 := $i48;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i41);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 3216)), $mul.ref(0, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} vslice_dummy_var_34 := sprintf.ref.ref.i32($p53, .str.45, $i41);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i55 := ldv_register_netdev_206($p5);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    call {:si_unique_call 1127} {:cexpr "ret"} boogie_si_record_i32($i55);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(736, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} atomic_inc(ppp_unit_count);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_mutex_unlock_207($p63);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p2, 0);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p64 := $p10;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $r := $p64;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} unit_put($p57, $i41);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p11, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 3216)), $mul.ref(0, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} netdev_err.ref.ref.ref.i32($p59, .str.46, $p61, $i55);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i40 := $i55;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(112, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} ldv_mutex_unlock_208($p65);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} ldv_free_netdev_209($p5);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i8 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $M.35 := $store.i32($M.35, $p2, $i8);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p64 := $0.ref;
    goto $bb25;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 17);
    goto $bb13;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 17);
    goto $bb13;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p11);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i38 := unit_get($p36, $p37);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    call {:si_unique_call 1121} {:cexpr "unit"} boogie_si_record_i32($i38);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i41 := $i38;
    goto $bb15;

  $bb11:
    assume $i39 == 1;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i40 := $i38;
    goto $bb13;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_mutex_lock_151: ref;

axiom ldv_mutex_lock_151 == $sub.ref(0, 436458);

procedure ldv_mutex_lock_151($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_lock_151($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} ldv_linux_kernel_locking_mutex_mutex_lock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_152: ref;

axiom ldv_mutex_unlock_152 == $sub.ref(0, 437490);

procedure ldv_mutex_unlock_152($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_unlock_152($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;
}



const ppp_find_channel: ref;

axiom ppp_find_channel == $sub.ref(0, 438522);

procedure ppp_find_channel($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ppp_find_channel($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p12: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p39: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} {:cexpr "ppp_find_channel:arg:unit"} boogie_si_record_i32($i1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(288, 1)), $mul.ref(0, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 304), 680));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 304), 680)), $mul.ref(304, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(288, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(272, 1)), $mul.ref(0, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref($sub.ref(0, 304), 680));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p32, $mul.ref($sub.ref(0, 304), 680)), $mul.ref(304, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(272, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i35, $i37);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $r := $p20;
    return;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p39 := $p33;
    goto $bb16;

  $bb16:
    call $p41, $i42, $i43, $p44, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $p39 := ppp_find_channel_loop_$bb16($i1, $i37, $p41, $i42, $i43, $p44, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $p39);
    goto $bb16_last;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, $i1);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p44 := $p39;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 680)), $mul.ref(304, 1)), $mul.ref(0, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref($sub.ref(0, 304), 680));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p48, $mul.ref($sub.ref(0, 304), 680)), $mul.ref(304, 1));
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, $i37);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb21:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p39 := $p49;
    goto $bb21_dummy;

  $bb18:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p20 := $p44;
    goto $bb8;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb4;

  $bb4:
    call $p14, $i15, $i16, $p17, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $p12 := ppp_find_channel_loop_$bb4($i1, $i10, $p14, $i15, $i16, $p17, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $p12);
    goto $bb4_last;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, $i1);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p17 := $p12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 680)), $mul.ref(304, 1)), $mul.ref(0, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 304), 680));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 304), 680)), $mul.ref(304, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i10);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p25;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 680)), $mul.ref(304, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 384)), $mul.ref(272, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} list_move($p18, $p19);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p20 := $p17;
    goto $bb8;

  $bb21_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5923;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5888;
}



const ldv_mutex_unlock_155: ref;

axiom ldv_mutex_unlock_155 == $sub.ref(0, 439554);

procedure ldv_mutex_unlock_155($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_mutex_unlock_155($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} ldv_linux_kernel_locking_mutex_mutex_unlock_ppp_mutex($p0);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;
}



const list_move: ref;

axiom list_move == $sub.ref(0, 440586);

procedure list_move($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __list_del_entry($p0);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} list_add($p0, $p1);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 441618);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    return;
}



const ppp_setup: ref;

axiom ppp_setup == $sub.ref(0, 442650);

procedure ppp_setup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ppp_setup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(520, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, ppp_netdev_ops);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(574, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, 4);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(568, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 1500);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(613, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(992, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, 3);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(572, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, 512);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(552, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 4240);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(240, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i10 := $or.i64($i9, 8192);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(240, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i10);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} netif_keep_dst($p0);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    return;
}



const ldv_alloc_netdev_mqs_204: ref;

axiom ldv_alloc_netdev_mqs_204 == $sub.ref(0, 443682);

procedure ldv_alloc_netdev_mqs_204($i0: i32, $p1: ref, $i2: i8, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_alloc_netdev_mqs_204($i0: i32, $p1: ref, $i2: i8, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} {:cexpr "ldv_alloc_netdev_mqs_204:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1143} {:cexpr "ldv_alloc_netdev_mqs_204:arg:ldv_func_arg3"} boogie_si_record_i8($i2);
    call {:si_unique_call 1144} {:cexpr "ldv_alloc_netdev_mqs_204:arg:ldv_func_arg5"} boogie_si_record_i32($i4);
    call {:si_unique_call 1145} {:cexpr "ldv_alloc_netdev_mqs_204:arg:ldv_func_arg6"} boogie_si_record_i32($i5);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $p8 := alloc_netdev_mqs($i0, $p1, $i7, $p3, $i4, $i5);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p11 := ldv_alloc_netdev_mqs($p8, $i0, $p1, $i10, $p3, $i4, $i5);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 444714);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_net_set: ref;

axiom dev_net_set == $sub.ref(0, 445746);

procedure dev_net_set($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_net_set($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(1312, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} release_net($p3);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $p4 := hold_net($p1);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(1312, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p4);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_205: ref;

axiom ldv_mutex_lock_205 == $sub.ref(0, 446778);

procedure ldv_mutex_lock_205($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_lock_205($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} ldv_linux_kernel_locking_mutex_mutex_lock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;
}



const unit_get: ref;

axiom unit_get == $sub.ref(0, 447810);

procedure unit_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation unit_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i2 := ldv_idr_alloc_233($p0, $p1, 0, 0, 208);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    call {:si_unique_call 1152} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;
}



const unit_set: ref;

axiom unit_set == $sub.ref(0, 448842);

procedure unit_set($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation unit_set($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} {:cexpr "unit_set:arg:n"} boogie_si_record_i32($i2);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i4 := ldv_idr_alloc_232($p0, $p1, $i2, $i3, 208);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    call {:si_unique_call 1155} {:cexpr "unit"} boogie_si_record_i32($i4);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $sub.i32(0, 28));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 449874);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const ldv_register_netdev_206: ref;

axiom ldv_register_netdev_206 == $sub.ref(0, 450906);

procedure ldv_register_netdev_206($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.2, $M.18, $M.3, $M.19, assertsPassed, $M.8, $M.16, $M.9, $M.10, $M.6, $M.33, $M.7, $M.34;



implementation ldv_register_netdev_206($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i1 := register_netdev($p0);
    call {:si_unique_call 1157} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i2 := ldv_register_netdev($i1, $p0);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    call {:si_unique_call 1159} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_207: ref;

axiom ldv_mutex_unlock_207 == $sub.ref(0, 451938);

procedure ldv_mutex_unlock_207($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_unlock_207($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_208: ref;

axiom ldv_mutex_unlock_208 == $sub.ref(0, 452970);

procedure ldv_mutex_unlock_208($p0: ref);
  free requires assertsPassed;
  modifies $M.33, assertsPassed;



implementation ldv_mutex_unlock_208($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} ldv_linux_kernel_locking_mutex_mutex_unlock_all_ppp_mutex_of_ppp_net($p0);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;
}



const ldv_free_netdev_209: ref;

axiom ldv_free_netdev_209 == $sub.ref(0, 454002);

procedure ldv_free_netdev_209($p0: ref);
  free requires assertsPassed;



implementation ldv_free_netdev_209($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} free_netdev($p0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} ldv_free_netdev($0.ref, $p0);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 455034);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1164} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1165} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_register_netdev: ref;

axiom ldv_register_netdev == $sub.ref(0, 456066);

procedure ldv_register_netdev($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.2, $M.18, $M.3, $M.19, assertsPassed, $M.8, $M.16, $M.9, $M.10, $M.6, $M.33, $M.7, $M.34;



implementation ldv_register_netdev($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i1;
  var $i27: i32;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} {:cexpr "ldv_register_netdev:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i2 := ldv_pre_register_netdev();
    call {:si_unique_call 1168} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i3 := ldv_undef_int();
    call {:si_unique_call 1170} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i2, 0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} ldv_assume($i27);
    assume {:verifier.code 0} true;
    $i25 := $i2;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} ldv_assume($i6);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(520, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 504)), $mul.ref(16, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i19 := ldv_undef_int();
    call {:si_unique_call 1176} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i18, 0);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} ldv_assume($i24);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i25 := $i18;
    goto $bb9;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} ldv_assume($i22);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} ldv_dispatch_register_5_4($p1);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(520, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 504)), $mul.ref(16, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i17 := ldv_register_netdev_open_5_6($p16, $p1);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    call {:si_unique_call 1174} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32($i17);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb5;

  SeqInstr_898:
    assume !assertsPassed;
    return;
}



const ldv_pre_register_netdev: ref;

axiom ldv_pre_register_netdev == $sub.ref(0, 457098);

procedure ldv_pre_register_netdev() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_pre_register_netdev() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i0 := ldv_undef_int();
    call {:si_unique_call 1181} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(1);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;
}



const ldv_register_netdev_open_5_6: ref;

axiom ldv_register_netdev_open_5_6 == $sub.ref(0, 458130);

procedure ldv_register_netdev_open_5_6($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.2, $M.18, $M.3, $M.19, assertsPassed;



implementation ldv_register_netdev_open_5_6($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i2 := devirtbounce.15($p0, $p1);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    call {:si_unique_call 1184} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_5_4: ref;

axiom ldv_dispatch_register_5_4 == $sub.ref(0, 459162);

procedure ldv_dispatch_register_5_4($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.8, $M.16, $M.9, $M.11, assertsPassed, $M.10, $M.2, $M.18, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ldv_dispatch_register_5_4($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p1 := ldv_xmalloc(16);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} ldv_net_dummy_resourceless_instance_1($p4);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 460194);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p1 := malloc($i0);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} ldv_assume($i4);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1191} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} ldv_assume($i7);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_net_dummy_resourceless_instance_1: ref;

axiom ldv_net_dummy_resourceless_instance_1 == $sub.ref(0, 461226);

procedure ldv_net_dummy_resourceless_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.16, $M.9, $M.11, assertsPassed, $M.10, $CurrAddr, $M.2, $M.18, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ldv_net_dummy_resourceless_instance_1($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i8 := ldv_undef_int();
    call {:si_unique_call 1195} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i10, $i11, $i12, $i13, $i14, $i15, $i16 := ldv_net_dummy_resourceless_instance_1_loop_$bb7($p7, $i10, $i11, $i12, $i13, $i14, $i15, $i16);
    goto $bb7_last;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 2);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 3);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 4);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} ldv_stop();
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i15 := ldv_undef_int();
    call {:si_unique_call 1204} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i16 == 1);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb27_dummy;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} ldv_dummy_resourceless_instance_callback_1_3($u9, $p7, $u10, $u1);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} ldv_dummy_resourceless_instance_callback_1_9($u7, $p7, $u8);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} ldv_dummy_resourceless_instance_callback_1_10($u6, $p7);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} ldv_dummy_resourceless_instance_callback_1_11($u5, $u2, $p7);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} ldv_free($p6);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i10 := ldv_undef_int();
    call {:si_unique_call 1197} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_6116;
}



const ldv_dummy_resourceless_instance_callback_1_11: ref;

axiom ldv_dummy_resourceless_instance_callback_1_11 == $sub.ref(0, 462258);

procedure ldv_dummy_resourceless_instance_callback_1_11($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.16, assertsPassed, $M.10, $CurrAddr, $M.2, $M.11, $M.18, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ldv_dummy_resourceless_instance_callback_1_11($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} vslice_dummy_var_35 := ppp_start_xmit($p1, $p2);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_10: ref;

axiom ldv_dummy_resourceless_instance_callback_1_10 == $sub.ref(0, 463290);

procedure ldv_dummy_resourceless_instance_callback_1_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_dummy_resourceless_instance_callback_1_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} vslice_dummy_var_36 := ppp_dev_init($p1);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_9: ref;

axiom ldv_dummy_resourceless_instance_callback_1_9 == $sub.ref(0, 464322);

procedure ldv_dummy_resourceless_instance_callback_1_9($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.8, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_9($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} vslice_dummy_var_37 := ppp_get_stats64($p1, $p2);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_3: ref;

axiom ldv_dummy_resourceless_instance_callback_1_3 == $sub.ref(0, 465354);

procedure ldv_dummy_resourceless_instance_callback_1_3($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, assertsPassed, $M.9, $M.8, $M.16, $M.2, $M.18, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ldv_dummy_resourceless_instance_callback_1_3($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} {:cexpr "ldv_dummy_resourceless_instance_callback_1_3:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} vslice_dummy_var_38 := ppp_net_ioctl($p1, $p2, $i3);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 466386);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ppp_net_ioctl: ref;

axiom ppp_net_ioctl == $sub.ref(0, 467418);

procedure ppp_net_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, assertsPassed, $M.9, $M.8, $M.16, $M.2, $M.18, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_net_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i16: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $p3 := $alloc($mul.ref(76, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p4 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    call {:si_unique_call 1212} {:cexpr "ppp_net_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $p5 := netdev_priv($p0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 35312);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 35314);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i2, 35313);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i43 := strlen(.str.37);
    call {:si_unique_call 1219} {:cexpr "tmp___2"} boogie_si_record_i64($i43);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 1);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $i45 := copy_to_user($p9, .str.37, $i44);
    call {:si_unique_call 1221} {:cexpr "tmp___3"} boogie_si_record_i64($i45);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb16;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb16;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 1217} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p17, 0, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p4);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i41 := copy_to_user($p9, $p40, 80);
    call {:si_unique_call 1225} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb16;

  $bb24:
    assume $i42 == 1;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb16;

  $bb21:
    assume $i32 == 1;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(560, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(568, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(40, 1));
    call {:si_unique_call 1223} devirtbounce.17($p36, $p38, $p39);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i21 == 1;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(544, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 776)), $mul.ref(552, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(0, 1));
    call {:si_unique_call 1222} devirtbounce.17($p25, $p27, $p28);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ppp_get_stats($p6, $p3);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i14 := copy_to_user($p9, $p13, 76);
    call {:si_unique_call 1216} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb16;

  $bb14:
    assume $i15 == 1;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb16;
}



const ppp_get_stats: ref;

axiom ppp_get_stats == $sub.ref(0, 468450);

procedure ppp_get_stats($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ppp_get_stats($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $p38: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p81: ref;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(504, 1));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 1226} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p4, 0, 76, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i8);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(16, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(8, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i28);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(0, 1)), $mul.ref(36, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i36);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(24, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i42);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p3);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(36, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i48, $i50);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(44, 1)), $mul.ref(0, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i51);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(36, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i55);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(44, 1)), $mul.ref(8, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i59);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(44, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(44, 1)), $mul.ref(12, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i63);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(44, 1)), $mul.ref(24, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i67);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(60, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(44, 1)), $mul.ref(28, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i71);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(44, 1)), $mul.ref(16, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i75);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(52, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 76)), $mul.ref(44, 1)), $mul.ref(20, 1));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i79);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i46 == 1;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 469482);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const strlen: ref;

axiom strlen == $sub.ref(0, 470514);

procedure strlen($p0: ref) returns ($r: i64);



const ppp_get_stats64: ref;

axiom ppp_get_stats64 == $sub.ref(0, 471546);

procedure ppp_get_stats64($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.9, $M.8, assertsPassed;



implementation ppp_get_stats64($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $p2 := netdev_priv($p0);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} ldv_spin_lock_bh_132($p4);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(0, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(16, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i11);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(336, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} ldv_spin_unlock_bh_133($p13);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} ldv_spin_lock_bh_131($p14);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(8, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i17);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(744, 1)), $mul.ref(24, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(408, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} ldv_spin_unlock_bh_134($p23);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(32, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(40, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, $i30);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(48, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i34);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i42);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;
}



const ppp_dev_init: ref;

axiom ppp_dev_init == $sub.ref(0, 472578);

procedure ppp_dev_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ppp_dev_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2928, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, ppp_tx_busylock);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ppp_start_xmit: ref;

axiom ppp_start_xmit == $sub.ref(0, 473610);

procedure ppp_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.16, assertsPassed, $M.10, $CurrAddr, $M.2, $M.11, $M.18, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i16;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $p2 := netdev_priv($p1);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i8 := __fswab16($i7);
    call {:si_unique_call 1234} {:cexpr "tmp___0"} boogie_si_record_i16($i8);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i10 := ethertype_to_npindex($i9);
    call {:si_unique_call 1236} {:cexpr "npi"} boogie_si_record_i32($i10);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i10);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref($i12, 4));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i10);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref($i17, 4));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 3);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i10);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref($i22, 4));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i10);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(512, 1)), $mul.ref($i27, 4));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 2);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $i32 := skb_cow_head($p0, 4);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    call {:si_unique_call 1239} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $p34 := skb_push($p0, 2);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i10);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref(npindex_to_proto, $mul.ref(0, 24)), $mul.ref($i35, 4));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.38, $p36);
    call {:si_unique_call 1241} {:cexpr "proto"} boogie_si_record_i32($i37);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} put_unaligned_be16($i40, $p34);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} skb_queue_tail($p42, $p0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} ppp_xmit_process($p3);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} kfree_skb($p0);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, 1);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(56, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i46);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i21 == 1;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ethertype_to_npindex: ref;

axiom ethertype_to_npindex == $sub.ref(0, 474642);

procedure ethertype_to_npindex($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ethertype_to_npindex($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} {:cexpr "ethertype_to_npindex:arg:ethertype"} boogie_si_record_i32($i0);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2048);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 34525);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 33079);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 16);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32923);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 34887);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 34888);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb25:
    assume $i7 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i8 := 5;
    goto $bb30;

  $bb21:
    assume $i6 == 1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i8 := 4;
    goto $bb30;

  $bb17:
    assume $i5 == 1;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i8 := 3;
    goto $bb30;

  $bb13:
    assume $i4 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i3 == 1;
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i8 := 2;
    goto $bb30;

  $bb5:
    assume $i2 == 1;
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb30;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb30;
}



const skb_cow_head: ref;

axiom skb_cow_head == $sub.ref(0, 475674);

procedure skb_cow_head($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation skb_cow_head($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} {:cexpr "skb_cow_head:arg:headroom"} boogie_si_record_i32($i1);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i2 := skb_header_cloned($p0);
    call {:si_unique_call 1248} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i3 := __skb_cow($p0, $i1, $i2);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    call {:si_unique_call 1250} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;
}



const skb_header_cloned: ref;

axiom skb_header_cloned == $sub.ref(0, 476706);

procedure skb_header_cloned($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_header_cloned($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(142, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $p7 := skb_end_pointer($p0);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 320)), $mul.ref(32, 1));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i10 := atomic_read($p9);
    call {:si_unique_call 1253} {:cexpr "dataref"} boogie_si_record_i32($i10);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 65535);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i10, 16);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i11, $i12);
    call {:si_unique_call 1254} {:cexpr "dataref"} boogie_si_record_i32($i13);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const __skb_cow: ref;

axiom __skb_cow == $sub.ref(0, 477738);

procedure __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} {:cexpr "__skb_cow:arg:headroom"} boogie_si_record_i32($i1);
    call {:si_unique_call 1256} {:cexpr "__skb_cow:arg:cloned"} boogie_si_record_i32($i2);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i3 := skb_headroom($p0);
    call {:si_unique_call 1258} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i1, $i3);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $i2);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32(32, 64);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i11 := 64;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i7, $i12);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32(32, 64);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i14 == 1);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i15 := 64;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, $i15);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i13, $i16);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i18 := ldv_pskb_expand_head_106($p0, $i17, 0, 32);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    call {:si_unique_call 1263} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb12;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i15 := 32;
    goto $bb11;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i11 := 32;
    goto $bb8;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i5 := skb_headroom($p0);
    call {:si_unique_call 1260} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i1, $i5);
    call {:si_unique_call 1261} {:cexpr "delta"} boogie_si_record_i32($i6);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 478770);

procedure skb_headroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headroom($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const ldv_pskb_expand_head_106: ref;

axiom ldv_pskb_expand_head_106 == $sub.ref(0, 479802);

procedure ldv_pskb_expand_head_106($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_pskb_expand_head_106($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} {:cexpr "ldv_pskb_expand_head_106:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 1265} {:cexpr "ldv_pskb_expand_head_106:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    call {:si_unique_call 1266} {:cexpr "ldv_pskb_expand_head_106:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} ldv_check_alloc_flags($i3);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $p4 := ldv_malloc_unknown_size();
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 480834);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1269} $r := $malloc($i0);
    return;
}



const ldv_idr_alloc_232: ref;

axiom ldv_idr_alloc_232 == $sub.ref(0, 481866);

procedure ldv_idr_alloc_232($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ldv_idr_alloc_232($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} {:cexpr "ldv_idr_alloc_232:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    call {:si_unique_call 1271} {:cexpr "ldv_idr_alloc_232:arg:ldv_func_arg4"} boogie_si_record_i32($i3);
    call {:si_unique_call 1272} {:cexpr "ldv_idr_alloc_232:arg:ldv_func_arg5"} boogie_si_record_i32($i4);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} ldv_linux_lib_idr_idr_alloc_p();
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i5 := ldv_undef_int();
    call {:si_unique_call 1275} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_alloc_p: ref;

axiom ldv_linux_lib_idr_idr_alloc_p == $sub.ref(0, 482898);

procedure ldv_linux_lib_idr_idr_alloc_p();
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ldv_linux_lib_idr_idr_alloc_p()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i0 := $M.34;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i3 := $M.34;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1278} {:cexpr "ldv_linux_lib_idr_idr_p"} boogie_si_record_i32(2);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;
}



const ldv_idr_alloc_233: ref;

axiom ldv_idr_alloc_233 == $sub.ref(0, 483930);

procedure ldv_idr_alloc_233($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, assertsPassed;



implementation ldv_idr_alloc_233($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} {:cexpr "ldv_idr_alloc_233:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    call {:si_unique_call 1280} {:cexpr "ldv_idr_alloc_233:arg:ldv_func_arg4"} boogie_si_record_i32($i3);
    call {:si_unique_call 1281} {:cexpr "ldv_idr_alloc_233:arg:ldv_func_arg5"} boogie_si_record_i32($i4);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} ldv_linux_lib_idr_idr_alloc_p();
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i5 := ldv_undef_int();
    call {:si_unique_call 1284} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;
}



const release_net: ref;

axiom release_net == $sub.ref(0, 484962);

procedure release_net($p0: ref);
  free requires assertsPassed;



implementation release_net($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    return;
}



const hold_net: ref;

axiom hold_net == $sub.ref(0, 485994);

procedure hold_net($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation hold_net($p0: ref) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const alloc_netdev_mqs: ref;

axiom alloc_netdev_mqs == $sub.ref(0, 487026);

procedure alloc_netdev_mqs($i0: i32, $p1: ref, $i2: i8, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_netdev_mqs($i0: i32, $p1: ref, $i2: i8, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} {:cexpr "alloc_netdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1286} {:cexpr "alloc_netdev_mqs:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 1287} {:cexpr "alloc_netdev_mqs:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1288} {:cexpr "alloc_netdev_mqs:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p6 := external_alloc();
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const ldv_alloc_netdev_mqs: ref;

axiom ldv_alloc_netdev_mqs == $sub.ref(0, 488058);

procedure ldv_alloc_netdev_mqs($p0: ref, $i1: i32, $p2: ref, $i3: i8, $p4: ref, $i5: i32, $i6: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_alloc_netdev_mqs($p0: ref, $i1: i32, $p2: ref, $i3: i8, $p4: ref, $i5: i32, $i6: i32) returns ($r: ref)
{
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} {:cexpr "ldv_alloc_netdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1291} {:cexpr "ldv_alloc_netdev_mqs:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 1292} {:cexpr "ldv_alloc_netdev_mqs:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 1293} {:cexpr "ldv_alloc_netdev_mqs:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i7 := ldv_undef_int();
    call {:si_unique_call 1295} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p9 := ldv_xmalloc(3264);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i64($i3);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} ldv_alloc_netdev_mqs_setup_3_3($p12, $p10);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p13 := $p9;
    goto $bb3;
}



const ldv_alloc_netdev_mqs_setup_3_3: ref;

axiom ldv_alloc_netdev_mqs_setup_3_3 == $sub.ref(0, 489090);

procedure ldv_alloc_netdev_mqs_setup_3_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_alloc_netdev_mqs_setup_3_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} ppp_setup($p1);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    return;
}



const netif_keep_dst: ref;

axiom netif_keep_dst == $sub.ref(0, 490122);

procedure netif_keep_dst($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation netif_keep_dst($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(556, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 4195329));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(556, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 491154);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 1299} devirtbounce.18($p12, $p0, $p1, $p2);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 492186);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 493218);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    return;
}



const __xchg_wrong_size: ref;

axiom __xchg_wrong_size == $sub.ref(0, 494250);

procedure __xchg_wrong_size();



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 495282);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 1301} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1303} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 496314);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 497346);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    return;
}



const iov_iter_init: ref;

axiom iov_iter_init == $sub.ref(0, 498378);

procedure iov_iter_init($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64);
  free requires assertsPassed;



implementation iov_iter_init($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} {:cexpr "iov_iter_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1305} {:cexpr "iov_iter_init:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1306} {:cexpr "iov_iter_init:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    return;
}



const skb_copy_datagram_iter: ref;

axiom skb_copy_datagram_iter == $sub.ref(0, 499410);

procedure skb_copy_datagram_iter($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_copy_datagram_iter($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1307} {:cexpr "skb_copy_datagram_iter:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1308} {:cexpr "skb_copy_datagram_iter:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1309} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 500442);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 10680)), $mul.ref(8, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 1313} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 501474);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 1316} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 502506);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1318} $i2 := devirtbounce.19(0, $p1, $i0);
    call {:si_unique_call 1319} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_create_class: ref;

axiom ldv_create_class == $sub.ref(0, 503538);

procedure ldv_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $p0 := ldv_linux_drivers_base_class_create_class();
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p1 := ldv_linux_usb_gadget_create_class();
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} ldv_assume($i5);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_create_class: ref;

axiom ldv_linux_drivers_base_class_create_class == $sub.ref(0, 504570);

procedure ldv_linux_drivers_base_class_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_linux_drivers_base_class_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $p0 := ldv_undef_ptr();
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} ldv_assume($i2);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i3 := ldv_is_err($p0);
    call {:si_unique_call 1326} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i5 := $M.39;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} ldv_assert_linux_drivers_base_class__double_registration($i7);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1328} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(1);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_979:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_create_class: ref;

axiom ldv_linux_usb_gadget_create_class == $sub.ref(0, 505602);

procedure ldv_linux_usb_gadget_create_class() returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_create_class() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p0 := ldv_undef_ptr();
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} ldv_assume($i2);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i3 := ldv_is_err($p0);
    call {:si_unique_call 1332} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i5 := $M.40;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i7);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_982:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget == $sub.ref(0, 506634);

procedure ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} {:cexpr "ldv_assert_linux_usb_gadget__class_registration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1335} __VERIFIER_error();
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__double_registration: ref;

axiom ldv_assert_linux_drivers_base_class__double_registration == $sub.ref(0, 507666);

procedure ldv_assert_linux_drivers_base_class__double_registration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__double_registration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} {:cexpr "ldv_assert_linux_drivers_base_class__double_registration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1337} __VERIFIER_error();
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_int_nonpositive: ref;

axiom ldv_undef_int_nonpositive == $sub.ref(0, 508698);

procedure ldv_undef_int_nonpositive() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int_nonpositive() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i0 := ldv_undef_int();
    call {:si_unique_call 1339} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} ldv_assume($i2);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_EMGentry_exit_ppp_cleanup_9_2: ref;

axiom ldv_EMGentry_exit_ppp_cleanup_9_2 == $sub.ref(0, 509730);

procedure ldv_EMGentry_exit_ppp_cleanup_9_2($p0: ref);
  free requires assertsPassed;
  modifies $M.42, $M.39, assertsPassed;



implementation ldv_EMGentry_exit_ppp_cleanup_9_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ppp_cleanup();
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;
}



const ppp_cleanup: ref;

axiom ppp_cleanup == $sub.ref(0, 510762);

procedure ppp_cleanup();
  free requires assertsPassed;
  modifies $M.42, $M.39, assertsPassed;



implementation ppp_cleanup()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $i0 := atomic_read(ppp_unit_count);
    call {:si_unique_call 1343} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i3 := atomic_read(channel_count);
    call {:si_unique_call 1346} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} ldv_unregister_chrdev_159(108, .str.33);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p6 := $M.41;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} device_destroy($p6, 113246208);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p7 := $M.41;
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} ldv_class_destroy_231($p7);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} unregister_pernet_device(ppp_net_ops);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_40 := printk.ref(.str.32);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_39 := printk.ref(.str.32);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_unregister_chrdev_159: ref;

axiom ldv_unregister_chrdev_159 == $sub.ref(0, 511794);

procedure ldv_unregister_chrdev_159($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.42, assertsPassed;



implementation ldv_unregister_chrdev_159($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} {:cexpr "ldv_unregister_chrdev_159:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} unregister_chrdev($i0, $p1);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} ldv_unregister_chrdev($0.ref, $i0, $p1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 512826);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    return;
}



const ldv_class_destroy_231: ref;

axiom ldv_class_destroy_231 == $sub.ref(0, 513858);

procedure ldv_class_destroy_231($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_class_destroy_231($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} ldv_linux_drivers_base_class_destroy_class($p0);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} ldv_linux_usb_gadget_destroy_class($p0);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;
}



const unregister_pernet_device: ref;

axiom unregister_pernet_device == $sub.ref(0, 514890);

procedure unregister_pernet_device($p0: ref);
  free requires assertsPassed;



implementation unregister_pernet_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_drivers_base_class_destroy_class: ref;

axiom ldv_linux_drivers_base_class_destroy_class == $sub.ref(0, 515922);

procedure ldv_linux_drivers_base_class_destroy_class($p0: ref);
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_linux_drivers_base_class_destroy_class($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i4 := ldv_is_err($p3);
    call {:si_unique_call 1359} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} ldv_linux_drivers_base_class_unregister_class();
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_gadget_destroy_class: ref;

axiom ldv_linux_usb_gadget_destroy_class == $sub.ref(0, 516954);

procedure ldv_linux_usb_gadget_destroy_class($p0: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_destroy_class($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i4 := ldv_is_err($p3);
    call {:si_unique_call 1362} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} ldv_linux_usb_gadget_unregister_class();
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_gadget_unregister_class: ref;

axiom ldv_linux_usb_gadget_unregister_class == $sub.ref(0, 517986);

procedure ldv_linux_usb_gadget_unregister_class();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_unregister_class()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i2);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget == $sub.ref(0, 519018);

procedure ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} {:cexpr "ldv_assert_linux_usb_gadget__class_deregistration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1366} __VERIFIER_error();
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_drivers_base_class_unregister_class: ref;

axiom ldv_linux_drivers_base_class_unregister_class == $sub.ref(0, 520050);

procedure ldv_linux_drivers_base_class_unregister_class();
  free requires assertsPassed;
  modifies $M.39, assertsPassed;



implementation ldv_linux_drivers_base_class_unregister_class()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ldv_assert_linux_drivers_base_class__double_deregistration($i2);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1368} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_drivers_base_class__double_deregistration: ref;

axiom ldv_assert_linux_drivers_base_class__double_deregistration == $sub.ref(0, 521082);

procedure ldv_assert_linux_drivers_base_class__double_deregistration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__double_deregistration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} {:cexpr "ldv_assert_linux_drivers_base_class__double_deregistration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1370} __VERIFIER_error();
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_chrdev: ref;

axiom unregister_chrdev == $sub.ref(0, 522114);

procedure unregister_chrdev($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.42, assertsPassed;



implementation unregister_chrdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} {:cexpr "unregister_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} ldv_unregister_chrdev_77($i0, $p1);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} ldv_linux_fs_char_dev_unregister_chrdev_region();
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} ldv_linux_usb_gadget_unregister_chrdev_region();
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;
}



const ldv_unregister_chrdev: ref;

axiom ldv_unregister_chrdev == $sub.ref(0, 523146);

procedure ldv_unregister_chrdev($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_unregister_chrdev($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} {:cexpr "ldv_unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} ldv_dispatch_deregister_6_1($u11);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_6_1: ref;

axiom ldv_dispatch_deregister_6_1 == $sub.ref(0, 524178);

procedure ldv_dispatch_deregister_6_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_6_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_chrdev_77: ref;

axiom ldv_unregister_chrdev_77 == $sub.ref(0, 525210);

procedure ldv_unregister_chrdev_77($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_unregister_chrdev_77($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} {:cexpr "ldv_unregister_chrdev_77:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} __unregister_chrdev($i0, 0, 256, $p1);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_fs_char_dev_unregister_chrdev_region: ref;

axiom ldv_linux_fs_char_dev_unregister_chrdev_region == $sub.ref(0, 526242);

procedure ldv_linux_fs_char_dev_unregister_chrdev_region();
  free requires assertsPassed;
  modifies $M.42, assertsPassed;



implementation ldv_linux_fs_char_dev_unregister_chrdev_region()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i0 := $M.42;
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} ldv_assert_linux_fs_char_dev__double_deregistration($i2);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1380} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_unregister_chrdev_region: ref;

axiom ldv_linux_usb_gadget_unregister_chrdev_region == $sub.ref(0, 527274);

procedure ldv_linux_usb_gadget_unregister_chrdev_region();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_unregister_chrdev_region()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i2);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget == $sub.ref(0, 528306);

procedure ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} {:cexpr "ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1383} __VERIFIER_error();
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__double_deregistration: ref;

axiom ldv_assert_linux_fs_char_dev__double_deregistration == $sub.ref(0, 529338);

procedure ldv_assert_linux_fs_char_dev__double_deregistration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__double_deregistration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} {:cexpr "ldv_assert_linux_fs_char_dev__double_deregistration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1385} __VERIFIER_error();
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __unregister_chrdev: ref;

axiom __unregister_chrdev == $sub.ref(0, 530370);

procedure __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} {:cexpr "__unregister_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1387} {:cexpr "__unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1388} {:cexpr "__unregister_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_ppp_init_9_9: ref;

axiom ldv_EMGentry_init_ppp_init_9_9 == $sub.ref(0, 531402);

procedure ldv_EMGentry_init_ppp_init_9_9($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.39, $M.42, $M.0, assertsPassed, $M.11, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.8, $M.16, $M.10, $M.35, $M.6, $M.31, $M.9, $M.36, $M.33, $M.2, $M.7, $M.18, $M.3, $M.19, $M.34;



implementation ldv_EMGentry_init_ppp_init_9_9($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i1 := ppp_init();
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    call {:si_unique_call 1390} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;
}



const ppp_init: ref;

axiom ppp_init == $sub.ref(0, 532434);

procedure ppp_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $M.39, $M.42, $M.0, assertsPassed, $M.11, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.8, $M.16, $M.10, $M.35, $M.6, $M.31, $M.9, $M.36, $M.33, $M.2, $M.7, $M.18, $M.3, $M.19, $M.34;



implementation ppp_init() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $p20: ref;
  var $i8: i32;
  var $i4: i32;
  var $i22: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} vslice_dummy_var_41 := printk.ref(.str.34);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i1 := register_pernet_device(ppp_net_ops);
    call {:si_unique_call 1393} {:cexpr "err"} boogie_si_record_i32($i1);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i5 := ldv_register_chrdev_158(108, .str.33, ppp_device_fops);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    call {:si_unique_call 1396} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p9 := ldv_create_class();
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $M.41 := $p9;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $p11 := $M.41;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $i13 := IS_ERR($p12);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1401} {:cexpr "tmp___1"} boogie_si_record_i8($i14);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $M.41;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} vslice_dummy_var_44 := device_create.ref.ref.i32.ref.ref($p20, $0.ref, 113246208, $0.ref, .str.33);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p16 := $M.41;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i18 := PTR_ERR($p17);
    call {:si_unique_call 1403} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    call {:si_unique_call 1404} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} ldv_unregister_chrdev_159(108, .str.33);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} unregister_pernet_device(ppp_net_ops);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i4 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i22 := $i4;
    goto $bb13;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_43 := printk.ref.i32(.str.36, $i5);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i8 := $i5;
    goto $bb7;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_42 := printk.ref.i32(.str.35, $i1);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb3;
}



const register_pernet_device: ref;

axiom register_pernet_device == $sub.ref(0, 533466);

procedure register_pernet_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_pernet_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1407} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1408} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_register_chrdev_158: ref;

axiom ldv_register_chrdev_158 == $sub.ref(0, 534498);

procedure ldv_register_chrdev_158($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.0, assertsPassed, $M.11, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.8, $M.16, $M.10, $M.35, $M.6, $M.31, $M.9, $M.36, $M.33, $M.2, $M.7, $M.18, $M.3, $M.19, $M.34;



implementation ldv_register_chrdev_158($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} {:cexpr "ldv_register_chrdev_158:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i3 := register_chrdev($i0, $p1, $p2);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    call {:si_unique_call 1411} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i4 := ldv_register_chrdev($i3, $i0, $p1, $p2);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    call {:si_unique_call 1413} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 535530);

procedure device_create.ref.ref.i32.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p5 := external_alloc();
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const register_chrdev: ref;

axiom register_chrdev == $sub.ref(0, 536562);

procedure register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, assertsPassed;



implementation register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} {:cexpr "register_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i3 := ldv_register_chrdev_76($i0, $p1, $p2);
    call {:si_unique_call 1418} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $i4 := ldv_linux_fs_char_dev_register_chrdev($i0);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    call {:si_unique_call 1420} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i5 := ldv_linux_usb_gadget_register_chrdev($i0);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    call {:si_unique_call 1422} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, $i5);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} ldv_assume($i7);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  SeqInstr_1063:
    assume !assertsPassed;
    return;
}



const ldv_register_chrdev: ref;

axiom ldv_register_chrdev == $sub.ref(0, 537594);

procedure ldv_register_chrdev($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.8, $M.16, $M.10, $M.35, $M.6, $M.31, $M.9, assertsPassed, $M.36, $M.33, $M.2, $M.7, $M.18, $M.3, $M.19, $M.34;



implementation ldv_register_chrdev($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} {:cexpr "ldv_register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1425} {:cexpr "ldv_register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i4 := ldv_undef_int();
    call {:si_unique_call 1427} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i0, 0);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_assume($i9);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} ldv_assume($i7);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_dispatch_register_8_2($p3);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1069:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_8_2: ref;

axiom ldv_dispatch_register_8_2 == $sub.ref(0, 538626);

procedure ldv_dispatch_register_8_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $CurrAddr, $M.8, $M.16, $M.10, $M.35, $M.6, $M.31, $M.9, assertsPassed, $M.36, $M.33, $M.2, $M.7, $M.18, $M.3, $M.19, $M.34;



implementation ldv_dispatch_register_8_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p1 := ldv_xmalloc(16);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} ldv_file_operations_file_operations_instance_0($p4);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_file_operations_instance_0: ref;

axiom ldv_file_operations_file_operations_instance_0 == $sub.ref(0, 539658);

procedure ldv_file_operations_file_operations_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.8, $M.16, $M.10, $M.35, $M.6, $M.31, $M.9, $CurrAddr, assertsPassed, $M.36, $M.33, $M.2, $M.7, $M.18, $M.3, $M.19, $M.34;



implementation ldv_file_operations_file_operations_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $p8 := ldv_xmalloc(504);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $p10 := ldv_xmalloc(976);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i12 := ldv_undef_int();
    call {:si_unique_call 1437} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i15 := ldv_undef_int();
    call {:si_unique_call 1439} {:cexpr "tmp___3"} boogie_si_record_i32($i15);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p9);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} ldv_free($p29);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p11);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_free($p30);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54 := ldv_file_operations_file_operations_instance_0_loop_$bb7($p7, $p9, $p11, $p14, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54);
    goto $bb7_last;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i19 := ldv_file_operations_instance_probe_0_12($p18, $p11, $p9);
    call {:si_unique_call 1443} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i19);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $i20 := ldv_filter_err_code($i19);
    call {:si_unique_call 1445} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i20);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $i21 := ldv_undef_int();
    call {:si_unique_call 1447} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i20, 0);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} ldv_assume($i26);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i27 := ldv_undef_int();
    call {:si_unique_call 1453} {:cexpr "tmp___3"} boogie_si_record_i32($i27);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 0);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ldv_assume($i24);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $p43, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54 := ldv_file_operations_file_operations_instance_0_loop_$bb10($p7, $p9, $p14, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $p43, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54);
    goto $bb10_last;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} ldv_stop();
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $i46 := ldv_undef_int();
    call {:si_unique_call 1462} {:cexpr "tmp___7"} boogie_si_record_i32($i46);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 1);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i46, 2);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i46, 3);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i46, 4);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ldv_stop();
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb40:
    assume $i50 == 1;
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} ldv_file_operations_instance_callback_0_5($u16, $p9, $u12, $u1);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb36:
    assume $i49 == 1;
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_file_operations_instance_callback_0_22($u15, $p9, $p14);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb32:
    assume $i48 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p51 := ldv_xmalloc(1);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p52 := ldv_xmalloc(8);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_file_operations_instance_callback_0_23($u14, $p9, $p51, $u12, $p53);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ldv_free($p51);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_free($p54);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1084:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i47 == 1;
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_file_operations_instance_callback_0_26($u13, $p9, $u1, $u12);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} ldv_file_operations_instance_release_0_2($p45, $p11, $p9);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $p35 := ldv_xmalloc(1);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p36 := ldv_xmalloc(8);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p14);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i39 := $ule.i64($i38, 2147479552);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ldv_assume($i40);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} ldv_file_operations_instance_write_0_4($p42, $p9, $p35, $u12, $p37);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} ldv_free($p35);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p37);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} ldv_free($p43);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} ldv_free($p6);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i31 := ldv_undef_int();
    call {:si_unique_call 1451} {:cexpr "tmp___4"} boogie_si_record_i32($i31);
    goto corral_source_split_6960;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_6943;
}



const ldv_file_operations_instance_probe_0_12: ref;

axiom ldv_file_operations_instance_probe_0_12 == $sub.ref(0, 540690);

procedure ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $i3 := ppp_open($p1, $p2);
    call {:si_unique_call 1474} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 541722);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1477} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_file_operations_instance_write_0_4: ref;

axiom ldv_file_operations_instance_write_0_4 == $sub.ref(0, 542754);

procedure ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.8, $M.16, $M.10, assertsPassed, $CurrAddr, $M.2, $M.18, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_45: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} {:cexpr "ldv_file_operations_instance_write_0_4:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} vslice_dummy_var_45 := ppp_write($p1, $p2, $i3, $p4);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_release_0_2: ref;

axiom ldv_file_operations_instance_release_0_2 == $sub.ref(0, 543786);

procedure ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.9, $M.33, assertsPassed, $M.2, $M.11, $M.18, $M.7, $M.3, $M.34, $M.10, $M.6, $M.19, $M.16, $CurrAddr;



implementation ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_46 := ppp_release($p1, $p2);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_26: ref;

axiom ldv_file_operations_instance_callback_0_26 == $sub.ref(0, 544818);

procedure ldv_file_operations_instance_callback_0_26($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.30, $M.32, $M.11, $M.35, $M.6, $M.31, $M.8, $M.9, $CurrAddr, $M.36, $M.33, $M.2, $M.7, assertsPassed, $M.18, $M.10, $M.3, $M.19, $M.34, $M.16;



implementation ldv_file_operations_instance_callback_0_26($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_47: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} {:cexpr "ldv_file_operations_instance_callback_0_26:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1482} {:cexpr "ldv_file_operations_instance_callback_0_26:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} vslice_dummy_var_47 := ppp_ioctl($p1, $i2, $i3);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_23: ref;

axiom ldv_file_operations_instance_callback_0_23 == $sub.ref(0, 545850);

procedure ldv_file_operations_instance_callback_0_23($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.11, $CurrAddr, assertsPassed;



implementation ldv_file_operations_instance_callback_0_23($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_48: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} {:cexpr "ldv_file_operations_instance_callback_0_23:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} vslice_dummy_var_48 := ppp_read($p1, $p2, $i3, $p4);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_22: ref;

axiom ldv_file_operations_instance_callback_0_22 == $sub.ref(0, 546882);

procedure ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_49 := ppp_poll($p1, $p2);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_5: ref;

axiom ldv_file_operations_instance_callback_0_5 == $sub.ref(0, 547914);

procedure ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var vslice_dummy_var_50: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} {:cexpr "ldv_file_operations_instance_callback_0_5:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1488} {:cexpr "ldv_file_operations_instance_callback_0_5:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_50 := noop_llseek($p1, $i2, $i3);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 548946);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_assume($i2);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_register_chrdev_76: ref;

axiom ldv_register_chrdev_76 == $sub.ref(0, 549978);

procedure ldv_register_chrdev_76($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_register_chrdev_76($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} {:cexpr "ldv_register_chrdev_76:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $i3 := __register_chrdev($i0, 0, 256, $p1, $p2);
    call {:si_unique_call 1494} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_linux_fs_char_dev_register_chrdev: ref;

axiom ldv_linux_fs_char_dev_register_chrdev == $sub.ref(0, 551010);

procedure ldv_linux_fs_char_dev_register_chrdev($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, assertsPassed;



implementation ldv_linux_fs_char_dev_register_chrdev($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} {:cexpr "ldv_linux_fs_char_dev_register_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i1 := ldv_undef_int_nonpositive();
    call {:si_unique_call 1497} {:cexpr "is_reg"} boogie_si_record_i32($i1);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i3 := $M.42;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_assert_linux_fs_char_dev__double_registration($i5);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1499} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(1);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i7 := ldv_undef_int();
    call {:si_unique_call 1501} {:cexpr "is_reg"} boogie_si_record_i32($i7);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_assume($i9);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb5;

  SeqInstr_1099:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_register_chrdev: ref;

axiom ldv_linux_usb_gadget_register_chrdev == $sub.ref(0, 552042);

procedure ldv_linux_usb_gadget_register_chrdev($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_register_chrdev($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} {:cexpr "ldv_linux_usb_gadget_register_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i1 := ldv_undef_int_nonpositive();
    call {:si_unique_call 1505} {:cexpr "is_reg"} boogie_si_record_i32($i1);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i5);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} $i7 := ldv_undef_int();
    call {:si_unique_call 1508} {:cexpr "is_reg"} boogie_si_record_i32($i7);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} ldv_assume($i9);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb5;

  SeqInstr_1102:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget == $sub.ref(0, 553074);

procedure ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} {:cexpr "ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1511} __VERIFIER_error();
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__double_registration: ref;

axiom ldv_assert_linux_fs_char_dev__double_registration == $sub.ref(0, 554106);

procedure ldv_assert_linux_fs_char_dev__double_registration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__double_registration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} {:cexpr "ldv_assert_linux_fs_char_dev__double_registration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1513} __VERIFIER_error();
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __register_chrdev: ref;

axiom __register_chrdev == $sub.ref(0, 555138);

procedure __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1514} {:cexpr "__register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1515} {:cexpr "__register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1516} {:cexpr "__register_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1517} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1518} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_9_9_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_9_9_4 == $sub.ref(0, 556170);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_9_9_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_9_9_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_9_9_5: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_9_9_5 == $sub.ref(0, 557202);

procedure ldv_dispatch_register_dummy_resourceless_instance_9_9_5();
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.3, $M.19, assertsPassed;



implementation ldv_dispatch_register_dummy_resourceless_instance_9_9_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p0 := ldv_xmalloc(4);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_struct_pernet_operations_dummy_resourceless_instance_2($p2);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;
}



const ldv_struct_pernet_operations_dummy_resourceless_instance_2: ref;

axiom ldv_struct_pernet_operations_dummy_resourceless_instance_2 == $sub.ref(0, 558234);

procedure ldv_struct_pernet_operations_dummy_resourceless_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.19, assertsPassed;



implementation ldv_struct_pernet_operations_dummy_resourceless_instance_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4 := ldv_struct_pernet_operations_dummy_resourceless_instance_2_loop_$bb1($i1, $i2, $i3, $i4);
    goto $bb1_last;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} ldv_stop();
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_dummy_resourceless_instance_callback_2_3($u19, $u18);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_dummy_resourceless_instance_callback_2_7($u17, $u18);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i1 := ldv_undef_int();
    call {:si_unique_call 1522} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7131;
}



const ldv_dummy_resourceless_instance_callback_2_7: ref;

axiom ldv_dummy_resourceless_instance_callback_2_7 == $sub.ref(0, 559266);

procedure ldv_dummy_resourceless_instance_callback_2_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.19, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_2_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} vslice_dummy_var_51 := ppp_init_net($p1);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_2_3: ref;

axiom ldv_dummy_resourceless_instance_callback_2_3 == $sub.ref(0, 560298);

procedure ldv_dummy_resourceless_instance_callback_2_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.19, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_2_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} ppp_exit_net($p1);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;
}



const ldv_entry_EMGentry_9: ref;

axiom ldv_entry_EMGentry_9 == $sub.ref(0, 561330);

procedure ldv_entry_EMGentry_9($p0: ref);
  free requires assertsPassed;
  modifies $M.41, $M.39, $M.42, $CurrAddr, $M.0, assertsPassed, $M.3, $M.19, $M.11, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.8, $M.16, $M.10, $M.35, $M.6, $M.31, $M.9, $M.36, $M.33, $M.2, $M.7, $M.18, $M.34;



implementation ldv_entry_EMGentry_9($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} $i1 := ldv_EMGentry_init_ppp_init_9_9($u20);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    call {:si_unique_call 1529} {:cexpr "ldv_9_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i2 := ldv_ldv_post_init_236($i1);
    call {:si_unique_call 1531} {:cexpr "ldv_9_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $i3 := ldv_undef_int();
    call {:si_unique_call 1533} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} ldv_assume($i8);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} $i9 := ldv_undef_int();
    call {:si_unique_call 1539} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_EMGentry_exit_ppp_cleanup_9_2($u21);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} ldv_ldv_check_final_state_238();
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_stop();
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} ldv_dispatch_register_dummy_resourceless_instance_9_9_5();
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} ldv_dispatch_deregister_dummy_resourceless_instance_9_9_4();
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ldv_assume($i6);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} ldv_ldv_check_final_state_237();
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_stop();
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_236: ref;

axiom ldv_ldv_post_init_236 == $sub.ref(0, 562362);

procedure ldv_ldv_post_init_236($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ldv_post_init_236($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} {:cexpr "ldv_ldv_post_init_236:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i1 := ldv_post_init($i0);
    call {:si_unique_call 1549} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_237: ref;

axiom ldv_ldv_check_final_state_237 == $sub.ref(0, 563394);

procedure ldv_ldv_check_final_state_237();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_237()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_238: ref;

axiom ldv_ldv_check_final_state_238 == $sub.ref(0, 564426);

procedure ldv_ldv_check_final_state_238();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_238()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  SeqInstr_1255:
    assume !assertsPassed;
    return;

  SeqInstr_1252:
    assume !assertsPassed;
    return;

  SeqInstr_1249:
    assume !assertsPassed;
    return;

  SeqInstr_1246:
    assume !assertsPassed;
    return;

  SeqInstr_1243:
    assume !assertsPassed;
    return;

  SeqInstr_1240:
    assume !assertsPassed;
    return;

  SeqInstr_1237:
    assume !assertsPassed;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;

  SeqInstr_1225:
    assume !assertsPassed;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  SeqInstr_1201:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 565458);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1261:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 566490);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i0 := $M.44;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1264:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 567522);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i0 := $M.45;
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 568554);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i0 := $M.46;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1270:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 569586);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 570618);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i0 := $M.42;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 571650);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i0 := $M.47;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 572682);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i0 := $M.11;
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i3 := $M.6;
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1285:
    assume !assertsPassed;
    return;

  SeqInstr_1282:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 573714);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i0 := $M.7;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1288:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 574746);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i0 := $M.48;
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1291:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 575778);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i0 := $M.49;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1294:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 576810);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i0 := $M.3;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1297:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 577842);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i0 := $M.50;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1300:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 578874);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i8: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i0 := $M.34;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i3 := $M.34;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i6 := $M.19;
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i9 := $M.19;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i8);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} ldv_assert_linux_lib_idr__more_at_exit($i11);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1306:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  SeqInstr_1303:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 579906);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i0 := $M.51;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1309:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 580938);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i0 := $M.52;
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1312:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 581970);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i0 := $M.53;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1315:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 583002);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i0 := $M.54;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1318:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 584034);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1321:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 585066);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i0 := $M.55;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1324:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 586098);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1613} __VERIFIER_error();
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1327:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 587130);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1615} __VERIFIER_error();
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 588162);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1617} __VERIFIER_error();
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 589194);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1619} __VERIFIER_error();
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 590226);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1621} __VERIFIER_error();
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1339:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 591258);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1623} __VERIFIER_error();
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 592290);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1625} __VERIFIER_error();
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 593322);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} __VERIFIER_error();
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 594354);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} __VERIFIER_error();
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 595386);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1631} __VERIFIER_error();
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 596418);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1633} __VERIFIER_error();
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 597450);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} __VERIFIER_error();
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 598482);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1637} __VERIFIER_error();
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 599514);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1639} __VERIFIER_error();
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1366:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 600546);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} __VERIFIER_error();
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 601578);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} __VERIFIER_error();
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 602610);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1645} __VERIFIER_error();
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1375:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 603642);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1647} __VERIFIER_error();
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1378:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 604674);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1649} __VERIFIER_error();
    goto SeqInstr_1381, SeqInstr_1382;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  SeqInstr_1383:
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1381:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 605706);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1651} __VERIFIER_error();
    goto SeqInstr_1384, SeqInstr_1385;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  SeqInstr_1386:
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1384:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 606738);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1653} __VERIFIER_error();
    goto SeqInstr_1387, SeqInstr_1388;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  SeqInstr_1389:
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1387:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 607770);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 608802);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    return;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 609834);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1658} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 610866);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.59, $M.19, $M.34, $M.8, $M.9, $M.10, $M.18, $M.2, $M.5, $M.45, $M.44, $M.0, $M.38, $M.41, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.17, $M.1, $M.12, $M.36, $M.33, $M.55, $M.40, $M.54, $M.53, $M.52, $M.51, $M.3, $M.49, $M.48, $M.50, $M.7, $M.6, $M.11, $M.47, $M.42, $M.39, $M.46, $M.43, $M.4, $M.122, $CurrAddr, assertsPassed, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.16, $M.35, $M.31;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 1659} $initialize();
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} ldv_ldv_initialize_239();
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_entry_EMGentry_9($0.ref);
    goto SeqInstr_1390, SeqInstr_1391;

  SeqInstr_1391:
    assume assertsPassed;
    goto SeqInstr_1392;

  SeqInstr_1392:
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1390:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_239: ref;

axiom ldv_ldv_initialize_239 == $sub.ref(0, 611898);

procedure ldv_ldv_initialize_239();
  free requires assertsPassed;



implementation ldv_ldv_initialize_239()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 612930);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} ldv_assume($i2);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 613962);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1665} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 1} true;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 614994);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 616026);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 617058);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1393, SeqInstr_1394;

  SeqInstr_1394:
    assume assertsPassed;
    goto SeqInstr_1395;

  SeqInstr_1395:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1393:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 618090);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 619122);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 620154);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 621186);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 622218);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 623250);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 624282);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 625314);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 626346);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 627378);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1666} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1667} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1668} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1669} __VERIFIER_assume($i4);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 628410);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 629442);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 630474);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 631506);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 632538);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1670} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1671} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1672} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1673} __VERIFIER_assume($i4);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 633570);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 634602);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 635634);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 636666);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 637698);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1674} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1675} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1676} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1677} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1678} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1679} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1682} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1683} __VERIFIER_assume($i7);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1684} __VERIFIER_assume($i11);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 638730);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 639762);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 640794);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 641826);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 642858);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 643890);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 644922);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 645954);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 646986);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1685} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1686} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1687} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1688} __VERIFIER_assume($i10);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 648018);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1689} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1690} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1691} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 649050);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 650082);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 651114);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1694} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1695} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 652146);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 653178);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 654210);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1697} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1698} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1699} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $p6 := malloc($i5);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 1701} cmdloc_dummy_var_8 := $memset.i8(cmdloc_dummy_var_7, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 655242);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 656274);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.59, $M.19, $M.34, $M.8, $M.9, $M.10, $M.18, $M.2, $M.5, $M.45, $M.44, $M.0, $M.38, $M.41, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.17, $M.1, $M.12, $M.36, $M.33, $M.55, $M.40, $M.54, $M.53, $M.52, $M.51, $M.3, $M.49, $M.48, $M.50, $M.7, $M.6, $M.11, $M.47, $M.42, $M.39, $M.46, $M.43, $M.4, $M.122;



implementation __SMACK_static_init()
{

  $bb0:
    $M.59 := $store.i8($M.59, __kstrtab_ppp_register_net_channel, 112);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(1, 1)), 112);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(2, 1)), 112);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(3, 1)), 95);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(4, 1)), 114);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(5, 1)), 101);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(6, 1)), 103);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(7, 1)), 105);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(8, 1)), 115);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(9, 1)), 116);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(10, 1)), 101);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(11, 1)), 114);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(13, 1)), 110);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(15, 1)), 116);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(16, 1)), 95);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(17, 1)), 99);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(18, 1)), 104);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(19, 1)), 97);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(20, 1)), 110);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(21, 1)), 110);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(23, 1)), 108);
    $M.59 := $store.i8($M.59, $add.ref($add.ref(__kstrtab_ppp_register_net_channel, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.19 := 0;
    call {:si_unique_call 1702} {:cexpr "ldv_linux_lib_idr_idr_units_idr_of_ppp_net"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1703} {:cexpr "ldv_linux_lib_idr_idr_p"} boogie_si_record_i32(0);
    call {:si_unique_call 1704} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    $M.8 := 1;
    call {:si_unique_call 1705} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_wlock_of_ppp"} boogie_si_record_i32(1);
    call {:si_unique_call 1706} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_tx_global_lock_of_net_device"} boogie_si_record_i32(1);
    call {:si_unique_call 1707} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_slock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 1708} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    $M.9 := 1;
    call {:si_unique_call 1709} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_rlock_of_ppp"} boogie_si_record_i32(1);
    call {:si_unique_call 1710} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 1711} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 1712} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 1713} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 1714} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    $M.10 := 1;
    call {:si_unique_call 1715} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_downl_of_channel"} boogie_si_record_i32(1);
    $M.18 := 1;
    call {:si_unique_call 1716} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_compressor_list_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 1717} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.2 := 1;
    call {:si_unique_call 1718} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_all_channels_lock_of_ppp_net"} boogie_si_record_i32(1);
    call {:si_unique_call 1719} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_addr_list_lock_of_net_device"} boogie_si_record_i32(1);
    call {:si_unique_call 1720} {:cexpr "ldv_linux_kernel_locking_spinlock_spin__xmit_lock_of_netdev_queue"} boogie_si_record_i32(1);
    $M.5 := 0;
    call {:si_unique_call 1721} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.45 := 0;
    call {:si_unique_call 1722} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1723} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, ppp_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.47);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(ppp_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(ppp_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), ppp_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(ppp_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.38 := $store.i32($M.38, npindex_to_proto, 33);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(npindex_to_proto, $mul.ref(0, 24)), $mul.ref(1, 4)), 87);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(npindex_to_proto, $mul.ref(0, 24)), $mul.ref(2, 4)), 43);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(npindex_to_proto, $mul.ref(0, 24)), $mul.ref(3, 4)), 41);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(npindex_to_proto, $mul.ref(0, 24)), $mul.ref(4, 4)), 641);
    $M.38 := $store.i32($M.38, $add.ref($add.ref(npindex_to_proto, $mul.ref(0, 24)), $mul.ref(5, 4)), 643);
    $M.0 := $store.i8($M.0, ppp_tx_busylock, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_tx_busylock, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_tx_busylock, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_tx_busylock, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_tx_busylock, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_tx_busylock, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_tx_busylock, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(ppp_tx_busylock, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, ppp_netdev_ops, ppp_dev_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(32, 1)), ppp_start_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(80, 1)), ppp_net_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(120, 1)), ppp_get_stats64);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_netdev_ops, $mul.ref(0, 504)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, ppp_device_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(8, 1)), noop_llseek);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(16, 1)), ppp_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(24, 1)), ppp_write);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(72, 1)), ppp_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(80, 1)), ppp_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(112, 1)), ppp_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(128, 1)), ppp_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(ppp_device_fops, $mul.ref(0, 240)), $mul.ref(232, 1)), $0.ref);
    $M.41 := $0.ref;
    $M.79 := $store.i8($M.79, __kstrtab_ppp_unregister_compressor, 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(1, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(2, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(4, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(5, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(6, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(7, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(8, 1)), 103);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(9, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(10, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(11, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(12, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(13, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(15, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(17, 1)), 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(18, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(19, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(20, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(21, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(22, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(23, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(__kstrtab_ppp_unregister_compressor, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.80 := $store.i8($M.80, __kstrtab_ppp_register_compressor, 112);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(1, 1)), 112);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(2, 1)), 112);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(4, 1)), 114);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(6, 1)), 103);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(8, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(9, 1)), 116);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(10, 1)), 101);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(11, 1)), 114);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(13, 1)), 99);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(14, 1)), 111);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(15, 1)), 109);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(16, 1)), 112);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(17, 1)), 114);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(19, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(20, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(21, 1)), 111);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(__kstrtab_ppp_register_compressor, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.81 := $store.i8($M.81, __kstrtab_ppp_output_wakeup, 112);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(1, 1)), 112);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(2, 1)), 112);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(4, 1)), 111);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(5, 1)), 117);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(6, 1)), 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(7, 1)), 112);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(8, 1)), 117);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(11, 1)), 119);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(12, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(13, 1)), 107);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(15, 1)), 117);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(16, 1)), 112);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_ppp_output_wakeup, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.82 := $store.i8($M.82, __kstrtab_ppp_input_error, 112);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(1, 1)), 112);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(4, 1)), 105);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(6, 1)), 112);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(7, 1)), 117);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(12, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(13, 1)), 111);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(14, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_ppp_input_error, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.83 := $store.i8($M.83, __kstrtab_ppp_input, 112);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(1, 1)), 112);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(2, 1)), 112);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(4, 1)), 105);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(5, 1)), 110);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(6, 1)), 112);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(7, 1)), 117);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(__kstrtab_ppp_input, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.84 := $store.i8($M.84, __kstrtab_ppp_dev_name, 112);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(1, 1)), 112);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(2, 1)), 112);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(4, 1)), 100);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(6, 1)), 118);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(9, 1)), 97);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(10, 1)), 109);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_ppp_dev_name, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.85 := $store.i8($M.85, __kstrtab_ppp_unit_number, 112);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(1, 1)), 112);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(2, 1)), 112);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(4, 1)), 117);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(9, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(10, 1)), 117);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(12, 1)), 98);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(14, 1)), 114);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_ppp_unit_number, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.86 := $store.i8($M.86, __kstrtab_ppp_channel_index, 112);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(1, 1)), 112);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(2, 1)), 112);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(4, 1)), 99);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(5, 1)), 104);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(6, 1)), 97);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(7, 1)), 110);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(10, 1)), 108);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(12, 1)), 105);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(13, 1)), 110);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(16, 1)), 120);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_ppp_channel_index, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.87 := $store.i8($M.87, __kstrtab_ppp_unregister_channel, 112);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(1, 1)), 112);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(2, 1)), 112);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(4, 1)), 117);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(5, 1)), 110);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(6, 1)), 114);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(8, 1)), 103);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(9, 1)), 105);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(10, 1)), 115);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(12, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(13, 1)), 114);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(16, 1)), 104);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(17, 1)), 97);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(19, 1)), 110);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(21, 1)), 108);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_ppp_unregister_channel, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.88 := $store.i8($M.88, __kstrtab_ppp_register_channel, 112);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(1, 1)), 112);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(2, 1)), 112);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(4, 1)), 114);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(6, 1)), 103);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(7, 1)), 105);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(8, 1)), 115);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(9, 1)), 116);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(13, 1)), 99);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(14, 1)), 104);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(15, 1)), 97);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(16, 1)), 110);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(17, 1)), 110);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(19, 1)), 108);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_ppp_register_channel, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, ppp_unit_count, 0);
    $M.0 := $store.ref($M.0, compressor_list, compressor_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(compressor_list, $mul.ref(0, 16)), $mul.ref(8, 1)), compressor_list);
    $M.89 := $store.i32($M.89, compressor_list_lock, 0);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.89 := $store.ref($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.27);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.89 := $store.i64($M.89, $add.ref($add.ref($add.ref($add.ref($add.ref(compressor_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.17 := 1;
    call {:si_unique_call 1724} {:cexpr "mp_protocol_compress"} boogie_si_record_i8(1);
    $M.0 := $store.i32($M.0, channel_count, 0);
    $M.1 := 0;
    call {:si_unique_call 1725} {:cexpr "ppp_net_id"} boogie_si_record_i32(0);
    $M.12 := $store.i32($M.12, npindex_to_ethertype, 2048);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(npindex_to_ethertype, $mul.ref(0, 24)), $mul.ref(1, 4)), 34525);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(npindex_to_ethertype, $mul.ref(0, 24)), $mul.ref(2, 4)), 33079);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(npindex_to_ethertype, $mul.ref(0, 24)), $mul.ref(3, 4)), 16);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(npindex_to_ethertype, $mul.ref(0, 24)), $mul.ref(4, 4)), 34887);
    $M.12 := $store.i32($M.12, $add.ref($add.ref(npindex_to_ethertype, $mul.ref(0, 24)), $mul.ref(5, 4)), 34888);
    $M.36 := 0;
    call {:si_unique_call 1726} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_ppp_mutex"} boogie_si_record_i8(0);
    call {:si_unique_call 1727} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    call {:si_unique_call 1728} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 1729} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    $M.33 := 0;
    call {:si_unique_call 1730} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_all_ppp_mutex_of_ppp_net"} boogie_si_record_i8(0);
    call {:si_unique_call 1731} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1732} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1733} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1734} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1735} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1736} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1737} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    call {:si_unique_call 1738} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1739} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.3 := 0;
    call {:si_unique_call 1740} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1741} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1742} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1743} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.7 := 1;
    call {:si_unique_call 1744} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.6 := 1;
    call {:si_unique_call 1745} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.11 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.47 := 0;
    call {:si_unique_call 1747} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1748} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1749} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1750} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1751} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.4 := 1;
    call {:si_unique_call 1752} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.122 := $store.i8($M.122, .str.45, 112);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(2, 1)), 112);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(.str.45, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(2, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(3, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    call {:si_unique_call 1753} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 657306);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 658338);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(ppp_dev_name, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1754} $p2 := ppp_dev_name($p1);
    goto SeqInstr_1396, SeqInstr_1397;

  SeqInstr_1397:
    assume assertsPassed;
    goto SeqInstr_1398;

  SeqInstr_1398:
    $r := $p2;
    return;

  SeqInstr_1396:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 659370);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.11, $M.18, $M.10, $M.6, assertsPassed, $M.3, $M.19, $M.8, $M.9, $M.16, $CurrAddr, $M.7, $M.33, $M.34;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(ppp_setup, $p0);
    assume {:branchcond $i10} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(ppp_exit_net, $p0);
    assume {:branchcond $i9} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(ppp_unregister_compressor, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(ppp_output_wakeup, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(ppp_unregister_channel, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1755} ppp_unregister_channel($p1);
    goto SeqInstr_1399, SeqInstr_1400;

  SeqInstr_1400:
    assume assertsPassed;
    goto SeqInstr_1401;

  SeqInstr_1401:
    return;

  SeqInstr_1399:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1756} ppp_output_wakeup($p2);
    goto SeqInstr_1402, SeqInstr_1403;

  SeqInstr_1403:
    assume assertsPassed;
    goto SeqInstr_1404;

  SeqInstr_1404:
    return;

  SeqInstr_1402:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1757} ppp_unregister_compressor($p3);
    goto SeqInstr_1405, SeqInstr_1406;

  SeqInstr_1406:
    assume assertsPassed;
    goto SeqInstr_1407;

  SeqInstr_1407:
    return;

  SeqInstr_1405:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1758} ppp_exit_net($p4);
    goto SeqInstr_1408, SeqInstr_1409;

  SeqInstr_1409:
    assume assertsPassed;
    goto SeqInstr_1410;

  SeqInstr_1410:
    return;

  SeqInstr_1408:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1759} ppp_setup($p5);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 660402);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.16, $CurrAddr, $M.2, $M.9, assertsPassed, $M.10, $M.33, $M.11, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i19 := $eq.ref(ppp_start_xmit, $p0);
    assume {:branchcond $i19} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i19 == 1);
    $i18 := $eq.ref(ppp_release, $p0);
    assume {:branchcond $i18} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i18 == 1);
    $i17 := $eq.ref(ppp_open, $p0);
    assume {:branchcond $i17} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i17 == 1);
    $i16 := $eq.ref(ppp_poll, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i16 == 1);
    $i15 := $eq.ref(ppp_register_net_channel, $p0);
    assume {:branchcond $i15} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1760} $i3 := ppp_register_net_channel($p1, $p2);
    goto SeqInstr_1411, SeqInstr_1412;

  SeqInstr_1412:
    assume assertsPassed;
    goto SeqInstr_1413;

  SeqInstr_1413:
    $r := $i3;
    return;

  SeqInstr_1411:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1761} $i6 := ppp_poll($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1762} $i9 := ppp_open($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i18 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1763} $i12 := ppp_release($p10, $p11);
    goto SeqInstr_1414, SeqInstr_1415;

  SeqInstr_1415:
    assume assertsPassed;
    goto SeqInstr_1416;

  SeqInstr_1416:
    $r := $i12;
    return;

  SeqInstr_1414:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1764} $i14 := ppp_start_xmit(arg, $p13);
    goto SeqInstr_1417, SeqInstr_1418;

  SeqInstr_1418:
    assume assertsPassed;
    goto SeqInstr_1419;

  SeqInstr_1419:
    $r := $i14;
    return;

  SeqInstr_1417:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 661434);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 662466);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 663498);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 664530);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32, arg5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32, arg5: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 665562);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $M.16, $CurrAddr, $M.2, $M.9, assertsPassed, $M.10, $M.33, $M.11, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i20 := $eq.ref(ppp_start_xmit, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i20 == 1);
    $i19 := $eq.ref(ppp_release, $p0);
    assume {:branchcond $i19} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i19 == 1);
    $i18 := $eq.ref(ppp_open, $p0);
    assume {:branchcond $i18} true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i18 == 1);
    $i17 := $eq.ref(ppp_poll, $p0);
    assume {:branchcond $i17} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i17 == 1);
    $i16 := $eq.ref(ppp_register_net_channel, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume false;
    return;

  $bb2:
    assume $i16 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1765} $i3 := ppp_register_net_channel($p1, $p2);
    goto SeqInstr_1420, SeqInstr_1421;

  SeqInstr_1421:
    assume assertsPassed;
    goto SeqInstr_1422;

  SeqInstr_1422:
    $r := $i3;
    return;

  SeqInstr_1420:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i17 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1766} $i6 := ppp_poll($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1767} $i9 := ppp_open($p7, $p8);
    $r := $i9;
    return;

  $bb5:
    assume $i19 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1768} $i12 := ppp_release($p10, $p11);
    goto SeqInstr_1423, SeqInstr_1424;

  SeqInstr_1424:
    assume assertsPassed;
    goto SeqInstr_1425;

  SeqInstr_1425:
    $r := $i12;
    return;

  SeqInstr_1423:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i20 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1769} $i15 := ppp_start_xmit($p13, $p14);
    goto SeqInstr_1426, SeqInstr_1427;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  SeqInstr_1428:
    $r := $i15;
    return;

  SeqInstr_1426:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 666594);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 667626);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 668658);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 669690);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 670722);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 671754);

procedure devirtbounce.14(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 672786);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $CurrAddr, $M.2, $M.18, $M.3, $M.19, assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i17 := $eq.ref(ppp_dev_init, $p0);
    assume {:branchcond $i17} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i17 == 1);
    $i16 := $eq.ref(ppp_init_net, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i16 == 1);
    $i15 := $eq.ref(ppp_register_compressor, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(ppp_unit_number, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(ppp_channel_index, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(ppp_register_channel, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1770} $i2 := ppp_register_channel($p1);
    goto SeqInstr_1429, SeqInstr_1430;

  SeqInstr_1430:
    assume assertsPassed;
    goto SeqInstr_1431;

  SeqInstr_1431:
    $r := $i2;
    return;

  SeqInstr_1429:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1771} $i4 := ppp_channel_index($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i14 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1772} $i6 := ppp_unit_number($p5);
    goto SeqInstr_1432, SeqInstr_1433;

  SeqInstr_1433:
    assume assertsPassed;
    goto SeqInstr_1434;

  SeqInstr_1434:
    $r := $i6;
    return;

  SeqInstr_1432:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1773} $i8 := ppp_register_compressor($p7);
    goto SeqInstr_1435, SeqInstr_1436;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  SeqInstr_1437:
    $r := $i8;
    return;

  SeqInstr_1435:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1774} $i10 := ppp_init_net($p9);
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    $r := $i10;
    return;

  SeqInstr_1438:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    call {:si_unique_call 1775} $i11 := ppp_dev_init(arg);
    $r := $i11;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 673818);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 674850);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.11, $M.0, assertsPassed, $M.9, $M.8, $M.16, $M.2, $M.18, $CurrAddr, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(ppp_input, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1776} ppp_input($p1, $p2);
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    return;

  SeqInstr_1441:
    assume !assertsPassed;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 675882);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 676914);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

const $u1: i32;

const $u10: ref;

const $u11: ref;

const $u12: i64;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.59, $M.19, $M.34, $M.8, $M.9, $M.10, $M.18, $M.2, $M.5, $M.45, $M.44, $M.0, $M.38, $M.41, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.17, $M.1, $M.12, $M.36, $M.33, $M.55, $M.40, $M.54, $M.53, $M.52, $M.51, $M.3, $M.49, $M.48, $M.50, $M.7, $M.6, $M.11, $M.47, $M.42, $M.39, $M.46, $M.43, $M.4, $M.122, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1777} __SMACK_static_init();
    call {:si_unique_call 1778} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.59, $M.19, $M.34, $M.8, $M.9, $M.10, $M.18, $M.2, $M.5, $M.45, $M.44, $M.0, $M.38, $M.41, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.17, $M.1, $M.12, $M.36, $M.33, $M.55, $M.40, $M.54, $M.53, $M.52, $M.51, $M.3, $M.49, $M.48, $M.50, $M.7, $M.6, $M.11, $M.47, $M.42, $M.39, $M.46, $M.43, $M.4, $M.122, $CurrAddr, $M.29, $M.30, $M.32, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.16, $M.35, $M.31;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation ppp_input_loop_$bb22(in_$p4: ref, in_$p43: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$p46: ref, in_$i51: i64, in_$i52: i1) returns (out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$p46: ref, out_$i51: i64, out_$i52: i1)
{

  entry:
    out_$i47, out_$i48, out_$p50, out_$p46, out_$i51, out_$i52 := in_$i47, in_$i48, in_$p50, in_$p46, in_$i51, in_$i52;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1005;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i48 == 1;
    goto $bb24_dummy;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$i48 := $ugt.i32(out_$i47, 32);
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, in_$p43);
    goto corral_source_split_1011;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} kfree_skb(out_$p46);
    goto corral_source_split_1010;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume out_$i52 == 1;
    goto corral_source_split_1016;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} out_$p46 := skb_dequeue(out_$p50);
    goto corral_source_split_1006;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i47, out_$i48, out_$p50, out_$p46, out_$i51, out_$i52 := ppp_input_loop_$bb22(in_$p4, in_$p43, out_$i47, out_$i48, out_$p50, out_$p46, out_$i51, out_$i52);
    return;

  exit:
    return;
}



procedure ppp_input_loop_$bb22(in_$p4: ref, in_$p43: ref, in_$i47: i32, in_$i48: i1, in_$p50: ref, in_$p46: ref, in_$i51: i64, in_$i52: i1) returns (out_$i47: i32, out_$i48: i1, out_$p50: ref, out_$p46: ref, out_$i51: i64, out_$i52: i1);



implementation ppp_receive_mp_frame_loop_$bb50(in_$p0: ref, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$p171: ref, in_$p173: ref, in_$i174: i64, in_$i175: i64, in_$p176: ref, in_$p177: ref, in_$p179: ref, in_$p180: ref, in_$i181: i64, in_$i182: i1, in_$p167: ref) returns (out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$p171: ref, out_$p173: ref, out_$i174: i64, out_$i175: i64, out_$p176: ref, out_$p177: ref, out_$p179: ref, out_$p180: ref, out_$i181: i64, out_$i182: i1, out_$p167: ref)
{

  entry:
    out_$i168, out_$i169, out_$p170, out_$p171, out_$p173, out_$i174, out_$i175, out_$p176, out_$p177, out_$p179, out_$p180, out_$i181, out_$i182, out_$p167 := in_$i168, in_$i169, in_$p170, in_$p171, in_$p173, in_$i174, in_$i175, in_$p176, in_$p177, in_$p179, in_$p180, in_$i181, in_$i182, in_$p167;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  $bb55:
    assume out_$i182 == 1;
    assume {:verifier.code 0} true;
    out_$p167 := out_$p180;
    goto $bb55_dummy;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    out_$i182 := $ne.i64(out_$i181, 0);
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    out_$i181 := $p2i.ref.i64(out_$p180);
    goto corral_source_split_1350;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} out_$p180 := ppp_mp_reconstruct(in_$p0);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} ppp_receive_error(in_$p0);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_264:
    goto corral_source_split_1335;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} ppp_receive_nonmp_frame(in_$p0, out_$p167);
    goto SeqInstr_263;

  $bb52:
    assume out_$i169 == 1;
    goto corral_source_split_1334;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i168, 0);
    goto corral_source_split_1332;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} out_$i168 := pskb_may_pull(out_$p167, 2);
    call {:si_unique_call 306} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i168);
    goto corral_source_split_1331;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} kfree_skb(out_$p167);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p179, out_$i175);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref($add.ref(out_$p177, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_1345;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$p177 := $load.ref($M.0, out_$p176);
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1343;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    out_$i175 := $add.i64(out_$i174, 1);
    goto corral_source_split_1342;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    out_$i174 := $load.i64($M.0, out_$p173);
    goto corral_source_split_1341;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref($add.ref(out_$p171, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_1340;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.0, out_$p170);
    goto corral_source_split_1339;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_1338;

  $bb53:
    assume !(out_$i169 == 1);
    goto corral_source_split_1337;

  $bb55_dummy:
    call {:si_unique_call 1} out_$i168, out_$i169, out_$p170, out_$p171, out_$p173, out_$i174, out_$i175, out_$p176, out_$p177, out_$p179, out_$p180, out_$i181, out_$i182, out_$p167 := ppp_receive_mp_frame_loop_$bb50(in_$p0, out_$i168, out_$i169, out_$p170, out_$p171, out_$p173, out_$i174, out_$i175, out_$p176, out_$p177, out_$p179, out_$p180, out_$i181, out_$i182, out_$p167);
    return;

  exit:
    return;
}



procedure ppp_receive_mp_frame_loop_$bb50(in_$p0: ref, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$p171: ref, in_$p173: ref, in_$i174: i64, in_$i175: i64, in_$p176: ref, in_$p177: ref, in_$p179: ref, in_$p180: ref, in_$i181: i64, in_$i182: i1, in_$p167: ref) returns (out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$p171: ref, out_$p173: ref, out_$i174: i64, out_$i175: i64, out_$p176: ref, out_$p177: ref, out_$p179: ref, out_$p180: ref, out_$i181: i64, out_$i182: i1, out_$p167: ref);
  modifies $M.0, $M.8, $M.16, $M.2, $M.11, $M.18, $CurrAddr, $M.9, assertsPassed, $M.10, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_receive_mp_frame_loop_$bb30(in_$i120: i64, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$i139: i1, in_$p123: ref, in_$i124: i32, in_$i140: i32) returns (out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$i139: i1, out_$p123: ref, out_$i124: i32, out_$i140: i32)
{

  entry:
    out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p123, out_$i124, out_$i140 := in_$p125, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$p133, in_$p134, in_$p135, in_$p136, in_$p137, in_$i138, in_$i139, in_$p123, in_$i124, in_$i140;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  $bb35:
    assume out_$i139 == 1;
    assume {:verifier.code 0} true;
    out_$p123, out_$i124 := out_$p136, out_$i131;
    goto $bb35_dummy;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    out_$i140 := out_$i131;
    assume true;
    goto $bb35;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    out_$i139 := $ne.i64(out_$i138, in_$i120);
    goto corral_source_split_1285;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    out_$i138 := $p2i.ref.i64(out_$p137);
    goto corral_source_split_1284;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(out_$p135, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(576, 1));
    goto corral_source_split_1283;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref(out_$p135, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_1282;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p134);
    goto corral_source_split_1281;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_1280;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref($add.ref(out_$p123, $mul.ref(0, 680)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_1279;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1278;

  $bb33:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := out_$i124;
    goto $bb34;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    out_$i131 := out_$i130;
    goto $bb34;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    call {:si_unique_call 299} {:cexpr "seq"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_1276;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p123, $mul.ref(0, 680)), $mul.ref(668, 1));
    goto corral_source_split_1275;

  $bb32:
    assume out_$i128 == 1;
    goto corral_source_split_1274;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i127, 0);
    goto corral_source_split_1272;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    out_$i127 := $sub.i32(out_$i126, out_$i124);
    goto corral_source_split_1271;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i32($M.0, out_$p125);
    goto corral_source_split_1270;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(out_$p123, $mul.ref(0, 680)), $mul.ref(668, 1));
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p123, out_$i124, out_$i140 := ppp_receive_mp_frame_loop_$bb30(in_$i120, out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$i139, out_$p123, out_$i124, out_$i140);
    return;

  exit:
    return;
}



procedure ppp_receive_mp_frame_loop_$bb30(in_$i120: i64, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$i139: i1, in_$p123: ref, in_$i124: i32, in_$i140: i32) returns (out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$i139: i1, out_$p123: ref, out_$i124: i32, out_$i140: i32);



implementation ppp_receive_nonmp_frame_loop_$bb70(in_$p0: ref, in_$p129: ref, in_$i133: i32, in_$i134: i1, in_$p136: ref, in_$p132: ref, in_$i137: i64, in_$i138: i1) returns (out_$i133: i32, out_$i134: i1, out_$p136: ref, out_$p132: ref, out_$i137: i64, out_$i138: i1)
{

  entry:
    out_$i133, out_$i134, out_$p136, out_$p132, out_$i137, out_$i138 := in_$i133, in_$i134, in_$p136, in_$p132, in_$i137, in_$i138;
    goto $bb70, exit;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_1556;

  $bb72:
    assume {:verifier.code 0} true;
    assume out_$i134 == 1;
    goto $bb72_dummy;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i134 := $ugt.i32(out_$i133, 32);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, in_$p129);
    goto corral_source_split_1562;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} kfree_skb(out_$p132);
    goto corral_source_split_1561;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb74:
    assume out_$i138 == 1;
    goto corral_source_split_1567;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i64(out_$i137, 0);
    goto corral_source_split_1559;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    out_$i137 := $p2i.ref.i64(out_$p132);
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} out_$p132 := skb_dequeue(out_$p136);
    goto corral_source_split_1557;

  $bb72_dummy:
    call {:si_unique_call 1} out_$i133, out_$i134, out_$p136, out_$p132, out_$i137, out_$i138 := ppp_receive_nonmp_frame_loop_$bb70(in_$p0, in_$p129, out_$i133, out_$i134, out_$p136, out_$p132, out_$i137, out_$i138);
    return;

  exit:
    return;
}



procedure ppp_receive_nonmp_frame_loop_$bb70(in_$p0: ref, in_$p129: ref, in_$i133: i32, in_$i134: i1, in_$p136: ref, in_$p132: ref, in_$i137: i64, in_$i138: i1) returns (out_$i133: i32, out_$i134: i1, out_$p136: ref, out_$p132: ref, out_$i137: i64, out_$i138: i1);



implementation ppp_mp_insert_loop_$bb4(in_$i6: i32, in_$i11: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p14: ref, in_$p29: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p14: ref, out_$p29: ref)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p14, out_$p29 := in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p14, in_$p29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2257;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p26;
    goto $bb10_dummy;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p26;
    assume true;
    goto $bb10;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i11);
    goto corral_source_split_2276;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_2274;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_2272;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p14, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2271;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p14;
    assume true;
    goto $bb7;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 0);
    goto corral_source_split_2264;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$i19 := $sub.i32(in_$i6, out_$i18);
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_2260;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p14, out_$p29 := ppp_mp_insert_loop_$bb4(in_$i6, in_$i11, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p14, out_$p29);
    return;

  exit:
    return;
}



procedure ppp_mp_insert_loop_$bb4(in_$i6: i32, in_$i11: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p14: ref, in_$p29: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p14: ref, out_$p29: ref);



implementation ppp_mp_reconstruct_loop_$bb93(in_$p5: ref, in_$p64: ref, in_$p65: ref, in_$i256: i64, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$p265: ref, in_$p267: ref, in_$i268: i32, in_$p269: ref, in_$i270: i32, in_$i271: i32, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$p275: ref, in_$i276: i32, in_$i277: i32, in_$p278: ref, in_$p279: ref, in_$i280: i32, in_$p281: ref, in_$i282: i32, in_$i283: i32, in_$p284: ref, in_$i285: i64, in_$i286: i64, in_$i287: i1, in_$p288: ref, in_$p289: ref, in_$p290: ref, in_$p291: ref, in_$i292: i64, in_$i293: i1, in_$p258: ref, in_$p259: ref, in_$p260: ref) returns (out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$p265: ref, out_$p267: ref, out_$i268: i32, out_$p269: ref, out_$i270: i32, out_$i271: i32, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$p275: ref, out_$i276: i32, out_$i277: i32, out_$p278: ref, out_$p279: ref, out_$i280: i32, out_$p281: ref, out_$i282: i32, out_$i283: i32, out_$p284: ref, out_$i285: i64, out_$i286: i64, out_$i287: i1, out_$p288: ref, out_$p289: ref, out_$p290: ref, out_$p291: ref, out_$i292: i64, out_$i293: i1, out_$p258: ref, out_$p259: ref, out_$p260: ref)
{

  entry:
    out_$p261, out_$p262, out_$p263, out_$p264, out_$p265, out_$p267, out_$i268, out_$p269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283, out_$p284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$p290, out_$p291, out_$i292, out_$i293, out_$p258, out_$p259, out_$p260 := in_$p261, in_$p262, in_$p263, in_$p264, in_$p265, in_$p267, in_$i268, in_$p269, in_$i270, in_$i271, in_$p272, in_$p273, in_$i274, in_$p275, in_$i276, in_$i277, in_$p278, in_$p279, in_$i280, in_$p281, in_$i282, in_$i283, in_$p284, in_$i285, in_$i286, in_$i287, in_$p288, in_$p289, in_$p290, in_$p291, in_$i292, in_$i293, in_$p258, in_$p259, in_$p260;
    goto $bb93, exit;

  $bb93:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  $bb99:
    assume out_$i293 == 1;
    assume {:verifier.code 0} true;
    out_$p258, out_$p259, out_$p260 := out_$p259, out_$p260, out_$p291;
    goto $bb99_dummy;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$i293 := $ne.i64(out_$i292, in_$i256);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i292 := $p2i.ref.i64(out_$p260);
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$p291 := $load.ref($M.0, out_$p290);
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref(out_$p289, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$p289 := $bitcast.ref.ref(out_$p288);
    goto corral_source_split_2665;

  $bb98:
    assume {:verifier.code 0} true;
    out_$p288 := $add.ref($add.ref(out_$p260, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2664;

  $bb96:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i64(out_$i285, out_$i286);
    goto corral_source_split_2660;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    out_$i286 := $p2i.ref.i64(in_$p64);
    goto corral_source_split_2659;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    out_$i285 := $p2i.ref.i64(out_$p259);
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p284, out_$i283);
    goto corral_source_split_2657;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$p284 := $add.ref($add.ref(in_$p65, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$i283 := $add.i32(out_$i280, out_$i282);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$i282 := $load.i32($M.0, out_$p281);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(out_$p259, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_2653;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.0, out_$p279);
    goto corral_source_split_2652;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(in_$p65, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_2651;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p278, out_$i277);
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(in_$p65, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2649;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    out_$i277 := $add.i32(out_$i274, out_$i276);
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$i276 := $load.i32($M.0, out_$p275);
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$p275 := $add.ref($add.ref(out_$p259, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i32($M.0, out_$p273);
    goto corral_source_split_2645;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$p273 := $add.ref($add.ref(in_$p65, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2644;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p272, out_$i271);
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$p272 := $add.ref($add.ref(in_$p65, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$i271 := $add.i32(out_$i268, out_$i270);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i270 := $load.i32($M.0, out_$p269);
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$p269 := $add.ref($add.ref(out_$p259, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$i268 := $load.i32($M.0, out_$p267);
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$p267 := $add.ref($add.ref(in_$p65, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    goto corral_source_split_2636;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    out_$p265 := $bitcast.ref.ref(out_$p264);
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref(out_$p259, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2634;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p263, $0.ref);
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref(out_$p262, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2632;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$p262 := $bitcast.ref.ref(out_$p261);
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(out_$p259, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p258, out_$p259);
    goto corral_source_split_2629;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} __skb_unlink(out_$p259, in_$p5);
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb99_dummy:
    call {:si_unique_call 1} out_$p261, out_$p262, out_$p263, out_$p264, out_$p265, out_$p267, out_$i268, out_$p269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283, out_$p284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$p290, out_$p291, out_$i292, out_$i293, out_$p258, out_$p259, out_$p260 := ppp_mp_reconstruct_loop_$bb93(in_$p5, in_$p64, in_$p65, in_$i256, out_$p261, out_$p262, out_$p263, out_$p264, out_$p265, out_$p267, out_$i268, out_$p269, out_$i270, out_$i271, out_$p272, out_$p273, out_$i274, out_$p275, out_$i276, out_$i277, out_$p278, out_$p279, out_$i280, out_$p281, out_$i282, out_$i283, out_$p284, out_$i285, out_$i286, out_$i287, out_$p288, out_$p289, out_$p290, out_$p291, out_$i292, out_$i293, out_$p258, out_$p259, out_$p260);
    return;

  exit:
    return;
}



procedure ppp_mp_reconstruct_loop_$bb93(in_$p5: ref, in_$p64: ref, in_$p65: ref, in_$i256: i64, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$p264: ref, in_$p265: ref, in_$p267: ref, in_$i268: i32, in_$p269: ref, in_$i270: i32, in_$i271: i32, in_$p272: ref, in_$p273: ref, in_$i274: i32, in_$p275: ref, in_$i276: i32, in_$i277: i32, in_$p278: ref, in_$p279: ref, in_$i280: i32, in_$p281: ref, in_$i282: i32, in_$i283: i32, in_$p284: ref, in_$i285: i64, in_$i286: i64, in_$i287: i1, in_$p288: ref, in_$p289: ref, in_$p290: ref, in_$p291: ref, in_$i292: i64, in_$i293: i1, in_$p258: ref, in_$p259: ref, in_$p260: ref) returns (out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$p264: ref, out_$p265: ref, out_$p267: ref, out_$i268: i32, out_$p269: ref, out_$i270: i32, out_$i271: i32, out_$p272: ref, out_$p273: ref, out_$i274: i32, out_$p275: ref, out_$i276: i32, out_$i277: i32, out_$p278: ref, out_$p279: ref, out_$i280: i32, out_$p281: ref, out_$i282: i32, out_$i283: i32, out_$p284: ref, out_$i285: i64, out_$i286: i64, out_$i287: i1, out_$p288: ref, out_$p289: ref, out_$p290: ref, out_$p291: ref, out_$i292: i64, out_$i293: i1, out_$p258: ref, out_$p259: ref, out_$p260: ref);
  modifies $M.0;



implementation ppp_mp_reconstruct_loop_$bb72(in_$p0: ref, in_$p5: ref, in_$p65: ref, in_$i197: i64, in_$i201: i64, in_$i202: i64, in_$i203: i1, in_$p204: ref, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i213: i32, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i1, in_$p199: ref, in_$p200: ref) returns (out_$i201: i64, out_$i202: i64, out_$i203: i1, out_$p204: ref, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i213: i32, out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i1, out_$p199: ref, out_$p200: ref)
{

  entry:
    out_$i201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p199, out_$p200 := in_$i201, in_$i202, in_$i203, in_$p204, in_$i205, in_$i206, in_$i207, in_$p208, in_$p209, in_$p210, in_$p211, in_$p212, in_$i213, in_$p214, in_$p215, in_$p216, in_$p217, in_$i218, in_$i219, in_$p199, in_$p200;
    goto $bb72, exit;

  $bb72:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2542;

  $bb81:
    assume out_$i219 == 1;
    assume {:verifier.code 0} true;
    out_$p199, out_$p200 := out_$p200, out_$p217;
    goto $bb81_dummy;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i64(out_$i218, in_$i197);
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$i218 := $p2i.ref.i64(out_$p200);
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    out_$p217 := $load.ref($M.0, out_$p216);
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(out_$p215, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    out_$p215 := $bitcast.ref.ref(out_$p214);
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(out_$p200, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} kfree_skb(out_$p199);
    goto corral_source_split_2570;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} __skb_unlink(out_$p199, in_$p5);
    goto corral_source_split_2569;

  $bb79:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} netdev_printk.ref.ref.ref.i32(.str.5, out_$p209, .str.8, out_$i213);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i32($M.0, out_$p212);
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    out_$p212 := $add.ref($add.ref(out_$p211, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    out_$p211 := $bitcast.ref.ref(out_$p210);
    goto corral_source_split_2564;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(out_$p199, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2563;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    out_$p209 := $load.ref($M.0, out_$p208);
    goto corral_source_split_2562;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2561;

  $bb78:
    assume out_$i207 == 1;
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$i207 := $ne.i32(out_$i206, 0);
    goto corral_source_split_2558;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    out_$i206 := $and.i32(out_$i205, 1);
    goto corral_source_split_2557;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i32($M.0, out_$p204);
    goto corral_source_split_2556;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2555;

  $bb75:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i64(out_$i201, out_$i202);
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$i202 := $p2i.ref.i64(in_$p65);
    goto corral_source_split_2545;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i201 := $p2i.ref.i64(out_$p199);
    goto corral_source_split_2544;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb81_dummy:
    call {:si_unique_call 1} out_$i201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p199, out_$p200 := ppp_mp_reconstruct_loop_$bb72(in_$p0, in_$p5, in_$p65, in_$i197, out_$i201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$p210, out_$p211, out_$p212, out_$i213, out_$p214, out_$p215, out_$p216, out_$p217, out_$i218, out_$i219, out_$p199, out_$p200);
    return;

  exit:
    return;
}



procedure ppp_mp_reconstruct_loop_$bb72(in_$p0: ref, in_$p5: ref, in_$p65: ref, in_$i197: i64, in_$i201: i64, in_$i202: i64, in_$i203: i1, in_$p204: ref, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$p209: ref, in_$p210: ref, in_$p211: ref, in_$p212: ref, in_$i213: i32, in_$p214: ref, in_$p215: ref, in_$p216: ref, in_$p217: ref, in_$i218: i64, in_$i219: i1, in_$p199: ref, in_$p200: ref) returns (out_$i201: i64, out_$i202: i64, out_$i203: i1, out_$p204: ref, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$p209: ref, out_$p210: ref, out_$p211: ref, out_$p212: ref, out_$i213: i32, out_$p214: ref, out_$p215: ref, out_$p216: ref, out_$p217: ref, out_$i218: i64, out_$i219: i1, out_$p199: ref, out_$p200: ref);
  modifies $M.0;



implementation ppp_mp_reconstruct_loop_$bb50(in_$p0: ref, in_$p5: ref, in_$i147: i64, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$i165: i64, in_$i166: i1, in_$p149: ref, in_$p150: ref) returns (out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$i165: i64, out_$i166: i1, out_$p149: ref, out_$p150: ref)
{

  entry:
    out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$i160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$p149, out_$p150 := in_$p151, in_$i152, in_$i153, in_$i154, in_$p155, in_$p156, in_$p157, in_$p158, in_$p159, in_$i160, in_$p161, in_$p162, in_$p163, in_$p164, in_$i165, in_$i166, in_$p149, in_$p150;
    goto $bb50, exit;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  $bb55:
    assume out_$i166 == 1;
    assume {:verifier.code 0} true;
    out_$p149, out_$p150 := out_$p164, out_$p149;
    goto $bb55_dummy;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$i166 := $ne.i64(out_$i165, in_$i147);
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i165 := $p2i.ref.i64(out_$p149);
    goto corral_source_split_2504;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$p164 := $load.ref($M.0, out_$p163);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p162, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    out_$p162 := $bitcast.ref.ref(out_$p161);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p149, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} kfree_skb(out_$p150);
    goto corral_source_split_2499;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __skb_unlink(out_$p150, in_$p5);
    goto corral_source_split_2498;

  $bb53:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} netdev_printk.ref.ref.ref.i32(.str.5, out_$p156, .str.8, out_$i160);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p159);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(out_$p158, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$p158 := $bitcast.ref.ref(out_$p157);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(out_$p150, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.0, out_$p155);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2490;

  $bb52:
    assume out_$i154 == 1;
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 0);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i153 := $and.i32(out_$i152, 1);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.0, out_$p151);
    goto corral_source_split_2485;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2484;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$i160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$p149, out_$p150 := ppp_mp_reconstruct_loop_$bb50(in_$p0, in_$p5, in_$i147, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$i160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$p149, out_$p150);
    return;

  exit:
    return;
}



procedure ppp_mp_reconstruct_loop_$bb50(in_$p0: ref, in_$p5: ref, in_$i147: i64, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$i165: i64, in_$i166: i1, in_$p149: ref, in_$p150: ref) returns (out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$i165: i64, out_$i166: i1, out_$p149: ref, out_$p150: ref);
  modifies $M.0;



implementation ppp_mp_reconstruct_loop_$bb13(in_$p0: ref, in_$i4: i32, in_$p31: ref, in_$i42: i32, in_$i43: i32, in_$i40: i32, in_$i41: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i73: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i59: i32, in_$i60: i32, in_$p25: ref, in_$p27: ref) returns (out_$i42: i32, out_$i43: i32, out_$i40: i32, out_$i41: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i73: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i59: i32, out_$i60: i32)
{

  entry:
    out_$i42, out_$i43, out_$i40, out_$i41, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i61, out_$i62, out_$p63, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i73, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i59, out_$i60 := in_$i42, in_$i43, in_$i40, in_$i41, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i61, in_$i62, in_$p63, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p74, in_$p75, in_$p76, in_$i77, in_$i73, in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i59, in_$i60;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb29:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i40, out_$i41 := out_$i73, 1;
    goto $bb29_dummy;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := 1, out_$i73;
    assume true;
    goto $bb29;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i86, 0);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i85, out_$i73);
    goto corral_source_split_2401;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, in_$p31);
    goto corral_source_split_2400;

  $bb27:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} netdev_printk.ref.ref.ref.i32.i32(.str.5, out_$p83, .str.6, out_$i40, out_$i84);
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$i84 := $sub.i32(out_$i73, 1);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2395;

  $bb26:
    assume out_$i81 == 1;
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i80 := $and.i32(out_$i79, 1);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2389;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i77;
    goto $bb25;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i72;
    goto $bb25;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(in_$i4, 1);
    goto corral_source_split_2380;

  $bb23:
    assume out_$i71 == 1;
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i70, 0);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i32(in_$i4, out_$i69);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_2373;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2372;

  $bb20:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$p63 := in_$p27;
    assume true;
    goto $bb20;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, 0);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i40, in_$i4);
    goto corral_source_split_2363;

  $bb17:
    assume out_$i58 == 1;
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i41, out_$i40;
    assume true;
    goto $bb17;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, out_$i40);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_2357;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2356;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2383;

  $bb24:
    assume !(out_$i71 == 1);
    goto corral_source_split_2382;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i42, out_$i43, out_$i40, out_$i41, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i61, out_$i62, out_$p63, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i73, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i59, out_$i60 := ppp_mp_reconstruct_loop_$bb13(in_$p0, in_$i4, in_$p31, out_$i42, out_$i43, out_$i40, out_$i41, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i61, out_$i62, out_$p63, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i73, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i59, out_$i60, in_$p25, in_$p27);
    return;

  exit:
    return;
}



procedure ppp_mp_reconstruct_loop_$bb13(in_$p0: ref, in_$i4: i32, in_$p31: ref, in_$i42: i32, in_$i43: i32, in_$i40: i32, in_$i41: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i73: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i59: i32, in_$i60: i32, in_$p25: ref, in_$p27: ref) returns (out_$i42: i32, out_$i43: i32, out_$i40: i32, out_$i41: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i73: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i59: i32, out_$i60: i32);



implementation ppp_mp_reconstruct_loop_$bb8(in_$p0: ref, in_$i4: i32, in_$p5: ref, in_$i20: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i42: i32, in_$i43: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i40: i32, in_$i41: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i73: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i59: i32, in_$i60: i32, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$p120: ref, in_$p121: ref, in_$p123: ref, in_$i124: i64, in_$i125: i64, in_$p126: ref, in_$p127: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p118: ref, in_$p119: ref, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$i137: i8, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$p146: ref, in_$i147: i64, in_$i148: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$i165: i64, in_$i166: i1, in_$p149: ref, in_$p150: ref, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p179: ref) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i42: i32, out_$i43: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i40: i32, out_$i41: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i73: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i59: i32, out_$i60: i32, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$p120: ref, out_$p121: ref, out_$p123: ref, out_$i124: i64, out_$i125: i64, out_$p126: ref, out_$p127: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p118: ref, out_$p119: ref, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$i137: i8, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$p146: ref, out_$i147: i64, out_$i148: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$i165: i64, out_$i166: i1, out_$p149: ref, out_$p150: ref, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p179: ref)
{

  entry:
    out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i42, out_$i43, out_$i35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i40, out_$i41, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i61, out_$i62, out_$p63, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i73, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i59, out_$i60, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p120, out_$p121, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p129, out_$p130, out_$p131, out_$p118, out_$p119, out_$i132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$i160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$p149, out_$p150, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$i172, out_$i50, out_$p51, out_$i52, out_$i53, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p179 := in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i42, in_$i43, in_$i35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i40, in_$i41, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i61, in_$i62, in_$p63, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p74, in_$p75, in_$p76, in_$i77, in_$i73, in_$p78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i59, in_$i60, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$p101, in_$p102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$p109, in_$p110, in_$i111, in_$i112, in_$i113, in_$p114, in_$i115, in_$i116, in_$i117, in_$p120, in_$p121, in_$p123, in_$i124, in_$i125, in_$p126, in_$p127, in_$p129, in_$p130, in_$p131, in_$p118, in_$p119, in_$i132, in_$p133, in_$p134, in_$p135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$i145, in_$p146, in_$i147, in_$i148, in_$p151, in_$i152, in_$i153, in_$i154, in_$p155, in_$p156, in_$p157, in_$p158, in_$p159, in_$i160, in_$p161, in_$p162, in_$p163, in_$p164, in_$i165, in_$i166, in_$p149, in_$p150, in_$p167, in_$i168, in_$i169, in_$p170, in_$p171, in_$i172, in_$i50, in_$p51, in_$i52, in_$i53, in_$p173, in_$p174, in_$p175, in_$p176, in_$i177, in_$i178, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$i28, in_$p179;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;

  $bb62:
    assume out_$i178 == 1;
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28 := out_$i53, out_$i52, out_$p26, out_$p176, out_$p51, out_$i50;
    goto $bb62_dummy;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    out_$p179 := out_$p51;
    assume true;
    goto $bb62;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$i178 := $ne.i64(out_$i177, in_$i20);
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$i177 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.0, out_$p175);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p174, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2351;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    out_$p174 := $bitcast.ref.ref(out_$p173);
    goto corral_source_split_2350;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(out_$p26, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2349;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2348;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    out_$i50, out_$p51, out_$i52, out_$i53 := out_$i94, out_$p171, out_$i99, out_$i172;
    goto $bb15;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i50, out_$p51, out_$i52, out_$i53 := out_$i38, out_$p37, out_$i35, out_$i39;
    goto $bb15;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} kfree_skb(out_$p36);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __skb_unlink(out_$p25, in_$p5);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} netdev_err.ref.ref.i32.i32(out_$p45, .str.4, out_$i49, out_$i39);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2334;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37, out_$i38, out_$i39 := out_$i24, out_$p25, out_$p27, out_$i42, out_$i43;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb11;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    out_$i35, out_$p36, out_$p37, out_$i38, out_$i39 := out_$i24, out_$p25, out_$p27, out_$i28, out_$i23;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 0);
    goto corral_source_split_2331;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    out_$i33 := $sub.i32(out_$i32, out_$i23);
    goto corral_source_split_2330;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2328;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_2327;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2346;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := 1, out_$i73;
    assume true;
    goto $bb14, $bb29;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i86, 0);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i85, out_$i73);
    goto corral_source_split_2401;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p31);
    goto corral_source_split_2400;

  $bb27:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} netdev_printk.ref.ref.ref.i32.i32(.str.5, out_$p83, .str.6, out_$i40, out_$i84);
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    out_$i84 := $sub.i32(out_$i73, 1);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$p83 := $load.ref($M.0, out_$p82);
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2395;

  $bb26:
    assume out_$i81 == 1;
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i80, 0);
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i80 := $and.i32(out_$i79, 1);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i32($M.0, out_$p78);
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2389;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i77;
    goto $bb25;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i72;
    goto $bb25;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(in_$i4, 1);
    goto corral_source_split_2380;

  $bb23:
    assume out_$i71 == 1;
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i70, 0);
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i32(in_$i4, out_$i69);
    goto corral_source_split_2376;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p67, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_2373;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2372;

  $bb20:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$p63 := out_$p27;
    assume true;
    goto $bb20;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, 0);
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i32(out_$i40, in_$i4);
    goto corral_source_split_2363;

  $bb17:
    assume out_$i58 == 1;
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60 := out_$i41, out_$i40;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, out_$i40);
    goto corral_source_split_2360;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2358;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_2357;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2356;

  $bb13:
    call out_$i42, out_$i43, out_$i40, out_$i41, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i61, out_$i62, out_$p63, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i73, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i59, out_$i60 := ppp_mp_reconstruct_loop_$bb13(in_$p0, in_$i4, out_$p31, out_$i42, out_$i43, out_$i40, out_$i41, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i61, out_$i62, out_$p63, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i73, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i59, out_$i60, out_$p25, out_$p27);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$i40, out_$i41 := out_$i23, out_$i28;
    goto $bb13;

  $bb29:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i40, out_$i41 := out_$i73, 1;
    assume false;
    return;

  $bb12:
    assume !(out_$i34 == 1);
    goto corral_source_split_2344;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2385;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2383;

  $bb24:
    assume !(out_$i71 == 1);
    goto corral_source_split_2382;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i60, 1);
    call {:si_unique_call 469} {:cexpr "seq"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_2516;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_2515;

  $bb46:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$p171 := out_$p95;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p171 := out_$p167;
    goto $bb61;

  $bb59:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    out_$p170 := out_$p167;
    assume true;
    goto $bb59;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i64(out_$i168, 0);
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    out_$i168 := $p2i.ref.i64(out_$p167);
    goto corral_source_split_2510;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} out_$p167 := skb_peek(in_$p5);
    goto corral_source_split_2509;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i148 == 1);
    goto $bb49;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb56:
    assume !(out_$i166 == 1);
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$i166 := $ne.i64(out_$i165, out_$i147);
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i165 := $p2i.ref.i64(out_$p149);
    goto corral_source_split_2504;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$p164 := $load.ref($M.0, out_$p163);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p162, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    out_$p162 := $bitcast.ref.ref(out_$p161);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p149, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} kfree_skb(out_$p150);
    goto corral_source_split_2499;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __skb_unlink(out_$p150, in_$p5);
    goto corral_source_split_2498;

  $bb53:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} netdev_printk.ref.ref.ref.i32(.str.5, out_$p156, .str.8, out_$i160);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p159);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(out_$p158, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$p158 := $bitcast.ref.ref(out_$p157);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(out_$p150, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$p156 := $load.ref($M.0, out_$p155);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2490;

  $bb52:
    assume out_$i154 == 1;
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i154 := $ne.i32(out_$i153, 0);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i153 := $and.i32(out_$i152, 1);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.0, out_$p151);
    goto corral_source_split_2485;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(496, 1));
    goto corral_source_split_2484;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    call out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$i160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$p149, out_$p150 := ppp_mp_reconstruct_loop_$bb50(in_$p0, in_$p5, out_$i147, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$i160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$p149, out_$p150);
    goto $bb50_last;

  $bb50_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p149, out_$p150 := out_$p144, out_$p25;
    goto $bb50;

  $bb55:
    assume out_$i166 == 1;
    assume {:verifier.code 0} true;
    out_$p149, out_$p150 := out_$p164, out_$p149;
    assume false;
    return;

  $bb47:
    assume out_$i148 == 1;
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i148 := $ne.i64(out_$i145, out_$i147);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i147 := $p2i.ref.i64(out_$p146);
    goto corral_source_split_2477;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    out_$p146 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.0, out_$p143);
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p142, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2473;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(out_$p141);
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_2471;

  $bb45:
    assume out_$i140 == 1;
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i32(out_$i139, 0);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$i139 := $and.i32(out_$i138, 64);
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i138 := $zext.i8.i32(out_$i137);
    goto corral_source_split_2466;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i8($M.0, out_$p136);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p135, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2464;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p134);
    goto corral_source_split_2463;

  $bb44:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2462;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p133, out_$i132);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(616, 1));
    goto corral_source_split_2459;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i132 := $add.i32(out_$i60, 1);
    goto corral_source_split_2458;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} netdev_printk.ref.ref.ref.i32(.str.5, out_$p131, .str.7, out_$i99);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, out_$p130);
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2452;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p129, out_$i125);
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref(out_$p127, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_2450;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$p127 := $load.ref($M.0, out_$p126);
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i64(out_$i124, 1);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i64($M.0, out_$p123);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($add.ref(out_$p121, $mul.ref(0, 3216)), $mul.ref(296, 1)), $mul.ref(80, 1));
    goto corral_source_split_2445;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.0, out_$p120);
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(592, 1));
    goto corral_source_split_2443;

  $bb41:
    assume out_$i117 == 1;
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$p118, out_$p119 := out_$p25, out_$p95;
    assume true;
    goto $bb41;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    out_$i117 := $sgt.i32(out_$i99, out_$i116);
    goto corral_source_split_2440;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i115, 2);
    goto corral_source_split_2439;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.0, out_$p114);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(612, 1));
    goto corral_source_split_2437;

  $bb39:
    assume out_$i113 == 1;
    goto corral_source_split_2436;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i112, 0);
    goto corral_source_split_2434;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i8.i32(out_$i111);
    goto corral_source_split_2433;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.0, out_$p110);
    goto corral_source_split_2432;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p109, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2431;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    out_$p109 := $bitcast.ref.ref(out_$p108);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p95, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2429;

  $bb37:
    assume out_$i107 == 1;
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i106, 0);
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i106 := $and.i32(out_$i105, 64);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i8.i32(out_$i104);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i8($M.0, out_$p103);
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p102, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p102 := $bitcast.ref.ref(out_$p101);
    goto corral_source_split_2421;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2420;

  $bb34:
    assume out_$i100 == 1;
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i94, 0);
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i96, out_$i98);
    call {:si_unique_call 463} {:cexpr "len"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2414;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2413;

  $bb32:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    out_$i94, out_$p95, out_$i96 := out_$i59, out_$p27, out_$i24;
    goto $bb33;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$i94, out_$p95, out_$i96 := 0, out_$p25, 0;
    goto $bb33;

  $bb31:
    assume out_$i93 == 1;
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i92, 0);
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i8.i32(out_$i91);
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i8($M.0, out_$p90);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_2405;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p25, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2404;

  $bb18:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i107 == 1);
    goto $bb36;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i113 == 1);
    goto $bb36;

  $bb62_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i42, out_$i43, out_$i35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i40, out_$i41, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i61, out_$i62, out_$p63, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i73, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i59, out_$i60, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p120, out_$p121, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p129, out_$p130, out_$p131, out_$p118, out_$p119, out_$i132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$i160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$p149, out_$p150, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$i172, out_$i50, out_$p51, out_$i52, out_$i53, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p179 := ppp_mp_reconstruct_loop_$bb8(in_$p0, in_$i4, in_$p5, in_$i20, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i42, out_$i43, out_$i35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i40, out_$i41, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i61, out_$i62, out_$p63, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$i73, out_$p78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i59, out_$i60, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p120, out_$p121, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p129, out_$p130, out_$p131, out_$p118, out_$p119, out_$i132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$p159, out_$i160, out_$p161, out_$p162, out_$p163, out_$p164, out_$i165, out_$i166, out_$p149, out_$p150, out_$p167, out_$i168, out_$i169, out_$p170, out_$p171, out_$i172, out_$i50, out_$p51, out_$i52, out_$i53, out_$p173, out_$p174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p179);
    return;

  exit:
    return;
}



procedure ppp_mp_reconstruct_loop_$bb8(in_$p0: ref, in_$i4: i32, in_$p5: ref, in_$i20: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i42: i32, in_$i43: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i40: i32, in_$i41: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i73: i32, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i59: i32, in_$i60: i32, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i8, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$i100: i1, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$i104: i8, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$p120: ref, in_$p121: ref, in_$p123: ref, in_$i124: i64, in_$i125: i64, in_$p126: ref, in_$p127: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p118: ref, in_$p119: ref, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$i137: i8, in_$i138: i32, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$p146: ref, in_$i147: i64, in_$i148: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$i160: i32, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$i165: i64, in_$i166: i1, in_$p149: ref, in_$p150: ref, in_$p167: ref, in_$i168: i64, in_$i169: i1, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$i177: i64, in_$i178: i1, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p179: ref) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i42: i32, out_$i43: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i40: i32, out_$i41: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i73: i32, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i59: i32, out_$i60: i32, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i8, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$i100: i1, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$i104: i8, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$p120: ref, out_$p121: ref, out_$p123: ref, out_$i124: i64, out_$i125: i64, out_$p126: ref, out_$p127: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p118: ref, out_$p119: ref, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$i137: i8, out_$i138: i32, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$p146: ref, out_$i147: i64, out_$i148: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$i160: i32, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$i165: i64, out_$i166: i1, out_$p149: ref, out_$p150: ref, out_$p167: ref, out_$i168: i64, out_$i169: i1, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$i177: i64, out_$i178: i1, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p179: ref);
  modifies $M.0;



implementation ppp_channel_push_loop_$bb6(in_$p0: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i26: i32, in_$i27: i1) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i26, out_$i27 := in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i26, in_$i27;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i27 == 1;
    goto $bb12_dummy;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_2842;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} out_$i26 := skb_queue_empty(in_$p7);
    call {:si_unique_call 508} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_2841;

  $bb9:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p12;
    assume true;
    goto $bb9;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_2835;

  SeqInstr_318:
    call {:si_unique_call 505} {:cexpr "tmp"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2834;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    call {:si_unique_call 504} out_$i21 := devirtbounce.8(out_$p18, out_$p20, out_$p12);
    goto SeqInstr_317;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$p12 := skb_dequeue(out_$p11);
    goto corral_source_split_2826;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2825;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i26, out_$i27 := ppp_channel_push_loop_$bb6(in_$p0, in_$p7, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure ppp_channel_push_loop_$bb6(in_$p0: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$i26: i32, in_$i27: i1) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$i26: i32, out_$i27: i1);
  modifies $M.0, $M.8, $M.16, $CurrAddr, $M.2, $M.9, assertsPassed, $M.10, $M.33, $M.11, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation ppp_xmit_process_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p14: ref, in_$p9: ref, in_$i15: i64, in_$i16: i1) returns (out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p14: ref, out_$p9: ref, out_$i15: i64, out_$i16: i1)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$p14, out_$p9, out_$i15, out_$i16 := in_$p10, in_$i11, in_$i12, in_$p14, in_$p9, in_$i15, in_$i16;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2891;

  $bb8:
    assume {:verifier.code 0} true;
    assume out_$i12 == 1;
    goto $bb8_dummy;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i64(out_$i11, 0);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, in_$p5);
    goto corral_source_split_2897;

  SeqInstr_339:
    goto corral_source_split_2896;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} ppp_send_frame(in_$p0, out_$p9);
    goto SeqInstr_338;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_2903;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_$p9 := skb_dequeue(out_$p14);
    goto corral_source_split_2892;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$p14, out_$p9, out_$i15, out_$i16 := ppp_xmit_process_loop_$bb6(in_$p0, in_$p5, out_$p10, out_$i11, out_$i12, out_$p14, out_$p9, out_$i15, out_$i16);
    return;

  exit:
    return;
}



procedure ppp_xmit_process_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p14: ref, in_$p9: ref, in_$i15: i64, in_$i16: i1) returns (out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p14: ref, out_$p9: ref, out_$i15: i64, out_$i16: i1);
  modifies $M.0, $M.16, $M.10, $CurrAddr, $M.8, $M.2, $M.11, $M.18, assertsPassed, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ppp_mp_explode_loop_$bb136(in_$p0: ref, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$i185: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$i153: i1, in_$i186: i32, in_$p162: ref, in_$i173: i32, in_$i169: i32) returns (out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$i185: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$p162: ref, out_$i173: i32, out_$i169: i32)
{

  entry:
    out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p162, out_$i173, out_$i169 := in_$p161, in_$p163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$p170, in_$p171, in_$i172, in_$p174, in_$i175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$i181, in_$i185, in_$p187, in_$p188, in_$i189, in_$p182, in_$p183, in_$i184, in_$p162, in_$i173, in_$i169;
    goto $bb136, exit;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  $bb64:
    assume in_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$p162, out_$i173 := out_$p163, out_$i168;
    goto $bb64_dummy;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i168;
    assume true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i172;
    goto $bb63;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i172;
    goto $bb63;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$i168 := 0;
    goto $bb63;

  $bb61:
    assume out_$i167 == 1;
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i64(out_$i164, out_$i166);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i166 := $p2i.ref.i64(out_$p165);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i164 := $p2i.ref.i64(out_$p163);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.0, out_$p161);
    goto corral_source_split_3588;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p162, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb67:
    assume out_$i177 == 1;
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i8.i32(out_$i175);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i8($M.0, out_$p174);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i173, 1);
    call {:si_unique_call 617} {:cexpr "i"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_3601;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p163);
    goto corral_source_split_3600;

  $bb62:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb72:
    assume out_$i185 == 1;
    goto corral_source_split_3621;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$p187, out_$p188, out_$i189 := out_$p163, out_$p171, out_$i172;
    assume true;
    goto $bb72;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$i185 := $sgt.i32(in_$i186, 0);
    goto corral_source_split_3616;

  $bb70:
    assume out_$i181 == 1;
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$p182, out_$p183, out_$i184 := out_$p163, out_$p171, out_$i172;
    assume true;
    goto $bb70;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 1);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i8.i32(out_$i179);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i8($M.0, out_$p178);
    goto corral_source_split_3611;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3610;

  $bb68:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64_dummy:
    call {:si_unique_call 1} out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p162, out_$i173, out_$i169 := ppp_mp_explode_loop_$bb136(in_$p0, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, in_$i153, in_$i186, out_$p162, out_$i173, out_$i169);
    return;

  exit:
    return;
}



procedure ppp_mp_explode_loop_$bb136(in_$p0: ref, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$i185: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$i153: i1, in_$i186: i32, in_$p162: ref, in_$i173: i32, in_$i169: i32) returns (out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$i185: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$p162: ref, out_$i173: i32, out_$i169: i32);



implementation ppp_mp_explode_loop_$bb135(in_$p0: ref, in_$i6: i32, in_$i143: i32, in_$i149: i32, in_$i151: i32, in_$i152: i32, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$i185: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$p193: ref, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i204: i32, in_$p205: ref, in_$p206: ref, in_$i207: i32, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i32, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i237: i32, in_$i238: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p278: ref, in_$p279: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$p275: ref, in_$p276: ref, in_$i277: i32, in_$i153: i1, in_$i155: i32, in_$i157: i32, in_$p158: ref, in_$p369: ref, in_$i370: i32, in_$i186: i32, in_$i203: i32, in_$p162: ref, in_$i173: i32, in_$i280: i32, in_$i169: i32) returns (out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$i185: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$p193: ref, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i204: i32, out_$p205: ref, out_$p206: ref, out_$i207: i32, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i32, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i237: i32, out_$i238: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p278: ref, out_$p279: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$p275: ref, out_$p276: ref, out_$i277: i32, out_$p369: ref, out_$i370: i32, out_$i186: i32, out_$i203: i32, out_$p162: ref, out_$i173: i32, out_$i280: i32, out_$i169: i32)
{

  entry:
    out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i280, out_$i169 := in_$p161, in_$p163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$p170, in_$p171, in_$i172, in_$p174, in_$i175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$i181, in_$i185, in_$p187, in_$p188, in_$i189, in_$p182, in_$p183, in_$i184, in_$p193, in_$p190, in_$p191, in_$i192, in_$p194, in_$p195, in_$p196, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$i202, in_$i204, in_$p205, in_$p206, in_$i207, in_$i227, in_$p228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$p257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i237, in_$i238, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p278, in_$p279, in_$i272, in_$i273, in_$i274, in_$p275, in_$p276, in_$i277, in_$p369, in_$i370, in_$i186, in_$i203, in_$p162, in_$i173, in_$i280, in_$i169;
    goto $bb135, exit;

  $bb135:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  $bb108:
    assume in_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$p369, out_$i370, out_$i186, out_$i203 := out_$p190, out_$i192, out_$i266, out_$i265;
    goto $bb108_dummy;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i280 := out_$i192;
    assume true;
    goto $bb108;

  SeqInstr_384:
    goto corral_source_split_3723;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} ldv_spin_unlock_bh_167(out_$p279);
    goto SeqInstr_383;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p278, 2);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3720;

  $bb106:
    assume out_$i271 == 1;
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277 := out_$i265, out_$i266, out_$i270, out_$p190, out_$p191, out_$i192;
    assume true;
    goto $bb106;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i271 := $sle.i32(out_$i270, 0);
    goto corral_source_split_3717;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  $bb104:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    out_$i270 := out_$i267;
    goto $bb105;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i270 := in_$i155;
    goto $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    assume out_$i269 == 1;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    assume out_$i268 == 1;
    goto $bb101;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb102;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$i268 := $sle.i32(out_$i266, 0);
    goto corral_source_split_3711;

  $bb99:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  $bb89:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    out_$i265, out_$i266, out_$i267 := out_$i203, out_$i186, in_$i155;
    goto $bb99;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266, out_$i267 := out_$i237, out_$i264, out_$i238;
    goto $bb99;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    out_$i264 := $sub.i32(out_$i186, 1);
    call {:si_unique_call 629} {:cexpr "nfree"} boogie_si_record_i32(out_$i264);
    goto corral_source_split_3694;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  $bb98:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i237, out_$i238 := out_$i262, out_$i263;
    goto $bb95;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$i237, out_$i238 := out_$i235, out_$i236;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3691;

  $bb93:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    out_$i235, out_$i236 := out_$i203, out_$i231;
    goto $bb94;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    out_$i235, out_$i236 := out_$i234, out_$i233;
    goto $bb94;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$i234 := $sub.i32(out_$i203, 1);
    call {:si_unique_call 628} {:cexpr "nbigger"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i233 := $add.i32(out_$i231, 1);
    call {:si_unique_call 627} {:cexpr "flen"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_3688;

  $bb92:
    assume out_$i232 == 1;
    goto corral_source_split_3687;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i232 := $sgt.i32(out_$i203, 0);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i231 := $sdiv.i32(in_$i155, out_$i186);
    call {:si_unique_call 625} {:cexpr "flen"} boogie_si_record_i32(out_$i231);
    goto corral_source_split_3671;

  $bb90:
    assume out_$i230 == 1;
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 0);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i229 := $load.i32($M.0, out_$p228);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p228 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3666;

  $bb88:
    assume out_$i227 == 1;
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i227 := $sgt.i32(out_$i186, 0);
    goto corral_source_split_3663;

  $bb77:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207 := in_$p158, in_$i157, in_$i155, out_$i203, out_$i186, out_$p190, out_$p191, out_$i192;
    assume true;
    goto $bb77;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i64(out_$i197, 0);
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    out_$i197 := $p2i.ref.i64(out_$p196);
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$p196 := $load.ref($M.0, out_$p195);
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3626;

  SeqInstr_378:
    goto corral_source_split_3625;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv_spin_lock_bh_166(out_$p194);
    goto SeqInstr_377;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3624;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p193, 1);
    assume {:verifier.code 0} true;
    out_$p190, out_$p191, out_$i192 := out_$p182, out_$p183, out_$i184;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p190, out_$p191, out_$i192 := out_$p187, out_$p188, out_$i189;
    goto $bb75;

  $bb73:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$p187, out_$p188, out_$i189 := out_$p163, out_$p171, out_$i172;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$i185 := $sgt.i32(out_$i186, 0);
    goto corral_source_split_3616;

  $bb70:
    assume out_$i181 == 1;
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$p182, out_$p183, out_$i184 := out_$p163, out_$p171, out_$i172;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 1);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i8.i32(out_$i179);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i8($M.0, out_$p178);
    goto corral_source_split_3611;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3610;

  $bb68:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i8.i32(out_$i175);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i8($M.0, out_$p174);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i173, 1);
    call {:si_unique_call 617} {:cexpr "i"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_3601;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p163);
    goto corral_source_split_3600;

  $bb62:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i64(out_$i164, out_$i166);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i166 := $p2i.ref.i64(out_$p165);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i164 := $p2i.ref.i64(out_$p163);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.0, out_$p161);
    goto corral_source_split_3588;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p162, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb136:
    call out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p162, out_$i173, out_$i169 := ppp_mp_explode_loop_$bb136(in_$p0, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, in_$i153, out_$i186, out_$p162, out_$i173, out_$i169);
    goto $bb136_last;

  $bb136_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$p162, out_$i173 := out_$p369, out_$i370;
    goto $bb136;

  $bb64:
    assume in_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$p162, out_$i173 := out_$p163, out_$i168;
    assume false;
    return;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i168;
    assume true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i172;
    goto $bb63;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i172;
    goto $bb63;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$i168 := 0;
    goto $bb63;

  $bb61:
    assume out_$i167 == 1;
    goto corral_source_split_3594;

  $bb67:
    assume out_$i177 == 1;
    goto corral_source_split_3608;

  $bb72:
    assume out_$i185 == 1;
    goto corral_source_split_3621;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p183, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3619;

  $bb71:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  $bb97:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    out_$i262, out_$i263 := out_$i203, out_$i248;
    goto $bb98;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i262, out_$i263 := out_$i261, out_$i255;
    goto $bb98;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$i261 := $sub.i32(out_$i203, out_$i260);
    call {:si_unique_call 631} {:cexpr "nbigger"} boogie_si_record_i32(out_$i261);
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i260 := $sdiv.i32(out_$i259, in_$i151);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i259 := $mul.i32(out_$i256, out_$i258);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i258 := $load.i32($M.0, out_$p257);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i256 := $sub.i32(in_$i152, in_$i149);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i248, out_$i254);
    call {:si_unique_call 630} {:cexpr "flen"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$i254 := $sdiv.i32(out_$i253, in_$i151);
    goto corral_source_split_3701;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$i253 := $mul.i32(out_$i250, out_$i252);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.0, out_$p251);
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i250 := $sub.i32(in_$i152, in_$i149);
    goto corral_source_split_3697;

  $bb96:
    assume out_$i249 == 1;
    goto corral_source_split_3696;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i249 := $sgt.i32(out_$i203, 0);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i248 := $sub.i32(out_$i247, in_$i6);
    call {:si_unique_call 626} {:cexpr "flen"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$i247 := $sdiv.i32(out_$i242, out_$i246);
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i246 := $sdiv.i32(out_$i243, out_$i245);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.0, out_$p244);
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    out_$i243 := $mul.i32(in_$i151, in_$i152);
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i242 := $mul.i32(out_$i239, out_$i241);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i241 := $add.i32(in_$i143, out_$i240);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$i240 := $mul.i32(in_$i6, in_$i152);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$i239 := $sub.i32(in_$i152, in_$i149);
    goto corral_source_split_3675;

  $bb91:
    assume !(out_$i230 == 1);
    goto corral_source_split_3674;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i269 := $sgt.i32(out_$i267, in_$i155);
    goto corral_source_split_3714;

  $bb102:
    assume !(out_$i268 == 1);
    goto corral_source_split_3713;

  $bb108_dummy:
    call {:si_unique_call 1} out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i280, out_$i169 := ppp_mp_explode_loop_$bb135(in_$p0, in_$i6, in_$i143, in_$i149, in_$i151, in_$i152, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, in_$i153, in_$i155, in_$i157, in_$p158, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i280, out_$i169);
    return;

  exit:
    return;
}



procedure ppp_mp_explode_loop_$bb135(in_$p0: ref, in_$i6: i32, in_$i143: i32, in_$i149: i32, in_$i151: i32, in_$i152: i32, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$i185: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$p193: ref, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i204: i32, in_$p205: ref, in_$p206: ref, in_$i207: i32, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i32, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i237: i32, in_$i238: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p278: ref, in_$p279: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$p275: ref, in_$p276: ref, in_$i277: i32, in_$i153: i1, in_$i155: i32, in_$i157: i32, in_$p158: ref, in_$p369: ref, in_$i370: i32, in_$i186: i32, in_$i203: i32, in_$p162: ref, in_$i173: i32, in_$i280: i32, in_$i169: i32) returns (out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$i185: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$p193: ref, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i204: i32, out_$p205: ref, out_$p206: ref, out_$i207: i32, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i32, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i237: i32, out_$i238: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p278: ref, out_$p279: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$p275: ref, out_$p276: ref, out_$i277: i32, out_$p369: ref, out_$i370: i32, out_$i186: i32, out_$i203: i32, out_$p162: ref, out_$i173: i32, out_$i280: i32, out_$i169: i32);
  modifies $M.10, assertsPassed, $M.0;



implementation ppp_mp_explode_loop_$bb59(in_$p0: ref, in_$i6: i32, in_$i143: i32, in_$i149: i32, in_$i151: i32, in_$i152: i32, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$i185: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$p193: ref, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i204: i32, in_$p205: ref, in_$p206: ref, in_$i207: i32, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i32, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i237: i32, in_$i238: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p278: ref, in_$p279: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$p275: ref, in_$p276: ref, in_$i277: i32, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i32, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i32, in_$p298: ref, in_$i299: i64, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$p303: ref, in_$p304: ref, in_$i305: i32, in_$i306: i32, in_$i307: i1, in_$i308: i8, in_$i309: i32, in_$p310: ref, in_$i311: i32, in_$i312: i32, in_$i313: i8, in_$i314: i32, in_$i315: i32, in_$i316: i32, in_$i317: i8, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$i321: i8, in_$p322: ref, in_$i323: i8, in_$p324: ref, in_$p325: ref, in_$i326: i32, in_$i327: i32, in_$i328: i8, in_$p329: ref, in_$p330: ref, in_$i331: i32, in_$i332: i32, in_$i333: i8, in_$p334: ref, in_$p335: ref, in_$i336: i32, in_$i337: i8, in_$p338: ref, in_$i339: i64, in_$p340: ref, in_$i341: i64, in_$p342: ref, in_$p343: ref, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p349: ref, in_$p350: ref, in_$p351: ref, in_$p352: ref, in_$p353: ref, in_$i354: i32, in_$i355: i1, in_$p357: ref, in_$p358: ref, in_$i359: i64, in_$p360: ref, in_$i361: i32, in_$p362: ref, in_$i363: i32, in_$i364: i32, in_$p365: ref, in_$p366: ref, in_$i367: i1, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$p369: ref, in_$i370: i32, in_$i186: i32, in_$i203: i32, in_$p162: ref, in_$i173: i32, in_$i368: i32, in_$i280: i32, in_$i169: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$i185: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$p193: ref, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i204: i32, out_$p205: ref, out_$p206: ref, out_$i207: i32, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i32, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i237: i32, out_$i238: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p278: ref, out_$p279: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$p275: ref, out_$p276: ref, out_$i277: i32, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i32, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i32, out_$p298: ref, out_$i299: i64, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$p303: ref, out_$p304: ref, out_$i305: i32, out_$i306: i32, out_$i307: i1, out_$i308: i8, out_$i309: i32, out_$p310: ref, out_$i311: i32, out_$i312: i32, out_$i313: i8, out_$i314: i32, out_$i315: i32, out_$i316: i32, out_$i317: i8, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$i321: i8, out_$p322: ref, out_$i323: i8, out_$p324: ref, out_$p325: ref, out_$i326: i32, out_$i327: i32, out_$i328: i8, out_$p329: ref, out_$p330: ref, out_$i331: i32, out_$i332: i32, out_$i333: i8, out_$p334: ref, out_$p335: ref, out_$i336: i32, out_$i337: i8, out_$p338: ref, out_$i339: i64, out_$p340: ref, out_$i341: i64, out_$p342: ref, out_$p343: ref, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p349: ref, out_$p350: ref, out_$p351: ref, out_$p352: ref, out_$p353: ref, out_$i354: i32, out_$i355: i1, out_$p357: ref, out_$p358: ref, out_$i359: i64, out_$p360: ref, out_$i361: i32, out_$p362: ref, out_$i363: i32, out_$i364: i32, out_$p365: ref, out_$p366: ref, out_$i367: i1, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$p369: ref, out_$i370: i32, out_$i186: i32, out_$i203: i32, out_$p162: ref, out_$i173: i32, out_$i368: i32, out_$i280: i32, out_$i169: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8)
{

  entry:
    out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$p301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$p322, out_$i323, out_$p324, out_$p325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$i336, out_$i337, out_$p338, out_$i339, out_$p340, out_$i341, out_$p342, out_$p343, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$i355, out_$p357, out_$p358, out_$i359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i368, out_$i280, out_$i169, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := in_$p161, in_$p163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$p170, in_$p171, in_$i172, in_$p174, in_$i175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$i181, in_$i185, in_$p187, in_$p188, in_$i189, in_$p182, in_$p183, in_$i184, in_$p193, in_$p190, in_$p191, in_$i192, in_$p194, in_$p195, in_$p196, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$i202, in_$i204, in_$p205, in_$p206, in_$i207, in_$i227, in_$p228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$p257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i237, in_$i238, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p278, in_$p279, in_$i272, in_$i273, in_$i274, in_$p275, in_$p276, in_$i277, in_$p281, in_$p282, in_$p283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$i299, in_$i300, in_$p301, in_$i302, in_$p303, in_$p304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$p310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$p318, in_$p319, in_$i320, in_$i321, in_$p322, in_$i323, in_$p324, in_$p325, in_$i326, in_$i327, in_$i328, in_$p329, in_$p330, in_$i331, in_$i332, in_$i333, in_$p334, in_$p335, in_$i336, in_$i337, in_$p338, in_$i339, in_$p340, in_$i341, in_$p342, in_$p343, in_$p345, in_$i346, in_$i347, in_$p349, in_$p350, in_$p351, in_$p352, in_$p353, in_$i354, in_$i355, in_$p357, in_$p358, in_$i359, in_$p360, in_$i361, in_$p362, in_$i363, in_$i364, in_$p365, in_$p366, in_$i367, in_$i153, in_$p154, in_$i155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$p369, in_$i370, in_$i186, in_$i203, in_$p162, in_$i173, in_$i368, in_$i280, in_$i169, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2;
    goto $bb59, exit;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3585;

  $bb133:
    assume out_$i367 == 1;
    assume {:verifier.code 0} true;
    out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160 := out_$i367, out_$p275, out_$i361, out_$i277, 0, out_$p360, out_$i273, out_$i272;
    goto $bb133_dummy;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i368 := out_$i277;
    assume true;
    goto $bb133;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i367 := $sgt.i32(out_$i361, 0);
    goto corral_source_split_3847;

  SeqInstr_396:
    goto corral_source_split_3846;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} ldv_spin_unlock_bh_167(out_$p366);
    goto SeqInstr_395;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$p366 := $add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p365, out_$i364);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p365 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i364 := $add.i32(out_$i363, 1);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i363 := $load.i32($M.0, out_$p362);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$p362 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$i361 := $sub.i32(out_$i155, out_$i290);
    call {:si_unique_call 645} {:cexpr "len"} boogie_si_record_i32(out_$i361);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$p360 := $add.ref(out_$p158, $mul.ref(out_$i359, 1));
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i359 := $sext.i32.i64(out_$i290);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p358, 1);
    goto corral_source_split_3836;

  $bb129:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(665, 1));
    goto corral_source_split_3835;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} skb_queue_tail(out_$p349, out_$p298);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p349 := $add.ref($add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3825;

  $bb127:
    assume out_$i347 == 1;
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 0);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} out_$i346 := skb_queue_empty(out_$p345);
    call {:si_unique_call 641} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i346);
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$p345 := $add.ref($add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$p343 := $load.ref($M.0, out_$p342);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$p342 := $add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 639} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p340, out_$p158, out_$i341, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$i341 := $sext.i32.i64(out_$i290);
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$p340 := $add.ref(out_$p303, $mul.ref(out_$i339, 1));
    goto corral_source_split_3815;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i339 := $sext.i32.i64(in_$i6);
    goto corral_source_split_3814;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p338, out_$i337);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p322, out_$i321);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$p322 := $add.ref(out_$p303, $mul.ref(3, 1));
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i321 := $trunc.i32.i8(out_$i320);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i32($M.0, out_$p319);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p318, out_$i317);
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref(out_$p303, $mul.ref(2, 1));
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$i317 := $trunc.i32.i8(out_$i316);
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i316 := $add.i32(out_$i309, out_$i315);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i315 := $and.i32(out_$i314, 15);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i314 := $zext.i8.i32(out_$i313);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i313 := $trunc.i32.i8(out_$i312);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i312 := $lshr.i32(out_$i311, 8);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i311 := $load.i32($M.0, out_$p310);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$p310 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$i309 := $zext.i8.i32(out_$i308);
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i308 := $trunc.i32.i8(out_$i293);
    goto corral_source_split_3775;

  $bb124:
    assume out_$i307 == 1;
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i307 := $ne.i32(out_$i306, 0);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i306 := $and.i32(out_$i305, 16384);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$i305 := $load.i32($M.0, out_$p304);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p304 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} put_unaligned_be16(61, out_$p303);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} out_$p303 := skb_put(out_$p298, out_$i302);
    goto corral_source_split_3767;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i302 := $add.i32(out_$i290, in_$i6);
    goto corral_source_split_3766;

  $bb121:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p301 := out_$p276;
    assume true;
    goto $bb121;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i64(out_$i299, 0);
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$i299 := $p2i.ref.i64(out_$p298);
    goto corral_source_split_3754;

  SeqInstr_387:
    goto corral_source_split_3753;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_$p298 := alloc_skb(out_$i297, 32);
    goto SeqInstr_386;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$i297 := $add.i32(out_$i294, out_$i296);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$i296 := $zext.i1.i32(out_$i295);
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i290, 0);
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i294 := $add.i32(out_$i290, in_$i6);
    goto corral_source_split_3749;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_3748;

  $bb118:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    out_$i293 := out_$i157;
    goto $bb119;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$i293 := out_$i292;
    goto $bb119;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$i292 := $or.i32(out_$i157, 64);
    call {:si_unique_call 634} {:cexpr "bits"} boogie_si_record_i32(out_$i292);
    goto corral_source_split_3746;

  $bb117:
    assume out_$i291 == 1;
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, out_$i155);
    goto corral_source_split_3743;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  $bb115:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    out_$i290 := out_$i274;
    goto $bb116;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i290 := out_$i288;
    goto $bb116;

  $bb114:
    assume out_$i289 == 1;
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$i289 := $sgt.i32(out_$i274, out_$i288);
    goto corral_source_split_3738;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  $bb112:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    out_$i288 := out_$i286;
    goto $bb113;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$i288 := 4;
    goto $bb113;

  $bb111:
    assume out_$i287 == 1;
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$i287 := $sle.i32(out_$i286, 3);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i286 := $add.i32(out_$i284, out_$i285);
    call {:si_unique_call 633} {:cexpr "mtu"} boogie_si_record_i32(out_$i286);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i285 := $sub.i32(2, in_$i6);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.0, out_$p283);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(out_$p282, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$p282 := $load.ref($M.0, out_$p281);
    goto corral_source_split_3728;

  $bb110:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3727;

  $bb107:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277 := out_$i265, out_$i266, out_$i270, out_$p190, out_$p191, out_$i192;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i271 := $sle.i32(out_$i270, 0);
    goto corral_source_split_3717;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  $bb104:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    out_$i270 := out_$i267;
    goto $bb105;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i270 := out_$i155;
    goto $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    assume out_$i269 == 1;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    assume out_$i268 == 1;
    goto $bb101;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb102;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$i268 := $sle.i32(out_$i266, 0);
    goto corral_source_split_3711;

  $bb99:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  $bb89:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    out_$i265, out_$i266, out_$i267 := out_$i203, out_$i186, out_$i155;
    goto $bb99;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266, out_$i267 := out_$i237, out_$i264, out_$i238;
    goto $bb99;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    out_$i264 := $sub.i32(out_$i186, 1);
    call {:si_unique_call 629} {:cexpr "nfree"} boogie_si_record_i32(out_$i264);
    goto corral_source_split_3694;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  $bb98:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i237, out_$i238 := out_$i262, out_$i263;
    goto $bb95;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$i237, out_$i238 := out_$i235, out_$i236;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3691;

  $bb93:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    out_$i235, out_$i236 := out_$i203, out_$i231;
    goto $bb94;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    out_$i235, out_$i236 := out_$i234, out_$i233;
    goto $bb94;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$i234 := $sub.i32(out_$i203, 1);
    call {:si_unique_call 628} {:cexpr "nbigger"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i233 := $add.i32(out_$i231, 1);
    call {:si_unique_call 627} {:cexpr "flen"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_3688;

  $bb92:
    assume out_$i232 == 1;
    goto corral_source_split_3687;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i232 := $sgt.i32(out_$i203, 0);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i231 := $sdiv.i32(out_$i155, out_$i186);
    call {:si_unique_call 625} {:cexpr "flen"} boogie_si_record_i32(out_$i231);
    goto corral_source_split_3671;

  $bb90:
    assume out_$i230 == 1;
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 0);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i229 := $load.i32($M.0, out_$p228);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p228 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3666;

  $bb88:
    assume out_$i227 == 1;
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i227 := $sgt.i32(out_$i186, 0);
    goto corral_source_split_3663;

  $bb77:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207 := out_$p158, out_$i157, out_$i155, out_$i203, out_$i186, out_$p190, out_$p191, out_$i192;
    assume true;
    goto $bb77;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i64(out_$i197, 0);
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    out_$i197 := $p2i.ref.i64(out_$p196);
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$p196 := $load.ref($M.0, out_$p195);
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3626;

  SeqInstr_378:
    goto corral_source_split_3625;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv_spin_lock_bh_166(out_$p194);
    goto SeqInstr_377;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3624;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p193, 1);
    assume {:verifier.code 0} true;
    out_$p190, out_$p191, out_$i192 := out_$p182, out_$p183, out_$i184;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p190, out_$p191, out_$i192 := out_$p187, out_$p188, out_$i189;
    goto $bb75;

  $bb73:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$p187, out_$p188, out_$i189 := out_$p163, out_$p171, out_$i172;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$i185 := $sgt.i32(out_$i186, 0);
    goto corral_source_split_3616;

  $bb70:
    assume out_$i181 == 1;
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$p182, out_$p183, out_$i184 := out_$p163, out_$p171, out_$i172;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 1);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i8.i32(out_$i179);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i8($M.0, out_$p178);
    goto corral_source_split_3611;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3610;

  $bb68:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i8.i32(out_$i175);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i8($M.0, out_$p174);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i173, 1);
    call {:si_unique_call 617} {:cexpr "i"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_3601;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p163);
    goto corral_source_split_3600;

  $bb62:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i64(out_$i164, out_$i166);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i166 := $p2i.ref.i64(out_$p165);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i164 := $p2i.ref.i64(out_$p163);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.0, out_$p161);
    goto corral_source_split_3588;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p162, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb136:
    call out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p162, out_$i173, out_$i169 := ppp_mp_explode_loop_$bb136(in_$p0, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$i153, out_$i186, out_$p162, out_$i173, out_$i169);
    goto $bb136_last;

  $bb136_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$p162, out_$i173 := out_$p369, out_$i370;
    goto $bb136;

  $bb64:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$p162, out_$i173 := out_$p163, out_$i168;
    assume false;
    return;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i168;
    assume true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i172;
    goto $bb63;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i172;
    goto $bb63;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$i168 := 0;
    goto $bb63;

  $bb61:
    assume out_$i167 == 1;
    goto corral_source_split_3594;

  $bb67:
    assume out_$i177 == 1;
    goto corral_source_split_3608;

  $bb72:
    assume out_$i185 == 1;
    goto corral_source_split_3621;

  $bb135:
    call out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i280, out_$i169 := ppp_mp_explode_loop_$bb135(in_$p0, in_$i6, in_$i143, in_$i149, in_$i151, in_$i152, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$i153, out_$i155, out_$i157, out_$p158, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i280, out_$i169);
    goto $bb135_last;

  $bb135_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p369, out_$i370, out_$i186, out_$i203 := out_$p154, out_$i156, out_$i159, out_$i160;
    goto $bb135;

  $bb108:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$p369, out_$i370, out_$i186, out_$i203 := out_$p190, out_$i192, out_$i266, out_$i265;
    assume false;
    return;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i280 := out_$i192;
    assume true;
    goto $bb108;

  SeqInstr_384:
    goto corral_source_split_3723;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} ldv_spin_unlock_bh_167(out_$p279);
    goto SeqInstr_383;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p278, 2);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3720;

  $bb106:
    assume out_$i271 == 1;
    goto corral_source_split_3719;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p183, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3619;

  $bb71:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  $bb97:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    out_$i262, out_$i263 := out_$i203, out_$i248;
    goto $bb98;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i262, out_$i263 := out_$i261, out_$i255;
    goto $bb98;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$i261 := $sub.i32(out_$i203, out_$i260);
    call {:si_unique_call 631} {:cexpr "nbigger"} boogie_si_record_i32(out_$i261);
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i260 := $sdiv.i32(out_$i259, in_$i151);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i259 := $mul.i32(out_$i256, out_$i258);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i258 := $load.i32($M.0, out_$p257);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i256 := $sub.i32(in_$i152, in_$i149);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i248, out_$i254);
    call {:si_unique_call 630} {:cexpr "flen"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$i254 := $sdiv.i32(out_$i253, in_$i151);
    goto corral_source_split_3701;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$i253 := $mul.i32(out_$i250, out_$i252);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.0, out_$p251);
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i250 := $sub.i32(in_$i152, in_$i149);
    goto corral_source_split_3697;

  $bb96:
    assume out_$i249 == 1;
    goto corral_source_split_3696;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i249 := $sgt.i32(out_$i203, 0);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i248 := $sub.i32(out_$i247, in_$i6);
    call {:si_unique_call 626} {:cexpr "flen"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$i247 := $sdiv.i32(out_$i242, out_$i246);
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i246 := $sdiv.i32(out_$i243, out_$i245);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.0, out_$p244);
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    out_$i243 := $mul.i32(in_$i151, in_$i152);
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i242 := $mul.i32(out_$i239, out_$i241);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i241 := $add.i32(in_$i143, out_$i240);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$i240 := $mul.i32(in_$i6, in_$i152);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$i239 := $sub.i32(in_$i152, in_$i149);
    goto corral_source_split_3675;

  $bb91:
    assume !(out_$i230 == 1);
    goto corral_source_split_3674;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i269 := $sgt.i32(out_$i267, out_$i155);
    goto corral_source_split_3714;

  $bb102:
    assume !(out_$i268 == 1);
    goto corral_source_split_3713;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    out_$p338 := $add.ref(out_$p303, $mul.ref(5, 1));
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$i337 := $trunc.i32.i8(out_$i336);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i32($M.0, out_$p335);
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$p335 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p334, out_$i333);
    goto corral_source_split_3808;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$p334 := $add.ref(out_$p303, $mul.ref(4, 1));
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$i333 := $trunc.i32.i8(out_$i332);
    goto corral_source_split_3806;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i332 := $lshr.i32(out_$i331, 8);
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$i331 := $load.i32($M.0, out_$p330);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$p330 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p329, out_$i328);
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    out_$p329 := $add.ref(out_$p303, $mul.ref(3, 1));
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$i328 := $trunc.i32.i8(out_$i327);
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i327 := $lshr.i32(out_$i326, 16);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i326 := $load.i32($M.0, out_$p325);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$p325 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p324, out_$i323);
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$p324 := $add.ref(out_$p303, $mul.ref(2, 1));
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$i323 := $trunc.i32.i8(out_$i293);
    goto corral_source_split_3794;

  $bb125:
    assume !(out_$i307 == 1);
    goto corral_source_split_3793;

  $bb131:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} skb_queue_tail(out_$p357, out_$p298);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$p357 := $add.ref($add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3850;

  $bb130:
    assume out_$i355 == 1;
    goto corral_source_split_3849;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 0);
    goto corral_source_split_3833;

  SeqInstr_393:
    call {:si_unique_call 644} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i354);
    goto corral_source_split_3832;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p353 := $load.ref($M.0, out_$p352);
    call {:si_unique_call 643} out_$i354 := devirtbounce.8(out_$p353, out_$p343, out_$p298);
    goto SeqInstr_392;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p352 := $add.ref($add.ref(out_$p351, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p351 := $load.ref($M.0, out_$p350);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$p350 := $add.ref($add.ref(out_$p343, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3829;

  $bb128:
    assume !(out_$i347 == 1);
    goto corral_source_split_3828;

  $bb133_dummy:
    call {:si_unique_call 1} out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$p301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$p322, out_$i323, out_$p324, out_$p325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$i336, out_$i337, out_$p338, out_$i339, out_$p340, out_$i341, out_$p342, out_$p343, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$i355, out_$p357, out_$p358, out_$i359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i368, out_$i280, out_$i169, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := ppp_mp_explode_loop_$bb59(in_$p0, in_$i6, in_$i143, in_$i149, in_$i151, in_$i152, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$p301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$p322, out_$i323, out_$p324, out_$p325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$i336, out_$i337, out_$p338, out_$i339, out_$p340, out_$i341, out_$p342, out_$p343, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$i355, out_$p357, out_$p358, out_$i359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i368, out_$i280, out_$i169, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    return;

  exit:
    return;
}



procedure ppp_mp_explode_loop_$bb59(in_$p0: ref, in_$i6: i32, in_$i143: i32, in_$i149: i32, in_$i151: i32, in_$i152: i32, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$i185: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$p193: ref, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i204: i32, in_$p205: ref, in_$p206: ref, in_$i207: i32, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i32, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i237: i32, in_$i238: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p278: ref, in_$p279: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$p275: ref, in_$p276: ref, in_$i277: i32, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i32, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i32, in_$p298: ref, in_$i299: i64, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$p303: ref, in_$p304: ref, in_$i305: i32, in_$i306: i32, in_$i307: i1, in_$i308: i8, in_$i309: i32, in_$p310: ref, in_$i311: i32, in_$i312: i32, in_$i313: i8, in_$i314: i32, in_$i315: i32, in_$i316: i32, in_$i317: i8, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$i321: i8, in_$p322: ref, in_$i323: i8, in_$p324: ref, in_$p325: ref, in_$i326: i32, in_$i327: i32, in_$i328: i8, in_$p329: ref, in_$p330: ref, in_$i331: i32, in_$i332: i32, in_$i333: i8, in_$p334: ref, in_$p335: ref, in_$i336: i32, in_$i337: i8, in_$p338: ref, in_$i339: i64, in_$p340: ref, in_$i341: i64, in_$p342: ref, in_$p343: ref, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p349: ref, in_$p350: ref, in_$p351: ref, in_$p352: ref, in_$p353: ref, in_$i354: i32, in_$i355: i1, in_$p357: ref, in_$p358: ref, in_$i359: i64, in_$p360: ref, in_$i361: i32, in_$p362: ref, in_$i363: i32, in_$i364: i32, in_$p365: ref, in_$p366: ref, in_$i367: i1, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$p369: ref, in_$i370: i32, in_$i186: i32, in_$i203: i32, in_$p162: ref, in_$i173: i32, in_$i368: i32, in_$i280: i32, in_$i169: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$i185: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$p193: ref, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i204: i32, out_$p205: ref, out_$p206: ref, out_$i207: i32, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i32, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i237: i32, out_$i238: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p278: ref, out_$p279: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$p275: ref, out_$p276: ref, out_$i277: i32, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i32, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i32, out_$p298: ref, out_$i299: i64, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$p303: ref, out_$p304: ref, out_$i305: i32, out_$i306: i32, out_$i307: i1, out_$i308: i8, out_$i309: i32, out_$p310: ref, out_$i311: i32, out_$i312: i32, out_$i313: i8, out_$i314: i32, out_$i315: i32, out_$i316: i32, out_$i317: i8, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$i321: i8, out_$p322: ref, out_$i323: i8, out_$p324: ref, out_$p325: ref, out_$i326: i32, out_$i327: i32, out_$i328: i8, out_$p329: ref, out_$p330: ref, out_$i331: i32, out_$i332: i32, out_$i333: i8, out_$p334: ref, out_$p335: ref, out_$i336: i32, out_$i337: i8, out_$p338: ref, out_$i339: i64, out_$p340: ref, out_$i341: i64, out_$p342: ref, out_$p343: ref, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p349: ref, out_$p350: ref, out_$p351: ref, out_$p352: ref, out_$p353: ref, out_$i354: i32, out_$i355: i1, out_$p357: ref, out_$p358: ref, out_$i359: i64, out_$p360: ref, out_$i361: i32, out_$p362: ref, out_$i363: i32, out_$i364: i32, out_$p365: ref, out_$p366: ref, out_$i367: i1, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$p369: ref, out_$i370: i32, out_$i186: i32, out_$i203: i32, out_$p162: ref, out_$i173: i32, out_$i368: i32, out_$i280: i32, out_$i169: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8);
  modifies $M.10, assertsPassed, $M.0, $M.8, $M.16, $CurrAddr, $M.2, $M.9, $M.33, $M.11, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation ppp_mp_explode_loop_$bb58(in_$p0: ref, in_$i6: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i32, in_$p146: ref, in_$i147: i32, in_$i148: i32, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$i185: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$p193: ref, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i204: i32, in_$p205: ref, in_$p206: ref, in_$i207: i32, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i212: i32, in_$i213: i32, in_$p217: ref, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i225: i1, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i32, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i237: i32, in_$i238: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p278: ref, in_$p279: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$p275: ref, in_$p276: ref, in_$i277: i32, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i32, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i32, in_$p298: ref, in_$i299: i64, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$p303: ref, in_$p304: ref, in_$i305: i32, in_$i306: i32, in_$i307: i1, in_$i308: i8, in_$i309: i32, in_$p310: ref, in_$i311: i32, in_$i312: i32, in_$i313: i8, in_$i314: i32, in_$i315: i32, in_$i316: i32, in_$i317: i8, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$i321: i8, in_$p322: ref, in_$i323: i8, in_$p324: ref, in_$p325: ref, in_$i326: i32, in_$i327: i32, in_$i328: i8, in_$p329: ref, in_$p330: ref, in_$i331: i32, in_$i332: i32, in_$i333: i8, in_$p334: ref, in_$p335: ref, in_$i336: i32, in_$i337: i8, in_$p338: ref, in_$i339: i64, in_$p340: ref, in_$i341: i64, in_$p342: ref, in_$p343: ref, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p349: ref, in_$p350: ref, in_$p351: ref, in_$p352: ref, in_$p353: ref, in_$i354: i32, in_$i355: i1, in_$p357: ref, in_$p358: ref, in_$i359: i64, in_$p360: ref, in_$i361: i32, in_$p362: ref, in_$i363: i32, in_$i364: i32, in_$p365: ref, in_$p366: ref, in_$i367: i1, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$p369: ref, in_$i370: i32, in_$i186: i32, in_$i203: i32, in_$p162: ref, in_$i173: i32, in_$i226: i32, in_$i368: i32, in_$i280: i32, in_$i169: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i32, out_$p146: ref, out_$i147: i32, out_$i148: i32, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$i185: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$p193: ref, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i204: i32, out_$p205: ref, out_$p206: ref, out_$i207: i32, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i212: i32, out_$i213: i32, out_$p217: ref, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i225: i1, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i32, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i237: i32, out_$i238: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p278: ref, out_$p279: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$p275: ref, out_$p276: ref, out_$i277: i32, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i32, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i32, out_$p298: ref, out_$i299: i64, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$p303: ref, out_$p304: ref, out_$i305: i32, out_$i306: i32, out_$i307: i1, out_$i308: i8, out_$i309: i32, out_$p310: ref, out_$i311: i32, out_$i312: i32, out_$i313: i8, out_$i314: i32, out_$i315: i32, out_$i316: i32, out_$i317: i8, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$i321: i8, out_$p322: ref, out_$i323: i8, out_$p324: ref, out_$p325: ref, out_$i326: i32, out_$i327: i32, out_$i328: i8, out_$p329: ref, out_$p330: ref, out_$i331: i32, out_$i332: i32, out_$i333: i8, out_$p334: ref, out_$p335: ref, out_$i336: i32, out_$i337: i8, out_$p338: ref, out_$i339: i64, out_$p340: ref, out_$i341: i64, out_$p342: ref, out_$p343: ref, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p349: ref, out_$p350: ref, out_$p351: ref, out_$p352: ref, out_$p353: ref, out_$i354: i32, out_$i355: i1, out_$p357: ref, out_$p358: ref, out_$i359: i64, out_$p360: ref, out_$i361: i32, out_$p362: ref, out_$i363: i32, out_$i364: i32, out_$p365: ref, out_$p366: ref, out_$i367: i1, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$p369: ref, out_$i370: i32, out_$i186: i32, out_$i203: i32, out_$p162: ref, out_$i173: i32, out_$i226: i32, out_$i368: i32, out_$i280: i32, out_$i169: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8)
{

  entry:
    out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$p214, out_$i215, out_$i216, out_$i212, out_$i213, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i225, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$p301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$p322, out_$i323, out_$p324, out_$p325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$i336, out_$i337, out_$p338, out_$i339, out_$p340, out_$i341, out_$p342, out_$p343, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$i355, out_$p357, out_$p358, out_$i359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i226, out_$i368, out_$i280, out_$i169, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := in_$i140, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$p161, in_$p163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$p170, in_$p171, in_$i172, in_$p174, in_$i175, in_$i176, in_$i177, in_$p178, in_$i179, in_$i180, in_$i181, in_$i185, in_$p187, in_$p188, in_$i189, in_$p182, in_$p183, in_$i184, in_$p193, in_$p190, in_$p191, in_$i192, in_$p194, in_$p195, in_$p196, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$i202, in_$i204, in_$p205, in_$p206, in_$i207, in_$p208, in_$i209, in_$i210, in_$i211, in_$p214, in_$i215, in_$i216, in_$i212, in_$i213, in_$p217, in_$p218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i225, in_$i227, in_$p228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$p257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i237, in_$i238, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p278, in_$p279, in_$i272, in_$i273, in_$i274, in_$p275, in_$p276, in_$i277, in_$p281, in_$p282, in_$p283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$i299, in_$i300, in_$p301, in_$i302, in_$p303, in_$p304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$p310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$p318, in_$p319, in_$i320, in_$i321, in_$p322, in_$i323, in_$p324, in_$p325, in_$i326, in_$i327, in_$i328, in_$p329, in_$p330, in_$i331, in_$i332, in_$i333, in_$p334, in_$p335, in_$i336, in_$i337, in_$p338, in_$i339, in_$p340, in_$i341, in_$p342, in_$p343, in_$p345, in_$i346, in_$i347, in_$p349, in_$p350, in_$p351, in_$p352, in_$p353, in_$i354, in_$i355, in_$p357, in_$p358, in_$i359, in_$p360, in_$i361, in_$p362, in_$i363, in_$i364, in_$p365, in_$p366, in_$i367, in_$i153, in_$p154, in_$i155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$p369, in_$i370, in_$i186, in_$i203, in_$p162, in_$i173, in_$i226, in_$i368, in_$i280, in_$i169, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2;
    goto $bb58, exit;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3583;

  $bb85:
    assume out_$i225 == 1;
    assume {:verifier.code 0} true;
    out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152 := out_$i225, out_$p205, out_$i201, out_$i201, out_$i207, out_$i200, out_$p199, out_$i221, out_$i220, out_$i213, out_$i202, out_$i212, out_$i219;
    goto $bb85_dummy;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    out_$i226 := out_$i207;
    assume true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i225 := $sgt.i32(out_$i201, 0);
    goto corral_source_split_3659;

  $bb82:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i223 := out_$i207;
    assume true;
    goto $bb82;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 0);
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i221 := $sub.i32(out_$i147, 1);
    call {:si_unique_call 624} {:cexpr "navail"} boogie_si_record_i32(out_$i221);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i220 := $sub.i32(out_$i204, 1);
    call {:si_unique_call 623} {:cexpr "nfree"} boogie_si_record_i32(out_$i220);
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$i219 := $sub.i32(out_$i152, 1);
    call {:si_unique_call 622} {:cexpr "totfree"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p218, 0);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(out_$p206, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3646;

  SeqInstr_381:
    goto corral_source_split_3645;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} ldv_spin_unlock_bh_167(out_$p217);
    goto SeqInstr_380;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(out_$p206, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3644;

  $bb80:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i216 := $sub.i32(out_$i151, out_$i215);
    call {:si_unique_call 620} {:cexpr "totspeed"} boogie_si_record_i32(out_$i216);
    assume {:verifier.code 0} true;
    out_$i212, out_$i213 := out_$i216, out_$i149;
    goto $bb80;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$i212, out_$i213 := out_$i151, out_$i211;
    goto $bb80;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$i211 := $sub.i32(out_$i149, 1);
    call {:si_unique_call 619} {:cexpr "nzero"} boogie_si_record_i32(out_$i211);
    goto corral_source_split_3637;

  $bb78:
    assume out_$i210 == 1;
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 0);
    goto corral_source_split_3634;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i32($M.0, out_$p208);
    goto corral_source_split_3633;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(out_$p206, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3632;

  $bb76:
    assume out_$i198 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3631;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207 := out_$p158, out_$i157, out_$i155, out_$i203, out_$i186, out_$p190, out_$p191, out_$i192;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i64(out_$i197, 0);
    goto corral_source_split_3629;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    out_$i197 := $p2i.ref.i64(out_$p196);
    goto corral_source_split_3628;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    out_$p196 := $load.ref($M.0, out_$p195);
    goto corral_source_split_3627;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3626;

  SeqInstr_378:
    goto corral_source_split_3625;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} ldv_spin_lock_bh_166(out_$p194);
    goto SeqInstr_377;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    out_$p194 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3624;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p193, 1);
    assume {:verifier.code 0} true;
    out_$p190, out_$p191, out_$i192 := out_$p182, out_$p183, out_$i184;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p190, out_$p191, out_$i192 := out_$p187, out_$p188, out_$i189;
    goto $bb75;

  $bb73:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    out_$p187, out_$p188, out_$i189 := out_$p163, out_$p171, out_$i172;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    out_$i185 := $sgt.i32(out_$i186, 0);
    goto corral_source_split_3616;

  $bb70:
    assume out_$i181 == 1;
    goto corral_source_split_3615;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$p182, out_$p183, out_$i184 := out_$p163, out_$p171, out_$i172;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 1);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i8.i32(out_$i179);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i179 := $load.i8($M.0, out_$p178);
    goto corral_source_split_3611;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3610;

  $bb68:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i176 := $zext.i8.i32(out_$i175);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i175 := $load.i8($M.0, out_$p174);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(664, 1));
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i173, 1);
    call {:si_unique_call 617} {:cexpr "i"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref(out_$p170, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_3601;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p170 := $bitcast.ref.ref(out_$p163);
    goto corral_source_split_3600;

  $bb62:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i64(out_$i164, out_$i166);
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$i166 := $p2i.ref.i64(out_$p165);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i164 := $p2i.ref.i64(out_$p163);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.0, out_$p161);
    goto corral_source_split_3588;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p162, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3587;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb136:
    call out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p162, out_$i173, out_$i169 := ppp_mp_explode_loop_$bb136(in_$p0, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$i153, out_$i186, out_$p162, out_$i173, out_$i169);
    goto $bb136_last;

  $bb136_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$p162, out_$i173 := out_$p369, out_$i370;
    goto $bb136;

  $bb64:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$p162, out_$i173 := out_$p163, out_$i168;
    assume false;
    return;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i168;
    assume true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i172;
    goto $bb63;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i172;
    goto $bb63;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$i168 := 0;
    goto $bb63;

  $bb61:
    assume out_$i167 == 1;
    goto corral_source_split_3594;

  $bb67:
    assume out_$i177 == 1;
    goto corral_source_split_3608;

  $bb72:
    assume out_$i185 == 1;
    goto corral_source_split_3621;

  $bb135:
    call out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i280, out_$i169 := ppp_mp_explode_loop_$bb135(in_$p0, in_$i6, out_$i143, out_$i149, out_$i151, out_$i152, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$i153, out_$i155, out_$i157, out_$p158, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i280, out_$i169);
    goto $bb135_last;

  $bb135_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p369, out_$i370, out_$i186, out_$i203 := out_$p154, out_$i156, out_$i159, out_$i160;
    goto $bb135;

  $bb108:
    assume out_$i153 == 1;
    assume {:verifier.code 0} true;
    out_$p369, out_$i370, out_$i186, out_$i203 := out_$p190, out_$i192, out_$i266, out_$i265;
    assume false;
    return;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i280 := out_$i192;
    assume true;
    goto $bb108;

  SeqInstr_384:
    goto corral_source_split_3723;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} ldv_spin_unlock_bh_167(out_$p279);
    goto SeqInstr_383;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p278, 2);
    goto corral_source_split_3721;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3720;

  $bb106:
    assume out_$i271 == 1;
    goto corral_source_split_3719;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277 := out_$i265, out_$i266, out_$i270, out_$p190, out_$p191, out_$i192;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    out_$i271 := $sle.i32(out_$i270, 0);
    goto corral_source_split_3717;

  $bb105:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  $bb104:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    out_$i270 := out_$i267;
    goto $bb105;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i270 := out_$i155;
    goto $bb105;

  $bb103:
    assume {:verifier.code 0} true;
    assume out_$i269 == 1;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    assume out_$i268 == 1;
    goto $bb101;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb102;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    out_$i268 := $sle.i32(out_$i266, 0);
    goto corral_source_split_3711;

  $bb99:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  $bb89:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    out_$i265, out_$i266, out_$i267 := out_$i203, out_$i186, out_$i155;
    goto $bb99;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    out_$i265, out_$i266, out_$i267 := out_$i237, out_$i264, out_$i238;
    goto $bb99;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    out_$i264 := $sub.i32(out_$i186, 1);
    call {:si_unique_call 629} {:cexpr "nfree"} boogie_si_record_i32(out_$i264);
    goto corral_source_split_3694;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3693;

  $bb98:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i237, out_$i238 := out_$i262, out_$i263;
    goto $bb95;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    out_$i237, out_$i238 := out_$i235, out_$i236;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3691;

  $bb93:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    out_$i235, out_$i236 := out_$i203, out_$i231;
    goto $bb94;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    out_$i235, out_$i236 := out_$i234, out_$i233;
    goto $bb94;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    out_$i234 := $sub.i32(out_$i203, 1);
    call {:si_unique_call 628} {:cexpr "nbigger"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_3689;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    out_$i233 := $add.i32(out_$i231, 1);
    call {:si_unique_call 627} {:cexpr "flen"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_3688;

  $bb92:
    assume out_$i232 == 1;
    goto corral_source_split_3687;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i232 := $sgt.i32(out_$i203, 0);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i231 := $sdiv.i32(out_$i155, out_$i186);
    call {:si_unique_call 625} {:cexpr "flen"} boogie_si_record_i32(out_$i231);
    goto corral_source_split_3671;

  $bb90:
    assume out_$i230 == 1;
    goto corral_source_split_3670;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 0);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$i229 := $load.i32($M.0, out_$p228);
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$p228 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3666;

  $bb88:
    assume out_$i227 == 1;
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i227 := $sgt.i32(out_$i186, 0);
    goto corral_source_split_3663;

  $bb77:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb97:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    out_$i262, out_$i263 := out_$i203, out_$i248;
    goto $bb98;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    out_$i262, out_$i263 := out_$i261, out_$i255;
    goto $bb98;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    out_$i261 := $sub.i32(out_$i203, out_$i260);
    call {:si_unique_call 631} {:cexpr "nbigger"} boogie_si_record_i32(out_$i261);
    goto corral_source_split_3708;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    out_$i260 := $sdiv.i32(out_$i259, out_$i151);
    goto corral_source_split_3707;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    out_$i259 := $mul.i32(out_$i256, out_$i258);
    goto corral_source_split_3706;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    out_$i258 := $load.i32($M.0, out_$p257);
    goto corral_source_split_3705;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3704;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    out_$i256 := $sub.i32(out_$i152, out_$i149);
    goto corral_source_split_3703;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i255 := $add.i32(out_$i248, out_$i254);
    call {:si_unique_call 630} {:cexpr "flen"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$i254 := $sdiv.i32(out_$i253, out_$i151);
    goto corral_source_split_3701;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    out_$i253 := $mul.i32(out_$i250, out_$i252);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.0, out_$p251);
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$i250 := $sub.i32(out_$i152, out_$i149);
    goto corral_source_split_3697;

  $bb96:
    assume out_$i249 == 1;
    goto corral_source_split_3696;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    out_$i249 := $sgt.i32(out_$i203, 0);
    goto corral_source_split_3685;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    out_$i248 := $sub.i32(out_$i247, in_$i6);
    call {:si_unique_call 626} {:cexpr "flen"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_3684;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    out_$i247 := $sdiv.i32(out_$i242, out_$i246);
    goto corral_source_split_3683;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    out_$i246 := $sdiv.i32(out_$i243, out_$i245);
    goto corral_source_split_3682;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.0, out_$p244);
    goto corral_source_split_3681;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(out_$p191, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3680;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    out_$i243 := $mul.i32(out_$i151, out_$i152);
    goto corral_source_split_3679;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    out_$i242 := $mul.i32(out_$i239, out_$i241);
    goto corral_source_split_3678;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    out_$i241 := $add.i32(out_$i143, out_$i240);
    goto corral_source_split_3677;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    out_$i240 := $mul.i32(in_$i6, out_$i152);
    goto corral_source_split_3676;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    out_$i239 := $sub.i32(out_$i152, out_$i149);
    goto corral_source_split_3675;

  $bb91:
    assume !(out_$i230 == 1);
    goto corral_source_split_3674;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    out_$i269 := $sgt.i32(out_$i267, out_$i155);
    goto corral_source_split_3714;

  $bb102:
    assume !(out_$i268 == 1);
    goto corral_source_split_3713;

  $bb59:
    call out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$p301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$p322, out_$i323, out_$p324, out_$p325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$i336, out_$i337, out_$p338, out_$i339, out_$p340, out_$i341, out_$p342, out_$p343, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$i355, out_$p357, out_$p358, out_$i359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i368, out_$i280, out_$i169, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := ppp_mp_explode_loop_$bb59(in_$p0, in_$i6, out_$i143, out_$i149, out_$i151, out_$i152, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$p301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$p322, out_$i323, out_$p324, out_$p325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$i336, out_$i337, out_$p338, out_$i339, out_$p340, out_$i341, out_$p342, out_$p343, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$i355, out_$p357, out_$p358, out_$i359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i368, out_$i280, out_$i169, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    goto $bb59_last;

  $bb59_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160 := out_$i140, out_$p141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i148, out_$i150;
    goto $bb59;

  $bb133:
    assume out_$i367 == 1;
    assume {:verifier.code 0} true;
    out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160 := out_$i367, out_$p275, out_$i361, out_$i277, 0, out_$p360, out_$i273, out_$i272;
    assume false;
    return;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$i368 := out_$i277;
    assume true;
    goto $bb133;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$i367 := $sgt.i32(out_$i361, 0);
    goto corral_source_split_3847;

  SeqInstr_396:
    goto corral_source_split_3846;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} ldv_spin_unlock_bh_167(out_$p366);
    goto SeqInstr_395;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$p366 := $add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(488, 1));
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p365, out_$i364);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p365 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i364 := $add.i32(out_$i363, 1);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i363 := $load.i32($M.0, out_$p362);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$p362 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$i361 := $sub.i32(out_$i155, out_$i290);
    call {:si_unique_call 645} {:cexpr "len"} boogie_si_record_i32(out_$i361);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    out_$p360 := $add.ref(out_$p158, $mul.ref(out_$i359, 1));
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$i359 := $sext.i32.i64(out_$i290);
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p358, 1);
    goto corral_source_split_3836;

  $bb129:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(665, 1));
    goto corral_source_split_3835;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} skb_queue_tail(out_$p349, out_$p298);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p349 := $add.ref($add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3825;

  $bb127:
    assume out_$i347 == 1;
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 0);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} out_$i346 := skb_queue_empty(out_$p345);
    call {:si_unique_call 641} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i346);
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$p345 := $add.ref($add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$p343 := $load.ref($M.0, out_$p342);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$p342 := $add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 639} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p340, out_$p158, out_$i341, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$i341 := $sext.i32.i64(out_$i290);
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$p340 := $add.ref(out_$p303, $mul.ref(out_$i339, 1));
    goto corral_source_split_3815;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i339 := $sext.i32.i64(in_$i6);
    goto corral_source_split_3814;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p338, out_$i337);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p322, out_$i321);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$p322 := $add.ref(out_$p303, $mul.ref(3, 1));
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_$i321 := $trunc.i32.i8(out_$i320);
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i32($M.0, out_$p319);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p318, out_$i317);
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref(out_$p303, $mul.ref(2, 1));
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$i317 := $trunc.i32.i8(out_$i316);
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i316 := $add.i32(out_$i309, out_$i315);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$i315 := $and.i32(out_$i314, 15);
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    out_$i314 := $zext.i8.i32(out_$i313);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i313 := $trunc.i32.i8(out_$i312);
    goto corral_source_split_3780;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i312 := $lshr.i32(out_$i311, 8);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i311 := $load.i32($M.0, out_$p310);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$p310 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$i309 := $zext.i8.i32(out_$i308);
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i308 := $trunc.i32.i8(out_$i293);
    goto corral_source_split_3775;

  $bb124:
    assume out_$i307 == 1;
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i307 := $ne.i32(out_$i306, 0);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i306 := $and.i32(out_$i305, 16384);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$i305 := $load.i32($M.0, out_$p304);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p304 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} put_unaligned_be16(61, out_$p303);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} out_$p303 := skb_put(out_$p298, out_$i302);
    goto corral_source_split_3767;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i302 := $add.i32(out_$i290, in_$i6);
    goto corral_source_split_3766;

  $bb121:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p301 := out_$p276;
    assume true;
    goto $bb121;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    out_$i300 := $eq.i64(out_$i299, 0);
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$i299 := $p2i.ref.i64(out_$p298);
    goto corral_source_split_3754;

  SeqInstr_387:
    goto corral_source_split_3753;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_$p298 := alloc_skb(out_$i297, 32);
    goto SeqInstr_386;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$i297 := $add.i32(out_$i294, out_$i296);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$i296 := $zext.i1.i32(out_$i295);
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i290, 0);
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i294 := $add.i32(out_$i290, in_$i6);
    goto corral_source_split_3749;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_3748;

  $bb118:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    out_$i293 := out_$i157;
    goto $bb119;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$i293 := out_$i292;
    goto $bb119;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$i292 := $or.i32(out_$i157, 64);
    call {:si_unique_call 634} {:cexpr "bits"} boogie_si_record_i32(out_$i292);
    goto corral_source_split_3746;

  $bb117:
    assume out_$i291 == 1;
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, out_$i155);
    goto corral_source_split_3743;

  $bb116:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  $bb115:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    out_$i290 := out_$i274;
    goto $bb116;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    out_$i290 := out_$i288;
    goto $bb116;

  $bb114:
    assume out_$i289 == 1;
    goto corral_source_split_3740;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    out_$i289 := $sgt.i32(out_$i274, out_$i288);
    goto corral_source_split_3738;

  $bb113:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  $bb112:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    out_$i288 := out_$i286;
    goto $bb113;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$i288 := 4;
    goto $bb113;

  $bb111:
    assume out_$i287 == 1;
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$i287 := $sle.i32(out_$i286, 3);
    goto corral_source_split_3733;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    out_$i286 := $add.i32(out_$i284, out_$i285);
    call {:si_unique_call 633} {:cexpr "mtu"} boogie_si_record_i32(out_$i286);
    goto corral_source_split_3732;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    out_$i285 := $sub.i32(2, in_$i6);
    goto corral_source_split_3731;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.0, out_$p283);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref($add.ref(out_$p282, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    out_$p282 := $load.ref($M.0, out_$p281);
    goto corral_source_split_3728;

  $bb110:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3727;

  $bb107:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    out_$p338 := $add.ref(out_$p303, $mul.ref(5, 1));
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$i337 := $trunc.i32.i8(out_$i336);
    goto corral_source_split_3811;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i32($M.0, out_$p335);
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    out_$p335 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3809;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p334, out_$i333);
    goto corral_source_split_3808;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    out_$p334 := $add.ref(out_$p303, $mul.ref(4, 1));
    goto corral_source_split_3807;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    out_$i333 := $trunc.i32.i8(out_$i332);
    goto corral_source_split_3806;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i332 := $lshr.i32(out_$i331, 8);
    goto corral_source_split_3805;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$i331 := $load.i32($M.0, out_$p330);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$p330 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p329, out_$i328);
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    out_$p329 := $add.ref(out_$p303, $mul.ref(3, 1));
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$i328 := $trunc.i32.i8(out_$i327);
    goto corral_source_split_3800;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i327 := $lshr.i32(out_$i326, 16);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i326 := $load.i32($M.0, out_$p325);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$p325 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(608, 1));
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p324, out_$i323);
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$p324 := $add.ref(out_$p303, $mul.ref(2, 1));
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$i323 := $trunc.i32.i8(out_$i293);
    goto corral_source_split_3794;

  $bb125:
    assume !(out_$i307 == 1);
    goto corral_source_split_3793;

  $bb131:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} skb_queue_tail(out_$p357, out_$p298);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$p357 := $add.ref($add.ref($add.ref(out_$p276, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3850;

  $bb130:
    assume out_$i355 == 1;
    goto corral_source_split_3849;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 0);
    goto corral_source_split_3833;

  SeqInstr_393:
    call {:si_unique_call 644} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i354);
    goto corral_source_split_3832;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p353 := $load.ref($M.0, out_$p352);
    call {:si_unique_call 643} out_$i354 := devirtbounce.8(out_$p353, out_$p343, out_$p298);
    goto SeqInstr_392;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p352 := $add.ref($add.ref(out_$p351, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p351 := $load.ref($M.0, out_$p350);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$p350 := $add.ref($add.ref(out_$p343, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3829;

  $bb128:
    assume !(out_$i347 == 1);
    goto corral_source_split_3828;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p183, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3619;

  $bb71:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.0, out_$p214);
    goto corral_source_split_3641;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(out_$p206, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3640;

  $bb79:
    assume !(out_$i210 == 1);
    goto corral_source_split_3639;

  $bb85_dummy:
    call {:si_unique_call 1} out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$p214, out_$i215, out_$i216, out_$i212, out_$i213, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i225, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$p301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$p322, out_$i323, out_$p324, out_$p325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$i336, out_$i337, out_$p338, out_$i339, out_$p340, out_$i341, out_$p342, out_$p343, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$i355, out_$p357, out_$p358, out_$i359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i226, out_$i368, out_$i280, out_$i169, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := ppp_mp_explode_loop_$bb58(in_$p0, in_$i6, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$p161, out_$p163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$p170, out_$p171, out_$i172, out_$p174, out_$i175, out_$i176, out_$i177, out_$p178, out_$i179, out_$i180, out_$i181, out_$i185, out_$p187, out_$p188, out_$i189, out_$p182, out_$p183, out_$i184, out_$p193, out_$p190, out_$p191, out_$i192, out_$p194, out_$p195, out_$p196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i204, out_$p205, out_$p206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i211, out_$p214, out_$i215, out_$i216, out_$i212, out_$i213, out_$p217, out_$p218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i225, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i237, out_$i238, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p278, out_$p279, out_$i272, out_$i273, out_$i274, out_$p275, out_$p276, out_$i277, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$i299, out_$i300, out_$p301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$p310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$i320, out_$i321, out_$p322, out_$i323, out_$p324, out_$p325, out_$i326, out_$i327, out_$i328, out_$p329, out_$p330, out_$i331, out_$i332, out_$i333, out_$p334, out_$p335, out_$i336, out_$i337, out_$p338, out_$i339, out_$p340, out_$i341, out_$p342, out_$p343, out_$p345, out_$i346, out_$i347, out_$p349, out_$p350, out_$p351, out_$p352, out_$p353, out_$i354, out_$i355, out_$p357, out_$p358, out_$i359, out_$p360, out_$i361, out_$p362, out_$i363, out_$i364, out_$p365, out_$p366, out_$i367, out_$i153, out_$p154, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p369, out_$i370, out_$i186, out_$i203, out_$p162, out_$i173, out_$i226, out_$i368, out_$i280, out_$i169, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    return;

  exit:
    return;
}



procedure ppp_mp_explode_loop_$bb58(in_$p0: ref, in_$i6: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i32, in_$p146: ref, in_$i147: i32, in_$i148: i32, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i32, in_$p161: ref, in_$p163: ref, in_$i164: i64, in_$p165: ref, in_$i166: i64, in_$i167: i1, in_$i168: i32, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$p174: ref, in_$i175: i8, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$i179: i8, in_$i180: i32, in_$i181: i1, in_$i185: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$p193: ref, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$i197: i64, in_$i198: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i202: i32, in_$i204: i32, in_$p205: ref, in_$p206: ref, in_$i207: i32, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$p214: ref, in_$i215: i32, in_$i216: i32, in_$i212: i32, in_$i213: i32, in_$p217: ref, in_$p218: ref, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i225: i1, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i32, in_$i236: i32, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i32, in_$i243: i32, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i32, in_$i249: i1, in_$i250: i32, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i32, in_$i262: i32, in_$i263: i32, in_$i237: i32, in_$i238: i32, in_$i264: i32, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i1, in_$i270: i32, in_$i271: i1, in_$p278: ref, in_$p279: ref, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$p275: ref, in_$p276: ref, in_$i277: i32, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i286: i32, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i32, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i32, in_$p298: ref, in_$i299: i64, in_$i300: i1, in_$p301: ref, in_$i302: i32, in_$p303: ref, in_$p304: ref, in_$i305: i32, in_$i306: i32, in_$i307: i1, in_$i308: i8, in_$i309: i32, in_$p310: ref, in_$i311: i32, in_$i312: i32, in_$i313: i8, in_$i314: i32, in_$i315: i32, in_$i316: i32, in_$i317: i8, in_$p318: ref, in_$p319: ref, in_$i320: i32, in_$i321: i8, in_$p322: ref, in_$i323: i8, in_$p324: ref, in_$p325: ref, in_$i326: i32, in_$i327: i32, in_$i328: i8, in_$p329: ref, in_$p330: ref, in_$i331: i32, in_$i332: i32, in_$i333: i8, in_$p334: ref, in_$p335: ref, in_$i336: i32, in_$i337: i8, in_$p338: ref, in_$i339: i64, in_$p340: ref, in_$i341: i64, in_$p342: ref, in_$p343: ref, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p349: ref, in_$p350: ref, in_$p351: ref, in_$p352: ref, in_$p353: ref, in_$i354: i32, in_$i355: i1, in_$p357: ref, in_$p358: ref, in_$i359: i64, in_$p360: ref, in_$i361: i32, in_$p362: ref, in_$i363: i32, in_$i364: i32, in_$p365: ref, in_$p366: ref, in_$i367: i1, in_$i153: i1, in_$p154: ref, in_$i155: i32, in_$i156: i32, in_$i157: i32, in_$p158: ref, in_$i159: i32, in_$i160: i32, in_$p369: ref, in_$i370: i32, in_$i186: i32, in_$i203: i32, in_$p162: ref, in_$i173: i32, in_$i226: i32, in_$i368: i32, in_$i280: i32, in_$i169: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i32, out_$p146: ref, out_$i147: i32, out_$i148: i32, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i32, out_$p161: ref, out_$p163: ref, out_$i164: i64, out_$p165: ref, out_$i166: i64, out_$i167: i1, out_$i168: i32, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$p174: ref, out_$i175: i8, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$i179: i8, out_$i180: i32, out_$i181: i1, out_$i185: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$p193: ref, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$i197: i64, out_$i198: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i202: i32, out_$i204: i32, out_$p205: ref, out_$p206: ref, out_$i207: i32, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$p214: ref, out_$i215: i32, out_$i216: i32, out_$i212: i32, out_$i213: i32, out_$p217: ref, out_$p218: ref, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i225: i1, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i32, out_$i236: i32, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i32, out_$i243: i32, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i32, out_$i249: i1, out_$i250: i32, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i32, out_$i262: i32, out_$i263: i32, out_$i237: i32, out_$i238: i32, out_$i264: i32, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i1, out_$i270: i32, out_$i271: i1, out_$p278: ref, out_$p279: ref, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$p275: ref, out_$p276: ref, out_$i277: i32, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i286: i32, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i32, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i32, out_$p298: ref, out_$i299: i64, out_$i300: i1, out_$p301: ref, out_$i302: i32, out_$p303: ref, out_$p304: ref, out_$i305: i32, out_$i306: i32, out_$i307: i1, out_$i308: i8, out_$i309: i32, out_$p310: ref, out_$i311: i32, out_$i312: i32, out_$i313: i8, out_$i314: i32, out_$i315: i32, out_$i316: i32, out_$i317: i8, out_$p318: ref, out_$p319: ref, out_$i320: i32, out_$i321: i8, out_$p322: ref, out_$i323: i8, out_$p324: ref, out_$p325: ref, out_$i326: i32, out_$i327: i32, out_$i328: i8, out_$p329: ref, out_$p330: ref, out_$i331: i32, out_$i332: i32, out_$i333: i8, out_$p334: ref, out_$p335: ref, out_$i336: i32, out_$i337: i8, out_$p338: ref, out_$i339: i64, out_$p340: ref, out_$i341: i64, out_$p342: ref, out_$p343: ref, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p349: ref, out_$p350: ref, out_$p351: ref, out_$p352: ref, out_$p353: ref, out_$i354: i32, out_$i355: i1, out_$p357: ref, out_$p358: ref, out_$i359: i64, out_$p360: ref, out_$i361: i32, out_$p362: ref, out_$i363: i32, out_$i364: i32, out_$p365: ref, out_$p366: ref, out_$i367: i1, out_$i153: i1, out_$p154: ref, out_$i155: i32, out_$i156: i32, out_$i157: i32, out_$p158: ref, out_$i159: i32, out_$i160: i32, out_$p369: ref, out_$i370: i32, out_$i186: i32, out_$i203: i32, out_$p162: ref, out_$i173: i32, out_$i226: i32, out_$i368: i32, out_$i280: i32, out_$i169: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8);
  modifies $M.0, $M.10, assertsPassed, $M.8, $M.16, $CurrAddr, $M.2, $M.9, $M.33, $M.11, $M.18, $M.7, $M.3, $M.34, $M.6, $M.19;



implementation ppp_mp_explode_loop_$bb46(in_$p0: ref, in_$p117: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$i128: i64, in_$i129: i1, in_$p130: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$p122: ref, in_$i123: i32, in_$i136: i32, in_$p137: ref) returns (out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$i128: i64, out_$i129: i1, out_$p130: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$p122: ref, out_$i123: i32, out_$i136: i32, out_$p137: ref)
{

  entry:
    out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i133, out_$i134, out_$i135, out_$p122, out_$i123, out_$i136, out_$p137 := in_$p124, in_$p125, in_$i126, in_$p127, in_$i128, in_$i129, in_$p130, in_$i133, in_$i134, in_$i135, in_$p122, in_$i123, in_$i136, in_$p137;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3559;

  $bb52:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$p122, out_$i123 := out_$p125, out_$i133;
    goto $bb52_dummy;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    out_$i136, out_$p137 := out_$i133, out_$p125;
    assume true;
    goto $bb52;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i133, out_$i134);
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.0, in_$p117);
    goto corral_source_split_3574;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i133 := $add.i32(out_$i123, 1);
    call {:si_unique_call 616} {:cexpr "i"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_3573;

  $bb49:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p130 := out_$p125;
    assume true;
    goto $bb49;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i64(out_$i126, out_$i128);
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$i128 := $p2i.ref.i64(out_$p127);
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(312, 1));
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$i126 := $p2i.ref.i64(out_$p125);
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_3562;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p122, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb52_dummy:
    call {:si_unique_call 1} out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i133, out_$i134, out_$i135, out_$p122, out_$i123, out_$i136, out_$p137 := ppp_mp_explode_loop_$bb46(in_$p0, in_$p117, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$p130, out_$i133, out_$i134, out_$i135, out_$p122, out_$i123, out_$i136, out_$p137);
    return;

  exit:
    return;
}



procedure ppp_mp_explode_loop_$bb46(in_$p0: ref, in_$p117: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$i128: i64, in_$i129: i1, in_$p130: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$p122: ref, in_$i123: i32, in_$i136: i32, in_$p137: ref) returns (out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$i128: i64, out_$i129: i1, out_$p130: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$p122: ref, out_$i123: i32, out_$i136: i32, out_$p137: ref);



implementation ppp_mp_explode_loop_$bb4(in_$p0: ref, in_$i15: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$p41: ref, in_$i40: i32, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i58: i32, in_$i59: i32, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i8, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$p41: ref, out_$i40: i32, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i58: i32, out_$i59: i32, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i8, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p41, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i58, out_$i59, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97 := in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$p39, in_$p41, in_$i40, in_$p42, in_$i43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$p60, in_$i61, in_$i62, in_$i58, in_$i59, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p86, in_$p87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3444;

  $bb27:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := out_$p89, out_$i84, out_$i40, out_$i83, out_$i82, out_$i81, out_$i80;
    goto $bb27_dummy;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$i93, out_$i94, out_$i95, out_$i96, out_$i97 := out_$i80, out_$i81, out_$i82, out_$i83, out_$i40;
    assume true;
    goto $bb27;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i64(out_$i91, in_$i15);
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$i91 := $p2i.ref.i64(out_$p90);
    goto corral_source_split_3521;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p88, $mul.ref($sub.ref(0, 576), 680)), $mul.ref(576, 1));
    goto corral_source_split_3520;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref(out_$p88, $mul.ref($sub.ref(0, 576), 680));
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$p88 := $bitcast.ref.ref(out_$p87);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_3517;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref(out_$p79, $mul.ref(0, 680)), $mul.ref(576, 1)), $mul.ref(0, 1));
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i23, 1);
    call {:si_unique_call 612} {:cexpr "i"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_3515;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  $bb10:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$p79, out_$i80, out_$i81, out_$i82, out_$i83 := out_$p22, out_$i28, out_$i27, out_$i26, out_$i25;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p79, out_$i80, out_$i81, out_$i82, out_$i83 := out_$p66, out_$i67, out_$i68, out_$i69, out_$i70;
    goto $bb26;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p78, out_$i23);
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(604, 1));
    goto corral_source_split_3511;

  $bb23:
    assume out_$i77 == 1;
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i23, out_$i76);
    goto corral_source_split_3508;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    goto corral_source_split_3507;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p0, $mul.ref(0, 776)), $mul.ref(604, 1));
    goto corral_source_split_3506;

  $bb20:
    assume out_$i74 == 1;
    goto corral_source_split_3505;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 0);
    goto corral_source_split_3503;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i8.i32(out_$i72);
    goto corral_source_split_3502;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i8($M.0, out_$p71);
    goto corral_source_split_3501;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(665, 1));
    goto corral_source_split_3500;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3499;

  $bb15:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$p66, out_$i67, out_$i68, out_$i69, out_$i70 := out_$p22, out_$i28, out_$i27, out_$i26, out_$i25;
    goto $bb19;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$p66, out_$i67, out_$i68, out_$i69, out_$i70 := out_$p22, out_$i65, out_$i58, out_$i59, out_$i64;
    goto $bb19;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$i65 := $add.i32(out_$i28, 1);
    call {:si_unique_call 611} {:cexpr "totfree"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i25, 1);
    call {:si_unique_call 610} {:cexpr "nfree"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3496;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p63, 2);
    goto corral_source_split_3495;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3494;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i27, out_$i61);
    call {:si_unique_call 609} {:cexpr "totspeed"} boogie_si_record_i32(out_$i62);
    assume {:verifier.code 0} true;
    out_$i58, out_$i59 := out_$i62, out_$i26;
    goto $bb18;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i58, out_$i59 := out_$i27, out_$i57;
    goto $bb18;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i26, 1);
    call {:si_unique_call 608} {:cexpr "nzero"} boogie_si_record_i32(out_$i57);
    goto corral_source_split_3487;

  $bb16:
    assume out_$i56 == 1;
    goto corral_source_split_3486;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 0);
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.0, out_$p54);
    goto corral_source_split_3477;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3476;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i53 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i49 == 1;
    goto $bb12;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} out_$i48 := skb_queue_empty(out_$p47);
    call {:si_unique_call 607} {:cexpr "tmp"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3472;

  $bb9:
    assume out_$i45 == 1;
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i8($M.0, out_$p42);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3466;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p41, 0);
    assume {:verifier.code 0} true;
    out_$i40 := out_$i24;
    goto $bb8;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i34;
    goto $bb8;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, out_$i38);
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_3456;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i24, 1);
    call {:si_unique_call 605} {:cexpr "navail"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3454;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p33, 1);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3452;

  $bb6:
    assume out_$i32 == 1;
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3447;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(320, 1));
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(664, 1));
    goto corral_source_split_3463;

  $bb7:
    assume !(out_$i32 == 1);
    goto corral_source_split_3462;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i8.i32(out_$i51);
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i8($M.0, out_$p50);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(665, 1));
    goto corral_source_split_3481;

  $bb13:
    assume !(out_$i49 == 1);
    goto corral_source_split_3480;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p22, $mul.ref(0, 680)), $mul.ref(672, 1));
    goto corral_source_split_3490;

  $bb17:
    assume !(out_$i56 == 1);
    goto corral_source_split_3489;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb22;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p41, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i58, out_$i59, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97 := ppp_mp_explode_loop_$bb4(in_$p0, in_$i15, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p41, out_$i40, out_$p42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i58, out_$i59, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97);
    return;

  exit:
    return;
}



procedure ppp_mp_explode_loop_$bb4(in_$p0: ref, in_$i15: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$p41: ref, in_$i40: i32, in_$p42: ref, in_$i43: i8, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i8, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i57: i32, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i58: i32, in_$i59: i32, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$p71: ref, in_$i72: i8, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$i92: i1, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i32) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$p41: ref, out_$i40: i32, out_$p42: ref, out_$i43: i8, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i8, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i57: i32, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i58: i32, out_$i59: i32, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$p71: ref, out_$i72: i8, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$i92: i1, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i32);
  modifies $M.0;



implementation find_comp_entry_loop_$bb4(in_$i0: i32, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6 := in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3928;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p16;
    goto $bb10_dummy;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, $p2i.ref.i64(compressor_list));
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3941;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3940;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, in_$i0);
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_3931;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6 := find_comp_entry_loop_$bb4(in_$i0, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6);
    return;

  exit:
    return;
}



procedure find_comp_entry_loop_$bb4(in_$i0: i32, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref);



implementation ppp_read_loop_$bb5(in_$p0: ref, in_$p7: ref, in_$p11: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i64, in_$p49: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref) returns (out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i64, out_$p49: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref)
{

  entry:
    out_$i25, out_$p26, out_$p27, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76 := in_$i25, in_$p26, in_$p27, in_$p40, in_$i41, in_$p42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p73, in_$i74, in_$i75, in_$p76;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4121;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(0, 512);
    goto corral_source_split_4196_dummy;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} schedule();
    goto corral_source_split_4196;

  $bb33:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$p76 := out_$p45;
    assume true;
    goto $bb33;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_4192;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} out_$i74 := signal_pending(out_$p73);
    call {:si_unique_call 731} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_4191;

  SeqInstr_486:
    goto corral_source_split_4190;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} out_$p73 := get_current();
    goto SeqInstr_485;

  $bb30:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$p72 := out_$p45;
    assume true;
    goto $bb30;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    out_$i70 := $and.i32(out_$i69, 2048);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_4184;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_4183;

  $bb21:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb24;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    out_$p67 := out_$p45;
    assume true;
    goto $bb26;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 0);
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$i65 := $and.i32(out_$i64, 512);
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p59, $mul.ref(0, 776)), $mul.ref(484, 1));
    goto corral_source_split_4176;

  $bb22:
    assume out_$i62 == 1;
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 0);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 776)), $mul.ref(328, 1));
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(in_$p11);
    goto corral_source_split_4170;

  $bb20:
    assume out_$i58 == 1;
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 1);
    goto corral_source_split_4167;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_4166;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p11, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4165;

  $bb18:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p45;
    assume true;
    goto $bb18;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_4160;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p11, $mul.ref(0, 304)), $mul.ref(300, 1));
    goto corral_source_split_4159;

  $bb14:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    out_$i48, out_$p49 := out_$i25, out_$p45;
    assume true;
    goto $bb14;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_4147;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_4146;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} out_$p45 := skb_dequeue(out_$p44);
    goto corral_source_split_4145;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p11, $mul.ref(0, 304)), $mul.ref(104, 1));
    goto corral_source_split_4144;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, in_$p7, out_$i43);
    goto corral_source_split_4130;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p40, $mul.ref(0, 10680)), $mul.ref(0, 1));
    call {:si_unique_call 719} out_$i43 := devirtbounce.11(0, out_$p42, out_$i41, out_$p42);
    goto corral_source_split_4129;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i64($M.25, in_$p7);
    goto corral_source_split_4128;

  SeqInstr_471:
    goto corral_source_split_4127;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} out_$p40 := get_current();
    goto SeqInstr_470;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, in_$p7, 1);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p27, 0);
    goto corral_source_split_4124;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 10680)), $mul.ref(10672, 1));
    goto corral_source_split_4123;

  SeqInstr_468:
    goto corral_source_split_4122;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} out_$p26 := get_current();
    goto SeqInstr_467;

  corral_source_split_4196_dummy:
    call {:si_unique_call 1} out_$i25, out_$p26, out_$p27, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76 := ppp_read_loop_$bb5(in_$p0, in_$p7, in_$p11, out_$i25, out_$p26, out_$p27, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i75, out_$p76);
    return;

  exit:
    return;
}



procedure ppp_read_loop_$bb5(in_$p0: ref, in_$p7: ref, in_$p11: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p40: ref, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i64, in_$p49: ref, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$p76: ref) returns (out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p40: ref, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i64, out_$p49: ref, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$p76: ref);
  modifies $M.0, $M.11, assertsPassed, $M.25;



implementation ppp_find_channel_loop_$bb16(in_$i1: i32, in_$i37: i64, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p39: ref) returns (out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p39: ref)
{

  entry:
    out_$p41, out_$i42, out_$i43, out_$p44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p39 := in_$p41, in_$i42, in_$i43, in_$p44, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p39;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5923;

  $bb21:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p39 := out_$p49;
    goto $bb21_dummy;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, in_$i37);
    goto corral_source_split_5937;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_5936;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p48, $mul.ref($sub.ref(0, 304), 680)), $mul.ref(304, 1));
    goto corral_source_split_5935;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p48, $mul.ref($sub.ref(0, 304), 680));
    goto corral_source_split_5934;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_5933;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_5932;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p39, $mul.ref(0, 680)), $mul.ref(304, 1)), $mul.ref(0, 1));
    goto corral_source_split_5931;

  $bb19:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p39;
    assume true;
    goto $bb19;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, in_$i1);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_5926;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p39, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p41, out_$i42, out_$i43, out_$p44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p39 := ppp_find_channel_loop_$bb16(in_$i1, in_$i37, out_$p41, out_$i42, out_$i43, out_$p44, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p39);
    return;

  exit:
    return;
}



procedure ppp_find_channel_loop_$bb16(in_$i1: i32, in_$i37: i64, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p39: ref) returns (out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p39: ref);



implementation ppp_find_channel_loop_$bb4(in_$i1: i32, in_$i10: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p12: ref) returns (out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p12: ref)
{

  entry:
    out_$p14, out_$i15, out_$i16, out_$p17, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p12 := in_$p14, in_$i15, in_$i16, in_$p17, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5888;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p25;
    goto $bb10_dummy;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i10);
    goto corral_source_split_5907;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_5906;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p24, $mul.ref($sub.ref(0, 304), 680)), $mul.ref(304, 1));
    goto corral_source_split_5905;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref($sub.ref(0, 304), 680));
    goto corral_source_split_5904;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_5903;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_5902;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 680)), $mul.ref(304, 1)), $mul.ref(0, 1));
    goto corral_source_split_5901;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p12;
    assume true;
    goto $bb7;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, in_$i1);
    goto corral_source_split_5892;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_5891;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 680)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_5890;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$i15, out_$i16, out_$p17, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p12 := ppp_find_channel_loop_$bb4(in_$i1, in_$i10, out_$p14, out_$i15, out_$i16, out_$p17, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p12);
    return;

  exit:
    return;
}



procedure ppp_find_channel_loop_$bb4(in_$i1: i32, in_$i10: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p12: ref) returns (out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p12: ref);



implementation ldv_net_dummy_resourceless_instance_1_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i32, in_$i16: i1) returns (out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i32, out_$i16: i1)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} out_$i10 := ldv_undef_int();
    call {:si_unique_call 1197} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_6116;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i16 == 1;
    goto $bb27_dummy;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_6144;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} out_$i15 := ldv_undef_int();
    call {:si_unique_call 1204} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_6143;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_912:
    goto corral_source_split_6121;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} ldv_dummy_resourceless_instance_callback_1_11($u5, $u2, in_$p7);
    goto SeqInstr_911;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 1);
    goto corral_source_split_6117;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} ldv_dummy_resourceless_instance_callback_1_10($u6, in_$p7);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i12 == 1;
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i10, 2);
    goto corral_source_split_6123;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_915:
    goto corral_source_split_6133;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} ldv_dummy_resourceless_instance_callback_1_9($u7, in_$p7, $u8);
    goto SeqInstr_914;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i13 == 1;
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i10, 3);
    goto corral_source_split_6129;

  $bb13:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_918:
    goto corral_source_split_6139;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} ldv_dummy_resourceless_instance_callback_1_3($u9, in_$p7, $u10, $u1);
    goto SeqInstr_917;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i14 == 1;
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i10, 4);
    goto corral_source_split_6135;

  $bb17:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} ldv_stop();
    goto corral_source_split_6141;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16 := ldv_net_dummy_resourceless_instance_1_loop_$bb7(in_$p7, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16);
    return;

  exit:
    return;
}



procedure ldv_net_dummy_resourceless_instance_1_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i32, in_$i16: i1) returns (out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i32, out_$i16: i1);
  modifies $M.0, $M.8, $M.16, assertsPassed, $M.10, $CurrAddr, $M.2, $M.11, $M.18, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$p14: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54 := in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} out_$i31 := ldv_undef_int();
    call {:si_unique_call 1451} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6960;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb27_dummy;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} ldv_free(out_$p43);
    goto corral_source_split_6982;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} ldv_free(out_$p35);
    goto corral_source_split_6980;

  SeqInstr_1077:
    goto corral_source_split_6979;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} ldv_file_operations_instance_write_0_4(out_$p42, in_$p9, out_$p35, $u12, out_$p37);
    goto SeqInstr_1076;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ldv_assume(out_$i40);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$i39 := $ule.i64(out_$i38, 2147479552);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(in_$p14);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} out_$p36 := ldv_xmalloc(8);
    goto corral_source_split_6971;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} out_$p35 := ldv_xmalloc(1);
    goto corral_source_split_6970;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i32 == 1;
    goto corral_source_split_6968;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_6961;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1083:
    goto corral_source_split_7003;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_file_operations_instance_callback_0_26($u13, in_$p9, $u1, $u12);
    goto SeqInstr_1082;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i47 == 1;
    goto corral_source_split_7001;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 1);
    goto corral_source_split_6997;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} out_$i46 := ldv_undef_int();
    call {:si_unique_call 1462} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_6994;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_6992;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_6984;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_free(out_$p54);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ldv_free(out_$p51);
    goto corral_source_split_7013;

  SeqInstr_1086:
    goto corral_source_split_7012;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_file_operations_instance_callback_0_23($u14, in_$p9, out_$p51, $u12, out_$p53);
    goto SeqInstr_1085;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_7011;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} out_$p52 := ldv_xmalloc(8);
    goto corral_source_split_7010;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} out_$p51 := ldv_xmalloc(1);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i48 == 1;
    goto corral_source_split_7007;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i46, 2);
    goto corral_source_split_7005;

  $bb29:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_file_operations_instance_callback_0_22($u15, in_$p9, in_$p14);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i49 == 1;
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i46, 3);
    goto corral_source_split_7017;

  $bb33:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} ldv_file_operations_instance_callback_0_5($u16, in_$p9, $u12, $u1);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i50 == 1;
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i46, 4);
    goto corral_source_split_7023;

  $bb37:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ldv_stop();
    goto corral_source_split_7029;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} ldv_stop();
    goto corral_source_split_6999;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$p14, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$p14: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref);
  modifies $M.0, $M.11, $M.8, $M.16, $M.10, assertsPassed, $CurrAddr, $M.2, $M.18, $M.9, $M.6, $M.3, $M.19, $M.33, $M.7, $M.34, $M.29, $M.30, $M.32, $M.35, $M.31, $M.36, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p14: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_6943;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb12_dummy;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_6964;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} out_$i27 := ldv_undef_int();
    call {:si_unique_call 1453} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_6963;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1080:
    goto corral_source_split_6990;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} ldv_file_operations_instance_release_0_2(out_$p45, in_$p11, in_$p9);
    goto SeqInstr_1079;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_6989;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_6988;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i33 == 1;
    goto corral_source_split_6986;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_6984;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_6961;

  $bb10:
    call out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$p14, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} out_$i31 := ldv_undef_int();
    call {:si_unique_call 1451} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6960;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb27:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} ldv_free(out_$p43);
    goto corral_source_split_6982;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} ldv_free(out_$p35);
    goto corral_source_split_6980;

  SeqInstr_1077:
    goto corral_source_split_6979;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} ldv_file_operations_instance_write_0_4(out_$p42, in_$p9, out_$p35, $u12, out_$p37);
    goto SeqInstr_1076;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} ldv_assume(out_$i40);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$i39 := $ule.i64(out_$i38, 2147479552);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(in_$p14);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} out_$p36 := ldv_xmalloc(8);
    goto corral_source_split_6971;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} out_$p35 := ldv_xmalloc(1);
    goto corral_source_split_6970;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i32 == 1;
    goto corral_source_split_6968;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1083:
    goto corral_source_split_7003;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_file_operations_instance_callback_0_26($u13, in_$p9, $u1, $u12);
    goto SeqInstr_1082;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i47 == 1;
    goto corral_source_split_7001;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 1);
    goto corral_source_split_6997;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} out_$i46 := ldv_undef_int();
    call {:si_unique_call 1462} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_6994;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_6992;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_free(out_$p54);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ldv_free(out_$p51);
    goto corral_source_split_7013;

  SeqInstr_1086:
    goto corral_source_split_7012;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_file_operations_instance_callback_0_23($u14, in_$p9, out_$p51, $u12, out_$p53);
    goto SeqInstr_1085;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_7011;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} out_$p52 := ldv_xmalloc(8);
    goto corral_source_split_7010;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} out_$p51 := ldv_xmalloc(1);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i48 == 1;
    goto corral_source_split_7007;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i46, 2);
    goto corral_source_split_7005;

  $bb29:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_file_operations_instance_callback_0_22($u15, in_$p9, in_$p14);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i49 == 1;
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i46, 3);
    goto corral_source_split_7017;

  $bb33:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} ldv_file_operations_instance_callback_0_5($u16, in_$p9, $u12, $u1);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i50 == 1;
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i46, 4);
    goto corral_source_split_7023;

  $bb37:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ldv_stop();
    goto corral_source_split_7029;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} ldv_stop();
    goto corral_source_split_6999;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ldv_assume(out_$i24);
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i20, 0);
    goto corral_source_split_6951;

  $bb8:
    assume out_$i22 == 1;
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_6948;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} out_$i21 := ldv_undef_int();
    call {:si_unique_call 1447} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} out_$i20 := ldv_filter_err_code(out_$i19);
    call {:si_unique_call 1445} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} out_$i19 := ldv_file_operations_instance_probe_0_12(out_$p18, in_$p11, in_$p9);
    call {:si_unique_call 1443} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_6944;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} ldv_assume(out_$i26);
    goto corral_source_split_6958;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    goto corral_source_split_6957;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i20, 0);
    goto corral_source_split_6956;

  $bb9:
    assume !(out_$i22 == 1);
    goto corral_source_split_6955;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54 := ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$p14, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p14: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref);
  modifies $M.0, $M.8, $M.9, $M.33, assertsPassed, $M.2, $M.11, $M.18, $M.7, $M.3, $M.34, $M.10, $M.6, $M.19, $M.16, $CurrAddr, $M.29, $M.30, $M.32, $M.35, $M.31, $M.36, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28;



implementation ldv_struct_pernet_operations_dummy_resourceless_instance_2_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4 := in_$i1, in_$i2, in_$i3, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} out_$i1 := ldv_undef_int();
    call {:si_unique_call 1522} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_7131;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_1116:
    goto corral_source_split_7136;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} ldv_dummy_resourceless_instance_callback_2_7($u17, $u18);
    goto SeqInstr_1115;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_7134;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_7132;

  SeqInstr_1119:
    goto corral_source_split_7142;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_dummy_resourceless_instance_callback_2_3($u19, $u18);
    goto SeqInstr_1118;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_7140;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    out_$i4 := out_$i1;
    assume true;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_7138;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4 := ldv_struct_pernet_operations_dummy_resourceless_instance_2_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_pernet_operations_dummy_resourceless_instance_2_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i32);
  modifies $M.0, $CurrAddr, $M.3, $M.19, assertsPassed;


