var $M.0: [ref]i8;

var $M.1: [ref]i64;

var $M.2: [ref]i64;

var $M.3: [ref]i64;

var $M.4: [ref]i64;

var $M.5: [ref]i32;

var $M.6: [ref]ref;

var $M.7: ref;

var $M.8: i32;

var $M.9: [ref]i32;

var $M.10: i32;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]i24;

var $M.16: [ref]i8;

var $M.17: i8;

var $M.18: [ref]i16;

var $M.19: [ref]i16;

var $M.20: [ref]i16;

var $M.21: [ref]i32;

var $M.22: i32;

var $M.23: [ref]i16;

var $M.24: [ref]i32;

var $M.25: [ref]i32;

var $M.26: [ref]i32;

var $M.27: [ref]i32;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i16;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.57: [ref]i32;

var $M.58: [ref]i32;

var $M.59: [ref]i32;

var $M.60: [ref]i32;

var $M.61: [ref]i32;

var $M.62: [ref]i32;

var $M.63: [ref]i64;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $M.89: [ref]i8;

var $M.90: [ref]i8;

var $M.91: [ref]i8;

var $M.92: [ref]i8;

var $M.93: [ref]i8;

var $M.94: [ref]i8;

var $M.95: [ref]i8;

var $M.96: [ref]i8;

var $M.97: [ref]i8;

var $M.98: [ref]i8;

var $M.99: [ref]i8;

var $M.100: [ref]i8;

var $M.101: [ref]i8;

var $M.102: [ref]i8;

var $M.103: [ref]i8;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $M.106: [ref]i8;

var $M.107: [ref]i8;

var $M.108: [ref]i8;

var $M.109: [ref]i8;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]i8;

var $M.114: [ref]i8;

var $M.115: [ref]i8;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $M.130: [ref]i16;

var $M.131: [ref]i16;

var $M.132: [ref]i16;

var $M.133: [ref]i16;

var $M.134: [ref]i16;

var $M.135: [ref]i16;

var $M.136: [ref]i32;

var $M.137: [ref]i32;

var $M.138: [ref]i32;

var $M.139: [ref]i32;

var $M.140: [ref]i32;

var $M.141: [ref]i32;

var $M.142: [ref]i32;

var $M.143: [ref]i32;

var $M.144: [ref]i32;

var $M.145: [ref]i32;

var $M.146: [ref]i32;

var $M.147: [ref]i32;

var $M.148: [ref]i32;

var $M.149: [ref]i32;

var $M.150: [ref]i32;

var $M.151: [ref]i32;

var $M.152: [ref]i32;

var $M.153: [ref]i32;

var $M.154: [ref]i32;

var $M.155: [ref]i32;

var $M.156: [ref]i32;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 488466);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 1028);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 2056);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 3084);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 4112);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 5140);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 6168);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 7196);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 8224);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 9252);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 10280);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 11308);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 12336);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 13364);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 14390);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 15418);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 16446);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 17474);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 18502);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 19530);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 20558);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 21586);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 22614);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 23639);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 24664);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_fb_info: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_fb_info == $sub.ref(0, 25689);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 26714);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_open_lock_of_s3fb_info: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_open_lock_of_s3fb_info == $sub.ref(0, 27739);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_backlight_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_backlight_device == $sub.ref(0, 28764);

const {:count 16} __mod_pci__s3_devices_device_table: ref;

axiom __mod_pci__s3_devices_device_table == $sub.ref(0, 30300);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 31340);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 32380);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 33420);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 34448);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 35476);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 36504);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 37532);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 38560);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 39588);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 40616);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 41644);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 42672);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 43697);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 44725);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 45753);

const mtrr: ref;

axiom mtrr == $sub.ref(0, 46781);

const mode_option: ref;

axiom mode_option == $sub.ref(0, 47813);

const {:count 21} s3_names: ref;

axiom s3_names == $sub.ref(0, 49005);

const {:count 8} s3_memsizes: ref;

axiom s3_memsizes == $sub.ref(0, 50061);

const s3fb_ops: ref;

axiom s3fb_ops == $sub.ref(0, 51277);

const {:count 3} s3_dtpc_regs: ref;

axiom s3_dtpc_regs == $sub.ref(0, 52310);

const {:count 2} s3_v_sync_end_regs: ref;

axiom s3_v_sync_end_regs == $sub.ref(0, 53340);

const {:count 5} s3_v_sync_start_regs: ref;

axiom s3_v_sync_start_regs == $sub.ref(0, 54379);

const {:count 2} s3_v_blank_end_regs: ref;

axiom s3_v_blank_end_regs == $sub.ref(0, 55409);

const {:count 5} s3_v_blank_start_regs: ref;

axiom s3_v_blank_start_regs == $sub.ref(0, 56448);

const {:count 5} s3_v_display_regs: ref;

axiom s3_v_display_regs == $sub.ref(0, 57487);

const {:count 5} s3_v_total_regs: ref;

axiom s3_v_total_regs == $sub.ref(0, 58526);

const {:count 2} s3_h_sync_end_regs: ref;

axiom s3_h_sync_end_regs == $sub.ref(0, 59556);

const {:count 3} s3_h_sync_start_regs: ref;

axiom s3_h_sync_start_regs == $sub.ref(0, 60589);

const {:count 3} s3_h_blank_end_regs: ref;

axiom s3_h_blank_end_regs == $sub.ref(0, 61622);

const {:count 3} s3_h_blank_start_regs: ref;

axiom s3_h_blank_start_regs == $sub.ref(0, 62655);

const {:count 3} s3_h_display_regs: ref;

axiom s3_h_display_regs == $sub.ref(0, 63688);

const {:count 3} s3_h_total_regs: ref;

axiom s3_h_total_regs == $sub.ref(0, 64721);

const s3_timing_regs: ref;

axiom s3_timing_regs == $sub.ref(0, 65841);

const s3_pll: ref;

axiom s3_pll == $sub.ref(0, 66889);

const s3_trio3d_pll: ref;

axiom s3_trio3d_pll == $sub.ref(0, 67937);

const {:count 9} s3fb_formats: ref;

axiom s3fb_formats == $sub.ref(0, 69645);

const {:count 3} s3_offset_regs: ref;

axiom s3_offset_regs == $sub.ref(0, 70678);

const {:count 5} s3_line_compare_regs: ref;

axiom s3_line_compare_regs == $sub.ref(0, 71717);

const s3fb_tile_ops: ref;

axiom s3fb_tile_ops == $sub.ref(0, 72789);

const s3fb_fast_tile_ops: ref;

axiom s3fb_fast_tile_ops == $sub.ref(0, 73861);

const fasttext: ref;

axiom fasttext == $sub.ref(0, 74889);

const {:count 4} s3_start_address_regs: ref;

axiom s3_start_address_regs == $sub.ref(0, 75925);

const {:count 16} s3_devices: ref;

axiom s3_devices == $sub.ref(0, 77461);

const s3fb_pci_driver: ref;

axiom s3fb_pci_driver == $sub.ref(0, 78797);

const {:count 5} .str.1: ref;

axiom .str.1 == $sub.ref(0, 79826);

const {:count 8} .str.66: ref;

axiom .str.66 == $sub.ref(0, 80858);

const {:count 37} .str.67: ref;

axiom .str.67 == $sub.ref(0, 81919);

const {:count 13} .str.7: ref;

axiom .str.7 == $sub.ref(0, 82956);

const {:count 27} .str.3: ref;

axiom .str.3 == $sub.ref(0, 84007);

const {:count 34} .str.8: ref;

axiom .str.8 == $sub.ref(0, 85065);

const {:count 17} .str.9: ref;

axiom .str.9 == $sub.ref(0, 86106);

const {:count 32} .str.10: ref;

axiom .str.10 == $sub.ref(0, 87162);

const {:count 25} .str.11: ref;

axiom .str.11 == $sub.ref(0, 88211);

const {:count 33} .str.12: ref;

axiom .str.12 == $sub.ref(0, 89268);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 90317);

const {:count 23} .str.14: ref;

axiom .str.14 == $sub.ref(0, 91364);

const {:count 23} .str.15: ref;

axiom .str.15 == $sub.ref(0, 92411);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 93458);

const {:count 25} .str.17: ref;

axiom .str.17 == $sub.ref(0, 94507);

const {:count 31} .str.18: ref;

axiom .str.18 == $sub.ref(0, 95562);

const {:count 57} .str.20: ref;

axiom .str.20 == $sub.ref(0, 96643);

const pv_cpu_ops: ref;

axiom pv_cpu_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 9} .str.68: ref;

axiom .str.68 == $sub.ref(0, 97676);

const {:count 27} .str.31: ref;

axiom .str.31 == $sub.ref(0, 98727);

const {:count 24} .str.32: ref;

axiom .str.32 == $sub.ref(0, 99775);

const {:count 16} .str.33: ref;

axiom .str.33 == $sub.ref(0, 100815);

const {:count 26} .str.34: ref;

axiom .str.34 == $sub.ref(0, 101865);

const {:count 35} .str.35: ref;

axiom .str.35 == $sub.ref(0, 102924);

const {:count 30} .str.36: ref;

axiom .str.36 == $sub.ref(0, 103978);

const {:count 43} .str.37: ref;

axiom .str.37 == $sub.ref(0, 105045);

const {:count 29} .str.38: ref;

axiom .str.38 == $sub.ref(0, 106098);

const {:count 13} .str.39: ref;

axiom .str.39 == $sub.ref(0, 107135);

const {:count 19} .str.40: ref;

axiom .str.40 == $sub.ref(0, 108178);

const {:count 41} .str.41: ref;

axiom .str.41 == $sub.ref(0, 109243);

const {:count 26} .str.42: ref;

axiom .str.42 == $sub.ref(0, 110293);

const {:count 29} .str.43: ref;

axiom .str.43 == $sub.ref(0, 111346);

const {:count 41} .str.44: ref;

axiom .str.44 == $sub.ref(0, 112411);

const {:count 59} .str.45: ref;

axiom .str.45 == $sub.ref(0, 113494);

const {:count 11} .str.21: ref;

axiom .str.21 == $sub.ref(0, 114529);

const {:count 15} .str.22: ref;

axiom .str.22 == $sub.ref(0, 115568);

const {:count 13} .str.23: ref;

axiom .str.23 == $sub.ref(0, 116605);

const {:count 13} .str.24: ref;

axiom .str.24 == $sub.ref(0, 117642);

const {:count 13} .str.25: ref;

axiom .str.25 == $sub.ref(0, 118679);

const {:count 17} .str.26: ref;

axiom .str.26 == $sub.ref(0, 119720);

const {:count 35} .str.27: ref;

axiom .str.27 == $sub.ref(0, 120779);

const {:count 74} .str.28: ref;

axiom .str.28 == $sub.ref(0, 121877);

const {:count 34} .str.29: ref;

axiom .str.29 == $sub.ref(0, 122935);

const {:count 41} .str.30: ref;

axiom .str.30 == $sub.ref(0, 124000);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 78} .str.19: ref;

axiom .str.19 == $sub.ref(0, 125102);

const {:count 11} .str.47: ref;

axiom .str.47 == $sub.ref(0, 126137);

const {:count 10} .str.48: ref;

axiom .str.48 == $sub.ref(0, 127171);

const {:count 10} .str.49: ref;

axiom .str.49 == $sub.ref(0, 128205);

const {:count 12} .str.50: ref;

axiom .str.50 == $sub.ref(0, 129241);

const {:count 13} .str.51: ref;

axiom .str.51 == $sub.ref(0, 130278);

const {:count 15} .str.52: ref;

axiom .str.52 == $sub.ref(0, 131317);

const {:count 15} .str.53: ref;

axiom .str.53 == $sub.ref(0, 132356);

const {:count 12} .str.54: ref;

axiom .str.54 == $sub.ref(0, 133392);

const {:count 14} .str.55: ref;

axiom .str.55 == $sub.ref(0, 134430);

const {:count 9} .str.56: ref;

axiom .str.56 == $sub.ref(0, 135463);

const {:count 12} .str.57: ref;

axiom .str.57 == $sub.ref(0, 136499);

const {:count 12} .str.58: ref;

axiom .str.58 == $sub.ref(0, 137535);

const {:count 12} .str.59: ref;

axiom .str.59 == $sub.ref(0, 138571);

const {:count 13} .str.60: ref;

axiom .str.60 == $sub.ref(0, 139608);

const {:count 14} .str.61: ref;

axiom .str.61 == $sub.ref(0, 140646);

const .str: ref;

axiom .str == $sub.ref(0, 141671);

const {:count 13} .str.62: ref;

axiom .str.62 == $sub.ref(0, 142708);

const {:count 13} .str.63: ref;

axiom .str.63 == $sub.ref(0, 143745);

const {:count 10} .str.64: ref;

axiom .str.64 == $sub.ref(0, 144779);

const {:count 12} .str.65: ref;

axiom .str.65 == $sub.ref(0, 145815);

const {:count 13} .str.2: ref;

axiom .str.2 == $sub.ref(0, 146852);

const {:count 19} .str.4: ref;

axiom .str.4 == $sub.ref(0, 147895);

const {:count 10} .str.5: ref;

axiom .str.5 == $sub.ref(0, 148929);

const {:count 20} .str.6: ref;

axiom .str.6 == $sub.ref(0, 149973);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 151005);

const {:count 3} .str.1.122: ref;

axiom .str.1.122 == $sub.ref(0, 152032);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 153070);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 154098);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 155130);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const s3_pci_probe: ref;

axiom s3_pci_probe == $sub.ref(0, 156162);

procedure s3_pci_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.7, $M.22, $CurrAddr, assertsPassed, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17;



implementation s3_pci_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p43: ref;
  var $i44: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i32;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $p117: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i8;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i64;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $i199: i64;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $i203: i64;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $i207: i64;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $i211: i32;
  var $p213: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i8;
  var $p219: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i32;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $p235: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i32;
  var $i240: i8;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $i245: i8;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i32;
  var $i251: i64;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p256: ref;
  var $p258: ref;
  var $p260: ref;
  var $p262: ref;
  var $p264: ref;
  var $p266: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i32;
  var $i274: i1;
  var $i275: i8;
  var $i276: i1;
  var $p278: ref;
  var $i279: i64;
  var $i280: i64;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i64;
  var $i286: i1;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p293: ref;
  var $i294: i64;
  var $i295: i64;
  var $p296: ref;
  var $i297: i32;
  var $i298: i1;
  var $i299: i8;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $i305: i64;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $i313: i1;
  var $p314: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i64;
  var $i319: i1;
  var $p320: ref;
  var $p321: ref;
  var $p324: ref;
  var $p325: ref;
  var $p327: ref;
  var $i328: i32;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $i333: i64;
  var $i334: i1;
  var $p335: ref;
  var $p336: ref;
  var $i337: i32;
  var $i338: i1;
  var $i339: i8;
  var $i340: i8;
  var $i322: i8;
  var $i341: i8;
  var $i342: i8;
  var $i343: i8;
  var $p344: ref;
  var $i345: i64;
  var $i346: i1;
  var $i347: i1;
  var $p348: ref;
  var $i349: i64;
  var $i350: i1;
  var $p351: ref;
  var $p352: ref;
  var $p354: ref;
  var $p355: ref;
  var $p357: ref;
  var $i358: i32;
  var $p360: ref;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i364: i1;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p369: ref;
  var $p370: ref;
  var $p372: ref;
  var $p375: ref;
  var $p376: ref;
  var $p378: ref;
  var $p380: ref;
  var $i381: i32;
  var $i382: i32;
  var $p384: ref;
  var $i385: i32;
  var $p387: ref;
  var $i388: i32;
  var $i389: i32;
  var $i390: i32;
  var $p392: ref;
  var $p394: ref;
  var $i395: i32;
  var $p397: ref;
  var $i398: i32;
  var $i399: i1;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $i403: i32;
  var $i404: i1;
  var $p405: ref;
  var $p406: ref;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $i414: i32;
  var $p416: ref;
  var $p417: ref;
  var $p419: ref;
  var $i420: i32;
  var $i421: i32;
  var $p422: ref;
  var $i423: i32;
  var $i424: i32;
  var $i425: i32;
  var $p427: ref;
  var $i428: i32;
  var $i429: i1;
  var $p431: ref;
  var $p432: ref;
  var $i433: i8;
  var $p435: ref;
  var $p436: ref;
  var $i437: i8;
  var $p439: ref;
  var $p440: ref;
  var $i441: i8;
  var $p443: ref;
  var $p444: ref;
  var $i445: i8;
  var $p446: ref;
  var $i447: i32;
  var $i448: i32;
  var $i449: i32;
  var $i450: i32;
  var $i451: i32;
  var $p453: ref;
  var $i454: i32;
  var $i455: i1;
  var $p456: ref;
  var $p458: ref;
  var $i459: i64;
  var $p461: ref;
  var $i462: i32;
  var $i463: i64;
  var $i464: i32;
  var $p465: ref;
  var $p466: ref;
  var $i407: i32;
  var $i373: i32;
  var $p467: ref;
  var $i468: i8;
  var $i469: i1;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $i473: i64;
  var $i474: i1;
  var $p475: ref;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $i73: i32;
  var $i29: i32;
  var $i24: i32;
  var $i8: i32;
  var vslice_dummy_var_4: i32;
  var vslice_dummy_var_5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i5 := svga_primary_device($p0);
    call {:si_unique_call 4} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p10 := framebuffer_alloc(2304, $p9);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} __mutex_init($p17, .str.33, $p4);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 8256);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1504, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, s3fb_ops);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i20 := pci_enable_device($p0);
    call {:si_unique_call 10} {:cexpr "rc"} boogie_si_record_i32($i20);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i25 := pci_request_regions($p0, .str.1);
    call {:si_unique_call 14} {:cexpr "rc"} boogie_si_record_i32($i25);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i33);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i40 == 1);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i44, $i48);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i62 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i62);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p65 := pci_iomap($p0, 0, 0);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p65);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p74, 0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p75, 65536);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(24, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.3 := $store.i64($M.3, $p76, 256);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(16, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} pcibios_bus_to_resource($p78, $p3, $p2);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.4, $p79);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i80);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p83, $p81);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i87 := vga_rcrt($p86, 56);
    call {:si_unique_call 21} {:cexpr "cr38"} boogie_si_record_i8($i87);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i91 := vga_rcrt($p90, 57);
    call {:si_unique_call 23} {:cexpr "cr39"} boogie_si_record_i8($i91);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} vga_wseq($p94, 8, 6);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vga_wcrt($p97, 56, 72);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vga_wcrt($p100, 57, $sub.i8(0, 91));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i102);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 255);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i104);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i109 := vga_rcrt($p108, 47);
    call {:si_unique_call 28} {:cexpr "tmp___1"} boogie_si_record_i8($i109);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(4, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, 128);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i121 := vga_rcrt($p120, 54);
    call {:si_unique_call 31} {:cexpr "regval"} boogie_si_record_i8($i121);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i124 := $sub.i32($i123, 16);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i125 := $ule.i32($i124, 3);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i125 == 1);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i145 := $sub.i32($i144, 13);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i146 := $ule.i32($i145, 1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb54, $bb56;

  $bb56:
    assume !($i146 == 1);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 20);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i149 == 1);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 10);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i160 == 1);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i121);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i202 := $ashr.i32($i201, 5);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i203 := $sext.i32.i64($i202);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref(s3_memsizes, $mul.ref(0, 32)), $mul.ref($i203, 4));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.5, $p204);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i206 := $shl.i32($i205, 10);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i207 := $sext.i32.i64($i206);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p208, $i207);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.0, $p209);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i64.i32($i210);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p213, $i211);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i217 := vga_rseq($p216, 16);
    call {:si_unique_call 33} {:cexpr "regval"} boogie_si_record_i8($i217);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i221 := vga_rseq($p220, 17);
    call {:si_unique_call 35} {:cexpr "tmp___2"} boogie_si_record_i8($i221);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i223 := $mul.i32($i222, 14318);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i224 := $add.i32($i223, 28636);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i217);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i226 := $and.i32($i225, 31);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i227 := $add.i32($i226, 2);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i228 := $sdiv.i32($i224, $i227);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(8, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p229, $i228);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(8, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.0, $p230);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i217);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i233 := $ashr.i32($i232, 5);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i234 := $ashr.i32($i231, $i233);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(8, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p235, $i234);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i87);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i32.i8($i239);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vga_wcrt($p238, 56, $i240);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i91);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i32.i8($i244);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vga_wcrt($p243, 57, $i245);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p247);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.0, $p249);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i251 := $sext.i32.i64($i250);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref($i251, 8));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.6, $p252);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p254 := strcpy($p248, $p253);
    assume $isExternal($p254);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(56, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p256, 0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(64, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p258, 0);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(28, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p260, 0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(36, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p262, 3);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(42, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p264, 0);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(68, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p266, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(236, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p269, $p267);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p271, 8);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.0, $p272);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i274 := s3fb_ddc_needs_mmio($i273);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i275 := $zext.i1.i8($i274);
    call {:si_unique_call 40} {:cexpr "tmp___4"} boogie_si_record_i8($i275);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i276 := $trunc.i8.i1($i275);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p296);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i298 := s3fb_ddc_needs_mmio($i297);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i299 := $zext.i1.i8($i298);
    call {:si_unique_call 47} {:cexpr "tmp___8"} boogie_si_record_i8($i299);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i300 := $trunc.i8.i1($i299);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    $i301 := 1;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb110, $bb112;

  $bb112:
    assume !($i302 == 1);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(304, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i305 := $p2i.ref.i64($p304);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i306 := $ne.i64($i305, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i306} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    $i343 := 0;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p344 := $M.7;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i346 := $eq.i64($i345, 0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i346 == 1);
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p348 := $M.7;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p348);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i350 := $ne.i64($i349, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(32, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} fb_destroy_modedb($p376);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(32, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p378, $0.ref);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.0, $p380);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i382 := $mul.i32($i381, 8);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i385 := $load.i32($M.0, $p384);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(8, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i388 := $load.i32($M.0, $p387);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i389 := $mul.i32($i385, $i388);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i390 := $udiv.i32($i382, $i389);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(12, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p392, $i390);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(12, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i395 := $load.i32($M.0, $p394);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(4, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.0, $p397);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i399 := $ult.i32($i395, $i398);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(912, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i403 := fb_alloc_cmap($p402, 256, 0);
    call {:si_unique_call 66} {:cexpr "rc"} boogie_si_record_i32($i403);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i404 := $slt.i32($i403, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i408 := ldv_register_framebuffer_104($p10);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 69} {:cexpr "rc"} boogie_si_record_i32($i408);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i409 := $slt.i32($i408, 0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i409} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p412 := pci_name($p0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.0, $p413);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p417 := $bitcast.ref.ref($p416);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i420 := $load.i32($M.0, $p419);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i421 := $lshr.i32($i420, 20);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(8, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i423 := $load.i32($M.0, $p422);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i424 := $add.i32($i423, 500);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i425 := $sdiv.i32($i424, 1000);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} vslice_dummy_var_4 := printk.ref.i32.ref.ref.i32.i32(.str.44, $i414, $p417, $p412, $i421, $i425);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i428 := $load.i32($M.0, $p427);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i428, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p10);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} pci_set_drvdata($p0, $p453);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i454 := $M.8;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i455 := $ne.i32($i454, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb161:
    assume $i455 == 1;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(12, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p456, $sub.i32(0, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i459 := $load.i64($M.0, $p458);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(24, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i462 := $load.i32($M.0, $p461);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i463 := $zext.i32.i64($i462);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i464 := mtrr_add($i459, $i463, 1, 1);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(12, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p465, $i464);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb158:
    assume $i429 == 1;
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $i433 := vga_rcrt($p432, 48);
    call {:si_unique_call 75} {:cexpr "tmp___11"} boogie_si_record_i8($i433);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.0, $p435);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i437 := vga_rcrt($p436, 47);
    call {:si_unique_call 77} {:cexpr "tmp___12"} boogie_si_record_i8($i437);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p440 := $load.ref($M.0, $p439);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $i441 := vga_rcrt($p440, 46);
    call {:si_unique_call 79} {:cexpr "tmp___13"} boogie_si_record_i8($i441);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.0, $p443);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i445 := vga_rcrt($p444, 45);
    call {:si_unique_call 81} {:cexpr "tmp___14"} boogie_si_record_i8($i445);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i447 := $load.i32($M.0, $p446);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i448 := $zext.i8.i32($i445);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i449 := $zext.i8.i32($i441);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i450 := $zext.i8.i32($i437);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i451 := $zext.i8.i32($i433);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} vslice_dummy_var_5 := printk.ref.i32.i32.i32.i32.i32(.str.45, $i447, $i448, $i449, $i450, $i451);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb154:
    assume $i409 == 1;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p411 := $load.ref($M.0, $p410);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} dev_err.ref.ref($p411, .str.43);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(912, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} fb_dealloc_cmap($p466);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i407 := $i408;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i373 := $i407;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(312, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i468 := $load.i8($M.0, $p467);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i469 := $trunc.i8.i1($i468);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i469} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(304, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i473 := $p2i.ref.i64($p472);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i474 := $ne.i64($i473, 0);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p478 := $load.ref($M.0, $p477);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} pci_iounmap($p0, $p478);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i73 := $i373;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} pci_release_regions($p0);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i29 := $i73;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i24 := $i29;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} framebuffer_release($p10);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb3;

  $bb167:
    assume $i474 == 1;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(304, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.0, $p475);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} ldv_iounmap_105($p476);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb169;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb164:
    assume $i469 == 1;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(320, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} i2c_del_adapter($p470);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    goto $bb166;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb150:
    assume $i404 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} dev_err.ref.ref($p406, .str.42);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i407 := $i403;
    goto $bb152;

  $bb147:
    assume $i399 == 1;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.0, $p400);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} dev_err.ref.ref($p401, .str.41);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i373 := $sub.i32(0, 22);
    goto $bb144;

  $bb137:
    assume $i350 == 1;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p352 := $M.7;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(32, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(88, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i358 := $load.i32($M.0, $p357);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.0, $p360);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i362 := fb_find_mode($p351, $p10, $p352, $p355, $i358, $0.ref, $i361);
    call {:si_unique_call 60} {:cexpr "rc"} boogie_si_record_i32($i362);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 0);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i363} true;
    goto $bb139, $bb141;

  $bb141:
    assume !($i363 == 1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i362, 4);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.0, $p365);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p367 := $M.7;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} dev_err.ref.ref.ref($p366, .str.40, $p367);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(32, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.0, $p369);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} fb_destroy_modedb($p370);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(32, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p372, $0.ref);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i373 := $sub.i32(0, 22);
    goto $bb144;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb140;

  $bb131:
    assume $i346 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i347 := $trunc.i8.i1($i343);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i347 == 1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $M.7 := .str.39;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb133;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i307 := s3fb_setup_ddc_bus($p10);
    call {:si_unique_call 49} {:cexpr "tmp___7"} boogie_si_record_i32($i307);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    $i342 := 0;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i343 := $i342;
    goto $bb130;

  $bb115:
    assume $i308 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(320, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p310 := fb_ddc_read($p309);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(312, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p311, 1);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p310);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i313 := $ne.i64($i312, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    $i341 := 0;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i342 := $i341;
    goto $bb129;

  $bb117:
    assume $i313 == 1;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} fb_edid_to_monspecs($p310, $p314);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} kfree($p310);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(32, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i318 := $p2i.ref.i64($p317);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i319 := $eq.i64($i318, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i319 == 1);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(32, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1)), $mul.ref(88, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.0, $p327);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(952, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} fb_videomode_to_modelist($p325, $i328, $p329);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(576, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(952, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p332 := fb_find_best_display($p330, $p331);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i333 := $p2i.ref.i64($p332);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i334 := $ne.i64($i333, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    $i340 := 0;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i322 := $i340;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i341 := $i322;
    goto $bb128;

  $bb122:
    assume $i334 == 1;
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} fb_videomode_to_var($p335, $p332);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i337 := s3fb_check_var($p336, $p10);
    call {:si_unique_call 58} {:cexpr "tmp___6"} boogie_si_record_i32($i337);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 0);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    $i339 := 0;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i340 := $i339;
    goto $bb127;

  $bb124:
    assume $i338 == 1;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i339 := 1;
    goto $bb126;

  $bb119:
    assume $i319 == 1;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.0, $p320);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} dev_err.ref.ref($p321, .str.38);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i322 := 0;
    goto $bb121;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb111;

  $bb107:
    assume $i300 == 1;
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i301 := 0;
    goto $bb109;

  $bb101:
    assume $i276 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i279 := $load.i64($M.0, $p278);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i280 := $add.i64($i279, 16777216);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p281 := ioremap($i280, 65536);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(304, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p282, $p281);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(304, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.0, $p283);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p284);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i286 := $ne.i64($i285, 0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i286 == 1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(16, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i294 := $load.i64($M.0, $p293);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i295 := $add.i64($i294, 16777216);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} dev_err.ref.ref.i64($p291, .str.37, $i295);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume $i286 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} svga_wcrt_mask($p289, 83, 8, 8);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb70:
    assume $i160 == 1;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i121);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 96);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i163 := $ashr.i32($i162, 5);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i121);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 96);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i167 := $ashr.i32($i166, 5);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i121);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i170 := $and.i32($i169, 96);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i171 := $ashr.i32($i170, 5);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 2);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i173 := $zext.i8.i32($i121);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i173, 96);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i175 := $ashr.i32($i174, 5);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 3);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i184 := vga_rcrt($p183, 55);
    call {:si_unique_call 42} {:cexpr "regval"} boogie_si_record_i8($i184);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i186 := $and.i32($i185, 96);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i187 := $ashr.i32($i186, 5);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 1);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i184);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i190 := $and.i32($i189, 96);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i191 := $ashr.i32($i190, 5);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 2);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb94:
    assume $i192 == 1;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i198 := $load.i64($M.0, $p197);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i199 := $sub.i64($i198, 2097152);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p200, $i199);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb90:
    assume $i188 == 1;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i194 := $load.i64($M.0, $p193);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i195 := $sub.i64($i194, 4194304);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p196, $i195);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb84:
    assume $i176 == 1;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p180, 8388608);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb80:
    assume $i172 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p179, 6291456);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb76:
    assume $i168 == 1;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p178, 4194304);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb72:
    assume $i164 == 1;
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p177, 2097152);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i121);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i151 := $ashr.i32($i150, 6);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 1);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i32($i121);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i154 := $ashr.i32($i153, 6);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 3);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb63:
    assume $i155 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p157, 2097152);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb59:
    assume $i152 == 1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p156, 4194304);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb55;

  $bb29:
    assume $i125 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i121);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i127 := $ashr.i32($i126, 5);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i121);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i130 := $ashr.i32($i129, 5);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 1);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i121);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i133 := $ashr.i32($i132, 5);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 2);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i121);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i136 := $ashr.i32($i135, 5);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 4);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i121);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i139 := $ashr.i32($i138, 5);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 6);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume $i140 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p142, 2097152);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb43:
    assume $i137 == 1;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb39:
    assume $i134 == 1;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p141, 4194304);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb35:
    assume $i131 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb31:
    assume $i128 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i115 == 1;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i116 := s3_identification($p16);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p16, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb22:
    assume $i70 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} dev_err.ref.ref($p72, .str.36);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 12);
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i53);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i54, $i59);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb17;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} dev_err.ref.ref($p28, .str.35);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i29 := $i25;
    goto $bb14;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} dev_err.ref.ref($p23, .str.34);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i24 := $i20;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} dev_err.ref.ref($p13, .str.32);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} _dev_info.ref.ref($p7, .str.31);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const s3_pci_remove: ref;

axiom s3_pci_remove == $sub.ref(0, 157194);

procedure s3_pci_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, assertsPassed;



implementation s3_pci_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_6: i32;
  var vslice_dummy_var_7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(12, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i10 := $sge.i32($i9, 0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_7 := ldv_unregister_framebuffer_106($p2);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(912, 1));
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} fb_dealloc_cmap($p16);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(312, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(304, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} pci_iounmap($p0, $p28);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} pci_release_regions($p0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} framebuffer_release($p2);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(304, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} ldv_iounmap_107($p26);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(320, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} i2c_del_adapter($p20);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(12, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_6 := mtrr_del($i12, 0, 0);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(12, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $sub.i32(0, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const s3_pci_suspend: ref;

axiom s3_pci_suspend == $sub.ref(0, 158226);

procedure s3_pci_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.17, $M.21, $CurrAddr, assertsPassed;



implementation s3_pci_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var vslice_dummy_var_8: i32;
  var vslice_dummy_var_9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p3, $i1);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} _dev_info.ref.ref($p10, .str.68);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} console_lock();
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} ldv_mutex_lock_108($p11);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.9, $p12);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} fb_set_suspend($p5, 1);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vslice_dummy_var_8 := pci_save_state($p0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} pci_disable_device($p0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.9, $p20);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i22 := pci_choose_state($p0, $i21);
    call {:si_unique_call 108} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_9 := pci_set_power_state($p0, $i22);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} ldv_mutex_unlock_110($p24);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} console_unlock();
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} ldv_mutex_unlock_109($p18);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} console_unlock();
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const s3_pci_resume: ref;

axiom s3_pci_resume == $sub.ref(0, 159258);

procedure s3_pci_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, assertsPassed;



implementation s3_pci_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i13: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} _dev_info.ref.ref($p7, .str.66);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} console_lock();
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} ldv_mutex_lock_111($p8);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} vslice_dummy_var_10 := pci_set_power_state($p0, 0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} pci_restore_state($p0);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i15 := pci_enable_device($p0);
    call {:si_unique_call 121} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} pci_set_master($p0);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_11 := s3fb_set_par($p2);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} fb_set_suspend($p2, 0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} ldv_mutex_unlock_114($p21);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} console_unlock();
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} ldv_mutex_unlock_113($p17);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} console_unlock();
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} dev_err.ref.ref.i32($p19, .str.67, $i15);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} ldv_mutex_unlock_112($p12);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} console_unlock();
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 160290);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 161322);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    return;
}



const console_lock: ref;

axiom console_lock == $sub.ref(0, 162354);

procedure console_lock();
  free requires assertsPassed;



implementation console_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_111: ref;

axiom ldv_mutex_lock_111 == $sub.ref(0, 163386);

procedure ldv_mutex_lock_111($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_lock_111($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} ldv_linux_kernel_locking_mutex_mutex_lock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_112: ref;

axiom ldv_mutex_unlock_112 == $sub.ref(0, 164418);

procedure ldv_mutex_unlock_112($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const console_unlock: ref;

axiom console_unlock == $sub.ref(0, 165450);

procedure console_unlock();
  free requires assertsPassed;



implementation console_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 166482);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 135} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 167514);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 168546);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_113: ref;

axiom ldv_mutex_unlock_113 == $sub.ref(0, 169578);

procedure ldv_mutex_unlock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 170610);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i64($p0: ref, $p1: ref, p.2: i64);
  free requires assertsPassed;



implementation dev_err.ref.ref.i64($p0: ref, $p1: ref, p.2: i64)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 171642);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    return;
}



const s3fb_set_par: ref;

axiom s3fb_set_par == $sub.ref(0, 172674);

procedure s3fb_set_par($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation s3fb_set_par($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $i33: i32;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i50: i32;
  var $i51: i32;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p108: ref;
  var $p109: ref;
  var $p111: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i24;
  var $i144: i24;
  var $i145: i24;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i64;
  var $i150: i64;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;
  var $p175: ref;
  var $p176: ref;
  var $p178: ref;
  var $p179: ref;
  var $p181: ref;
  var $p182: ref;
  var $p184: ref;
  var $p185: ref;
  var $p187: ref;
  var $p188: ref;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $i196: i1;
  var $p198: ref;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $p209: ref;
  var $p210: ref;
  var $p212: ref;
  var $p213: ref;
  var $p215: ref;
  var $p216: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i32;
  var $p223: ref;
  var $i224: i32;
  var $i225: i1;
  var $p227: ref;
  var $p228: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i32;
  var $i234: i1;
  var $p236: ref;
  var $p237: ref;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $p243: ref;
  var $i244: i1;
  var $i245: i32;
  var $i246: i8;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i273: i32;
  var $i274: i1;
  var $p276: ref;
  var $i277: i32;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $i286: i8;
  var $i287: i32;
  var $i288: i8;
  var $p290: ref;
  var $p291: ref;
  var $i292: i32;
  var $i293: i32;
  var $i294: i32;
  var $i295: i8;
  var $i296: i32;
  var $i297: i32;
  var $i298: i8;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $i303: i32;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $i316: i32;
  var $i317: i1;
  var $p319: ref;
  var $p320: ref;
  var $p322: ref;
  var $p323: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i1;
  var $i328: i1;
  var $i329: i1;
  var $i330: i1;
  var $i331: i1;
  var $i332: i1;
  var $i333: i1;
  var $i334: i1;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $i341: i24;
  var $i342: i24;
  var $i343: i24;
  var $p344: ref;
  var $p345: ref;
  var $i346: i8;
  var $i347: i64;
  var $i348: i64;
  var $i349: i64;
  var $i350: i1;
  var $p351: ref;
  var $i352: i32;
  var $p354: ref;
  var $p355: ref;
  var $p357: ref;
  var $p358: ref;
  var $p360: ref;
  var $p361: ref;
  var $p363: ref;
  var $p364: ref;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $i373: i24;
  var $i374: i24;
  var $i375: i24;
  var $p376: ref;
  var $p377: ref;
  var $i378: i8;
  var $i379: i64;
  var $i380: i64;
  var $i381: i64;
  var $i382: i1;
  var $p383: ref;
  var $i384: i32;
  var $p386: ref;
  var $p387: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $i396: i24;
  var $i397: i24;
  var $i398: i24;
  var $p399: ref;
  var $p400: ref;
  var $i401: i8;
  var $i402: i64;
  var $i403: i64;
  var $i404: i64;
  var $i405: i1;
  var $p406: ref;
  var $i407: i32;
  var $p409: ref;
  var $p410: ref;
  var $p412: ref;
  var $p413: ref;
  var $p415: ref;
  var $p416: ref;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $i426: i24;
  var $i427: i24;
  var $i428: i24;
  var $p429: ref;
  var $p430: ref;
  var $i431: i8;
  var $i432: i64;
  var $i433: i64;
  var $i434: i64;
  var $i435: i1;
  var $p436: ref;
  var $i437: i32;
  var $p439: ref;
  var $p440: ref;
  var $p442: ref;
  var $p443: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $i453: i24;
  var $i454: i24;
  var $i455: i24;
  var $p456: ref;
  var $p457: ref;
  var $i458: i8;
  var $i459: i64;
  var $i460: i64;
  var $i461: i64;
  var $i462: i1;
  var $p463: ref;
  var $i464: i32;
  var $p466: ref;
  var $p467: ref;
  var $p469: ref;
  var $i470: i32;
  var $i471: i1;
  var $p472: ref;
  var $i473: i32;
  var $i474: i1;
  var $p475: ref;
  var $i476: i32;
  var $i477: i1;
  var $p478: ref;
  var $i479: i32;
  var $i480: i1;
  var $p481: ref;
  var $i482: i32;
  var $i483: i1;
  var $p484: ref;
  var $i485: i32;
  var $i486: i1;
  var $p487: ref;
  var $i488: i32;
  var $i489: i1;
  var $p491: ref;
  var $p492: ref;
  var $p495: ref;
  var $p496: ref;
  var $i493: i32;
  var $p497: ref;
  var $p498: ref;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $i503: i24;
  var $i504: i24;
  var $i505: i24;
  var $p506: ref;
  var $p507: ref;
  var $i508: i8;
  var $i509: i64;
  var $i510: i64;
  var $i511: i64;
  var $i512: i1;
  var $p513: ref;
  var $i514: i32;
  var $p515: ref;
  var $i516: i32;
  var $i517: i1;
  var $p519: ref;
  var $i520: i32;
  var $i521: i1;
  var $p523: ref;
  var $p524: ref;
  var $p526: ref;
  var $p527: ref;
  var $p530: ref;
  var $i531: i32;
  var $i532: i1;
  var $p534: ref;
  var $p535: ref;
  var $p537: ref;
  var $i538: i32;
  var $i539: i1;
  var $p541: ref;
  var $p542: ref;
  var $p546: ref;
  var $p547: ref;
  var $i543: i32;
  var $i544: i32;
  var $p551: ref;
  var $p552: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $i557: i32;
  var $i558: i32;
  var $i559: i1;
  var $p560: ref;
  var $i561: i32;
  var $i562: i1;
  var $p563: ref;
  var $i564: i32;
  var $i565: i1;
  var $p566: ref;
  var $i567: i32;
  var $i568: i1;
  var $p569: ref;
  var $i570: i32;
  var $i571: i1;
  var $i572: i32;
  var $i548: i32;
  var $i549: i32;
  var $i528: i32;
  var $i529: i32;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $i579: i24;
  var $i580: i24;
  var $i581: i24;
  var $p582: ref;
  var $p583: ref;
  var $i584: i8;
  var $i585: i64;
  var $i586: i64;
  var $i587: i64;
  var $i588: i1;
  var $p589: ref;
  var $i590: i32;
  var $p591: ref;
  var $i592: i32;
  var $i593: i1;
  var $p595: ref;
  var $i596: i32;
  var $i597: i1;
  var $p599: ref;
  var $p600: ref;
  var $p602: ref;
  var $p603: ref;
  var $p606: ref;
  var $i607: i32;
  var $i608: i1;
  var $p610: ref;
  var $p611: ref;
  var $p613: ref;
  var $i614: i32;
  var $i615: i1;
  var $p617: ref;
  var $p618: ref;
  var $p622: ref;
  var $p623: ref;
  var $i619: i32;
  var $i620: i32;
  var $p627: ref;
  var $p628: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $i633: i32;
  var $i634: i32;
  var $i635: i1;
  var $p636: ref;
  var $i637: i32;
  var $i638: i1;
  var $p639: ref;
  var $i640: i32;
  var $i641: i1;
  var $p642: ref;
  var $i643: i32;
  var $i644: i1;
  var $p645: ref;
  var $i646: i32;
  var $i647: i1;
  var $i648: i32;
  var $i624: i32;
  var $i625: i32;
  var $i604: i32;
  var $i605: i32;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $i655: i24;
  var $i656: i24;
  var $i657: i24;
  var $p658: ref;
  var $p659: ref;
  var $i660: i8;
  var $i661: i64;
  var $i662: i64;
  var $i663: i64;
  var $i664: i1;
  var $p665: ref;
  var $i666: i32;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $i676: i24;
  var $i677: i24;
  var $i678: i24;
  var $p679: ref;
  var $p680: ref;
  var $i681: i8;
  var $i682: i64;
  var $i683: i64;
  var $i684: i64;
  var $i685: i1;
  var $p686: ref;
  var $i687: i32;
  var $p689: ref;
  var $p690: ref;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $i695: i32;
  var $i388: i32;
  var $i389: i32;
  var $p698: ref;
  var $i699: i32;
  var $i700: i1;
  var $p702: ref;
  var $p703: ref;
  var $i704: i1;
  var $i705: i32;
  var $i706: i8;
  var $p708: ref;
  var $p709: ref;
  var $i710: i1;
  var $i711: i32;
  var $i712: i8;
  var $p714: ref;
  var $i715: i32;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $p721: ref;
  var $i722: i32;
  var $i723: i32;
  var $i724: i1;
  var $i725: i32;
  var $p727: ref;
  var $i728: i32;
  var $i729: i32;
  var $i730: i1;
  var $i731: i32;
  var $p732: ref;
  var $i733: i32;
  var $p735: ref;
  var $i736: i32;
  var $p738: ref;
  var $i739: i32;
  var $i740: i32;
  var $p742: ref;
  var $i743: i32;
  var $i744: i32;
  var $p746: ref;
  var $i747: i32;
  var $i748: i32;
  var $i749: i32;
  var $i750: i32;
  var $i751: i32;
  var $p753: ref;
  var $p754: ref;
  var $i755: i32;
  var $i756: i32;
  var $i757: i8;
  var $i758: i32;
  var $i759: i8;
  var $p761: ref;
  var $i762: i32;
  var $p764: ref;
  var $i765: i32;
  var $i766: i32;
  var $i767: i32;
  var $i768: i32;
  var $i769: i32;
  var $i770: i32;
  var $i771: i32;
  var $i772: i32;
  var $i773: i32;
  var $i774: i1;
  var $i775: i32;
  var $i776: i32;
  var $i777: i1;
  var $i778: i32;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $p783: ref;
  var $i784: i64;
  var $p786: ref;
  var $p787: ref;
  var $p789: ref;
  var $p790: ref;
  var $i697: i32;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 149} {:cexpr "bpp"} boogie_si_record_i32($i16);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(42, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, 16);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, 131072);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i60 := $M.10;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p62 := (if $i61 == 1 then s3fb_fast_tile_ops else s3fb_tile_ops);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1536, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p62);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(32, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 128);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(36, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, 32768);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(8, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i71 := $udiv.i32($i70, 16);
    call {:si_unique_call 152} {:cexpr "offset_value"} boogie_si_record_i32($i71);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(8, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(12, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i78 := $mul.i32($i74, $i77);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i79 := $udiv.i32($i78, 64);
    call {:si_unique_call 153} {:cexpr "screen_size"} boogie_si_record_i32($i79);
    assume {:verifier.code 0} true;
    $i50, $i51 := $i71, $i79;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(16, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 0);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(20, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(84, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, 0);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} vga_wcrt($p88, 56, 72);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vga_wcrt($p91, 57, $sub.i8(0, 91));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vga_wseq($p94, 8, 6);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} svga_wcrt_mask($p97, 17, 0, $sub.i8(0, 128));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} svga_wseq_mask($p100, 1, 32, 32);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} svga_wcrt_mask($p103, 23, 0, $sub.i8(0, 128));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} svga_set_default_gfx_regs($p106);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} svga_set_default_atc_regs($p109);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} svga_set_default_seq_regs($p112);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} svga_set_default_crt_regs($p115);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} svga_wcrt_multi($p118, s3_line_compare_regs, $sub.i32(0, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} svga_wcrt_multi($p121, s3_start_address_regs, 0);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} svga_wcrt_mask($p124, 88, 16, 16);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} svga_wcrt_mask($p127, 49, 8, 8);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} svga_wcrt_mask($p130, 51, 0, 8);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} svga_wcrt_mask($p133, 67, 0, 1);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} svga_wcrt_mask($p136, 93, 0, 40);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p137, .str.1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p138, .str.7);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p139, .str.3);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p140, .str.8);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i143 := $load.i24($M.15, $p142);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i144 := $and.i24($i143, $sub.i24(0, 262144));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i145 := $or.i24($i144, 688);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p142, $i145);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p146, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.16, $p147);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i64($i148);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i150 := $and.i64($i149, 1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i151 := ldv__builtin_expect($i150, 0);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i64($i151);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} svga_wcrt_multi($p157, s3_offset_regs, $i50);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i160 := $sub.i32($i159, 13);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i161 := $ugt.i32($i160, 1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vga_wcrt($p188, 58, 53);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} svga_wattr($p191, 51, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(132, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i195 := $and.i32($i194, 2);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i196 == 1);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} svga_wcrt_mask($p202, 9, 0, $sub.i8(0, 128));
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(132, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i206 := $and.i32($i205, 1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i207 == 1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} svga_wcrt_mask($p213, 66, 0, 32);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} svga_wcrt_mask($p216, 69, 0, 1);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} svga_wcrt_mask($p219, 103, 0, 12);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i222 := svga_match_format(s3fb_formats, $p220, $p221);
    call {:si_unique_call 188} {:cexpr "tmp___0"} boogie_si_record_i32($i222);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p223);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 11);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 10);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.0, $p250);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i252 := $sub.i32($i251, 13);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i253 := $ule.i32($i252, 1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i253 == 1);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.0, $p254);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 16);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i256 == 1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.0, $p257);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 17);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i259 == 1);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p260);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 18);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i262 == 1);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.0, $p263);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 19);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i265 == 1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p266);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 11);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i268 == 1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i270 := $load.i32($M.0, $p269);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 12);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i271 == 1);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.0, $p272);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, 20);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.0, $p302);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i304 := $sub.i32($i303, 13);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i305 := $ule.i32($i304, 1);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i305 == 1);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p306);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 16);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i308 == 1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.0, $p309);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 17);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i311 == 1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.0, $p312);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 18);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i314 == 1);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i316 := $load.i32($M.0, $p315);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 20);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i317 == 1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.0, $p322);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vga_wcrt($p323, 52, 16);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.0, $p325);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} svga_wcrt_mask($p326, 49, 0, 64);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i222, 0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i222, 1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i222, 2);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i222, 3);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i222, 4);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i222, 5);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i333 := $eq.i32($i222, 6);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i222, 7);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i695 := $load.i32($M.0, $p694);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_12 := printk.ref.i32(.str.18, $i695);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i697 := $sub.i32(0, 22);
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $r := $i697;
    return;

  $bb89:
    assume $i334 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p670, .str.1);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p671, .str.7);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p672, .str.3);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p673, .str.17);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p675 := $bitcast.ref.ref($p674);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i676 := $load.i24($M.15, $p675);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i677 := $and.i24($i676, $sub.i24(0, 262144));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i678 := $or.i24($i677, 885);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p675, $i678);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p679, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i681 := $load.i8($M.16, $p680);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i682 := $zext.i8.i64($i681);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i683 := $and.i64($i682, 1);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i684 := ldv__builtin_expect($i683, 0);
    call {:si_unique_call 218} {:cexpr "tmp___9"} boogie_si_record_i64($i684);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i685 := $ne.i64($i684, 0);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i685} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i685 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p690 := $load.ref($M.0, $p689);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} svga_wcrt_mask($p690, 80, 48, 48);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p693 := $load.ref($M.0, $p692);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} svga_wcrt_mask($p693, 103, $sub.i8(0, 48), $sub.i8(0, 16));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i388, $i389 := 1, 0;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i699 := $load.i32($M.0, $p698);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i700 := $ne.i32($i699, 10);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(100, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i715 := $load.i32($M.0, $p714);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} s3_set_pixclock($p0, $i715);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p718 := $load.ref($M.0, $p717);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(132, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i722 := $load.i32($M.0, $p721);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i723 := $and.i32($i722, 2);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i724 := $ne.i32($i723, 0);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i725 := (if $i724 == 1 then 2 else 1);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(132, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i728 := $load.i32($M.0, $p727);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i729 := $and.i32($i728, 1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i730 := $ne.i32($i729, 0);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i731 := (if $i730 == 1 then 2 else 1);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i733 := $load.i32($M.0, $p732);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} svga_set_timings($p718, s3_timing_regs, $p719, $i388, 1, $i725, $i731, $i388, $i733);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p735 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i736 := $load.i32($M.0, $p735);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(104, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i739 := $load.i32($M.0, $p738);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i740 := $add.i32($i736, $i739);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(108, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i743 := $load.i32($M.0, $p742);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i744 := $add.i32($i740, $i743);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(120, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i747 := $load.i32($M.0, $p746);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i748 := $add.i32($i744, $i747);
    call {:si_unique_call 267} {:cexpr "htotal"} boogie_si_record_i32($i748);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i749 := $mul.i32($i748, $i388);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i750 := $udiv.i32($i749, 8);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i751 := $sub.i32($i750, 5);
    call {:si_unique_call 268} {:cexpr "htotal"} boogie_si_record_i32($i751);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p754 := $load.ref($M.0, $p753);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i755 := $add.i32($i751, 1);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i756 := $udiv.i32($i755, 2);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i757 := $trunc.i32.i8($i756);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i758 := $zext.i8.i32($i757);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i759 := $trunc.i32.i8($i758);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vga_wcrt($p754, 60, $i759);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i762 := $load.i32($M.0, $p761);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(108, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i765 := $load.i32($M.0, $p764);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i766 := $add.i32($i762, $i765);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i767 := $mul.i32($i766, $i388);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i768 := $udiv.i32($i767, 8);
    call {:si_unique_call 270} {:cexpr "hsstart"} boogie_si_record_i32($i768);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i769 := $add.i32($i751, $i768);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i770 := $add.i32($i769, 1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i771 := $udiv.i32($i770, 2);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i772 := $add.i32($i771, 2);
    call {:si_unique_call 271} {:cexpr "_max1"} boogie_si_record_i32($i772);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i773 := $add.i32($i768, 4);
    call {:si_unique_call 272} {:cexpr "_max2"} boogie_si_record_i32($i773);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i774 := $ugt.i32($i772, $i773);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i774} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i774 == 1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i775 := $i773;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i776 := $add.i32($i751, 1);
    call {:si_unique_call 273} {:cexpr "_min2"} boogie_si_record_i32($i776);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i777 := $ult.i32($i775, $i776);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i777} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i777 == 1);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i778 := $i776;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p781 := $load.ref($M.0, $p780);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} svga_wcrt_multi($p781, s3_dtpc_regs, $i778);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p783 := $load.ref($M.0, $p782);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i784 := $zext.i32.i64($i51);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} memset_io($p783, 0, $i784);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p787 := $load.ref($M.0, $p786);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} svga_wcrt_mask($p787, 23, $sub.i8(0, 128), $sub.i8(0, 128));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p790 := $load.ref($M.0, $p789);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} svga_wseq_mask($p790, 1, 0, 32);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i697 := 0;
    goto $bb189;

  $bb197:
    assume $i777 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i778 := $i775;
    goto $bb199;

  $bb194:
    assume $i774 == 1;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i775 := $i772;
    goto $bb196;

  $bb191:
    assume $i700 == 1;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p703 := $load.ref($M.0, $p702);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i704 := $ne.i32($i389, 0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i705 := (if $i704 == 1 then 16 else 0);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i706 := $trunc.i32.i8($i705);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} svga_wseq_mask($p703, 21, $i706, 16);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p709 := $load.ref($M.0, $p708);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i710 := $ne.i32($i389, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i711 := (if $i710 == 1 then 128 else 0);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i712 := $trunc.i32.i8($i711);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} svga_wseq_mask($p709, 24, $i712, $sub.i8(0, 128));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb186:
    assume $i685 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i687 := $load.i32($M.0, $p686);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} __dynamic_pr_debug.ref.ref.i32($p10, .str.17, $i687);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb85:
    assume $i333 == 1;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p649, .str.1);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p650, .str.7);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p651, .str.3);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p652, .str.16);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p654 := $bitcast.ref.ref($p653);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i655 := $load.i24($M.15, $p654);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i656 := $and.i24($i655, $sub.i24(0, 262144));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i657 := $or.i24($i656, 881);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p654, $i657);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p658 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p658, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i660 := $load.i8($M.16, $p659);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i661 := $zext.i8.i64($i660);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i662 := $and.i64($i661, 1);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i663 := ldv__builtin_expect($i662, 0);
    call {:si_unique_call 216} {:cexpr "tmp___8"} boogie_si_record_i64($i663);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i664 := $ne.i64($i663, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i664} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p669 := $load.ref($M.0, $p668);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} svga_wcrt_mask($p669, 103, $sub.i8(0, 48), $sub.i8(0, 16));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i388, $i389 := 1, 0;
    goto $bb103;

  $bb183:
    assume $i664 == 1;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i666 := $load.i32($M.0, $p665);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} __dynamic_pr_debug.ref.ref.i32($p9, .str.16, $i666);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb81:
    assume $i332 == 1;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p573, .str.1);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p574, .str.7);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p575, .str.3);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p576, .str.15);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p578 := $bitcast.ref.ref($p577);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i579 := $load.i24($M.15, $p578);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i580 := $and.i24($i579, $sub.i24(0, 262144));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i581 := $or.i24($i580, 852);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p578, $i581);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p582, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i584 := $load.i8($M.16, $p583);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i585 := $zext.i8.i64($i584);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i586 := $and.i64($i585, 1);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i587 := ldv__builtin_expect($i586, 0);
    call {:si_unique_call 214} {:cexpr "tmp___7"} boogie_si_record_i64($i587);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i588 := $ne.i64($i587, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i592 := $load.i32($M.0, $p591);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i593 := $eq.i32($i592, 10);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i593} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i593 == 1);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i607 := $load.i32($M.0, $p606);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i607, 19);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i608 == 1);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p628 := $load.ref($M.0, $p627);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} svga_wcrt_mask($p628, 80, 16, 48);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p631 := $load.ref($M.0, $p630);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} svga_wcrt_mask($p631, 103, 80, $sub.i8(0, 16));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i633 := $load.i32($M.0, $p632);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i634 := $sub.i32($i633, 13);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i635 := $ugt.i32($i634, 1);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i635} true;
    goto $bb171, $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume !($i635 == 1);
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i648 := 1;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i624, $i625 := $i648, 0;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i604, $i605 := $i624, $i625;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i388, $i389 := $i604, $i605;
    goto $bb103;

  $bb171:
    assume $i635 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i637 := $load.i32($M.0, $p636);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i638 := $ne.i32($i637, 16);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i638 == 1);
    goto $bb173;

  $bb174:
    assume $i638 == 1;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i640 := $load.i32($M.0, $p639);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i641 := $ne.i32($i640, 17);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i641 == 1);
    goto $bb173;

  $bb176:
    assume $i641 == 1;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i643 := $load.i32($M.0, $p642);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i644 := $ne.i32($i643, 18);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i644} true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i644 == 1);
    goto $bb173;

  $bb178:
    assume $i644 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i646 := $load.i32($M.0, $p645);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i647 := $ne.i32($i646, 20);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i647} true;
    goto $bb180, $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume !($i647 == 1);
    goto $bb173;

  $bb180:
    assume $i647 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i648 := 2;
    goto $bb182;

  $bb165:
    assume $i608 == 1;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p611 := $load.ref($M.0, $p610);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} svga_wcrt_mask($p611, 80, 16, 48);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(100, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.0, $p613);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i615 := $ugt.i32($i614, 8695);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i615} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i615 == 1);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p623 := $load.ref($M.0, $p622);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} svga_wcrt_mask($p623, 103, 64, $sub.i8(0, 16));
    assume {:verifier.code 0} true;
    $i619, $i620 := 1, 1;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i624, $i625 := $i619, $i620;
    goto $bb170;

  $bb167:
    assume $i615 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p618 := $load.ref($M.0, $p617);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} svga_wcrt_mask($p618, 103, 80, $sub.i8(0, 16));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i619, $i620 := 2, 0;
    goto $bb169;

  $bb159:
    assume $i593 == 1;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(100, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i596 := $load.i32($M.0, $p595);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i597 := $ugt.i32($i596, 20000);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i597 == 1);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p603 := $load.ref($M.0, $p602);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} svga_wcrt_mask($p603, 103, 80, $sub.i8(0, 16));
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i604, $i605 := 1, 0;
    goto $bb164;

  $bb161:
    assume $i597 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p600 := $load.ref($M.0, $p599);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} svga_wcrt_mask($p600, 103, 64, $sub.i8(0, 16));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb156:
    assume $i588 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i590 := $load.i32($M.0, $p589);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} __dynamic_pr_debug.ref.ref.i32($p8, .str.15, $i590);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb77:
    assume $i331 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p497, .str.1);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p498, .str.7);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p499, .str.3);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p500, .str.14);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p502 := $bitcast.ref.ref($p501);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i503 := $load.i24($M.15, $p502);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i504 := $and.i24($i503, $sub.i24(0, 262144));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i505 := $or.i24($i504, 824);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p502, $i505);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p506, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i508 := $load.i8($M.16, $p507);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i509 := $zext.i8.i64($i508);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i510 := $and.i64($i509, 1);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i511 := ldv__builtin_expect($i510, 0);
    call {:si_unique_call 212} {:cexpr "tmp___6"} boogie_si_record_i64($i511);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i512 := $ne.i64($i511, 0);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i516 := $load.i32($M.0, $p515);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i517 := $eq.i32($i516, 10);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i517} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i517 == 1);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i531 := $load.i32($M.0, $p530);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i532 := $eq.i32($i531, 19);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i532} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i532 == 1);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.0, $p551);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} svga_wcrt_mask($p552, 80, 16, 48);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p555 := $load.ref($M.0, $p554);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} svga_wcrt_mask($p555, 103, 48, $sub.i8(0, 16));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i557 := $load.i32($M.0, $p556);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i558 := $sub.i32($i557, 13);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i559 := $ugt.i32($i558, 1);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i559} true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i559 == 1);
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i572 := 1;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i548, $i549 := $i572, 0;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i528, $i529 := $i548, $i549;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i388, $i389 := $i528, $i529;
    goto $bb103;

  $bb144:
    assume $i559 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i561 := $load.i32($M.0, $p560);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i562 := $ne.i32($i561, 16);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i562} true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i562 == 1);
    goto $bb146;

  $bb147:
    assume $i562 == 1;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i564 := $load.i32($M.0, $p563);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i565 := $ne.i32($i564, 17);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb149, $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    assume !($i565 == 1);
    goto $bb146;

  $bb149:
    assume $i565 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i567 := $load.i32($M.0, $p566);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i568 := $ne.i32($i567, 18);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i568} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i568 == 1);
    goto $bb146;

  $bb151:
    assume $i568 == 1;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i570 := $load.i32($M.0, $p569);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i571 := $ne.i32($i570, 20);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i571} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i571 == 1);
    goto $bb146;

  $bb153:
    assume $i571 == 1;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i572 := 2;
    goto $bb155;

  $bb138:
    assume $i532 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.0, $p534);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} svga_wcrt_mask($p535, 80, 16, 48);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(100, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i538 := $load.i32($M.0, $p537);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i539 := $ugt.i32($i538, 8695);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i539} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i539 == 1);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p547 := $load.ref($M.0, $p546);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} svga_wcrt_mask($p547, 103, 32, $sub.i8(0, 16));
    assume {:verifier.code 0} true;
    $i543, $i544 := 1, 1;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i548, $i549 := $i543, $i544;
    goto $bb143;

  $bb140:
    assume $i539 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.0, $p541);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} svga_wcrt_mask($p542, 103, 48, $sub.i8(0, 16));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i543, $i544 := 2, 0;
    goto $bb142;

  $bb132:
    assume $i517 == 1;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(100, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i520 := $load.i32($M.0, $p519);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i521 := $ugt.i32($i520, 20000);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i521 == 1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.0, $p526);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} svga_wcrt_mask($p527, 103, 48, $sub.i8(0, 16));
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i528, $i529 := 1, 0;
    goto $bb137;

  $bb134:
    assume $i521 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p524 := $load.ref($M.0, $p523);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} svga_wcrt_mask($p524, 103, 32, $sub.i8(0, 16));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb129:
    assume $i512 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i514 := $load.i32($M.0, $p513);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} __dynamic_pr_debug.ref.ref.i32($p7, .str.14, $i514);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb73:
    assume $i330 == 1;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p447, .str.1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p448, .str.7);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p449, .str.3);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p450, .str.13);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p452 := $bitcast.ref.ref($p451);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i453 := $load.i24($M.15, $p452);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i454 := $and.i24($i453, $sub.i24(0, 262144));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i455 := $or.i24($i454, 808);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p452, $i455);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p456, 0);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i458 := $load.i8($M.16, $p457);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i459 := $zext.i8.i64($i458);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i460 := $and.i64($i459, 1);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i461 := ldv__builtin_expect($i460, 0);
    call {:si_unique_call 210} {:cexpr "tmp___5"} boogie_si_record_i64($i461);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i462 := $ne.i64($i461, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.0, $p466);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} svga_wcrt_mask($p467, 80, 0, 48);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(100, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i470 := $load.i32($M.0, $p469);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i471 := $ugt.i32($i470, 20000);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i471} true;
    goto $bb113, $bb115;

  $bb115:
    assume !($i471 == 1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i473 := $load.i32($M.0, $p472);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i473, 13);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i474 == 1);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i476 := $load.i32($M.0, $p475);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i477 := $eq.i32($i476, 14);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i477} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i477 == 1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i479 := $load.i32($M.0, $p478);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i480 := $eq.i32($i479, 16);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i480 == 1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i482 := $load.i32($M.0, $p481);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i483 := $eq.i32($i482, 17);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i483 == 1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i485 := $load.i32($M.0, $p484);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i485, 18);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i486} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i486 == 1);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i488 := $load.i32($M.0, $p487);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i489 := $eq.i32($i488, 20);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i489} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i489 == 1);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p496 := $load.ref($M.0, $p495);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} svga_wcrt_mask($p496, 103, 16, $sub.i8(0, 16));
    assume {:verifier.code 0} true;
    $i493 := 1;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i388, $i389 := 1, $i493;
    goto $bb103;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i489 == 1;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.0, $p491);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} svga_wcrt_mask($p492, 103, 0, $sub.i8(0, 16));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i493 := 0;
    goto $bb128;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i486 == 1;
    goto $bb114;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb114;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i480 == 1;
    goto $bb114;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i477 == 1;
    goto $bb114;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i474 == 1;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i471 == 1;
    goto $bb114;

  $bb110:
    assume $i462 == 1;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i464 := $load.i32($M.0, $p463);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} __dynamic_pr_debug.ref.ref.i32($p6, .str.13, $i464);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb69:
    assume $i329 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p420, .str.1);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p421, .str.7);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p422, .str.3);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p423, .str.12);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p425 := $bitcast.ref.ref($p424);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i426 := $load.i24($M.15, $p425);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i427 := $and.i24($i426, $sub.i24(0, 262144));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i428 := $or.i24($i427, 798);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p425, $i428);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p429, 0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i431 := $load.i8($M.16, $p430);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i432 := $zext.i8.i64($i431);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i433 := $and.i64($i432, 1);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i434 := ldv__builtin_expect($i433, 0);
    call {:si_unique_call 208} {:cexpr "tmp___4"} boogie_si_record_i64($i434);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i435 := $ne.i64($i434, 0);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p440 := $load.ref($M.0, $p439);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} svga_wcrt_mask($p440, 80, 0, 48);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} svga_wcrt_mask($p443, 103, 0, $sub.i8(0, 16));
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.0, $p445);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} svga_wcrt_mask($p446, 58, 0, 48);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i388, $i389 := 1, 0;
    goto $bb103;

  $bb107:
    assume $i435 == 1;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i437 := $load.i32($M.0, $p436);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} __dynamic_pr_debug.ref.ref.i32($p5, .str.12, $i437);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb65:
    assume $i328 == 1;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p390, .str.1);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p391, .str.7);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p392, .str.3);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p393, .str.11);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $p395 := $bitcast.ref.ref($p394);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i396 := $load.i24($M.15, $p395);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i397 := $and.i24($i396, $sub.i24(0, 262144));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i398 := $or.i24($i397, 787);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p395, $i398);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p399, 0);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i401 := $load.i8($M.16, $p400);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i402 := $zext.i8.i64($i401);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i403 := $and.i64($i402, 1);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i404 := ldv__builtin_expect($i403, 0);
    call {:si_unique_call 206} {:cexpr "tmp___3"} boogie_si_record_i64($i404);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i405 := $ne.i64($i404, 0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vga_wgfx($p410, 5, 64);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p413 := $load.ref($M.0, $p412);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} svga_wcrt_mask($p413, 80, 0, 48);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} svga_wcrt_mask($p416, 103, 0, $sub.i8(0, 16));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} svga_wcrt_mask($p419, 58, 0, 48);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i388, $i389 := 1, 0;
    goto $bb103;

  $bb104:
    assume $i405 == 1;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i407 := $load.i32($M.0, $p406);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} __dynamic_pr_debug.ref.ref.i32($p4, .str.11, $i407);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb61:
    assume $i327 == 1;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p335, .str.1);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p336, .str.7);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p337, .str.3);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p338, .str.9);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p340 := $bitcast.ref.ref($p339);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i341 := $load.i24($M.15, $p340);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i342 := $and.i24($i341, $sub.i24(0, 262144));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i343 := $or.i24($i342, 771);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p340, $i343);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p344, 0);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i346 := $load.i8($M.16, $p345);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i347 := $zext.i8.i64($i346);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i348 := $and.i64($i347, 1);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i349 := ldv__builtin_expect($i348, 0);
    call {:si_unique_call 204} {:cexpr "tmp___1"} boogie_si_record_i64($i349);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i350 := $ne.i64($i349, 0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} svga_set_textmode_vga_regs($p355);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p358 := $load.ref($M.0, $p357);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} svga_wcrt_mask($p358, 80, 0, 48);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p361 := $load.ref($M.0, $p360);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} svga_wcrt_mask($p361, 103, 0, $sub.i8(0, 16));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p364 := $load.ref($M.0, $p363);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} svga_wcrt_mask($p364, 58, 0, 48);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i365 := $M.10;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i366 := $ne.i32($i365, 0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i388, $i389 := 1, 0;
    goto $bb103;

  $bb97:
    assume $i366 == 1;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p367, .str.1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p368, .str.7);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p369, .str.3);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p370, .str.10);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p372 := $bitcast.ref.ref($p371);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i373 := $load.i24($M.15, $p372);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i374 := $and.i24($i373, $sub.i24(0, 262144));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i375 := $or.i24($i374, 782);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p372, $i375);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p376, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i378 := $load.i8($M.16, $p377);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i379 := $zext.i8.i64($i378);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i380 := $and.i64($i379, 1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i381 := ldv__builtin_expect($i380, 0);
    call {:si_unique_call 226} {:cexpr "tmp___2"} boogie_si_record_i64($i381);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i382 := $ne.i64($i381, 0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i382} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p387 := $load.ref($M.0, $p386);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} svga_wcrt_mask($p387, 49, 64, 64);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i382 == 1;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i384 := $load.i32($M.0, $p383);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __dynamic_pr_debug.ref.ref.i32($p3, .str.10, $i384);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb94:
    assume $i350 == 1;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i352 := $load.i32($M.0, $p351);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} __dynamic_pr_debug.ref.ref.i32($p2, .str.9, $i352);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i317 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.0, $p319);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} vga_wcrt($p320, 52, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb50;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb50;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.0, $p276);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i278 := $add.i32($i16, 7);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i279 := $udiv.i32($i278, 8);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i280 := $mul.i32($i277, $i279);
    call {:si_unique_call 196} {:cexpr "dbytes"} boogie_si_record_i32($i280);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i284 := $add.i32($i280, 7);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i285 := $udiv.i32($i284, 8);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i32.i8($i285);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i32($i286);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i32.i8($i287);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} vga_wcrt($p283, $sub.i8(0, 111), $i288);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i292 := $add.i32($i280, 7);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i293 := $udiv.i32($i292, 8);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i294 := $lshr.i32($i293, 8);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i32.i8($i294);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i296 := $zext.i8.i32($i295);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i297 := $or.i32($i296, 128);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i298 := $trunc.i32.i8($i297);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vga_wcrt($p291, $sub.i8(0, 112), $i298);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.0, $p300);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} vga_wcrt($p301, 102, $sub.i8(0, 127));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb32;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb32;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i265 == 1;
    goto $bb32;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb32;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb32;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i256 == 1;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb32;

  $bb28:
    assume $i234 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vga_wcrt($p237, 80, 0);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} vga_wcrt($p240, 103, 80);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} msleep(10);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i244 := $ule.i32($i222, 2);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i245 := (if $i244 == 1 then 144 else 9);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i32.i8($i245);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} vga_wcrt($p243, 99, $i246);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vga_wcrt($p249, 102, $sub.i8(0, 112));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i225 == 1;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vga_wcrt($p228, $sub.i8(0, 122), $sub.i8(0, 128));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vga_wcrt($p231, $sub.i8(0, 112), 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i207 == 1;
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} svga_wcrt_mask($p210, 66, 32, 32);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i196 == 1;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} svga_wcrt_mask($p199, 9, $sub.i8(0, 128), $sub.i8(0, 128));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i161 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 16);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb9;

  $bb10:
    assume $i164 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 17);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb9;

  $bb12:
    assume $i167 == 1;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 18);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb9;

  $bb14:
    assume $i170 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 20);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb9;

  $bb16:
    assume $i173 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} vga_wcrt($p176, 84, 24);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} vga_wcrt($p179, 96, $sub.i8(0, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.0, $p181);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vga_wcrt($p182, 97, $sub.i8(0, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} vga_wcrt($p185, 98, $sub.i8(0, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume $i152 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} __dynamic_pr_debug.ref.ref.i32.i32($p1, .str.8, $i154, $i50);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(42, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, 1);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(8, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i22, $i16);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i32($i23, 8);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i24);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $sub.i32(0, 131073));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(8, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1536, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $0.ref);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i16, 4);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i33 := (if $i32 == 1 then 128 else $sub.i32(0, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(32, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i33);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(800, 1)), $mul.ref(36, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $sub.i32(0, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(8, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, $i16);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i42 := $udiv.i32($i41, 64);
    call {:si_unique_call 150} {:cexpr "offset_value"} boogie_si_record_i32($i42);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(12, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i49 := $mul.i32($i45, $i48);
    call {:si_unique_call 151} {:cexpr "screen_size"} boogie_si_record_i32($i49);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i50, $i51 := $i42, $i49;
    goto $bb3;
}



const fb_set_suspend: ref;

axiom fb_set_suspend == $sub.ref(0, 173706);

procedure fb_set_suspend($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation fb_set_suspend($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "fb_set_suspend:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_114: ref;

axiom ldv_mutex_unlock_114 == $sub.ref(0, 174738);

procedure ldv_mutex_unlock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info == $sub.ref(0, 175770);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i1 := $M.17;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.17 := 0;
    call {:si_unique_call 281} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_open_lock_of_s3fb_info"} boogie_si_record_i8(0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 176802);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 283} __VERIFIER_error();
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vga_wcrt: ref;

axiom vga_wcrt == $sub.ref(0, 177834);

procedure vga_wcrt($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;



implementation vga_wcrt($p0: ref, $i1: i8, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "vga_wcrt:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 285} {:cexpr "vga_wcrt:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} vga_w_fast($p0, 980, $i4, $i6);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    return;
}



const vga_wseq: ref;

axiom vga_wseq == $sub.ref(0, 178866);

procedure vga_wseq($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;



implementation vga_wseq($p0: ref, $i1: i8, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "vga_wseq:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 288} {:cexpr "vga_wseq:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vga_w_fast($p0, 964, $i4, $i6);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    return;
}



const svga_wcrt_mask: ref;

axiom svga_wcrt_mask == $sub.ref(0, 179898);

procedure svga_wcrt_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8);
  free requires assertsPassed;



implementation svga_wcrt_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8)
{
  var $i4: i32;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} {:cexpr "svga_wcrt_mask:arg:index"} boogie_si_record_i8($i1);
    call {:si_unique_call 291} {:cexpr "svga_wcrt_mask:arg:data"} boogie_si_record_i8($i2);
    call {:si_unique_call 292} {:cexpr "svga_wcrt_mask:arg:mask"} boogie_si_record_i8($i3);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i6 := vga_rcrt($p0, $i5);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i3);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, $i10);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i6);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i3);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i16 := $xor.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i14, $i16);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i13, $i17);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vga_wcrt($p0, $i8, $i21);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    return;
}



const svga_wseq_mask: ref;

axiom svga_wseq_mask == $sub.ref(0, 180930);

procedure svga_wseq_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8);
  free requires assertsPassed;



implementation svga_wseq_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8)
{
  var $i4: i32;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} {:cexpr "svga_wseq_mask:arg:index"} boogie_si_record_i8($i1);
    call {:si_unique_call 297} {:cexpr "svga_wseq_mask:arg:data"} boogie_si_record_i8($i2);
    call {:si_unique_call 298} {:cexpr "svga_wseq_mask:arg:mask"} boogie_si_record_i8($i3);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i6 := vga_rseq($p0, $i5);
    call {:si_unique_call 300} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i3);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, $i10);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i13 := $sext.i8.i32($i12);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i6);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i15 := $sext.i8.i32($i3);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i16 := $xor.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i14, $i16);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i13, $i17);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vga_wseq($p0, $i8, $i21);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    return;
}



const svga_set_default_gfx_regs: ref;

axiom svga_set_default_gfx_regs == $sub.ref(0, 181962);

procedure svga_set_default_gfx_regs($p0: ref);
  free requires assertsPassed;



implementation svga_set_default_gfx_regs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    return;
}



const svga_set_default_atc_regs: ref;

axiom svga_set_default_atc_regs == $sub.ref(0, 182994);

procedure svga_set_default_atc_regs($p0: ref);
  free requires assertsPassed;



implementation svga_set_default_atc_regs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    return;
}



const svga_set_default_seq_regs: ref;

axiom svga_set_default_seq_regs == $sub.ref(0, 184026);

procedure svga_set_default_seq_regs($p0: ref);
  free requires assertsPassed;



implementation svga_set_default_seq_regs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    return;
}



const svga_set_default_crt_regs: ref;

axiom svga_set_default_crt_regs == $sub.ref(0, 185058);

procedure svga_set_default_crt_regs($p0: ref);
  free requires assertsPassed;



implementation svga_set_default_crt_regs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    return;
}



const svga_wcrt_multi: ref;

axiom svga_wcrt_multi == $sub.ref(0, 186090);

procedure svga_wcrt_multi($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation svga_wcrt_multi($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} {:cexpr "svga_wcrt_multi:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 187122);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 304} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 188154);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    return;
}



const svga_wattr: ref;

axiom svga_wattr == $sub.ref(0, 189186);

procedure svga_wattr($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;



implementation svga_wattr($p0: ref, $i1: i8, $i2: i8)
{
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var vslice_dummy_var_13: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "svga_wattr:arg:index"} boogie_si_record_i8($i1);
    call {:si_unique_call 306} {:cexpr "svga_wattr:arg:data"} boogie_si_record_i8($i2);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_13 := vga_r($p0, 986);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i4);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} vga_w($p0, 960, $i5);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i2);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vga_w($p0, 960, $i7);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    return;
}



const svga_match_format: ref;

axiom svga_match_format == $sub.ref(0, 190218);

procedure svga_match_format($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation svga_match_format($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 1} true;
    call {:si_unique_call 310} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 311} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 191250);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    return;
}



const svga_set_textmode_vga_regs: ref;

axiom svga_set_textmode_vga_regs == $sub.ref(0, 192282);

procedure svga_set_textmode_vga_regs($p0: ref);
  free requires assertsPassed;



implementation svga_set_textmode_vga_regs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    return;
}



const vga_wgfx: ref;

axiom vga_wgfx == $sub.ref(0, 193314);

procedure vga_wgfx($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;



implementation vga_wgfx($p0: ref, $i1: i8, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "vga_wgfx:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 314} {:cexpr "vga_wgfx:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} vga_w_fast($p0, 974, $i4, $i6);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 194346);

procedure printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 316} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 317} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 1} true;
    call {:si_unique_call 320} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 321} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.ref.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.ref.i32.i32($p0: ref, p.1: i32, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 1} true;
    call {:si_unique_call 322} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 323} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const s3_set_pixclock: ref;

axiom s3_set_pixclock == $sub.ref(0, 195378);

procedure s3_set_pixclock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation s3_set_pixclock($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i8;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i32;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $p74: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i8;
  var $p92: ref;
  var $p93: ref;
  var $i94: i16;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i8;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i8;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 327} {:cexpr "s3_set_pixclock:arg:pixclock"} boogie_si_record_i32($i1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 19);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p11 := (if $i10 == 1 then s3_trio3d_pll else s3_pll);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i12 := $udiv.i32(1000000000, $i1);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i15 := svga_compute_pll($p11, $i12, $p2, $p3, $p4, $i14);
    call {:si_unique_call 329} {:cexpr "rv"} boogie_si_record_i32($i15);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i23 := vga_r($p22, 972);
    call {:si_unique_call 332} {:cexpr "regval"} boogie_si_record_i8($i23);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i23);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 12);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vga_w($p26, 962, $i29);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i31, 13);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i33 := $ule.i32($i32, 1);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i33 == 1);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 16);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 17);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 18);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 20);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.18, $p3);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i16.i8($i76);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 254);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i8($i79);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i81 := $sext.i8.i32($i80);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.19, $p4);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i84 := $shl.i32($i83, 5);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i84);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i86 := $sext.i8.i32($i85);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i87 := $or.i32($i81, $i86);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vga_wseq($p75, 18, $i90);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.20, $p2);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i16.i8($i94);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i96, 254);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vga_wseq($p93, 19, $i98);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} __const_udelay(4295000);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i102 := vga_rseq($p101, 21);
    call {:si_unique_call 340} {:cexpr "regval"} boogie_si_record_i8($i102);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i102);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 223);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} vga_wseq($p105, 21, $i108);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i102);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 32);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} vga_wseq($p111, 21, $i114);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i102);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 223);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vga_wseq($p117, 21, $i120);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.18, $p3);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i16.i8($i49);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 254);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i55 := $load.i16($M.19, $p4);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32($i56, 6);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i59 := $sext.i8.i32($i58);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i54, $i59);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vga_wseq($p48, 18, $i63);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.19, $p4);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i69 := $ashr.i32($i68, 2);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vga_wseq($p66, 41, $i72);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb6;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} vslice_dummy_var_14 := printk.ref.i32(.str.20, $i18);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const svga_set_timings: ref;

axiom svga_set_timings == $sub.ref(0, 196410);

procedure svga_set_timings($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32);
  free requires assertsPassed;



implementation svga_set_timings($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} {:cexpr "svga_set_timings:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 345} {:cexpr "svga_set_timings:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 346} {:cexpr "svga_set_timings:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 347} {:cexpr "svga_set_timings:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 348} {:cexpr "svga_set_timings:arg:arg7"} boogie_si_record_i32($i7);
    call {:si_unique_call 349} {:cexpr "svga_set_timings:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    return;
}



const memset_io: ref;

axiom memset_io == $sub.ref(0, 197442);

procedure memset_io($p0: ref, $i1: i8, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation memset_io($p0: ref, $i1: i8, $i2: i64)
{
  var $i3: i32;
  var $i4: i8;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "memset_io:arg:val"} boogie_si_record_i8($i1);
    call {:si_unique_call 351} {:cexpr "memset_io:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 352} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p0, $i4, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 198474);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const svga_compute_pll: ref;

axiom svga_compute_pll == $sub.ref(0, 199506);

procedure svga_compute_pll($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation svga_compute_pll($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 353} {:cexpr "svga_compute_pll:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 354} {:cexpr "svga_compute_pll:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 1} true;
    call {:si_unique_call 355} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 356} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vga_r: ref;

axiom vga_r == $sub.ref(0, 200538);

procedure vga_r($p0: ref, $i1: i16) returns ($r: i8);
  free requires assertsPassed;



implementation vga_r($p0: ref, $i1: i16) returns ($r: i8)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i16;
  var $i6: i8;
  var $i8: i32;
  var $i9: i16;
  var $i10: i8;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} {:cexpr "vga_r:arg:port"} boogie_si_record_i16($i1);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i1);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $i10 := vga_io_r($i9);
    call {:si_unique_call 361} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i6 := vga_mm_r($p0, $i5);
    call {:si_unique_call 359} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const vga_w: ref;

axiom vga_w == $sub.ref(0, 201570);

procedure vga_w($p0: ref, $i1: i16, $i2: i8);
  free requires assertsPassed;



implementation vga_w($p0: ref, $i1: i16, $i2: i8)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} {:cexpr "vga_w:arg:port"} boogie_si_record_i16($i1);
    call {:si_unique_call 363} {:cexpr "vga_w:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i1);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i2);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vga_io_w($i10, $i12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} vga_mm_w($p0, $i6, $i8);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 202602);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    return;
}



const vga_rseq: ref;

axiom vga_rseq == $sub.ref(0, 203634);

procedure vga_rseq($p0: ref, $i1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation vga_rseq($p0: ref, $i1: i8) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i8;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} {:cexpr "vga_rseq:arg:reg"} boogie_si_record_i8($i1);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vga_w($p0, 964, $i3);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i4 := vga_r($p0, 965);
    call {:si_unique_call 370} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vga_mm_w: ref;

axiom vga_mm_w == $sub.ref(0, 204666);

procedure vga_mm_w($p0: ref, $i1: i16, $i2: i8);
  free requires assertsPassed;



implementation vga_mm_w($p0: ref, $i1: i16, $i2: i8)
{
  var $i3: i32;
  var $i4: i8;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} {:cexpr "vga_mm_w:arg:port"} boogie_si_record_i16($i1);
    call {:si_unique_call 372} {:cexpr "vga_mm_w:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i1);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref($i5, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} writeb($i4, $p6);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    return;
}



const vga_io_w: ref;

axiom vga_io_w == $sub.ref(0, 205698);

procedure vga_io_w($i0: i16, $i1: i8);
  free requires assertsPassed;



implementation vga_io_w($i0: i16, $i1: i8)
{
  var $i2: i32;
  var $i3: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "vga_io_w:arg:port"} boogie_si_record_i16($i0);
    call {:si_unique_call 375} {:cexpr "vga_io_w:arg:val"} boogie_si_record_i8($i1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} outb_p($i3, $i4);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    return;
}



const outb_p: ref;

axiom outb_p == $sub.ref(0, 206730);

procedure outb_p($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb_p($i0: i8, $i1: i32)
{
  var $i2: i32;
  var $i3: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} {:cexpr "outb_p:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 378} {:cexpr "outb_p:arg:port"} boogie_si_record_i32($i1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} outb($i3, $i1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} slow_down_io();
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    return;
}



const outb: ref;

axiom outb == $sub.ref(0, 207762);

procedure outb($i0: i8, $i1: i32);
  free requires assertsPassed;



implementation outb($i0: i8, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "outb:arg:value"} boogie_si_record_i8($i0);
    call {:si_unique_call 382} {:cexpr "outb:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 383} devirtbounce(0, $i0, $i1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    return;
}



const slow_down_io: ref;

axiom slow_down_io == $sub.ref(0, 208794);

procedure slow_down_io();
  free requires assertsPassed;



implementation slow_down_io()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref(pv_cpu_ops, $mul.ref(0, 320)), $mul.ref(208, 1)));
    call {:si_unique_call 384} devirtbounce.1($p0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    return;
}



const writeb: ref;

axiom writeb == $sub.ref(0, 209826);

procedure writeb($i0: i8, $p1: ref);
  free requires assertsPassed;



implementation writeb($i0: i8, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} {:cexpr "writeb:arg:val"} boogie_si_record_i8($i0);
    call {:si_unique_call 386} devirtbounce.2(0, $i0, $p1);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    return;
}



const vga_mm_r: ref;

axiom vga_mm_r == $sub.ref(0, 210858);

procedure vga_mm_r($p0: ref, $i1: i16) returns ($r: i8);
  free requires assertsPassed;



implementation vga_mm_r($p0: ref, $i1: i16) returns ($r: i8)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "vga_mm_r:arg:port"} boogie_si_record_i16($i1);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i64($i1);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref($i2, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i4 := readb($p3);
    call {:si_unique_call 389} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vga_io_r: ref;

axiom vga_io_r == $sub.ref(0, 211890);

procedure vga_io_r($i0: i16) returns ($r: i8);
  free requires assertsPassed;



implementation vga_io_r($i0: i16) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} {:cexpr "vga_io_r:arg:port"} boogie_si_record_i16($i0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i2 := inb_p($i1);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const inb_p: ref;

axiom inb_p == $sub.ref(0, 212922);

procedure inb_p($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb_p($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "inb_p:arg:port"} boogie_si_record_i32($i0);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i1 := inb($i0);
    call {:si_unique_call 395} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} slow_down_io();
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const inb: ref;

axiom inb == $sub.ref(0, 213954);

procedure inb($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation inb($i0: i32) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} {:cexpr "inb:arg:port"} boogie_si_record_i32($i0);
    call {:si_unique_call 398} $i1 := devirtbounce.3(0, $i0);
    call {:si_unique_call 399} {:cexpr "value"} boogie_si_record_i8($i1);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const readb: ref;

axiom readb == $sub.ref(0, 214986);

procedure readb($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation readb($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i1 := devirtbounce.4(0, $p0);
    call {:si_unique_call 401} {:cexpr "ret"} boogie_si_record_i8($i1);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vga_w_fast: ref;

axiom vga_w_fast == $sub.ref(0, 216018);

procedure vga_w_fast($p0: ref, $i1: i16, $i2: i8, $i3: i8);
  free requires assertsPassed;



implementation vga_w_fast($p0: ref, $i1: i16, $i2: i8, $i3: i8)
{
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} {:cexpr "vga_w_fast:arg:port"} boogie_si_record_i16($i1);
    call {:si_unique_call 403} {:cexpr "vga_w_fast:arg:reg"} boogie_si_record_i8($i2);
    call {:si_unique_call 404} {:cexpr "vga_w_fast:arg:val"} boogie_si_record_i8($i3);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i1);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i2);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i3);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vga_io_w_fast($i13, $i15, $i17);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i1);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i2);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i3);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vga_mm_w_fast($p0, $i7, $i9, $i11);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vga_mm_w_fast: ref;

axiom vga_mm_w_fast == $sub.ref(0, 217050);

procedure vga_mm_w_fast($p0: ref, $i1: i16, $i2: i8, $i3: i8);
  free requires assertsPassed;



implementation vga_mm_w_fast($p0: ref, $i1: i16, $i2: i8, $i3: i8)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i64;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "vga_mm_w_fast:arg:port"} boogie_si_record_i16($i1);
    call {:si_unique_call 408} {:cexpr "vga_mm_w_fast:arg:reg"} boogie_si_record_i8($i2);
    call {:si_unique_call 409} {:cexpr "vga_mm_w_fast:arg:val"} boogie_si_record_i8($i3);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i4, 8);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i7 := $sext.i16.i32($i6);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i16($i2);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i9 := $sext.i16.i32($i8);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $i9);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i64($i1);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref($i14, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} writew($i13, $p15);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    return;
}



const vga_io_w_fast: ref;

axiom vga_io_w_fast == $sub.ref(0, 218082);

procedure vga_io_w_fast($i0: i16, $i1: i8, $i2: i8);
  free requires assertsPassed;



implementation vga_io_w_fast($i0: i16, $i1: i8, $i2: i8)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} {:cexpr "vga_io_w_fast:arg:port"} boogie_si_record_i16($i0);
    call {:si_unique_call 412} {:cexpr "vga_io_w_fast:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 413} {:cexpr "vga_io_w_fast:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i6 := $sext.i16.i32($i5);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i16($i1);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i6, $i8);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} outw($i12, $i13);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    return;
}



const outw: ref;

axiom outw == $sub.ref(0, 219114);

procedure outw($i0: i16, $i1: i32);
  free requires assertsPassed;



implementation outw($i0: i16, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} {:cexpr "outw:arg:value"} boogie_si_record_i16($i0);
    call {:si_unique_call 416} {:cexpr "outw:arg:port"} boogie_si_record_i32($i1);
    call {:si_unique_call 417} devirtbounce.5(0, $i0, $i1);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    return;
}



const writew: ref;

axiom writew == $sub.ref(0, 220146);

procedure writew($i0: i16, $p1: ref);
  free requires assertsPassed;



implementation writew($i0: i16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "writew:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 419} devirtbounce.6(0, $i0, $p2);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    return;
}



const vga_rcrt: ref;

axiom vga_rcrt == $sub.ref(0, 221178);

procedure vga_rcrt($p0: ref, $i1: i8) returns ($r: i8);
  free requires assertsPassed;



implementation vga_rcrt($p0: ref, $i1: i8) returns ($r: i8)
{
  var $i2: i32;
  var $i3: i8;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "vga_rcrt:arg:reg"} boogie_si_record_i8($i1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vga_w($p0, 980, $i3);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i4 := vga_r($p0, 981);
    call {:si_unique_call 423} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_open_lock_of_s3fb_info: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_open_lock_of_s3fb_info == $sub.ref(0, 222210);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_open_lock_of_s3fb_info($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_open_lock_of_s3fb_info($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i1 := $M.17;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 425} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_open_lock_of_s3fb_info"} boogie_si_record_i8(1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 223242);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 427} __VERIFIER_error();
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 224274);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_108: ref;

axiom ldv_mutex_lock_108 == $sub.ref(0, 225306);

procedure ldv_mutex_lock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_lock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} ldv_linux_kernel_locking_mutex_mutex_lock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_109: ref;

axiom ldv_mutex_unlock_109 == $sub.ref(0, 226338);

procedure ldv_mutex_unlock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 227370);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 430} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 431} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 228402);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 229434);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $CurrAddr;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p3, $i1);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 433} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 434} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_mutex_unlock_110: ref;

axiom ldv_mutex_unlock_110 == $sub.ref(0, 230466);

procedure ldv_mutex_unlock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const mtrr_del: ref;

axiom mtrr_del == $sub.ref(0, 231498);

procedure mtrr_del($i0: i32, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mtrr_del($i0: i32, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 436} {:cexpr "mtrr_del:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 437} {:cexpr "mtrr_del:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 438} {:cexpr "mtrr_del:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 1} true;
    call {:si_unique_call 439} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 440} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_unregister_framebuffer_106: ref;

axiom ldv_unregister_framebuffer_106 == $sub.ref(0, 232530);

procedure ldv_unregister_framebuffer_106($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_unregister_framebuffer_106($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i1 := unregister_framebuffer($p0);
    call {:si_unique_call 442} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i2 := ldv_unregister_framebuffer($i1, $p0);
    call {:si_unique_call 444} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fb_dealloc_cmap: ref;

axiom fb_dealloc_cmap == $sub.ref(0, 233562);

procedure fb_dealloc_cmap($p0: ref);
  free requires assertsPassed;



implementation fb_dealloc_cmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    return;
}



const i2c_del_adapter: ref;

axiom i2c_del_adapter == $sub.ref(0, 234594);

procedure i2c_del_adapter($p0: ref);
  free requires assertsPassed;



implementation i2c_del_adapter($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_107: ref;

axiom ldv_iounmap_107 == $sub.ref(0, 235626);

procedure ldv_iounmap_107($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_iounmap_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const pci_iounmap: ref;

axiom pci_iounmap == $sub.ref(0, 236658);

procedure pci_iounmap($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation pci_iounmap($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 237690);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    return;
}



const framebuffer_release: ref;

axiom framebuffer_release == $sub.ref(0, 238722);

procedure framebuffer_release($p0: ref);
  free requires assertsPassed;



implementation framebuffer_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_arch_io_io_mem_unmap: ref;

axiom ldv_linux_arch_io_io_mem_unmap == $sub.ref(0, 239754);

procedure ldv_linux_arch_io_io_mem_unmap();
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_linux_arch_io_io_mem_unmap()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i0 := $M.22;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} ldv_assert_linux_arch_io__less_initial_decrement($i2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i3 := $M.22;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.22 := $i4;
    call {:si_unique_call 447} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_arch_io__less_initial_decrement: ref;

axiom ldv_assert_linux_arch_io__less_initial_decrement == $sub.ref(0, 240786);

procedure ldv_assert_linux_arch_io__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "ldv_assert_linux_arch_io__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 449} __VERIFIER_error();
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_framebuffer: ref;

axiom unregister_framebuffer == $sub.ref(0, 241818);

procedure unregister_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_framebuffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 450} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_unregister_framebuffer: ref;

axiom ldv_unregister_framebuffer == $sub.ref(0, 242850);

procedure ldv_unregister_framebuffer($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_unregister_framebuffer($i0: i32, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} {:cexpr "ldv_unregister_framebuffer:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} ldv_dispatch_deregister_4_1($p1);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_dispatch_deregister_4_1: ref;

axiom ldv_dispatch_deregister_4_1 == $sub.ref(0, 243882);

procedure ldv_dispatch_deregister_4_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_4_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    return;
}



const svga_primary_device: ref;

axiom svga_primary_device == $sub.ref(0, 244914);

procedure svga_primary_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation svga_primary_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} vslice_dummy_var_15 := pci_read_config_word($p0, 4, $p1);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.23, $p1);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const framebuffer_alloc: ref;

axiom framebuffer_alloc == $sub.ref(0, 245946);

procedure framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation framebuffer_alloc($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} {:cexpr "framebuffer_alloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p2 := external_alloc();
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 246978);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    return;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 248010);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 1} true;
    call {:si_unique_call 458} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_iomap: ref;

axiom pci_iomap == $sub.ref(0, 249042);

procedure pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation pci_iomap($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "pci_iomap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 461} {:cexpr "pci_iomap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p3 := external_alloc();
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const pcibios_bus_to_resource: ref;

axiom pcibios_bus_to_resource == $sub.ref(0, 250074);

procedure pcibios_bus_to_resource($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation pcibios_bus_to_resource($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    return;
}



const s3_identification: ref;

axiom s3_identification == $sub.ref(0, 251106);

procedure s3_identification($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation s3_identification($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 463} {:cexpr "chip"} boogie_si_record_i32($i2);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 128);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i2, 129);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i2, 130);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i2, 131);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i47 := vga_rcrt($p46, 47);
    call {:si_unique_call 475} {:cexpr "tmp___4"} boogie_si_record_i8($i47);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i47);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i47);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i53 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i21 := 18;
    goto $bb7;

  $bb32:
    assume $i51 == 1;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i21 := 17;
    goto $bb7;

  $bb28:
    assume $i49 == 1;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i21 := 16;
    goto $bb7;

  $bb21:
    assume $i35 == 1;
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i39 := vga_rcrt($p38, 111);
    call {:si_unique_call 473} {:cexpr "tmp___3"} boogie_si_record_i8($i39);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 1);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i21 := 12;
    goto $bb7;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i21 := 11;
    goto $bb7;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i31 := vga_rcrt($p30, 111);
    call {:si_unique_call 471} {:cexpr "tmp___2"} boogie_si_record_i8($i31);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 1);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i21 := 6;
    goto $bb7;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i21 := 5;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i7 := vga_rcrt($p6, 48);
    call {:si_unique_call 465} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i11 := vga_rcrt($p10, 46);
    call {:si_unique_call 467} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i15 := vga_rcrt($p14, 47);
    call {:si_unique_call 469} {:cexpr "tmp___1"} boogie_si_record_i8($i15);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i7);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, 224);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, 1);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i11);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 16);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i11);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 17);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i15);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 64);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i21 := 3;
    goto $bb7;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i21 := 2;
    goto $bb7;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb7;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 252138);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const s3fb_ddc_needs_mmio: ref;

axiom s3fb_ddc_needs_mmio == $sub.ref(0, 253170);

procedure s3fb_ddc_needs_mmio($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation s3fb_ddc_needs_mmio($i0: i32) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} {:cexpr "s3fb_ddc_needs_mmio:arg:chip"} boogie_si_record_i32($i0);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i1 := $sub.i32($i0, 16);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 2);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 254202);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 478} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p2 := ldv_linux_arch_io_io_mem_remap();
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const s3fb_setup_ddc_bus: ref;

axiom s3fb_setup_ddc_bus == $sub.ref(0, 255234);

procedure s3fb_setup_ddc_bus($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation s3fb_setup_ddc_bus($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var vslice_dummy_var_16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(320, 1)), $mul.ref(1596, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(0, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_16 := strlcpy($p6, $p9, 48);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, __this_module);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(320, 1)), $mul.ref(8, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 8);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(2248, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(320, 1)), $mul.ref(24, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p15);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1512, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(320, 1)), $mul.ref(176, 1)), $mul.ref(0, 1));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p20);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(2248, 1)), $mul.ref(8, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, s3fb_ddc_setsda);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(2248, 1)), $mul.ref(16, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, s3fb_ddc_setscl);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(2248, 1)), $mul.ref(24, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, s3fb_ddc_getsda);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(2248, 1)), $mul.ref(32, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, s3fb_ddc_getscl);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(2248, 1)), $mul.ref(56, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 10);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(2248, 1)), $mul.ref(60, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 20);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(2248, 1)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p2);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(320, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p3);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} i2c_set_adapdata($p39, $p40);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i42, 13);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i44 := $ule.i32($i43, 1);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i44 == 1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 20);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} svga_wseq_mask($p53, 13, 0, 3);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} svga_wcrt_mask($p56, 92, 3, 3);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(320, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i58 := i2c_bit_add_bus($p57);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i32($i58);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} svga_wseq_mask($p50, 13, 1, 3);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb2;
}



const fb_ddc_read: ref;

axiom fb_ddc_read == $sub.ref(0, 256266);

procedure fb_ddc_read($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fb_ddc_read($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p1 := external_alloc();
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const fb_edid_to_monspecs: ref;

axiom fb_edid_to_monspecs == $sub.ref(0, 257298);

procedure fb_edid_to_monspecs($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fb_edid_to_monspecs($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 258330);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} free_($p0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    return;
}



const fb_videomode_to_modelist: ref;

axiom fb_videomode_to_modelist == $sub.ref(0, 259362);

procedure fb_videomode_to_modelist($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation fb_videomode_to_modelist($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} {:cexpr "fb_videomode_to_modelist:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    return;
}



const fb_find_best_display: ref;

axiom fb_find_best_display == $sub.ref(0, 260394);

procedure fb_find_best_display($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fb_find_best_display($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p2 := external_alloc();
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const fb_videomode_to_var: ref;

axiom fb_videomode_to_var == $sub.ref(0, 261426);

procedure fb_videomode_to_var($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fb_videomode_to_var($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    return;
}



const s3fb_check_var: ref;

axiom s3fb_check_var == $sub.ref(0, 262458);

procedure s3fb_check_var($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation s3fb_check_var($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $i66: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i19: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i8 := svga_match_format(s3fb_formats, $p0, $0.ref);
    call {:si_unique_call 495} {:cexpr "rv"} boogie_si_record_i32($i8);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 10);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 6);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i14 := $i8;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i21, $i23);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(12, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i29, $i31);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i14);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref($i36, 76)), $mul.ref(72, 1));
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.24, $p38);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, 1);
    call {:si_unique_call 497} {:cexpr "step"} boogie_si_record_i32($i40);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $i40);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i44 := $xor.i32($i40, $sub.i32(0, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i43, $i44);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i51 := $mul.i32($i48, $i50);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i52 := $lshr.i32($i51, 3);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(12, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i52, $i54);
    call {:si_unique_call 498} {:cexpr "mem"} boogie_si_record_i32($i55);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i64($i56, $i58);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i70 := svga_check_timings(s3_timing_regs, $p0, $i69);
    call {:si_unique_call 501} {:cexpr "rv"} boogie_si_record_i32($i70);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(100, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i77 := $udiv.i32(1000000000, $i76);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i80 := svga_compute_pll(s3_pll, $i77, $p2, $p3, $p4, $i79);
    call {:si_unique_call 504} {:cexpr "rv"} boogie_si_record_i32($i80);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_20 := printk.ref.i32(.str.30, $i83);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i19 := $i80;
    goto $bb12;

  $bb23:
    assume $i71 == 1;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_19 := printk.ref.i32(.str.29, $i73);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i19 := $i70;
    goto $bb12;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i62 := $ashr.i32($i55, 10);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1552, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.0, $p63);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i65 := $lshr.i64($i64, 10);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_18 := printk.ref.i32.i32.i32(.str.28, $i61, $i62, $i66);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb12;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(12, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_17 := printk.ref.i32(.str.27, $i17);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i19 := $i14;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, 7);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb4;
}



const fb_find_mode: ref;

axiom fb_find_mode == $sub.ref(0, 263490);

procedure fb_find_mode($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $p5: ref, $i6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_find_mode($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $p5: ref, $i6: i32) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 506} {:cexpr "fb_find_mode:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 507} {:cexpr "fb_find_mode:arg:arg6"} boogie_si_record_i32($i6);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 1} true;
    call {:si_unique_call 508} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 509} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const fb_destroy_modedb: ref;

axiom fb_destroy_modedb == $sub.ref(0, 264522);

procedure fb_destroy_modedb($p0: ref);
  free requires assertsPassed;



implementation fb_destroy_modedb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    return;
}



const fb_alloc_cmap: ref;

axiom fb_alloc_cmap == $sub.ref(0, 265554);

procedure fb_alloc_cmap($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fb_alloc_cmap($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 510} {:cexpr "fb_alloc_cmap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 511} {:cexpr "fb_alloc_cmap:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 1} true;
    call {:si_unique_call 512} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 513} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_register_framebuffer_104: ref;

axiom ldv_register_framebuffer_104 == $sub.ref(0, 266586);

procedure ldv_register_framebuffer_104($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.17, assertsPassed;



implementation ldv_register_framebuffer_104($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i1 := register_framebuffer($p0);
    call {:si_unique_call 515} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i2 := ldv_register_framebuffer($i1, $p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 517} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 267618);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $p2 := dev_name($p1);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 268650);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    return;
}



const mtrr_add: ref;

axiom mtrr_add == $sub.ref(0, 269682);

procedure mtrr_add($i0: i64, $i1: i64, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation mtrr_add($i0: i64, $i1: i64, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 520} {:cexpr "mtrr_add:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 521} {:cexpr "mtrr_add:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 522} {:cexpr "mtrr_add:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 523} {:cexpr "mtrr_add:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 1} true;
    call {:si_unique_call 524} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 525} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_iounmap_105: ref;

axiom ldv_iounmap_105 == $sub.ref(0, 270714);

procedure ldv_iounmap_105($p0: ref);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_iounmap_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 271746);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 272778);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(16, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p9 := kobject_name($p8);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 273810);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const register_framebuffer: ref;

axiom register_framebuffer == $sub.ref(0, 274842);

procedure register_framebuffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_framebuffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 528} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_register_framebuffer: ref;

axiom ldv_register_framebuffer == $sub.ref(0, 275874);

procedure ldv_register_framebuffer($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.17, assertsPassed;



implementation ldv_register_framebuffer($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} {:cexpr "ldv_register_framebuffer:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i2 := ldv_undef_int();
    call {:si_unique_call 532} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i0, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} ldv_assume($i7);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} ldv_assume($i5);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ldv_dispatch_register_5_2($p1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 276906);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 536} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 537} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 538} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 277938);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_dispatch_register_5_2: ref;

axiom ldv_dispatch_register_5_2 == $sub.ref(0, 278970);

procedure ldv_dispatch_register_5_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.17, assertsPassed;



implementation ldv_dispatch_register_5_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p1 := ldv_xmalloc(16);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_struct_fb_tile_ops_dummy_resourceless_instance_1($p4);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 280002);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p1 := malloc($i0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ldv_assume($i4);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i5 := ldv_is_err($p1);
    call {:si_unique_call 546} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} ldv_assume($i7);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_struct_fb_tile_ops_dummy_resourceless_instance_1: ref;

axiom ldv_struct_fb_tile_ops_dummy_resourceless_instance_1 == $sub.ref(0, 281034);

procedure ldv_struct_fb_tile_ops_dummy_resourceless_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.17, assertsPassed;



implementation ldv_struct_fb_tile_ops_dummy_resourceless_instance_1($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i8 := ldv_undef_int();
    call {:si_unique_call 550} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29 := ldv_struct_fb_tile_ops_dummy_resourceless_instance_1_loop_$bb7($p7, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29);
    goto $bb7_last;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 2);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 3);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 4);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i10, 5);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 6);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i10, 7);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i10, 8);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i10, 9);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i10, 10);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i10, 11);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i10, 12);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i10, 13);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i10, 14);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i10, 15);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i10, 16);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i10, 17);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} ldv_stop();
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i28 := ldv_undef_int();
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i29 == 1);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb79_dummy;

  $bb72:
    assume $i27 == 1;
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} ldv_dummy_resourceless_instance_callback_1_3($u19, $u0, $p7);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb68:
    assume $i26 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} ldv_dummy_resourceless_instance_callback_1_9($u13, $u14, $p7);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb64:
    assume $i25 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} ldv_dummy_resourceless_instance_callback_1_10($u4, $p7, $u5);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb60:
    assume $i24 == 1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_dummy_resourceless_instance_callback_1_11($u4, $p7, $u5);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb56:
    assume $i23 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_dummy_resourceless_instance_callback_1_12($u17, $p7, $u18, $u14);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb52:
    assume $i22 == 1;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} ldv_dummy_resourceless_instance_callback_1_13($u11, $p7);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb48:
    assume $i21 == 1;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} ldv_dummy_resourceless_instance_callback_1_14($u15, $p7, $u16);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb44:
    assume $i20 == 1;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_dummy_resourceless_instance_callback_1_15($u12, $p7, $u0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i19 == 1;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} ldv_dummy_resourceless_instance_callback_1_18($u13, $u14, $p7);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb36:
    assume $i18 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} ldv_dummy_resourceless_instance_callback_1_19($u12, $p7, $u0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i17 == 1;
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} ldv_dummy_resourceless_instance_callback_1_22($u11, $p7);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb28:
    assume $i16 == 1;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_dummy_resourceless_instance_callback_1_23($u10, $u0, $u0, $u0, $u0, $u0, $p7);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb24:
    assume $i15 == 1;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} ldv_dummy_resourceless_instance_callback_1_26($u8, $p7, $u9);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb20:
    assume $i14 == 1;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_dummy_resourceless_instance_callback_1_27($u6, $p7, $u7);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} ldv_dummy_resourceless_instance_callback_1_28($u4, $p7, $u5);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} ldv_dummy_resourceless_instance_callback_1_29($u4, $p7, $u5);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} ldv_dummy_resourceless_instance_callback_1_30($u2, $p7, $u3);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} ldv_free($p6);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb79_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i10 := ldv_undef_int();
    call {:si_unique_call 552} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2728;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 282066);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} free_($p0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_30: ref;

axiom ldv_dummy_resourceless_instance_callback_1_30 == $sub.ref(0, 283098);

procedure ldv_dummy_resourceless_instance_callback_1_30($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_30($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} svga_tilefill($p1, $p2);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_29: ref;

axiom ldv_dummy_resourceless_instance_callback_1_29 == $sub.ref(0, 284130);

procedure ldv_dummy_resourceless_instance_callback_1_29($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_29($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} s3fb_tilecursor($p1, $p2);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_28: ref;

axiom ldv_dummy_resourceless_instance_callback_1_28 == $sub.ref(0, 285162);

procedure ldv_dummy_resourceless_instance_callback_1_28($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_28($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} svga_tilecopy($p1, $p2);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_27: ref;

axiom ldv_dummy_resourceless_instance_callback_1_27 == $sub.ref(0, 286194);

procedure ldv_dummy_resourceless_instance_callback_1_27($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_27($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} svga_tileblit($p1, $p2);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_26: ref;

axiom ldv_dummy_resourceless_instance_callback_1_26 == $sub.ref(0, 287226);

procedure ldv_dummy_resourceless_instance_callback_1_26($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_26($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} svga_settile($p1, $p2);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_23: ref;

axiom ldv_dummy_resourceless_instance_callback_1_23 == $sub.ref(0, 288258);

procedure ldv_dummy_resourceless_instance_callback_1_23($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_dummy_resourceless_instance_callback_1_23($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $p6: ref)
{
  var vslice_dummy_var_21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} {:cexpr "ldv_dummy_resourceless_instance_callback_1_23:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 580} {:cexpr "ldv_dummy_resourceless_instance_callback_1_23:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 581} {:cexpr "ldv_dummy_resourceless_instance_callback_1_23:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 582} {:cexpr "ldv_dummy_resourceless_instance_callback_1_23:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 583} {:cexpr "ldv_dummy_resourceless_instance_callback_1_23:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} vslice_dummy_var_21 := s3fb_setcolreg($i1, $i2, $i3, $i4, $i5, $p6);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_22: ref;

axiom ldv_dummy_resourceless_instance_callback_1_22 == $sub.ref(0, 289290);

procedure ldv_dummy_resourceless_instance_callback_1_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_1_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} vslice_dummy_var_22 := s3fb_set_par($p1);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_19: ref;

axiom ldv_dummy_resourceless_instance_callback_1_19 == $sub.ref(0, 290322);

procedure ldv_dummy_resourceless_instance_callback_1_19($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_19($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} {:cexpr "ldv_dummy_resourceless_instance_callback_1_19:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_23 := s3fb_release($p1, $i2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_18: ref;

axiom ldv_dummy_resourceless_instance_callback_1_18 == $sub.ref(0, 291354);

procedure ldv_dummy_resourceless_instance_callback_1_18($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_18($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_24 := s3fb_pan_display($p1, $p2);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_15: ref;

axiom ldv_dummy_resourceless_instance_callback_1_15 == $sub.ref(0, 292386);

procedure ldv_dummy_resourceless_instance_callback_1_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_15($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} {:cexpr "ldv_dummy_resourceless_instance_callback_1_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_25 := s3fb_open($p1, $i2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_14: ref;

axiom ldv_dummy_resourceless_instance_callback_1_14 == $sub.ref(0, 293418);

procedure ldv_dummy_resourceless_instance_callback_1_14($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_14($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} s3fb_imageblit($p1, $p2);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_13: ref;

axiom ldv_dummy_resourceless_instance_callback_1_13 == $sub.ref(0, 294450);

procedure ldv_dummy_resourceless_instance_callback_1_13($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vslice_dummy_var_26 := svga_get_tilemax($p1);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_12: ref;

axiom ldv_dummy_resourceless_instance_callback_1_12 == $sub.ref(0, 295482);

procedure ldv_dummy_resourceless_instance_callback_1_12($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_12($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} svga_get_caps($p1, $p2, $p3);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_11: ref;

axiom ldv_dummy_resourceless_instance_callback_1_11 == $sub.ref(0, 296514);

procedure ldv_dummy_resourceless_instance_callback_1_11($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_11($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} s3fb_fillrect($p1, $p2);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_10: ref;

axiom ldv_dummy_resourceless_instance_callback_1_10 == $sub.ref(0, 297546);

procedure ldv_dummy_resourceless_instance_callback_1_10($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_1_10($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} cfb_copyarea($p1, $p2);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_9: ref;

axiom ldv_dummy_resourceless_instance_callback_1_9 == $sub.ref(0, 298578);

procedure ldv_dummy_resourceless_instance_callback_1_9($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_1_9($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_27 := s3fb_check_var($p1, $p2);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_1_3: ref;

axiom ldv_dummy_resourceless_instance_callback_1_3 == $sub.ref(0, 299610);

procedure ldv_dummy_resourceless_instance_callback_1_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_1_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} {:cexpr "ldv_dummy_resourceless_instance_callback_1_3:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_28 := s3fb_blank($i1, $p2);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 300642);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const s3fb_blank: ref;

axiom s3fb_blank == $sub.ref(0, 301674);

procedure s3fb_blank($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation s3fb_blank($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i24;
  var $i118: i24;
  var $i119: i24;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i64;
  var $i124: i64;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $p130: ref;
  var $p131: ref;
  var $p133: ref;
  var $p134: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 604} {:cexpr "s3fb_blank:arg:blank_mode"} boogie_si_record_i32($i0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i0, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i0, 1);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i0, 3);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, 2);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i0, 4);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p111, .str.1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p112, .str.21);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p113, .str.3);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p114, .str.26);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i117 := $load.i24($M.15, $p116);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i118 := $and.i24($i117, $sub.i24(0, 262144));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i119 := $or.i24($i118, 1013);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p116, $i119);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p120, 0);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.16, $p121);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i64($i122);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i124 := $and.i64($i123, 1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $i125 := ldv__builtin_expect($i124, 0);
    call {:si_unique_call 614} {:cexpr "tmp___3"} boogie_si_record_i64($i125);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} svga_wcrt_mask($p131, 86, 6, 6);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} svga_wseq_mask($p134, 1, 32, 32);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35:
    assume $i126 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} __dynamic_pr_debug.ref.ref.i32($p6, .str.26, $i128);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p87, .str.1);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p88, .str.21);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p89, .str.3);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p90, .str.25);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.15, $p92);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 1008);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p92, $i95);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p96, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.16, $p97);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 612} {:cexpr "tmp___2"} boogie_si_record_i64($i101);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} svga_wcrt_mask($p107, 86, 4, 6);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} svga_wseq_mask($p110, 1, 32, 32);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume $i102 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} __dynamic_pr_debug.ref.ref.i32($p5, .str.25, $i104);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p63, .str.1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p64, .str.21);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p65, .str.3);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p66, .str.24);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.15, $p68);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 1003);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p68, $i71);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p72, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.16, $p73);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 610} {:cexpr "tmp___1"} boogie_si_record_i64($i77);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} svga_wcrt_mask($p83, 86, 2, 6);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} svga_wseq_mask($p86, 1, 32, 32);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29:
    assume $i78 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __dynamic_pr_debug.ref.ref.i32($p4, .str.24, $i80);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p39, .str.1);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p40, .str.21);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p41, .str.3);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p42, .str.23);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.15, $p44);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 998);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p44, $i47);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p48, 0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.16, $p49);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 608} {:cexpr "tmp___0"} boogie_si_record_i64($i53);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} svga_wcrt_mask($p59, 86, 0, 6);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} svga_wseq_mask($p62, 1, 32, 32);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __dynamic_pr_debug.ref.ref.i32($p3, .str.23, $i56);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p15, .str.1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p16, .str.21);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p17, .str.3);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p18, .str.22);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.15, $p20);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 993);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p20, $i23);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p24, 0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.16, $p25);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 606} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} svga_wcrt_mask($p35, 86, 0, 6);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} svga_wseq_mask($p38, 1, 0, 32);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i30 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(4, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __dynamic_pr_debug.ref.ref.i32($p2, .str.22, $i32);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb24;
}



const cfb_copyarea: ref;

axiom cfb_copyarea == $sub.ref(0, 302706);

procedure cfb_copyarea($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cfb_copyarea($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    return;
}



const s3fb_fillrect: ref;

axiom s3fb_fillrect == $sub.ref(0, 303738);

procedure s3fb_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s3fb_fillrect($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 4);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} cfb_fillrect($p0, $p1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 7);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 7);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(28, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} s3fb_iplan_fillrect($p0, $p1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const s3fb_iplan_fillrect: ref;

axiom s3fb_iplan_fillrect == $sub.ref(0, 304770);

procedure s3fb_iplan_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s3fb_iplan_fillrect($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i30: i32;
  var $p31: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i24: i32;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i4 := expand_color($i3);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i8, $i11);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i16 := $udiv.i32($i15, 8);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 4);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i13, $i18);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p6, $mul.ref($i19, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32(0, $i22);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i24, $p25 := 0, $p20;
    goto $bb4;

  $bb4:
    call $p27, $i28, $i29, $p32, $p33, $i34, $i35, $i36, $i30, $p31, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i24, $p25 := s3fb_iplan_fillrect_loop_$bb4($p0, $p1, $i4, $p21, $p27, $i28, $i29, $p32, $p33, $i34, $i35, $i36, $i30, $p31, $p38, $i39, $i40, $p41, $i42, $i43, $i44, $i24, $p25);
    goto $bb4_last;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32(0, $i28);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p25, $mul.ref($i40, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i24, 1);
    call {:si_unique_call 636} {:cexpr "y"} boogie_si_record_i32($i42);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p21);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i44 := $ult.i32($i42, $i43);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i24, $p25 := $i42, $p41;
    goto $bb14_dummy;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i30, $p31 := 0, $p25;
    goto $bb9;

  $bb9:
    call $p32, $p33, $i34, $i35, $i36, $i30, $p31 := s3fb_iplan_fillrect_loop_$bb9($i4, $p27, $p32, $p33, $i34, $i35, $i36, $i30, $p31);
    goto $bb9_last;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(1, 4));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p31);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __writel($i4, $p33);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i30, 8);
    call {:si_unique_call 635} {:cexpr "x"} boogie_si_record_i32($i34);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p27);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i36 := $ult.i32($i34, $i35);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i30, $p31 := $i34, $p32;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;
}



const cfb_fillrect: ref;

axiom cfb_fillrect == $sub.ref(0, 305802);

procedure cfb_fillrect($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cfb_fillrect($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    return;
}



const expand_color: ref;

axiom expand_color == $sub.ref(0, 306834);

procedure expand_color($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation expand_color($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} {:cexpr "expand_color:arg:c"} boogie_si_record_i32($i0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 1);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, 2);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i2, 7);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, $i3);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i0, 4);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 14);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i4, $i6);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i0, 8);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 21);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $i9);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 255);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const __writel: ref;

axiom __writel == $sub.ref(0, 307866);

procedure __writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation __writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} {:cexpr "__writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 639} devirtbounce.7(0, $i0, $p2);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    return;
}



const svga_get_caps: ref;

axiom svga_get_caps == $sub.ref(0, 308898);

procedure svga_get_caps($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation svga_get_caps($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    return;
}



const svga_get_tilemax: ref;

axiom svga_get_tilemax == $sub.ref(0, 309930);

procedure svga_get_tilemax($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation svga_get_tilemax($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 640} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 641} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const s3fb_imageblit: ref;

axiom s3fb_imageblit == $sub.ref(0, 310962);

procedure s3fb_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s3fb_imageblit($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 4);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} cfb_imageblit($p0, $p1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 7);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 7);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(28, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} s3fb_cfb4_imageblit($p0, $p1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} s3fb_iplan_imageblit($p0, $p1);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const s3fb_iplan_imageblit: ref;

axiom s3fb_iplan_imageblit == $sub.ref(0, 311994);

procedure s3fb_iplan_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s3fb_iplan_imageblit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i4 := expand_color($i3);
    call {:si_unique_call 646} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i7 := expand_color($i6);
    call {:si_unique_call 648} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i13, $i16);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i21 := $udiv.i32($i20, 8);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i21, 4);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i18, $i23);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p11, $mul.ref($i24, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(0, $i27);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := 0, $p25, $p9;
    goto $bb4;

  $bb4:
    call $p33, $i34, $i35, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i36, $p37, $p38, $p52, $i53, $i54, $i55, $p56, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i29, $p30, $p31 := s3fb_iplan_imageblit_loop_$bb4($p0, $p1, $i4, $i7, $p26, $p33, $i34, $i35, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i36, $p37, $p38, $p52, $i53, $i54, $i55, $p56, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i29, $p30, $p31);
    goto $bb4_last;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i35 := $ult.i32(0, $i34);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i54 := $udiv.i32($i53, 8);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p31, $mul.ref($i55, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p30, $mul.ref($i60, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i29, 1);
    call {:si_unique_call 653} {:cexpr "y"} boogie_si_record_i32($i62);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p26);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i64 := $ult.i32($i62, $i63);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i64 == 1);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := $i62, $p61, $p56;
    goto $bb14_dummy;

  $bb6:
    assume $i35 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i36, $p37, $p38 := 0, $p30, $p31;
    goto $bb9;

  $bb9:
    call $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i36, $p37, $p38 := s3fb_iplan_imageblit_loop_$bb9($i4, $i7, $p33, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i36, $p37, $p38);
    goto $bb9_last;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(1, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p38);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 16843009);
    call {:si_unique_call 649} {:cexpr "val"} boogie_si_record_i32($i42);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, $i4);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i44 := $xor.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $i7);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i43, $i45);
    call {:si_unique_call 650} {:cexpr "val"} boogie_si_record_i32($i46);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p37, $mul.ref(1, 4));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p37);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} __writel($i46, $p48);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i36, 8);
    call {:si_unique_call 652} {:cexpr "x"} boogie_si_record_i32($i49);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p33);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i51 := $ult.i32($i49, $i50);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i36, $p37, $p38 := $i49, $p47, $p39;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3270;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3261;
}



const s3fb_cfb4_imageblit: ref;

axiom s3fb_cfb4_imageblit == $sub.ref(0, 313026);

procedure s3fb_cfb4_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s3fb_cfb4_imageblit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i64;
  var $p56: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i3, 286331153);
    call {:si_unique_call 654} {:cexpr "fg"} boogie_si_record_i32($i4);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 286331153);
    call {:si_unique_call 655} {:cexpr "bg"} boogie_si_record_i32($i7);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1544, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i13, $i16);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i21 := $udiv.i32($i20, 8);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i21, 4);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i18, $i23);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p11, $mul.ref($i24, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32(0, $i27);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := 0, $p25, $p9;
    goto $bb4;

  $bb4:
    call $p33, $i34, $i35, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i36, $p37, $p38, $p52, $i53, $i54, $i55, $p56, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i29, $p30, $p31 := s3fb_cfb4_imageblit_loop_$bb4($p0, $p1, $i4, $i7, $p26, $p33, $i34, $i35, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i36, $p37, $p38, $p52, $i53, $i54, $i55, $p56, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i29, $p30, $p31);
    goto $bb4_last;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i35 := $ult.i32(0, $i34);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i54 := $udiv.i32($i53, 8);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p31, $mul.ref($i55, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p30, $mul.ref($i60, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i29, 1);
    call {:si_unique_call 661} {:cexpr "y"} boogie_si_record_i32($i62);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p26);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i64 := $ult.i32($i62, $i63);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i64 == 1);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i29, $p30, $p31 := $i62, $p61, $p56;
    goto $bb14_dummy;

  $bb6:
    assume $i35 == 1;
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i36, $p37, $p38 := 0, $p30, $p31;
    goto $bb9;

  $bb9:
    call $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i36, $p37, $p38 := s3fb_cfb4_imageblit_loop_$bb9($i4, $i7, $p33, $p39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $p48, $i49, $i50, $i51, $i36, $p37, $p38);
    goto $bb9_last;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(1, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p38);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i42 := expand_pixel($i41);
    call {:si_unique_call 657} {:cexpr "val"} boogie_si_record_i32($i42);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, $i4);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i44 := $xor.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $i7);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i43, $i45);
    call {:si_unique_call 658} {:cexpr "val"} boogie_si_record_i32($i46);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p37, $mul.ref(1, 4));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p37);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} __writel($i46, $p48);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i36, 8);
    call {:si_unique_call 660} {:cexpr "x"} boogie_si_record_i32($i49);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p33);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i51 := $ult.i32($i49, $i50);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i36, $p37, $p38 := $i49, $p47, $p39;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;
}



const cfb_imageblit: ref;

axiom cfb_imageblit == $sub.ref(0, 314058);

procedure cfb_imageblit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cfb_imageblit($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    return;
}



const expand_pixel: ref;

axiom expand_pixel == $sub.ref(0, 315090);

procedure expand_pixel($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation expand_pixel($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} {:cexpr "expand_pixel:arg:c"} boogie_si_record_i32($i0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 1);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 24);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 2);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 27);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i2, $i4);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i0, 4);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 14);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i5, $i7);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i0, 8);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 17);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i8, $i10);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i0, 16);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 4);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i11, $i13);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i0, 32);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 7);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, $i16);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i0, 64);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 6);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i17, $i19);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i0, 128);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i32($i21, 3);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i20, $i22);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i23, 15);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;
}



const s3fb_open: ref;

axiom s3fb_open == $sub.ref(0, 316122);

procedure s3fb_open($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed;



implementation s3fb_open($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} {:cexpr "s3fb_open:arg:user"} boogie_si_record_i32($i1);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} ldv_mutex_lock_99($p5);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} ldv_mutex_unlock_100($p28);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 665} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p13, 0, 56, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p11);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(20, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 31);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 112);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(40, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 32);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_29 := save_vga($p22);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_99: ref;

axiom ldv_mutex_lock_99 == $sub.ref(0, 317154);

procedure ldv_mutex_lock_99($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_lock_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} ldv_linux_kernel_locking_mutex_mutex_lock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const save_vga: ref;

axiom save_vga == $sub.ref(0, 318186);

procedure save_vga($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation save_vga($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 669} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 670} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_100: ref;

axiom ldv_mutex_unlock_100 == $sub.ref(0, 319218);

procedure ldv_mutex_unlock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const s3fb_pan_display: ref;

axiom s3fb_pan_display == $sub.ref(0, 320250);

procedure s3fb_pan_display($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation s3fb_pan_display($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i22: i32;
  var $p39: ref;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i24, $i27);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i30, $i33);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i35 := $udiv.i32($i34, 8);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i28, $i35);
    call {:si_unique_call 674} {:cexpr "offset"} boogie_si_record_i32($i36);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i37 := $lshr.i32($i36, 2);
    call {:si_unique_call 675} {:cexpr "offset"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    $i22 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} svga_wcrt_multi($p40, s3_start_address_regs, $i22);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i11 := $udiv.i32($i10, 16);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(8, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i32($i14, 2);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i11, $i15);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i19 := $udiv.i32($i18, 2);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i16, $i19);
    call {:si_unique_call 672} {:cexpr "offset"} boogie_si_record_i32($i20);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i32($i20, 2);
    call {:si_unique_call 673} {:cexpr "offset"} boogie_si_record_i32($i21);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb3;
}



const s3fb_release: ref;

axiom s3fb_release == $sub.ref(0, 321282);

procedure s3fb_release($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, assertsPassed;



implementation s3fb_release($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i10: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} {:cexpr "s3fb_release:arg:user"} boogie_si_record_i32($i1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} ldv_mutex_lock_101($p5);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, 1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(232, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} ldv_mutex_unlock_103($p20);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1));
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_30 := restore_vga($p14);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(72, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} ldv_mutex_unlock_102($p9);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_101: ref;

axiom ldv_mutex_lock_101 == $sub.ref(0, 322314);

procedure ldv_mutex_lock_101($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_lock_101($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} ldv_linux_kernel_locking_mutex_mutex_lock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_102: ref;

axiom ldv_mutex_unlock_102 == $sub.ref(0, 323346);

procedure ldv_mutex_unlock_102($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_102($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const restore_vga: ref;

axiom restore_vga == $sub.ref(0, 324378);

procedure restore_vga($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation restore_vga($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 684} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 685} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_103: ref;

axiom ldv_mutex_unlock_103 == $sub.ref(0, 325410);

procedure ldv_mutex_unlock_103($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_mutex_unlock_103($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} ldv_linux_kernel_locking_mutex_mutex_unlock_open_lock_of_s3fb_info($p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const s3fb_setcolreg: ref;

axiom s3fb_setcolreg == $sub.ref(0, 326442);

procedure s3fb_setcolreg($i0: i32, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation s3fb_setcolreg($i0: i32, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i8;
  var $i57: i32;
  var $i58: i8;
  var $i59: i1;
  var $i60: i8;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i8;
  var $i75: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} {:cexpr "s3fb_setcolreg:arg:regno"} boogie_si_record_i32($i0);
    call {:si_unique_call 688} {:cexpr "s3fb_setcolreg:arg:red"} boogie_si_record_i32($i1);
    call {:si_unique_call 689} {:cexpr "s3fb_setcolreg:arg:green"} boogie_si_record_i32($i2);
    call {:si_unique_call 690} {:cexpr "s3fb_setcolreg:arg:blue"} boogie_si_record_i32($i3);
    call {:si_unique_call 691} {:cexpr "s3fb_setcolreg:arg:transp"} boogie_si_record_i32($i4);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 4);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 8);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 16);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 24);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 32);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i111 := $ugt.i32($i0, 15);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i1, 65280);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i113 := $shl.i32($i112, 8);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i2, 65280);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i115 := $or.i32($i113, $i114);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i3, 65280);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i117 := $lshr.i32($i116, 8);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i118 := $or.i32($i115, $i117);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i122 := $zext.i32.i64($i0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p121, $mul.ref($i122, 4));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i118);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb28;

  $bb49:
    assume $i111 == 1;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb28;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i75 := $ugt.i32($i0, 15);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 5);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i80 == 1);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(44, 1)), $mul.ref(4, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 6);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i98 == 1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb28;

  $bb46:
    assume $i98 == 1;
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i1, 63488);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i2, 64512);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i101 := $lshr.i32($i100, 5);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i102 := $or.i32($i99, $i101);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i3, 63488);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i104 := $lshr.i32($i103, 11);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i102, $i104);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p108, $mul.ref($i109, 4));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i105);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb43:
    assume $i80 == 1;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i1, 63488);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i82 := $lshr.i32($i81, 1);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i2, 63488);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i84 := $lshr.i32($i83, 6);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i82, $i84);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i3, 63488);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i87 := $lshr.i32($i86, 11);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i85, $i87);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(1560, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i92 := $zext.i32.i64($i0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p91, $mul.ref($i92, 4));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i88);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i75 == 1;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb28;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i0, 255);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} outb($sub.i8(0, 1), 966);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i0);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} outb($i62, 968);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i63 := $lshr.i32($i1, 10);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} outb($i66, 969);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i67 := $lshr.i32($i2, 10);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} outb($i70, 969);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i71 := $lshr.i32($i3, 10);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} outb($i74, 969);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37:
    assume $i59 == 1;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb28;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i0, 15);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 4);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} outb(15, 966);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} outb($i46, 968);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i47 := $lshr.i32($i1, 10);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} outb($i50, 969);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i51 := $lshr.i32($i2, 10);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} outb($i54, 969);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i55 := $lshr.i32($i3, 10);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} outb($i58, 969);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1608)), $mul.ref(336, 1)), $mul.ref(80, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb32;

  $bb33:
    assume $i39 == 1;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} outb($sub.i8(0, 16), 966);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 16);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} outb($i43, 968);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb28;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const svga_settile: ref;

axiom svga_settile == $sub.ref(0, 327474);

procedure svga_settile($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation svga_settile($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    return;
}



const svga_tileblit: ref;

axiom svga_tileblit == $sub.ref(0, 328506);

procedure svga_tileblit($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation svga_tileblit($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    return;
}



const svga_tilecopy: ref;

axiom svga_tilecopy == $sub.ref(0, 329538);

procedure svga_tilecopy($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation svga_tilecopy($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    return;
}



const s3fb_tilecursor: ref;

axiom s3fb_tilecursor == $sub.ref(0, 330570);

procedure s3fb_tilecursor($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation s3fb_tilecursor($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1608)), $mul.ref(1584, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} svga_tilecursor($p7, $p0, $p1);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    return;
}



const svga_tilecursor: ref;

axiom svga_tilecursor == $sub.ref(0, 331602);

procedure svga_tilecursor($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation svga_tilecursor($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    return;
}



const svga_tilefill: ref;

axiom svga_tilefill == $sub.ref(0, 332634);

procedure svga_tilefill($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation svga_tilefill($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 333666);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 705} $free($p0);
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 334698);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 706} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 335730);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const svga_check_timings: ref;

axiom svga_check_timings == $sub.ref(0, 336762);

procedure svga_check_timings($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation svga_check_timings($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 707} {:cexpr "svga_check_timings:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 709} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 337794);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 338826);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 713} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 714} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const s3fb_ddc_setsda: ref;

axiom s3fb_ddc_setsda == $sub.ref(0, 339858);

procedure s3fb_ddc_setsda($p0: ref, $i1: i32);



const s3fb_ddc_setscl: ref;

axiom s3fb_ddc_setscl == $sub.ref(0, 340890);

procedure s3fb_ddc_setscl($p0: ref, $i1: i32);



const s3fb_ddc_getsda: ref;

axiom s3fb_ddc_getsda == $sub.ref(0, 341922);

procedure s3fb_ddc_getsda($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation s3fb_ddc_getsda($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i2 := s3fb_ddc_read($p1);
    call {:si_unique_call 716} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 8);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const s3fb_ddc_getscl: ref;

axiom s3fb_ddc_getscl == $sub.ref(0, 342954);

procedure s3fb_ddc_getscl($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation s3fb_ddc_getscl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i2 := s3fb_ddc_read($p1);
    call {:si_unique_call 718} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const i2c_set_adapdata: ref;

axiom i2c_set_adapdata == $sub.ref(0, 343986);

procedure i2c_set_adapdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i2c_set_adapdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1928)), $mul.ref(176, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} dev_set_drvdata($p2, $p1);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    return;
}



const i2c_bit_add_bus: ref;

axiom i2c_bit_add_bus == $sub.ref(0, 345018);

procedure i2c_bit_add_bus($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_bit_add_bus($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 720} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 721} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const s3fb_ddc_read: ref;

axiom s3fb_ddc_read == $sub.ref(0, 346050);

procedure s3fb_ddc_read($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation s3fb_ddc_read($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i10: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(0, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i3 := s3fb_ddc_needs_mmio($i2);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 723} {:cexpr "tmp___1"} boogie_si_record_i8($i4);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i14 := vga_rcrt($p13, $sub.i8(0, 86));
    call {:si_unique_call 727} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2312)), $mul.ref(304, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(65312, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i9 := readb($p8);
    call {:si_unique_call 725} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const s3fb_ddc_write: ref;

axiom s3fb_ddc_write == $sub.ref(0, 347082);

procedure s3fb_ddc_write($p0: ref, $i1: i8);



const ldv_linux_arch_io_io_mem_remap: ref;

axiom ldv_linux_arch_io_io_mem_remap == $sub.ref(0, 348114);

procedure ldv_linux_arch_io_io_mem_remap() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_linux_arch_io_io_mem_remap() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p0 := ldv_undef_ptr();
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i3 := $M.22;
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $M.22 := $i4;
    call {:si_unique_call 729} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 349146);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 1} true;
    call {:si_unique_call 730} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 731} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const pci_read_config_word: ref;

axiom pci_read_config_word == $sub.ref(0, 350178);

procedure pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_word($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} {:cexpr "pci_read_config_word:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(16, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(56, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i7 := pci_bus_read_config_word($p4, $i6, $i1, $p2);
    call {:si_unique_call 734} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const pci_bus_read_config_word: ref;

axiom pci_bus_read_config_word == $sub.ref(0, 351210);

procedure pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_word($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 735} {:cexpr "pci_bus_read_config_word:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 736} {:cexpr "pci_bus_read_config_word:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 1} true;
    call {:si_unique_call 737} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 738} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const s3fb_settile_fast: ref;

axiom s3fb_settile_fast == $sub.ref(0, 352242);

procedure s3fb_settile_fast($p0: ref, $p1: ref);



const __writeb: ref;

axiom __writeb == $sub.ref(0, 353274);

procedure __writeb($i0: i8, $p1: ref);



const ldv_EMGentry_exit_s3fb_cleanup_6_2: ref;

axiom ldv_EMGentry_exit_s3fb_cleanup_6_2 == $sub.ref(0, 354306);

procedure ldv_EMGentry_exit_s3fb_cleanup_6_2($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation ldv_EMGentry_exit_s3fb_cleanup_6_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} s3fb_cleanup();
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    return;
}



const s3fb_cleanup: ref;

axiom s3fb_cleanup == $sub.ref(0, 355338);

procedure s3fb_cleanup();
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr;



implementation s3fb_cleanup()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i24;
  var $i8: i24;
  var $i9: i24;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1, .str.1);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p2, .str.2);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p3, .str.3);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p4, .str.4);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i7 := $load.i24($M.15, $p6);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i8 := $and.i24($i7, $sub.i24(0, 262144));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i9 := $or.i24($i8, 1572);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p6, $i9);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p10, 0);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.16, $p11);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64($i12);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 1);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 742} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} ldv_pci_unregister_driver_115(s3fb_pci_driver);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} __dynamic_pr_debug.ref.ref($p0, .str.4);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_pci_unregister_driver_115: ref;

axiom ldv_pci_unregister_driver_115 == $sub.ref(0, 356370);

procedure ldv_pci_unregister_driver_115($p0: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver_115($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} pci_unregister_driver($p0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} ldv_pci_unregister_driver($0.ref, $p0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 357402);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver: ref;

axiom ldv_pci_unregister_driver == $sub.ref(0, 358434);

procedure ldv_pci_unregister_driver($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} ldv_dispatch_deregister_2_1($p1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_2_1: ref;

axiom ldv_dispatch_deregister_2_1 == $sub.ref(0, 359466);

procedure ldv_dispatch_deregister_2_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_2_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_s3fb_init_6_7: ref;

axiom ldv_EMGentry_init_s3fb_init_6_7 == $sub.ref(0, 360498);

procedure ldv_EMGentry_init_s3fb_init_6_7($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.0, $M.1, $M.2, $M.3, $M.7, $M.26, $M.9, $M.27, $M.28, $M.29, $M.22, $M.17, $M.21, assertsPassed;



implementation ldv_EMGentry_init_s3fb_init_6_7($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i1 := s3fb_init();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 749} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const s3fb_init: ref;

axiom s3fb_init == $sub.ref(0, 361530);

procedure s3fb_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.0, $M.1, $M.2, $M.3, $M.7, $M.26, $M.9, $M.27, $M.28, $M.29, $M.22, $M.17, $M.21, assertsPassed;



implementation s3fb_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i24;
  var $i8: i24;
  var $i9: i24;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p1, .str.1);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p2, .str.5);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p3, .str.3);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p4, .str.6);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i7 := $load.i24($M.15, $p6);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i8 := $and.i24($i7, $sub.i24(0, 262144));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i9 := $or.i24($i8, 1589);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.15 := $store.i24($M.15, $p6, $i9);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.16 := $store.i8($M.16, $p10, 0);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.16, $p11);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i64($i12);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 1);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 752} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i17 := ldv___pci_register_driver_116(s3fb_pci_driver, __this_module, .str.1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 755} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} __dynamic_pr_debug.ref.ref($p0, .str.6);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv___pci_register_driver_116: ref;

axiom ldv___pci_register_driver_116 == $sub.ref(0, 362562);

procedure ldv___pci_register_driver_116($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.7, $M.26, $M.9, $M.27, $CurrAddr, $M.28, $M.29, $M.22, $M.17, $M.21, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, assertsPassed;



implementation ldv___pci_register_driver_116($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 757} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i4 := ldv___pci_register_driver($i3, $p0, $p1, $p2);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 759} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 363594);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 1} true;
    call {:si_unique_call 760} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 761} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv___pci_register_driver: ref;

axiom ldv___pci_register_driver == $sub.ref(0, 364626);

procedure ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.7, $M.26, $M.9, $M.27, $CurrAddr, $M.28, $M.29, $M.22, $M.17, $M.21, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, assertsPassed;



implementation ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "ldv___pci_register_driver:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i4 := ldv_undef_int();
    call {:si_unique_call 764} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i0, 0);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} ldv_assume($i9);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} ldv_assume($i7);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ldv_dispatch_register_3_2($p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_3_2: ref;

axiom ldv_dispatch_register_3_2 == $sub.ref(0, 365658);

procedure ldv_dispatch_register_3_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.7, $M.26, $M.9, $M.27, $CurrAddr, $M.28, $M.29, $M.22, $M.17, $M.21, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, assertsPassed;



implementation ldv_dispatch_register_3_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p1 := ldv_xmalloc(16);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} ldv_pci_pci_instance_0($p4);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const ldv_pci_pci_instance_0: ref;

axiom ldv_pci_pci_instance_0 == $sub.ref(0, 366690);

procedure ldv_pci_pci_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.7, $M.26, $M.9, $M.27, $CurrAddr, $M.28, $M.29, $M.22, $M.17, $M.21, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, assertsPassed;



implementation ldv_pci_pci_instance_0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p8 := $u20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p9 := ldv_xmalloc(2968);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p11 := ldv_xmalloc(32);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i13 := ldv_undef_int();
    call {:si_unique_call 775} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p10);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} ldv_free($p27);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p12);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} ldv_free($p28);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i29, $i30, $i31, $i32, $i33, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66 := ldv_pci_pci_instance_0_loop_$bb7($p1, $p8, $p10, $p12, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i29, $i30, $i31, $i32, $i33, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66);
    goto $bb7_last;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i17 := ldv_pci_instance_probe_0_17($p16, $p10, $p12);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 780} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i17);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i18 := ldv_ldv_post_probe_122($i17);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 782} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i18);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i19 := ldv_undef_int();
    call {:si_unique_call 784} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i18, 0);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_assume($i24);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i25 := ldv_undef_int();
    call {:si_unique_call 790} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} ldv_assume($i22);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i29, $i30, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58 := ldv_pci_pci_instance_0_loop_$bb10($p1, $p8, $p10, $i29, $i30, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58);
    goto $bb10_last;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, 2);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} ldv_stop();
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_pci_instance_release_0_2($p66, $p10);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i62 == 1;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_pci_instance_shutdown_0_3($p64, $p10);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.25, $p36);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i38 := ldv_pci_instance_suspend_0_8($p35, $p10, $i37);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 792} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i38);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i39 := ldv_filter_err_code($i38);
    call {:si_unique_call 794} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i39);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i39;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i50 := ldv_filter_err_code($i49);
    call {:si_unique_call 799} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i50);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_pci_instance_resume_0_5($p58, $p10);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i54 == 1;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_pci_instance_resume_early_0_6($p56, $p10);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.25, $p46);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i48 := ldv_pci_instance_suspend_late_0_7($p45, $p10, $i47);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 797} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i48);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb31;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} ldv_free($p7);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} $i29 := ldv_undef_int();
    call {:si_unique_call 788} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_3952;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ldv_ldv_pre_probe_121();
    goto corral_source_split_3934;
}



const ldv_ldv_pre_probe_121: ref;

axiom ldv_ldv_pre_probe_121 == $sub.ref(0, 367722);

procedure ldv_ldv_pre_probe_121();
  free requires assertsPassed;
  modifies $M.28, $M.29;



implementation ldv_ldv_pre_probe_121()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} ldv_pre_probe();
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_instance_probe_0_17: ref;

axiom ldv_pci_instance_probe_0_17 == $sub.ref(0, 368754);

procedure ldv_pci_instance_probe_0_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.7, $M.22, $CurrAddr, assertsPassed, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17;



implementation ldv_pci_instance_probe_0_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i3 := s3_pci_probe($p1, $p2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 808} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_122: ref;

axiom ldv_ldv_post_probe_122 == $sub.ref(0, 369786);

procedure ldv_ldv_post_probe_122($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.29, assertsPassed;



implementation ldv_ldv_post_probe_122($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} {:cexpr "ldv_ldv_post_probe_122:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_suspend_0_8: ref;

axiom ldv_pci_instance_suspend_0_8 == $sub.ref(0, 370818);

procedure ldv_pci_instance_suspend_0_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.9, $M.17, $M.21, $CurrAddr, assertsPassed;



implementation ldv_pci_instance_suspend_0_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.26 := $store.i32($M.26, $p4, $i2);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.26, $p5);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i7 := s3_pci_suspend($p1, $i6);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 816} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 371850);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 819} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_pci_instance_suspend_late_0_7: ref;

axiom ldv_pci_instance_suspend_late_0_7 == $sub.ref(0, 372882);

procedure ldv_pci_instance_suspend_late_0_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.9, $M.0, $CurrAddr, $M.17, $M.21, assertsPassed;



implementation ldv_pci_instance_suspend_late_0_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p4, $i2);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.27, $p5);
    call {:si_unique_call 821} $i7 := devirtbounce.8($p0, $p1, $i6);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 822} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_early_0_6: ref;

axiom ldv_pci_instance_resume_early_0_6 == $sub.ref(0, 373914);

procedure ldv_pci_instance_resume_early_0_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, assertsPassed;



implementation ldv_pci_instance_resume_early_0_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_31 := devirtbounce.9($p0, $p1);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_0_5: ref;

axiom ldv_pci_instance_resume_0_5 == $sub.ref(0, 374946);

procedure ldv_pci_instance_resume_0_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, assertsPassed;



implementation ldv_pci_instance_resume_0_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vslice_dummy_var_32 := s3_pci_resume($p1);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_shutdown_0_3: ref;

axiom ldv_pci_instance_shutdown_0_3 == $sub.ref(0, 375978);

procedure ldv_pci_instance_shutdown_0_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, assertsPassed;



implementation ldv_pci_instance_shutdown_0_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} devirtbounce.10($p0, $p1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_release_0_2: ref;

axiom ldv_pci_instance_release_0_2 == $sub.ref(0, 377010);

procedure ldv_pci_instance_release_0_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, assertsPassed;



implementation ldv_pci_instance_release_0_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} s3_pci_remove($p1);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 378042);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ldv_assume($i2);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 379074);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.28, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i1 := $M.28;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 380106);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.29, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i1 := $M.29;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 381138);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 837} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 382170);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 1} true;
    call {:si_unique_call 839} __VERIFIER_error();
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 383202);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.29;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 840} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 384234);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 842} __VERIFIER_error();
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 385266);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.28;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 843} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 386298);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    return;
}



const ldv_entry_EMGentry_6: ref;

axiom ldv_entry_EMGentry_6 == $sub.ref(0, 387330);

procedure ldv_entry_EMGentry_6($p0: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.28, $M.29, $CurrAddr, $M.0, assertsPassed, $M.1, $M.2, $M.3, $M.7, $M.26, $M.9, $M.27, $M.22, $M.17, $M.21;



implementation ldv_entry_EMGentry_6($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i1 := ldv_EMGentry_init_s3fb_init_6_7($u21);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 845} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i2 := ldv_ldv_post_init_117($i1);
    call {:si_unique_call 847} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i3 := ldv_undef_int();
    call {:si_unique_call 849} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} ldv_assume($i8);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ldv_EMGentry_exit_s3fb_cleanup_6_2($u22);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} ldv_ldv_check_final_state_119();
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} ldv_stop();
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} ldv_assume($i6);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} ldv_ldv_check_final_state_118();
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} ldv_stop();
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_117: ref;

axiom ldv_ldv_post_init_117 == $sub.ref(0, 388362);

procedure ldv_ldv_post_init_117($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.29;



implementation ldv_ldv_post_init_117($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} {:cexpr "ldv_ldv_post_init_117:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i1 := ldv_post_init($i0);
    call {:si_unique_call 861} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_118: ref;

axiom ldv_ldv_check_final_state_118 == $sub.ref(0, 389394);

procedure ldv_ldv_check_final_state_118();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_118()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} ldv_linux_block_request_check_final_state();
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_119: ref;

axiom ldv_ldv_check_final_state_119 == $sub.ref(0, 390426);

procedure ldv_ldv_check_final_state_119();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_119()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_linux_block_request_check_final_state();
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 391458);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i0 := $M.22;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 392490);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i0 := $M.30;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 393522);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i0 := $M.31;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 394554);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i0 := $M.32;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 395586);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i0 := $M.33;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 396618);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i0 := $M.34;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 397650);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i0 := $M.35;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 398682);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i0 := $M.36;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i3 := $M.37;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 399714);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i0 := $M.38;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 400746);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i0 := $M.39;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 401778);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 402810);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i0 := $M.41;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 403842);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i0 := $M.42;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 404874);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i3 := $M.43;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 405906);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i0 := $M.44;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 406938);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i0 := $M.45;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 407970);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i0 := $M.46;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 409002);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i0 := $M.47;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 410034);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i0 := $M.48;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 411066);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i0 := $M.49;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 412098);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 1} true;
    call {:si_unique_call 924} __VERIFIER_error();
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 413130);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 1} true;
    call {:si_unique_call 926} __VERIFIER_error();
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 414162);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 928} __VERIFIER_error();
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 415194);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 1} true;
    call {:si_unique_call 930} __VERIFIER_error();
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 416226);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 1} true;
    call {:si_unique_call 932} __VERIFIER_error();
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 417258);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 934} __VERIFIER_error();
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 418290);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 936} __VERIFIER_error();
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 419322);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 938} __VERIFIER_error();
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 420354);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 940} __VERIFIER_error();
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 421386);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 1} true;
    call {:si_unique_call 942} __VERIFIER_error();
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 422418);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 1} true;
    call {:si_unique_call 944} __VERIFIER_error();
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 423450);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 1} true;
    call {:si_unique_call 946} __VERIFIER_error();
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 424482);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 948} __VERIFIER_error();
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 425514);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 950} __VERIFIER_error();
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 426546);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 952} __VERIFIER_error();
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 427578);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 954} __VERIFIER_error();
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 428610);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 956} __VERIFIER_error();
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 429642);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 1} true;
    call {:si_unique_call 958} __VERIFIER_error();
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 430674);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 960} __VERIFIER_error();
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 431706);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 962} __VERIFIER_error();
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 432738);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 964} __VERIFIER_error();
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 433770);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 967} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 434802);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.42, $M.39, $M.40, $M.41, $M.44, $M.28, $M.45, $M.46, $M.47, $M.48, $M.29, $M.49, $M.17, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.43, $M.31, $M.30, $M.8, $M.7, $M.6, $M.5, $M.0, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.24, $M.10, $CurrAddr, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, assertsPassed, $M.1, $M.2, $M.3, $M.26, $M.9, $M.27, $M.21;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 968} $initialize();
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_ldv_initialize_120();
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} ldv_entry_EMGentry_6($0.ref);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_120: ref;

axiom ldv_ldv_initialize_120 == $sub.ref(0, 435834);

procedure ldv_ldv_initialize_120();
  free requires assertsPassed;



implementation ldv_ldv_initialize_120()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 436866);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} ldv_assume($i2);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 437898);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 1} true;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 438930);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 439962);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 440994);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 442026);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 443058);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 444090);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 445122);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 446154);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 447186);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 448218);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 449250);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 450282);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 451314);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 976} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 977} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} __VERIFIER_assume($i4);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 452346);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 453378);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 454410);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 455442);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 456474);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 457506);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 458538);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 459570);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 460602);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 979} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 980} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 981} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 982} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 983} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 984} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 985} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 986} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 987} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 988} __VERIFIER_assume($i7);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 989} __VERIFIER_assume($i11);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 461634);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 462666);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 463698);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 464730);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 465762);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 466794);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 467826);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 468858);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 469890);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 991} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 992} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 470922);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 993} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 994} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 471954);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 472986);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 995} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 996} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 474018);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 475050);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 476082);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 477114);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.22, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.42, $M.39, $M.40, $M.41, $M.44, $M.28, $M.45, $M.46, $M.47, $M.48, $M.29, $M.49, $M.17, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.43, $M.31, $M.30, $M.8, $M.7, $M.6, $M.5, $M.0, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.24, $M.10;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 997} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.22 := 0;
    call {:si_unique_call 998} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 999} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1000} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1002} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.36 := 1;
    call {:si_unique_call 1003} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.37 := 1;
    call {:si_unique_call 1004} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.38 := 1;
    call {:si_unique_call 1005} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.42 := 0;
    call {:si_unique_call 1006} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1007} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1008} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1009} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1010} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.28 := 0;
    call {:si_unique_call 1011} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1012} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1013} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1014} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1015} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1016} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.29 := 0;
    call {:si_unique_call 1017} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1018} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1019} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 1020} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 1021} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_fb_info"} boogie_si_record_i8(0);
    call {:si_unique_call 1022} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.17 := 0;
    call {:si_unique_call 1023} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_open_lock_of_s3fb_info"} boogie_si_record_i8(0);
    call {:si_unique_call 1024} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_update_lock_of_backlight_device"} boogie_si_record_i8(0);
    $M.57 := $store.i32($M.57, __mod_pci__s3_devices_device_table, 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.57 := $store.i32($M.57, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.58 := $store.i32($M.58, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(4, 1)), 0);
    $M.59 := $store.i32($M.59, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i32($M.60, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.61 := $store.i32($M.61, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.62 := $store.i32($M.62, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(20, 1)), 0);
    $M.63 := $store.i64($M.63, $add.ref($add.ref($add.ref(__mod_pci__s3_devices_device_table, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.43 := 0;
    call {:si_unique_call 1025} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 1026} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 1027} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1028} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 1029} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 1030} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 1031} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 1032} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 1033} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1034} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.31 := 0;
    call {:si_unique_call 1035} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1036} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.8 := 1;
    call {:si_unique_call 1037} {:cexpr "mtrr"} boogie_si_record_i32(1);
    $M.7 := $0.ref;
    $M.6 := $store.ref($M.6, s3_names, .str.47);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(1, 8)), .str.48);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(2, 8)), .str.49);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(3, 8)), .str.50);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(4, 8)), .str.51);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(5, 8)), .str.52);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(6, 8)), .str.53);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(7, 8)), .str.54);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(8, 8)), .str.55);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(9, 8)), .str.56);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(10, 8)), .str.57);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(11, 8)), .str.58);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(12, 8)), .str.59);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(13, 8)), .str.60);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(14, 8)), .str.61);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(15, 8)), .str);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(16, 8)), .str.62);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(17, 8)), .str.63);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(18, 8)), .str.63);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(19, 8)), .str.64);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(s3_names, $mul.ref(0, 168)), $mul.ref(20, 8)), .str.65);
    $M.5 := $store.i32($M.5, s3_memsizes, 4096);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(s3_memsizes, $mul.ref(0, 32)), $mul.ref(1, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(s3_memsizes, $mul.ref(0, 32)), $mul.ref(2, 4)), 3072);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(s3_memsizes, $mul.ref(0, 32)), $mul.ref(3, 4)), 8192);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(s3_memsizes, $mul.ref(0, 32)), $mul.ref(4, 4)), 2048);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(s3_memsizes, $mul.ref(0, 32)), $mul.ref(5, 4)), 6144);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(s3_memsizes, $mul.ref(0, 32)), $mul.ref(6, 4)), 1024);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(s3_memsizes, $mul.ref(0, 32)), $mul.ref(7, 4)), 512);
    $M.0 := $store.ref($M.0, s3fb_ops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(8, 1)), s3fb_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(16, 1)), s3fb_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(40, 1)), s3fb_check_var);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(48, 1)), s3fb_set_par);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(56, 1)), s3fb_setcolreg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(72, 1)), s3fb_blank);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(80, 1)), s3fb_pan_display);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(88, 1)), s3fb_fillrect);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(96, 1)), cfb_copyarea);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(104, 1)), s3fb_imageblit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(160, 1)), svga_get_caps);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_ops, $mul.ref(0, 192)), $mul.ref(184, 1)), $0.ref);
    $M.79 := $store.i8($M.79, s3_dtpc_regs, 59);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_dtpc_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_dtpc_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_dtpc_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(0, 1)), 93);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_dtpc_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(1, 1)), 6);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_dtpc_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(2, 1)), 6);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_dtpc_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_dtpc_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_dtpc_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(2, 1)), 0);
    $M.82 := $store.i8($M.82, s3_v_sync_end_regs, 17);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(s3_v_sync_end_regs, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(s3_v_sync_end_regs, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(2, 1)), 3);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(s3_v_sync_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(s3_v_sync_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(1, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(s3_v_sync_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(2, 1)), 0);
    $M.85 := $store.i8($M.85, s3_v_sync_start_regs, 16);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(0, 1)), 7);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(1, 1)), 2);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(2, 1)), 2);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(0, 1)), 7);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(1, 1)), 7);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(2, 1)), 7);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(0, 1)), 94);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(1, 1)), 4);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(2, 1)), 4);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(1, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(s3_v_sync_start_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(2, 1)), 0);
    $M.88 := $store.i8($M.88, s3_v_blank_end_regs, 22);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(s3_v_blank_end_regs, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(s3_v_blank_end_regs, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(s3_v_blank_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(s3_v_blank_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(1, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(s3_v_blank_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(2, 1)), 0);
    $M.91 := $store.i8($M.91, s3_v_blank_start_regs, 21);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(0, 1)), 7);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(1, 1)), 3);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(2, 1)), 3);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(0, 1)), 9);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(1, 1)), 5);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(2, 1)), 5);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(0, 1)), 94);
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(1, 1)), 2);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(2, 1)), 2);
    $M.91 := $store.i8($M.91, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.92 := $store.i8($M.92, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(1, 1)), 0);
    $M.93 := $store.i8($M.93, $add.ref($add.ref($add.ref(s3_v_blank_start_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(2, 1)), 0);
    $M.94 := $store.i8($M.94, s3_v_display_regs, 18);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(0, 1)), 7);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(1, 1)), 1);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(2, 1)), 1);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(0, 1)), 7);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(1, 1)), 6);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(2, 1)), 6);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(0, 1)), 94);
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(1, 1)), 1);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(2, 1)), 1);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.95 := $store.i8($M.95, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(1, 1)), 0);
    $M.96 := $store.i8($M.96, $add.ref($add.ref($add.ref(s3_v_display_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i8($M.97, s3_v_total_regs, 6);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(0, 1)), 7);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(0, 1)), 7);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(1, 1)), 5);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(2, 1)), 5);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(0, 1)), 94);
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(2, 1)), 0);
    $M.97 := $store.i8($M.97, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.98 := $store.i8($M.98, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(1, 1)), 0);
    $M.99 := $store.i8($M.99, $add.ref($add.ref($add.ref(s3_v_total_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(2, 1)), 0);
    $M.100 := $store.i8($M.100, s3_h_sync_end_regs, 5);
    $M.101 := $store.i8($M.101, $add.ref($add.ref($add.ref(s3_h_sync_end_regs, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(s3_h_sync_end_regs, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(2, 1)), 4);
    $M.100 := $store.i8($M.100, $add.ref($add.ref($add.ref(s3_h_sync_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.101 := $store.i8($M.101, $add.ref($add.ref($add.ref(s3_h_sync_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(1, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(s3_h_sync_end_regs, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(2, 1)), 0);
    $M.103 := $store.i8($M.103, s3_h_sync_start_regs, 4);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(s3_h_sync_start_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(s3_h_sync_start_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.103 := $store.i8($M.103, $add.ref($add.ref($add.ref(s3_h_sync_start_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(0, 1)), 93);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(s3_h_sync_start_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(1, 1)), 4);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(s3_h_sync_start_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(2, 1)), 4);
    $M.103 := $store.i8($M.103, $add.ref($add.ref($add.ref(s3_h_sync_start_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(s3_h_sync_start_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.105 := $store.i8($M.105, $add.ref($add.ref($add.ref(s3_h_sync_start_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(2, 1)), 0);
    $M.106 := $store.i8($M.106, s3_h_blank_end_regs, 3);
    $M.107 := $store.i8($M.107, $add.ref($add.ref($add.ref(s3_h_blank_end_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(s3_h_blank_end_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(2, 1)), 4);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref(s3_h_blank_end_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(0, 1)), 5);
    $M.107 := $store.i8($M.107, $add.ref($add.ref($add.ref(s3_h_blank_end_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(1, 1)), 7);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(s3_h_blank_end_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(2, 1)), 7);
    $M.106 := $store.i8($M.106, $add.ref($add.ref($add.ref(s3_h_blank_end_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.107 := $store.i8($M.107, $add.ref($add.ref($add.ref(s3_h_blank_end_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.108 := $store.i8($M.108, $add.ref($add.ref($add.ref(s3_h_blank_end_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(2, 1)), 0);
    $M.109 := $store.i8($M.109, s3_h_blank_start_regs, 2);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(s3_h_blank_start_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(s3_h_blank_start_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.109 := $store.i8($M.109, $add.ref($add.ref($add.ref(s3_h_blank_start_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(0, 1)), 93);
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(s3_h_blank_start_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(1, 1)), 2);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(s3_h_blank_start_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(2, 1)), 2);
    $M.109 := $store.i8($M.109, $add.ref($add.ref($add.ref(s3_h_blank_start_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.110 := $store.i8($M.110, $add.ref($add.ref($add.ref(s3_h_blank_start_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(s3_h_blank_start_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(2, 1)), 0);
    $M.112 := $store.i8($M.112, s3_h_display_regs, 1);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(s3_h_display_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(s3_h_display_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(s3_h_display_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(0, 1)), 93);
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(s3_h_display_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(1, 1)), 1);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(s3_h_display_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(2, 1)), 1);
    $M.112 := $store.i8($M.112, $add.ref($add.ref($add.ref(s3_h_display_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.113 := $store.i8($M.113, $add.ref($add.ref($add.ref(s3_h_display_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.114 := $store.i8($M.114, $add.ref($add.ref($add.ref(s3_h_display_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(2, 1)), 0);
    $M.115 := $store.i8($M.115, s3_h_total_regs, 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(s3_h_total_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(s3_h_total_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(s3_h_total_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(0, 1)), 93);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(s3_h_total_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(s3_h_total_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(2, 1)), 0);
    $M.115 := $store.i8($M.115, $add.ref($add.ref($add.ref(s3_h_total_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(s3_h_total_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref(s3_h_total_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(2, 1)), 0);
    $M.130 := $store.i16($M.130, s3_pll, 3);
    $M.131 := $store.i16($M.131, $add.ref($add.ref(s3_pll, $mul.ref(0, 24)), $mul.ref(2, 1)), 129);
    $M.132 := $store.i16($M.132, $add.ref($add.ref(s3_pll, $mul.ref(0, 24)), $mul.ref(4, 1)), 3);
    $M.133 := $store.i16($M.133, $add.ref($add.ref(s3_pll, $mul.ref(0, 24)), $mul.ref(6, 1)), 33);
    $M.134 := $store.i16($M.134, $add.ref($add.ref(s3_pll, $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.135 := $store.i16($M.135, $add.ref($add.ref(s3_pll, $mul.ref(0, 24)), $mul.ref(10, 1)), 3);
    $M.136 := $store.i32($M.136, $add.ref($add.ref(s3_pll, $mul.ref(0, 24)), $mul.ref(12, 1)), 35000);
    $M.137 := $store.i32($M.137, $add.ref($add.ref(s3_pll, $mul.ref(0, 24)), $mul.ref(16, 1)), 240000);
    $M.138 := $store.i32($M.138, $add.ref($add.ref(s3_pll, $mul.ref(0, 24)), $mul.ref(20, 1)), 14318);
    $M.130 := $store.i16($M.130, s3_trio3d_pll, 3);
    $M.131 := $store.i16($M.131, $add.ref($add.ref(s3_trio3d_pll, $mul.ref(0, 24)), $mul.ref(2, 1)), 129);
    $M.132 := $store.i16($M.132, $add.ref($add.ref(s3_trio3d_pll, $mul.ref(0, 24)), $mul.ref(4, 1)), 3);
    $M.133 := $store.i16($M.133, $add.ref($add.ref(s3_trio3d_pll, $mul.ref(0, 24)), $mul.ref(6, 1)), 31);
    $M.134 := $store.i16($M.134, $add.ref($add.ref(s3_trio3d_pll, $mul.ref(0, 24)), $mul.ref(8, 1)), 0);
    $M.135 := $store.i16($M.135, $add.ref($add.ref(s3_trio3d_pll, $mul.ref(0, 24)), $mul.ref(10, 1)), 4);
    $M.136 := $store.i32($M.136, $add.ref($add.ref(s3_trio3d_pll, $mul.ref(0, 24)), $mul.ref(12, 1)), 230000);
    $M.137 := $store.i32($M.137, $add.ref($add.ref(s3_trio3d_pll, $mul.ref(0, 24)), $mul.ref(16, 1)), 460000);
    $M.138 := $store.i32($M.138, $add.ref($add.ref(s3_trio3d_pll, $mul.ref(0, 24)), $mul.ref(20, 1)), 14318);
    $M.139 := $store.i32($M.139, s3fb_formats, 0);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 6);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 6);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 6);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(52, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(56, 1)), 3);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(60, 1)), 9);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(64, 1)), 3);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(68, 1)), 8);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(0, 76)), $mul.ref(72, 1)), 16);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(0, 1)), 4);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 4);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 4);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 4);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(52, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(56, 1)), 0);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(60, 1)), 0);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(64, 1)), 3);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(68, 1)), 8);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(1, 76)), $mul.ref(72, 1)), 16);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(0, 1)), 4);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 4);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 4);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 4);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(52, 1)), 1);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(56, 1)), 2);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(60, 1)), 1);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(64, 1)), 3);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(68, 1)), 8);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(2, 76)), $mul.ref(72, 1)), 16);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(0, 1)), 8);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 8);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 8);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 8);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(52, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(56, 1)), 0);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(60, 1)), 0);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(64, 1)), 3);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(68, 1)), 4);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(3, 76)), $mul.ref(72, 1)), 8);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(0, 1)), 16);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 10);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 5);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 5);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 5);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 5);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(52, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(56, 1)), 0);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(60, 1)), 0);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(64, 1)), 2);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(68, 1)), 2);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(4, 76)), $mul.ref(72, 1)), 4);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(0, 1)), 16);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 11);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 5);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 5);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 6);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 5);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(52, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(56, 1)), 0);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(60, 1)), 0);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(64, 1)), 2);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(68, 1)), 2);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(5, 76)), $mul.ref(72, 1)), 4);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(0, 1)), 24);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 16);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 8);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 8);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 8);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 8);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(52, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(56, 1)), 0);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(60, 1)), 0);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(64, 1)), 2);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(68, 1)), 1);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(6, 76)), $mul.ref(72, 1)), 2);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(0, 1)), 32);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 16);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 8);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 8);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 8);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 8);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(52, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(56, 1)), 0);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(60, 1)), 0);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(64, 1)), 2);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(68, 1)), 1);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(7, 76)), $mul.ref(72, 1)), 2);
    $M.139 := $store.i32($M.139, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(0, 1)), 65535);
    $M.140 := $store.i32($M.140, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.141 := $store.i32($M.141, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(4, 1)), $mul.ref(4, 1)), 0);
    $M.142 := $store.i32($M.142, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(4, 1)), $mul.ref(8, 1)), 0);
    $M.143 := $store.i32($M.143, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(16, 1)), $mul.ref(0, 1)), 0);
    $M.144 := $store.i32($M.144, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(16, 1)), $mul.ref(4, 1)), 0);
    $M.145 := $store.i32($M.145, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(16, 1)), $mul.ref(8, 1)), 0);
    $M.146 := $store.i32($M.146, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.147 := $store.i32($M.147, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.148 := $store.i32($M.148, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(28, 1)), $mul.ref(8, 1)), 0);
    $M.149 := $store.i32($M.149, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(40, 1)), $mul.ref(0, 1)), 0);
    $M.150 := $store.i32($M.150, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(40, 1)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(40, 1)), $mul.ref(8, 1)), 0);
    $M.152 := $store.i32($M.152, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(52, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(56, 1)), 0);
    $M.154 := $store.i32($M.154, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(60, 1)), 0);
    $M.155 := $store.i32($M.155, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(64, 1)), 0);
    $M.156 := $store.i32($M.156, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(68, 1)), 0);
    $M.24 := $store.i32($M.24, $add.ref($add.ref($add.ref(s3fb_formats, $mul.ref(0, 684)), $mul.ref(8, 76)), $mul.ref(72, 1)), 0);
    $M.79 := $store.i8($M.79, s3_offset_regs, 19);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_offset_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_offset_regs, $mul.ref(0, 9)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_offset_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(0, 1)), 81);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_offset_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(1, 1)), 4);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_offset_regs, $mul.ref(0, 9)), $mul.ref(1, 3)), $mul.ref(2, 1)), 5);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_offset_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_offset_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_offset_regs, $mul.ref(0, 9)), $mul.ref(2, 3)), $mul.ref(2, 1)), 0);
    $M.79 := $store.i8($M.79, s3_line_compare_regs, 24);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(0, 1)), 7);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(1, 1)), 4);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(1, 3)), $mul.ref(2, 1)), 4);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(0, 1)), 9);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(1, 1)), 6);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(2, 3)), $mul.ref(2, 1)), 6);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(0, 1)), 94);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(1, 1)), 6);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(3, 3)), $mul.ref(2, 1)), 6);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_line_compare_regs, $mul.ref(0, 15)), $mul.ref(4, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.ref($M.0, s3fb_tile_ops, svga_settile);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_tile_ops, $mul.ref(0, 48)), $mul.ref(8, 1)), svga_tilecopy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_tile_ops, $mul.ref(0, 48)), $mul.ref(16, 1)), svga_tilefill);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_tile_ops, $mul.ref(0, 48)), $mul.ref(24, 1)), svga_tileblit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_tile_ops, $mul.ref(0, 48)), $mul.ref(32, 1)), s3fb_tilecursor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_tile_ops, $mul.ref(0, 48)), $mul.ref(40, 1)), svga_get_tilemax);
    $M.0 := $store.ref($M.0, s3fb_fast_tile_ops, s3fb_settile_fast);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_fast_tile_ops, $mul.ref(0, 48)), $mul.ref(8, 1)), svga_tilecopy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_fast_tile_ops, $mul.ref(0, 48)), $mul.ref(16, 1)), svga_tilefill);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_fast_tile_ops, $mul.ref(0, 48)), $mul.ref(24, 1)), svga_tileblit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_fast_tile_ops, $mul.ref(0, 48)), $mul.ref(32, 1)), s3fb_tilecursor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_fast_tile_ops, $mul.ref(0, 48)), $mul.ref(40, 1)), svga_get_tilemax);
    $M.10 := 1;
    call {:si_unique_call 1038} {:cexpr "fasttext"} boogie_si_record_i32(1);
    $M.79 := $store.i8($M.79, s3_start_address_regs, 13);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(0, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(0, 3)), $mul.ref(2, 1)), 7);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(1, 3)), $mul.ref(0, 1)), 12);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(1, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(1, 3)), $mul.ref(2, 1)), 7);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(2, 3)), $mul.ref(0, 1)), 105);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(2, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(2, 3)), $mul.ref(2, 1)), 4);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(3, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(3, 3)), $mul.ref(1, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(s3_start_address_regs, $mul.ref(0, 12)), $mul.ref(3, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i32($M.0, s3_devices, 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(4, 1)), 34832);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(0, 32)), $mul.ref(24, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(4, 1)), 34833);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(1, 32)), $mul.ref(24, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(4, 1)), 34834);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(2, 32)), $mul.ref(24, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(4, 1)), 34836);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(3, 32)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(4, 1)), 35073);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(4, 32)), $mul.ref(24, 1)), 129);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(4, 1)), 35074);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(5, 32)), $mul.ref(24, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(4, 1)), 22065);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(6, 32)), $mul.ref(24, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(4, 1)), 34877);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(7, 32)), $mul.ref(24, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(4, 1)), 35329);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(8, 32)), $mul.ref(24, 1)), 130);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(4, 1)), 35344);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(9, 32)), $mul.ref(24, 1)), 13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(4, 1)), 35345);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(10, 32)), $mul.ref(24, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(4, 1)), 35346);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(11, 32)), $mul.ref(24, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(4, 1)), 35347);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(12, 32)), $mul.ref(24, 1)), 131);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(4, 1)), 35076);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(13, 32)), $mul.ref(24, 1)), 19);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(0, 1)), 21299);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(4, 1)), 35841);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(14, 32)), $mul.ref(24, 1)), 20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(s3_devices, $mul.ref(0, 512)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, s3fb_pci_driver, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), s3_devices);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), s3_pci_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), s3_pci_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), s3_pci_suspend);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), s3_pci_resume);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(s3fb_pci_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str.1, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(3, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(5, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(8, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(8, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(9, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(10, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(8, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(9, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(10, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(11, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(8, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(9, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(10, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(11, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(12, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(13, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(7, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(8, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(9, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(10, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(11, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(12, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(13, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(3, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(8, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(9, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(10, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(11, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(12, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 9)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 9)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 9)), $mul.ref(3, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 9)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 9)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 9)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(3, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(8, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(9, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(3, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(8, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(9, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(3, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(8, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(9, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(3, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(8, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(9, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(11, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(3, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(8, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(9, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(11, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(12, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str, 0);
    $M.0 := $store.i8($M.0, .str.62, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(8, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(9, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(10, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(11, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(8, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(9, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(10, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(11, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(3, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(7, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(8, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.65, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(3, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(8, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(9, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(10, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 1039} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 478146);

procedure devirtbounce(funcPtr: ref, arg: i8, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i8, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 479178);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 480210);

procedure devirtbounce.2(funcPtr: ref, arg: i8, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i8, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 481242);

procedure devirtbounce.3(funcPtr: ref, arg: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 482274);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 483306);

procedure devirtbounce.5(funcPtr: ref, arg: i16, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i16, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 484338);

procedure devirtbounce.6(funcPtr: ref, arg: i16, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i16, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 485370);

procedure devirtbounce.7(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 486402);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.0, $M.17, $M.21, $CurrAddr, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(s3fb_release, $p0);
    assume {:branchcond $i8} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i8 == 1);
    $i7 := $eq.ref(s3fb_open, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i7 == 1);
    $i6 := $eq.ref(s3_pci_suspend, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 1040} $i1 := s3_pci_suspend(arg, arg1);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    $r := $i1;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i7 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1041} $i3 := s3fb_open($p2, arg1);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    $r := $i3;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1042} $i5 := s3fb_release($p4, arg1);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    $r := $i5;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 487434);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(s3fb_ddc_getscl, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(s3fb_ddc_getsda, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(svga_get_tilemax, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(s3fb_set_par, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i11 == 1);
    $i10 := $eq.ref(s3_pci_resume, $p0);
    assume {:branchcond $i10} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    call {:si_unique_call 1043} $i1 := s3_pci_resume(arg);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    $r := $i1;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1044} $i3 := s3fb_set_par($p2);
    $r := $i3;
    return;

  $bb4:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1045} $i5 := svga_get_tilemax($p4);
    $r := $i5;
    return;

  $bb5:
    assume $i13 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1046} $i7 := s3fb_ddc_getsda($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i14 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1047} $i9 := s3fb_ddc_getscl($p8);
    $r := $i9;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 488466);

procedure devirtbounce.10(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(s3_pci_remove, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1048} s3_pci_remove(arg);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.22, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.42, $M.39, $M.40, $M.41, $M.44, $M.28, $M.45, $M.46, $M.47, $M.48, $M.29, $M.49, $M.17, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.43, $M.31, $M.30, $M.8, $M.7, $M.6, $M.5, $M.0, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.24, $M.10, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1049} __SMACK_static_init();
    call {:si_unique_call 1050} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.22, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.42, $M.39, $M.40, $M.41, $M.44, $M.28, $M.45, $M.46, $M.47, $M.48, $M.29, $M.49, $M.17, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.43, $M.31, $M.30, $M.8, $M.7, $M.6, $M.5, $M.0, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.24, $M.10, $CurrAddr, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.1, $M.2, $M.3, $M.26, $M.9, $M.27, $M.21;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation ldv_struct_fb_tile_ops_dummy_resourceless_instance_1_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1) returns (out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} out_$i10 := ldv_undef_int();
    call {:si_unique_call 552} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2728;

  $bb79:
    assume {:verifier.code 0} true;
    assume out_$i29 == 1;
    goto $bb79_dummy;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_2834;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} out_$i28 := ldv_undef_int();
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_2833;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} ldv_dummy_resourceless_instance_callback_1_30($u2, in_$p7, $u3);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 1);
    goto corral_source_split_2729;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} ldv_dummy_resourceless_instance_callback_1_29($u4, in_$p7, $u5);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i12 == 1;
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i10, 2);
    goto corral_source_split_2735;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} ldv_dummy_resourceless_instance_callback_1_28($u4, in_$p7, $u5);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i13 == 1;
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i10, 3);
    goto corral_source_split_2741;

  $bb13:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_dummy_resourceless_instance_callback_1_27($u6, in_$p7, $u7);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i14 == 1;
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i10, 4);
    goto corral_source_split_2747;

  $bb17:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} ldv_dummy_resourceless_instance_callback_1_26($u8, in_$p7, $u9);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i15 == 1;
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i10, 5);
    goto corral_source_split_2753;

  $bb21:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_dummy_resourceless_instance_callback_1_23($u10, $u0, $u0, $u0, $u0, $u0, in_$p7);
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i16 == 1;
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i10, 6);
    goto corral_source_split_2759;

  $bb25:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} ldv_dummy_resourceless_instance_callback_1_22($u11, in_$p7);
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i17 == 1;
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i10, 7);
    goto corral_source_split_2765;

  $bb29:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_87:
    goto corral_source_split_2775;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} ldv_dummy_resourceless_instance_callback_1_19($u12, in_$p7, $u0);
    goto SeqInstr_86;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i18 == 1;
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i10, 8);
    goto corral_source_split_2771;

  $bb33:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} ldv_dummy_resourceless_instance_callback_1_18($u13, $u14, in_$p7);
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i19 == 1;
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i10, 9);
    goto corral_source_split_2777;

  $bb37:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_90:
    goto corral_source_split_2787;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_dummy_resourceless_instance_callback_1_15($u12, in_$p7, $u0);
    goto SeqInstr_89;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i20 == 1;
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i10, 10);
    goto corral_source_split_2783;

  $bb41:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} ldv_dummy_resourceless_instance_callback_1_14($u15, in_$p7, $u16);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i21 == 1;
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i10, 11);
    goto corral_source_split_2789;

  $bb45:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} ldv_dummy_resourceless_instance_callback_1_13($u11, in_$p7);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i22 == 1;
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i10, 12);
    goto corral_source_split_2795;

  $bb49:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_dummy_resourceless_instance_callback_1_12($u17, in_$p7, $u18, $u14);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i23 == 1;
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i10, 13);
    goto corral_source_split_2801;

  $bb53:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} ldv_dummy_resourceless_instance_callback_1_11($u4, in_$p7, $u5);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb60:
    assume out_$i24 == 1;
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i10, 14);
    goto corral_source_split_2807;

  $bb57:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} ldv_dummy_resourceless_instance_callback_1_10($u4, in_$p7, $u5);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume out_$i25 == 1;
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i10, 15);
    goto corral_source_split_2813;

  $bb61:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} ldv_dummy_resourceless_instance_callback_1_9($u13, $u14, in_$p7);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb68:
    assume out_$i26 == 1;
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i10, 16);
    goto corral_source_split_2819;

  $bb65:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} ldv_dummy_resourceless_instance_callback_1_3($u19, $u0, in_$p7);
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume out_$i27 == 1;
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i10, 17);
    goto corral_source_split_2825;

  $bb69:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} ldv_stop();
    goto corral_source_split_2831;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb79_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29 := ldv_struct_fb_tile_ops_dummy_resourceless_instance_1_loop_$bb7(in_$p7, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_struct_fb_tile_ops_dummy_resourceless_instance_1_loop_$bb7(in_$p7: ref, in_$i10: i32, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i32, in_$i29: i1) returns (out_$i10: i32, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i32, out_$i29: i1);
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $CurrAddr, $M.17, assertsPassed;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation s3fb_iplan_fillrect_loop_$bb9(in_$i4: i32, in_$p27: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i30: i32, in_$p31: ref) returns (out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i30: i32, out_$p31: ref)
{

  entry:
    out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i30, out_$p31 := in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i30, in_$p31;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  $bb11:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i30, out_$p31 := out_$i34, out_$p32;
    goto $bb11_dummy;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i32(out_$i34, out_$i35);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, in_$p27);
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i30, 8);
    call {:si_unique_call 635} {:cexpr "x"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __writel(in_$i4, out_$p33);
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3157;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref(1, 4));
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i30, out_$p31 := s3fb_iplan_fillrect_loop_$bb9(in_$i4, in_$p27, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i30, out_$p31);
    return;

  exit:
    return;
}



procedure s3fb_iplan_fillrect_loop_$bb9(in_$i4: i32, in_$p27: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i30: i32, in_$p31: ref) returns (out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i30: i32, out_$p31: ref);



implementation s3fb_iplan_fillrect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$p21: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i30: i32, in_$p31: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i24: i32, in_$p25: ref) returns (out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i30: i32, out_$p31: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i24: i32, out_$p25: ref)
{

  entry:
    out_$p27, out_$i28, out_$i29, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i30, out_$p31, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i24, out_$p25 := in_$p27, in_$i28, in_$i29, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i30, in_$p31, in_$p38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i24, in_$p25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  $bb14:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$p25 := out_$i42, out_$p41;
    goto $bb14_dummy;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$i44 := $ult.i32(out_$i42, out_$i43);
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, in_$p21);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i24, 1);
    call {:si_unique_call 636} {:cexpr "y"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p25, $mul.ref(out_$i40, 1));
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i39);
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_3166;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3165;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb8;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume !(out_$i36 == 1);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i36 := $ult.i32(out_$i34, out_$i35);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p27);
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i30, 8);
    call {:si_unique_call 635} {:cexpr "x"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __writel(in_$i4, out_$p33);
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3157;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref(1, 4));
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i30, out_$p31 := s3fb_iplan_fillrect_loop_$bb9(in_$i4, out_$p27, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i30, out_$p31);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$i30, out_$p31 := 0, out_$p25;
    goto $bb9;

  $bb11:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i30, out_$p31 := out_$i34, out_$p32;
    assume false;
    return;

  $bb6:
    assume out_$i29 == 1;
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i29 := $ult.i32(0, out_$i28);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3148;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p27, out_$i28, out_$i29, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i30, out_$p31, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i24, out_$p25 := s3fb_iplan_fillrect_loop_$bb4(in_$p0, in_$p1, in_$i4, in_$p21, out_$p27, out_$i28, out_$i29, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i30, out_$p31, out_$p38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i24, out_$p25);
    return;

  exit:
    return;
}



procedure s3fb_iplan_fillrect_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$p21: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i30: i32, in_$p31: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i24: i32, in_$p25: ref) returns (out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i30: i32, out_$p31: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i24: i32, out_$p25: ref);



implementation s3fb_iplan_imageblit_loop_$bb9(in_$i4: i32, in_$i7: i32, in_$p33: ref, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref) returns (out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref)
{

  entry:
    out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38 := in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i36, in_$p37, in_$p38;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3270;

  $bb11:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i36, out_$p37, out_$p38 := out_$i49, out_$p47, out_$p39;
    goto $bb11_dummy;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i32(out_$i49, out_$i50);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, in_$p33);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i36, 8);
    call {:si_unique_call 652} {:cexpr "x"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} __writel(out_$i46, out_$p48);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p37, $mul.ref(1, 4));
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i46 := $or.i32(out_$i43, out_$i45);
    call {:si_unique_call 650} {:cexpr "val"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, in_$i7);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i44 := $xor.i32(out_$i42, $sub.i32(0, 1));
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, in_$i4);
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i42 := $mul.i32(out_$i41, 16843009);
    call {:si_unique_call 649} {:cexpr "val"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p38);
    goto corral_source_split_3273;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p38, $mul.ref(1, 1));
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38 := s3fb_iplan_imageblit_loop_$bb9(in_$i4, in_$i7, in_$p33, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38);
    return;

  exit:
    return;
}



procedure s3fb_iplan_imageblit_loop_$bb9(in_$i4: i32, in_$i7: i32, in_$p33: ref, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref) returns (out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref);



implementation s3fb_iplan_imageblit_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$i7: i32, in_$p26: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$p58: ref, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i29: i32, in_$p30: ref, in_$p31: ref) returns (out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$p58: ref, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i29: i32, out_$p30: ref, out_$p31: ref)
{

  entry:
    out_$p33, out_$i34, out_$i35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i29, out_$p30, out_$p31 := in_$p33, in_$i34, in_$i35, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i36, in_$p37, in_$p38, in_$p52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i29, in_$p30, in_$p31;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3261;

  $bb14:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i29, out_$p30, out_$p31 := out_$i62, out_$p61, out_$p56;
    goto $bb14_dummy;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i64 := $ult.i32(out_$i62, out_$i63);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, in_$p26);
    goto corral_source_split_3299;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i29, 1);
    call {:si_unique_call 653} {:cexpr "y"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p30, $mul.ref(out_$i60, 1));
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i32.i64(out_$i59);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p31, $mul.ref(out_$i55, 1));
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i54);
    goto corral_source_split_3292;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i54 := $udiv.i32(out_$i53, 8);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_3290;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3289;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb8;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume !(out_$i51 == 1);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i32(out_$i49, out_$i50);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p33);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i36, 8);
    call {:si_unique_call 652} {:cexpr "x"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} __writel(out_$i46, out_$p48);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p37, $mul.ref(1, 4));
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i46 := $or.i32(out_$i43, out_$i45);
    call {:si_unique_call 650} {:cexpr "val"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, in_$i7);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i44 := $xor.i32(out_$i42, $sub.i32(0, 1));
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, in_$i4);
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$i42 := $mul.i32(out_$i41, 16843009);
    call {:si_unique_call 649} {:cexpr "val"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p38);
    goto corral_source_split_3273;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p38, $mul.ref(1, 1));
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38 := s3fb_iplan_imageblit_loop_$bb9(in_$i4, in_$i7, out_$p33, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i36, out_$p37, out_$p38 := 0, out_$p30, out_$p31;
    goto $bb9;

  $bb11:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i36, out_$p37, out_$p38 := out_$i49, out_$p47, out_$p39;
    assume false;
    return;

  $bb6:
    assume out_$i35 == 1;
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i35 := $ult.i32(0, out_$i34);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3264;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p33, out_$i34, out_$i35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i29, out_$p30, out_$p31 := s3fb_iplan_imageblit_loop_$bb4(in_$p0, in_$p1, in_$i4, in_$i7, in_$p26, out_$p33, out_$i34, out_$i35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i29, out_$p30, out_$p31);
    return;

  exit:
    return;
}



procedure s3fb_iplan_imageblit_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$i7: i32, in_$p26: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$p58: ref, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i29: i32, in_$p30: ref, in_$p31: ref) returns (out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$p58: ref, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i29: i32, out_$p30: ref, out_$p31: ref);



implementation s3fb_cfb4_imageblit_loop_$bb9(in_$i4: i32, in_$i7: i32, in_$p33: ref, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref) returns (out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref)
{

  entry:
    out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38 := in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i36, in_$p37, in_$p38;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  $bb11:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i36, out_$p37, out_$p38 := out_$i49, out_$p47, out_$p39;
    goto $bb11_dummy;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i32(out_$i49, out_$i50);
    goto corral_source_split_3358;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, in_$p33);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i36, 8);
    call {:si_unique_call 660} {:cexpr "x"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} __writel(out_$i46, out_$p48);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p37, $mul.ref(1, 4));
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i46 := $or.i32(out_$i43, out_$i45);
    call {:si_unique_call 658} {:cexpr "val"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, in_$i7);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i44 := $xor.i32(out_$i42, $sub.i32(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, in_$i4);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} out_$i42 := expand_pixel(out_$i41);
    call {:si_unique_call 657} {:cexpr "val"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p38);
    goto corral_source_split_3346;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p38, $mul.ref(1, 1));
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38 := s3fb_cfb4_imageblit_loop_$bb9(in_$i4, in_$i7, in_$p33, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38);
    return;

  exit:
    return;
}



procedure s3fb_cfb4_imageblit_loop_$bb9(in_$i4: i32, in_$i7: i32, in_$p33: ref, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref) returns (out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref);



implementation s3fb_cfb4_imageblit_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$i7: i32, in_$p26: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$p58: ref, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i29: i32, in_$p30: ref, in_$p31: ref) returns (out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$p58: ref, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i29: i32, out_$p30: ref, out_$p31: ref)
{

  entry:
    out_$p33, out_$i34, out_$i35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i29, out_$p30, out_$p31 := in_$p33, in_$i34, in_$i35, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i36, in_$p37, in_$p38, in_$p52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i29, in_$p30, in_$p31;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  $bb14:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i29, out_$p30, out_$p31 := out_$i62, out_$p61, out_$p56;
    goto $bb14_dummy;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i64 := $ult.i32(out_$i62, out_$i63);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, in_$p26);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i29, 1);
    call {:si_unique_call 661} {:cexpr "y"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref(out_$p30, $mul.ref(out_$i60, 1));
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i32.i64(out_$i59);
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1608)), $mul.ref(496, 1)), $mul.ref(48, 1));
    goto corral_source_split_3367;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p31, $mul.ref(out_$i55, 1));
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i32.i64(out_$i54);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i54 := $udiv.i32(out_$i53, 8);
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_3363;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3362;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb8;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12:
    assume !(out_$i51 == 1);
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i32(out_$i49, out_$i50);
    goto corral_source_split_3358;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p33);
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i36, 8);
    call {:si_unique_call 660} {:cexpr "x"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} __writel(out_$i46, out_$p48);
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p37, $mul.ref(1, 4));
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$i46 := $or.i32(out_$i43, out_$i45);
    call {:si_unique_call 658} {:cexpr "val"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, in_$i7);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i44 := $xor.i32(out_$i42, $sub.i32(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, in_$i4);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} out_$i42 := expand_pixel(out_$i41);
    call {:si_unique_call 657} {:cexpr "val"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i8.i32(out_$i40);
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i8($M.0, out_$p38);
    goto corral_source_split_3346;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(out_$p38, $mul.ref(1, 1));
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38 := s3fb_cfb4_imageblit_loop_$bb9(in_$i4, in_$i7, out_$p33, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i36, out_$p37, out_$p38 := 0, out_$p30, out_$p31;
    goto $bb9;

  $bb11:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i36, out_$p37, out_$p38 := out_$i49, out_$p47, out_$p39;
    assume false;
    return;

  $bb6:
    assume out_$i35 == 1;
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$i35 := $ult.i32(0, out_$i34);
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3337;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p33, out_$i34, out_$i35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i29, out_$p30, out_$p31 := s3fb_cfb4_imageblit_loop_$bb4(in_$p0, in_$p1, in_$i4, in_$i7, in_$p26, out_$p33, out_$i34, out_$i35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36, out_$p37, out_$p38, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i29, out_$p30, out_$p31);
    return;

  exit:
    return;
}



procedure s3fb_cfb4_imageblit_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$i7: i32, in_$p26: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p39: ref, in_$i40: i8, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i36: i32, in_$p37: ref, in_$p38: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i64, in_$p56: ref, in_$p58: ref, in_$i59: i32, in_$i60: i64, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i29: i32, in_$p30: ref, in_$p31: ref) returns (out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p39: ref, out_$i40: i8, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i36: i32, out_$p37: ref, out_$p38: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i64, out_$p56: ref, out_$p58: ref, out_$i59: i32, out_$i60: i64, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i29: i32, out_$p30: ref, out_$p31: ref);



implementation ldv_pci_pci_instance_0_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref) returns (out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref)
{

  entry:
    out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58 := in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_$i29 := ldv_undef_int();
    call {:si_unique_call 788} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3952;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i30 == 1;
    goto corral_source_split_3960;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 1);
    goto corral_source_split_3953;

  SeqInstr_159:
    goto corral_source_split_4009;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_pci_instance_resume_0_5(out_$p58, in_$p10);
    goto SeqInstr_158;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_4008;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_4007;

  $bb33:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_156:
    goto corral_source_split_4005;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_pci_instance_resume_early_0_6(out_$p56, in_$p10);
    goto SeqInstr_155;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_4004;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_4003;

  $bb32:
    assume out_$i54 == 1;
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_3997;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_$i50 := ldv_filter_err_code(out_$i49);
    call {:si_unique_call 799} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3996;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3995;

  $bb30:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := out_$i39;
    goto $bb31;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i48;
    goto $bb31;

  SeqInstr_153:
    call {:si_unique_call 797} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3993;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} out_$i48 := ldv_pci_instance_suspend_late_0_7(out_$p45, in_$p10, out_$i47);
    goto SeqInstr_152;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.25, out_$p46);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3989;

  $bb29:
    assume out_$i43 == 1;
    goto corral_source_split_3988;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_$i39 := ldv_filter_err_code(out_$i38);
    call {:si_unique_call 794} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3971;

  SeqInstr_150:
    call {:si_unique_call 792} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_3970;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} out_$i38 := ldv_pci_instance_suspend_0_8(out_$p35, in_$p10, out_$i37);
    goto SeqInstr_149;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.25, out_$p36);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_3967;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i31 == 1;
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i29;
    assume true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i29, 2);
    goto corral_source_split_3962;

  $bb16:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58 := ldv_pci_pci_instance_0_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_0_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref) returns (out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref);
  modifies $M.0, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, assertsPassed, $M.27, $M.9, $M.21, $M.26;



implementation ldv_pci_pci_instance_0_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} ldv_ldv_pre_probe_121();
    goto corral_source_split_3934;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb12_dummy;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_3956;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} out_$i25 := ldv_undef_int();
    call {:si_unique_call 790} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_3955;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_165:
    goto corral_source_split_4018;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_pci_instance_release_0_2(out_$p66, in_$p10);
    goto SeqInstr_164;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_4017;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_4016;

  $bb36:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_162:
    goto corral_source_split_4014;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} ldv_pci_instance_shutdown_0_3(out_$p64, in_$p10);
    goto SeqInstr_161;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_4013;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_4012;

  $bb35:
    assume out_$i62 == 1;
    goto corral_source_split_4011;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, 0);
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_3983;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_3982;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i33 == 1;
    goto corral_source_split_3979;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 3);
    goto corral_source_split_3977;

  $bb20:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i29;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i29, 2);
    goto corral_source_split_3962;

  $bb16:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 1);
    goto corral_source_split_3953;

  $bb10:
    call out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58 := ldv_pci_pci_instance_0_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} out_$i29 := ldv_undef_int();
    call {:si_unique_call 788} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3952;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb28:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i30 == 1;
    goto corral_source_split_3960;

  SeqInstr_159:
    goto corral_source_split_4009;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_pci_instance_resume_0_5(out_$p58, in_$p10);
    goto SeqInstr_158;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_4008;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_4007;

  $bb33:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_156:
    goto corral_source_split_4005;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_pci_instance_resume_early_0_6(out_$p56, in_$p10);
    goto SeqInstr_155;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_4004;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_4003;

  $bb32:
    assume out_$i54 == 1;
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_3997;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_$i50 := ldv_filter_err_code(out_$i49);
    call {:si_unique_call 799} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3996;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3995;

  $bb30:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := out_$i39;
    goto $bb31;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i48;
    goto $bb31;

  SeqInstr_153:
    call {:si_unique_call 797} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3993;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} out_$i48 := ldv_pci_instance_suspend_late_0_7(out_$p45, in_$p10, out_$i47);
    goto SeqInstr_152;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.25, out_$p46);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3989;

  $bb29:
    assume out_$i43 == 1;
    goto corral_source_split_3988;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_$i39 := ldv_filter_err_code(out_$i38);
    call {:si_unique_call 794} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3971;

  SeqInstr_150:
    call {:si_unique_call 792} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_3970;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} out_$i38 := ldv_pci_instance_suspend_0_8(out_$p35, in_$p10, out_$i37);
    goto SeqInstr_149;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.25, out_$p36);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_3967;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i31 == 1;
    goto corral_source_split_3964;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} ldv_assume(out_$i22);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_3944;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, 0);
    goto corral_source_split_3943;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} out_$i19 := ldv_undef_int();
    call {:si_unique_call 784} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3939;

  SeqInstr_147:
    call {:si_unique_call 782} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_3938;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} out_$i18 := ldv_ldv_post_probe_122(out_$i17);
    goto SeqInstr_146;

  SeqInstr_144:
    call {:si_unique_call 780} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3937;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} out_$i17 := ldv_pci_instance_probe_0_17(out_$p16, in_$p10, in_$p12);
    goto SeqInstr_143;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_3935;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_assume(out_$i24);
    goto corral_source_split_3950;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_3949;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i18, 0);
    goto corral_source_split_3948;

  $bb9:
    assume !(out_$i20 == 1);
    goto corral_source_split_3947;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66 := ldv_pci_pci_instance_0_loop_$bb7(in_$p1, in_$p8, in_$p10, in_$p12, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_0_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref);
  modifies $M.28, $M.29, $M.0, $M.22, assertsPassed, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.27, $M.9, $M.21, $M.26, $M.1, $M.2, $M.3, $M.7;


