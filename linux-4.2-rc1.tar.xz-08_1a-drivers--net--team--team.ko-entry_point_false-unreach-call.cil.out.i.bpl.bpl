var $M.0: [ref]i8;

var $M.2: [ref]i8;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i24;

var $M.8: [ref]i8;

var $M.9: i32;

var $M.10: ref;

var $M.11: i32;

var $M.12: ref;

var $M.13: i32;

var $M.14: ref;

var $M.15: i32;

var $M.16: ref;

var $M.17: i32;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]i8;

var $M.21: [ref]i16;

var $M.22: [ref]i16;

var $M.23: [ref]i8;

var $M.24: [ref]i32;

var $M.25: [ref]ref;

var $M.27: ref;

var $M.28: i32;

var $M.29: i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: ref;

var $M.33: ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.51: [ref]i8;

var $M.52: [ref]i16;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 631242);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_team_modeop_port_enter: ref;

axiom __ksymtab_team_modeop_port_enter == $sub.ref(0, 2068);

const {:count 23} __kstrtab_team_modeop_port_enter: ref;

axiom __kstrtab_team_modeop_port_enter == $sub.ref(0, 3115);

const team_nl_mcgrps: ref;

axiom team_nl_mcgrps == $sub.ref(0, 4155);

const {:count 8} team_nl_option_policy: ref;

axiom team_nl_option_policy == $sub.ref(0, 5211);

const {:count 4} team_nl_policy: ref;

axiom team_nl_policy == $sub.ref(0, 6251);

const {:count 4} team_nl_ops: ref;

axiom team_nl_ops == $sub.ref(0, 7435);

const team_notifier_block: ref;

axiom team_notifier_block == $sub.ref(0, 8483);

const team_link_ops: ref;

axiom team_link_ops == $sub.ref(0, 9699);

const team_ethtool_ops: ref;

axiom team_ethtool_ops == $sub.ref(0, 11115);

const team_netdev_ops: ref;

axiom team_netdev_ops == $sub.ref(0, 12667);

const team_tx_busylock_key: ref;

axiom team_tx_busylock_key == $sub.ref(0, 13699);

const team_netdev_xmit_lock_key: ref;

axiom team_netdev_xmit_lock_key == $sub.ref(0, 14731);

const team_netdev_addr_lock_key: ref;

axiom team_netdev_addr_lock_key == $sub.ref(0, 15763);

const {:count 10} team_options: ref;

axiom team_options == $sub.ref(0, 17427);

const __team_no_mode: ref;

axiom __team_no_mode == $sub.ref(0, 18491);

const team_nl_family: ref;

axiom team_nl_family == $sub.ref(0, 19651);

const {:count 21} __kstrtab_team_mode_unregister: ref;

axiom __kstrtab_team_mode_unregister == $sub.ref(0, 20696);

const {:count 19} __kstrtab_team_mode_register: ref;

axiom __kstrtab_team_mode_register == $sub.ref(0, 21739);

const mode_list: ref;

axiom mode_list == $sub.ref(0, 22779);

const mode_list_lock: ref;

axiom mode_list_lock == $sub.ref(0, 23875);

const {:count 26} __kstrtab_team_options_change_check: ref;

axiom __kstrtab_team_options_change_check == $sub.ref(0, 24925);

const {:count 28} __kstrtab_team_option_inst_set_change: ref;

axiom __kstrtab_team_option_inst_set_change == $sub.ref(0, 25977);

const {:count 24} __kstrtab_team_options_unregister: ref;

axiom __kstrtab_team_options_unregister == $sub.ref(0, 27025);

const {:count 22} __kstrtab_team_options_register: ref;

axiom __kstrtab_team_options_register == $sub.ref(0, 28071);

const {:count 33} __kstrtab_team_modeop_port_change_dev_addr: ref;

axiom __kstrtab_team_modeop_port_change_dev_addr == $sub.ref(0, 29128);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 30156);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 31184);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 32212);

const team_ethtool_ops_group0: ref;

axiom team_ethtool_ops_group0 == $sub.ref(0, 33244);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 34272);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 35300);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 36328);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 37356);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 38384);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 39412);

const team_link_ops_group0: ref;

axiom team_link_ops_group0 == $sub.ref(0, 40444);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 41472);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 42500);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 43532);

const team_netdev_ops_group1: ref;

axiom team_netdev_ops_group1 == $sub.ref(0, 44564);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 45596);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 46628);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 47660);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 48688);

const team_link_ops_group1: ref;

axiom team_link_ops_group1 == $sub.ref(0, 49720);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 50748);

const team_link_ops_group2: ref;

axiom team_link_ops_group2 == $sub.ref(0, 51780);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 52808);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 53836);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 54864);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 55892);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 56920);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 57948);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 58980);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 60012);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 61044);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 62076);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 63104);

const __ksymtab_team_mode_unregister: ref;

axiom __ksymtab_team_mode_unregister == $sub.ref(0, 64144);

const __ksymtab_team_mode_register: ref;

axiom __ksymtab_team_mode_register == $sub.ref(0, 65184);

const __ksymtab_team_options_change_check: ref;

axiom __ksymtab_team_options_change_check == $sub.ref(0, 66224);

const __ksymtab_team_option_inst_set_change: ref;

axiom __ksymtab_team_option_inst_set_change == $sub.ref(0, 67264);

const __ksymtab_team_options_unregister: ref;

axiom __ksymtab_team_options_unregister == $sub.ref(0, 68304);

const __ksymtab_team_options_register: ref;

axiom __ksymtab_team_options_register == $sub.ref(0, 69344);

const __ksymtab_team_modeop_port_change_dev_addr: ref;

axiom __ksymtab_team_modeop_port_change_dev_addr == $sub.ref(0, 70384);

const {:count 52} .str.1: ref;

axiom .str.1 == $sub.ref(0, 71460);

const {:count 22} .str.3: ref;

axiom .str.3 == $sub.ref(0, 72506);

const {:count 203} .str.2: ref;

axiom .str.2 == $sub.ref(0, 73733);

const {:count 24} .str.4: ref;

axiom .str.4 == $sub.ref(0, 74781);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 75820);

const {:count 9} .str.24: ref;

axiom .str.24 == $sub.ref(0, 76853);

const {:count 5} .str.43: ref;

axiom .str.43 == $sub.ref(0, 77882);

const {:count 19} .str.44: ref;

axiom .str.44 == $sub.ref(0, 78925);

const {:count 22} .str.45: ref;

axiom .str.45 == $sub.ref(0, 79971);

const {:count 19} .str.46: ref;

axiom .str.46 == $sub.ref(0, 81014);

const {:count 22} .str.47: ref;

axiom .str.47 == $sub.ref(0, 82060);

const {:count 8} .str.48: ref;

axiom .str.48 == $sub.ref(0, 83092);

const {:count 12} .str.49: ref;

axiom .str.49 == $sub.ref(0, 84128);

const {:count 20} .str.50: ref;

axiom .str.50 == $sub.ref(0, 85172);

const {:count 9} .str.51: ref;

axiom .str.51 == $sub.ref(0, 86205);

const {:count 9} .str.52: ref;

axiom .str.52 == $sub.ref(0, 87238);

const {:count 5} .str.9: ref;

axiom .str.9 == $sub.ref(0, 88267);

const {:count 36} .str.25: ref;

axiom .str.25 == $sub.ref(0, 89327);

const {:count 19} .str.26: ref;

axiom .str.26 == $sub.ref(0, 90370);

const {:count 9} .str.27: ref;

axiom .str.27 == $sub.ref(0, 91403);

const {:count 10} .str.28: ref;

axiom .str.28 == $sub.ref(0, 92437);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 44} .str.53: ref;

axiom .str.53 == $sub.ref(0, 93505);

const {:count 50} .str.54: ref;

axiom .str.54 == $sub.ref(0, 94579);

const {:count 21} .str.55: ref;

axiom .str.55 == $sub.ref(0, 95624);

const {:count 31} .str.56: ref;

axiom .str.56 == $sub.ref(0, 96679);

const {:count 22} .str.57: ref;

axiom .str.57 == $sub.ref(0, 97725);

const {:count 13} .str.58: ref;

axiom .str.58 == $sub.ref(0, 98762);

const {:count 25} .str.30: ref;

axiom .str.30 == $sub.ref(0, 99811);

const {:count 44} .str.32: ref;

axiom .str.32 == $sub.ref(0, 100879);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 42} .str.31: ref;

axiom .str.31 == $sub.ref(0, 101945);

const {:count 47} .str.33: ref;

axiom .str.33 == $sub.ref(0, 103016);

const {:count 24} .str.34: ref;

axiom .str.34 == $sub.ref(0, 104064);

const {:count 62} .str.29: ref;

axiom .str.29 == $sub.ref(0, 105150);

const {:count 45} .str.35: ref;

axiom .str.35 == $sub.ref(0, 106219);

const {:count 78} .str.5: ref;

axiom .str.5 == $sub.ref(0, 107321);

const {:count 46} .str.6: ref;

axiom .str.6 == $sub.ref(0, 108391);

const {:count 62} .str.7: ref;

axiom .str.7 == $sub.ref(0, 109477);

const {:count 62} .str.8: ref;

axiom .str.8 == $sub.ref(0, 110563);

const {:count 14} .str.10: ref;

axiom .str.10 == $sub.ref(0, 111601);

const {:count 30} .str.11: ref;

axiom .str.11 == $sub.ref(0, 112655);

const {:count 37} .str.12: ref;

axiom .str.12 == $sub.ref(0, 113716);

const {:count 26} .str.13: ref;

axiom .str.13 == $sub.ref(0, 114766);

const {:count 37} .str.14: ref;

axiom .str.14 == $sub.ref(0, 115827);

const {:count 39} .str.15: ref;

axiom .str.15 == $sub.ref(0, 116890);

const {:count 41} .str.16: ref;

axiom .str.16 == $sub.ref(0, 117955);

const {:count 36} .str.17: ref;

axiom .str.17 == $sub.ref(0, 119015);

const {:count 42} .str.18: ref;

axiom .str.18 == $sub.ref(0, 120081);

const {:count 22} .str.19: ref;

axiom .str.19 == $sub.ref(0, 121127);

const this_cpu_off: ref;

axiom this_cpu_off == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 41} .str.23: ref;

axiom .str.23 == $sub.ref(0, 122192);

const {:count 23} .str.22: ref;

axiom .str.22 == $sub.ref(0, 123239);

const {:count 32} .str.20: ref;

axiom .str.20 == $sub.ref(0, 124295);

const {:count 31} .str.21: ref;

axiom .str.21 == $sub.ref(0, 125350);

const __per_cpu_offset: ref;

axiom __per_cpu_offset == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const cpu_possible_mask: ref;

axiom cpu_possible_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 24} .str.38: ref;

axiom .str.38 == $sub.ref(0, 126398);

const {:count 31} .str.61: ref;

axiom .str.61 == $sub.ref(0, 127453);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 34} .str.36: ref;

axiom .str.36 == $sub.ref(0, 128511);

const {:count 12} .str.37: ref;

axiom .str.37 == $sub.ref(0, 129547);

const {:count 27} .str.59: ref;

axiom .str.59 == $sub.ref(0, 130598);

const {:count 27} .str.60: ref;

axiom .str.60 == $sub.ref(0, 131649);

const {:count 34} .str.41: ref;

axiom .str.41 == $sub.ref(0, 132707);

const {:count 35} .str.42: ref;

axiom .str.42 == $sub.ref(0, 133766);

const {:count 34} .str.39: ref;

axiom .str.39 == $sub.ref(0, 134824);

const {:count 35} .str.40: ref;

axiom .str.40 == $sub.ref(0, 135883);

const {:count 10} .str.62: ref;

axiom .str.62 == $sub.ref(0, 136917);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 137949);

const {:count 3} .str.1.138: ref;

axiom .str.1.138 == $sub.ref(0, 138976);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 140014);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 141042);

const team_modeop_port_enter: ref;

axiom team_modeop_port_enter == $sub.ref(0, 142074);

procedure team_modeop_port_enter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_modeop_port_enter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i2 := team_port_set_team_dev_addr($p0, $p1);
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 143106);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const team_port_set_team_dev_addr: ref;

axiom team_port_set_team_dev_addr == $sub.ref(0, 144138);

procedure team_port_set_team_dev_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_set_team_dev_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i8 := __set_port_dev_addr($p3, $p7);
    call {:si_unique_call 3} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const __set_port_dev_addr: ref;

axiom __set_port_dev_addr == $sub.ref(0, 145170);

procedure __set_port_dev_addr($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __set_port_dev_addr($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i64;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $i11: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i64($i6);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 5} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p4, $p1, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(564, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i9);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i11 := dev_set_mac_address($p0, $p2);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 146202);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const dev_set_mac_address: ref;

axiom dev_set_mac_address == $sub.ref(0, 147234);

procedure dev_set_mac_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_mac_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 9} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const team_modeop_port_change_dev_addr: ref;

axiom team_modeop_port_change_dev_addr == $sub.ref(0, 148266);

procedure team_modeop_port_change_dev_addr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_modeop_port_change_dev_addr($p0: ref, $p1: ref)
{
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} vslice_dummy_var_29 := team_port_set_team_dev_addr($p0, $p1);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    return;
}



const team_options_register: ref;

axiom team_options_register == $sub.ref(0, 149298);

procedure team_options_register($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_options_register($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} {:cexpr "team_options_register:arg:option_count"} boogie_si_record_i64($i2);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i3 := __team_options_register($p0, $p1, $i2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 13} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} __team_options_change_check($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const __team_options_register: ref;

axiom __team_options_register == $sub.ref(0, 150330);

procedure __team_options_register($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_options_register($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p20: ref;
  var $p21: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p10: ref;
  var $i11: i32;
  var $i35: i1;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $i51: i1;
  var $i36: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i55: i32;
  var $i61: i32;
  var $i62: i32;
  var $i18: i32;
  var $i19: i32;
  var $i63: i32;
  var $i64: i1;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i65: i32;
  var $p72: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} {:cexpr "__team_options_register:arg:option_count"} boogie_si_record_i64($i2);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i3 := $mul.i64($i2, 8);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p4 := kzalloc($i3, 208);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $ult.i64(0, $i2);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $ult.i64(0, $i2);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p5);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} kfree($p52);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb23;

  $bb23:
    call $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $i36 := __team_options_register_loop_$bb23($p0, $i2, $p5, $i37, $p38, $p39, $i40, $i41, $i42, $i43, $i44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $i36);
    goto $bb23_last;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p5, $mul.ref($i37, 8));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i40 := __team_option_inst_add_option($p0, $p39);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 22} {:cexpr "err"} boogie_si_record_i32($i40);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i36, $i40;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i36);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p5, $mul.ref($i44, 8));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(328, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} list_add_tail($p47, $p48);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i36, 1);
    call {:si_unique_call 25} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i51 := $ult.i64($i50, $i2);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i49;
    goto $bb29_dummy;

  $bb25:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i42, 1);
    call {:si_unique_call 23} {:cexpr "i"} boogie_si_record_i32($i53);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i54 := $sge.i32($i53, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i2);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i61, 1);
    call {:si_unique_call 29} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i62, $i43;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i18, 1);
    call {:si_unique_call 18} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i64 := $sge.i32($i63, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p5);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} kfree($p72);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb3;

  $bb40:
    assume $i64 == 1;
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i65 := $i63;
    goto $bb43;

  $bb43:
    call $i66, $p67, $p68, $p69, $i70, $i71, $i65 := __team_options_register_loop_$bb43($p5, $i66, $p67, $p68, $p69, $i70, $i71, $i65);
    goto $bb43_last;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p5, $mul.ref($i66, 8));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} kfree($p69);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i65, 1);
    call {:si_unique_call 31} {:cexpr "i"} boogie_si_record_i32($i70);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i71 := $sge.i32($i70, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i71 == 1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb45:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i65 := $i70;
    goto $bb45_dummy;

  $bb32:
    assume $i54 == 1;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb35;

  $bb35:
    call $i56, $p57, $p58, $i59, $i60, $i55 := __team_options_register_loop_$bb35($p0, $p5, $i56, $p57, $p58, $i59, $i60, $i55);
    goto $bb35_last;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p5, $mul.ref($i56, 8));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} __team_option_inst_del_option($p0, $p58);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32($i55, 1);
    call {:si_unique_call 28} {:cexpr "i"} boogie_si_record_i32($i59);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i60 := $sge.i32($i59, 0);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i60 == 1);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb37:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i55 := $i59;
    goto $bb37_dummy;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p10, $i11 := $p1, 0;
    goto $bb8;

  $bb8:
    call $p12, $p13, $p14, $i15, $i16, $i17, $p20, $p21, $i23, $p24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p10, $i11 := __team_options_register_loop_$bb8($p0, $i2, $p5, $p12, $p13, $p14, $i15, $i16, $i17, $p20, $p21, $i23, $p24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p10, $i11);
    goto $bb8_last;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p14 := __team_find_option($p0, $p13);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i17 := $i11;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p10);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p21 := kmemdup($p20, 64, 208);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i11);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p5, $mul.ref($i23, 8));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p21);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i11);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p5, $mul.ref($i25, 8));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i30 := $i11;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i11, 1);
    call {:si_unique_call 20} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p10, $mul.ref(1, 64));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i34 := $ult.i64($i33, $i2);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb17:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p10, $i11 := $p32, $i31;
    goto $bb17_dummy;

  $bb14:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i30, $sub.i32(0, 12);
    goto $bb12;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i17, $sub.i32(0, 17);
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb45_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  $bb37_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  $bb29_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_57;
}



const __team_options_change_check: ref;

axiom __team_options_change_check == $sub.ref(0, 151362);

procedure __team_options_change_check($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_options_change_check($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p13: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1)), $mul.ref(0, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, $i11);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i25 := team_nl_send_event_options_get($p0, $p1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 36} {:cexpr "err"} boogie_si_record_i32($i25);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i25, $sub.i32(0, 3));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb15:
    assume $i27 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} netdev_warn.ref.ref.i32($p29, .str.1, $i25);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    goto $bb4;

  $bb4:
    call $p14, $i15, $i16, $p17, $p19, $p20, $p21, $p22, $i23, $i24, $p13 := __team_options_change_check_loop_$bb4($p1, $i11, $p14, $i15, $i16, $p17, $p19, $p20, $p21, $p22, $i23, $i24, $p13);
    goto $bb4_last;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i11);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p20;
    goto $bb9_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} list_add_tail($p17, $p1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 152394);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __list_add($p0, $p3, $p1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    return;
}



const team_nl_send_event_options_get: ref;

axiom team_nl_send_event_options_get == $sub.ref(0, 153426);

procedure team_nl_send_event_options_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_send_event_options_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i2 := team_nl_send_options_get($p0, 0, 0, 0, team_nl_send_multicast, $p1);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 40} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const netdev_warn: ref;

axiom netdev_warn == $sub.ref(0, 154458);

procedure netdev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation netdev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    return;
}



const team_nl_send_multicast: ref;

axiom team_nl_send_multicast == $sub.ref(0, 155490);

procedure team_nl_send_multicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_nl_send_multicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} {:cexpr "team_nl_send_multicast:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p5 := dev_net($p4);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i6 := genlmsg_multicast_netns(team_nl_family, $p5, $p0, 0, 0, 208);
    call {:si_unique_call 44} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const team_nl_send_options_get: ref;

axiom team_nl_send_options_get == $sub.ref(0, 156522);

procedure team_nl_send_options_get($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_send_options_get($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i13: i32;
  var $p14: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $p53: ref;
  var $i54: i32;
  var $i62: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $i44: i32;
  var $p45: ref;
  var $p71: ref;
  var $p43: ref;
  var $p60: ref;
  var $i61: i8;
  var $p72: ref;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $p33: ref;
  var $p58: ref;
  var $i59: i32;
  var $p91: ref;
  var $p92: ref;
  var $i19: i32;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 46} {:cexpr "team_nl_send_options_get:arg:portid"} boogie_si_record_i32($i1);
    call {:si_unique_call 47} {:cexpr "team_nl_send_options_get:arg:seq"} boogie_si_record_i32($i2);
    call {:si_unique_call 48} {:cexpr "team_nl_send_options_get:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 16), 64));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $i11 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 50} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p14 := $p10;
    goto $bb4;

  $bb4:
    call $p15, $i16, $i17, $i18, $p14, $p20, $i21, $p22, $i23, $i24, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $i55, $p56, $i57, $p53, $i54, $i62, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $i44, $p45, $p71, $p43, $p60, $i61, $p72, $p74, $i75, $p76, vslice_dummy_var_30 := team_nl_send_options_get_loop_$bb4($p0, $i1, $i2, $i3, $p4, $p5, $p6, $p15, $i16, $i17, $i18, $p14, $p20, $i21, $p22, $i23, $i24, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $p34, $p35, $i36, $i37, $p38, $p39, $i40, $i41, $i42, $p46, $i47, $i48, $p49, $i50, $i51, $i52, $i55, $p56, $i57, $p53, $i54, $i62, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $i44, $p45, $p71, $p43, $p60, $i61, $p72, $p74, $i75, $p76, vslice_dummy_var_30);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p6);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i3, 2);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p22 := genlmsg_put($p20, $i1, $i2, team_nl_family, $i21, 2);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p6);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i30 := nla_put_u32($p25, 1, $i29);
    call {:si_unique_call 55} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p32 := $p22;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p6);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p35 := nla_nest_start($p34, 2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p38 := $p22;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p14, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p5);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i40, $i41);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p43 := $p14;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p60, $i61 := $p43, 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p6);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_30 := nla_nest_end($p72, $p35);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p6);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} genlmsg_end($p74, $p22);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i61);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p15, $p76 := $p60, $p22;
    assume true;
    goto $bb5, $bb39;

  $bb39:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p6);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i78 := $or.i32($i3, 2);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p79 := nlmsg_put($p77, $i1, $i2, 3, 0, $i78);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p6);
    call {:si_unique_call 68} $i90 := devirtbounce($p4, $p89, $p0, $i1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 69} {:cexpr "tmp___0"} boogie_si_record_i32($i90);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i19 := $i90;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i81 == 1;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    call $i82, $i83, $i84, $p85, $p86, $i87, $i88 := team_nl_send_options_get_loop_$bb44($p0, $i1, $i2, $p4, $p6, $i78, $i82, $i83, $i84, $p85, $p86, $i87, $i88);
    goto $bb44_last;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 66} {:cexpr "err"} boogie_si_record_i32($i82);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p6);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p86 := nlmsg_put($p85, $i1, $i2, 3, 0, $i78);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i88 == 1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb48_dummy;

  $bb45:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p76, $i84;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p6);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} genlmsg_cancel($p91, $p58);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p6);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} nlmsg_free($p92);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i19 := $i59;
    goto $bb8;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i16 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 52} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p14 := $p15;
    goto $bb7_dummy;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i19 := $i13;
    goto $bb8;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i44, $p45 := 0, $p14;
    goto $bb23;

  $bb23:
    call $p46, $i47, $i48, $p49, $i50, $i51, $i62, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $i44, $p45, $p71 := team_nl_send_options_get_loop_$bb23($p0, $p6, $i41, $p46, $i47, $i48, $p49, $i50, $i51, $i62, $p64, $p65, $p66, $p67, $p68, $i69, $i70, $i44, $p45, $p71);
    goto $bb23_last;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p6);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i47 := team_nl_fill_one_option_get($p46, $p0, $p45);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 58} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p49, $i50, $i51 := $p45, $i44, $i47;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i44, 1);
    call {:si_unique_call 63} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref($sub.ref(0, 16), 64));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref($sub.ref(0, 16), 64)), $mul.ref(16, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, $i41);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p71 := $p67;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p43 := $p71;
    goto $bb22;

  $bb36:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i44, $p45 := $i62, $p67;
    goto $bb36_dummy;

  $bb25:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, $sub.i32(0, 90));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p53, $i54 := $p22, $i51;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p53, $i54;
    goto $bb31;

  $bb27:
    assume $i52 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i50, 0);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p56, $i57 := $p22, $i51;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p60, $i61 := $p49, 1;
    goto $bb33;

  $bb29:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p56, $i57;
    goto $bb31;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p33 := $p38;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p58, $i59 := $p33, $sub.i32(0, 90);
    goto $bb31;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb15;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 90);
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb48_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i82 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    goto SeqInstr_25, SeqInstr_26;

  $bb36_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_276;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const __send_and_alloc_skb: ref;

axiom __send_and_alloc_skb == $sub.ref(0, 157554);

procedure __send_and_alloc_skb($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __send_and_alloc_skb($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "__send_and_alloc_skb:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $p11 := genlmsg_new(3756, 208);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $p11);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb5;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p0);
    call {:si_unique_call 71} $i8 := devirtbounce($p3, $p7, $p1, $i2);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 72} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb5;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const genlmsg_put: ref;

axiom genlmsg_put == $sub.ref(0, 158586);

procedure genlmsg_put($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i8) returns ($r: ref);
  free requires assertsPassed;



implementation genlmsg_put($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i8) returns ($r: ref)
{
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} {:cexpr "genlmsg_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 75} {:cexpr "genlmsg_put:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 76} {:cexpr "genlmsg_put:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 77} {:cexpr "genlmsg_put:arg:arg5"} boogie_si_record_i8($i5);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p6 := external_alloc();
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const nla_put_u32: ref;

axiom nla_put_u32 == $sub.ref(0, 159618);

procedure nla_put_u32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nla_put_u32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 80} {:cexpr "nla_put_u32:arg:attrtype"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i5 := nla_put($p0, $i1, 4, $p4);
    call {:si_unique_call 82} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const nla_nest_start: ref;

axiom nla_nest_start == $sub.ref(0, 160650);

procedure nla_nest_start($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nla_nest_start($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} {:cexpr "nla_nest_start:arg:attrtype"} boogie_si_record_i32($i1);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i4 := nla_put($p0, $i1, 0, $0.ref);
    call {:si_unique_call 86} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $p2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const team_nl_fill_one_option_get: ref;

axiom team_nl_fill_one_option_get == $sub.ref(0, 161682);

procedure team_nl_fill_one_option_get($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_fill_one_option_get($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i10: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i8 := team_option_get($p1, $p2, $p3);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 89} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p11 := nla_nest_start($p0, 1);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i16 := nla_put_string($p0, 1, $p15);
    call {:si_unique_call 92} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    call {:si_unique_call 118} devirtbounce.1(0, .str.2, 2284, 12);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    call team_nl_fill_one_option_get_loop_$bb73();
    goto $bb73_last;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i81 := nla_put_u8($p0, 3, 14);
    call {:si_unique_call 103} {:cexpr "tmp___10"} boogie_si_record_i32($i81);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i86 := nla_put_s32($p0, 4, $i85);
    call {:si_unique_call 117} {:cexpr "tmp___11"} boogie_si_record_i32($i86);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1($i89);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i8.i1($i94);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} vslice_dummy_var_31 := nla_nest_end($p0, $p11);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb80:
    assume $i95 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i96 := nla_put_flag($p0, 2);
    call {:si_unique_call 122} {:cexpr "tmp___13"} boogie_si_record_i32($i96);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i97 == 1;
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} nla_nest_cancel($p0, $p11);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 90);
    goto $bb3;

  $bb74:
    assume $i90 == 1;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i91 := nla_put_flag($p0, 5);
    call {:si_unique_call 120} {:cexpr "tmp___12"} boogie_si_record_i32($i91);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i92 == 1;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb69:
    assume $i87 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb66:
    assume $i82 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $i73 := nla_put_u8($p0, 3, 6);
    call {:si_unique_call 101} {:cexpr "tmp___8"} boogie_si_record_i32($i73);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i8.i1($i77);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb60:
    assume $i78 == 1;
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i79 := nla_put_flag($p0, 4);
    call {:si_unique_call 115} {:cexpr "tmp___9"} boogie_si_record_i32($i79);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i80 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb57:
    assume $i74 == 1;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb27:
    assume $i42 == 1;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i61 := nla_put_u8($p0, 3, 11);
    call {:si_unique_call 99} {:cexpr "tmp___6"} boogie_si_record_i32($i61);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i71 := nla_put($p0, 4, $i66, $p70);
    call {:si_unique_call 113} {:cexpr "tmp___7"} boogie_si_record_i32($i71);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb54:
    assume $i72 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb51:
    assume $i62 == 1;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb25:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i54 := nla_put_u8($p0, 3, 5);
    call {:si_unique_call 105} {:cexpr "tmp___4"} boogie_si_record_i32($i54);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i59 := nla_put_string($p0, 4, $p58);
    call {:si_unique_call 111} {:cexpr "tmp___5"} boogie_si_record_i32($i59);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48:
    assume $i60 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb45:
    assume $i55 == 1;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb34:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb33;

  $bb36:
    assume $i46 == 1;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i47 := nla_put_u8($p0, 3, 3);
    call {:si_unique_call 107} {:cexpr "tmp___2"} boogie_si_record_i32($i47);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i52 := nla_put_u32($p0, 4, $i51);
    call {:si_unique_call 109} {:cexpr "tmp___3"} boogie_si_record_i32($i52);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i53 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb38:
    assume $i48 == 1;
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb18:
    assume $i34 == 1;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i37 := nla_put_u32($p0, 7, $i36);
    call {:si_unique_call 97} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i21 == 1;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i28 := nla_put_u32($p0, 6, $i27);
    call {:si_unique_call 95} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 90);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb73_dummy:
    assume false;
    return;

  $bb73_last:
    assume {:verifier.code 0} true;
    goto $bb73_dummy;
}



const nla_nest_end: ref;

axiom nla_nest_end == $sub.ref(0, 162714);

procedure nla_nest_end($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nla_nest_end($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $i6: i64;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i16($i6);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i5, $i8);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const genlmsg_end: ref;

axiom genlmsg_end == $sub.ref(0, 163746);

procedure genlmsg_end($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation genlmsg_end($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 20), 16));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} nlmsg_end($p0, $p3);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    return;
}



const nlmsg_put: ref;

axiom nlmsg_put == $sub.ref(0, 164778);

procedure nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} {:cexpr "nlmsg_put:arg:portid"} boogie_si_record_i32($i1);
    call {:si_unique_call 127} {:cexpr "nlmsg_put:arg:seq"} boogie_si_record_i32($i2);
    call {:si_unique_call 128} {:cexpr "nlmsg_put:arg:type"} boogie_si_record_i32($i3);
    call {:si_unique_call 129} {:cexpr "nlmsg_put:arg:payload"} boogie_si_record_i32($i4);
    call {:si_unique_call 130} {:cexpr "nlmsg_put:arg:flags"} boogie_si_record_i32($i5);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i6 := skb_tailroom($p0);
    call {:si_unique_call 132} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i7 := nlmsg_total_size($i4);
    call {:si_unique_call 134} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, $i7);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 136} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p14 := __nlmsg_put($p0, $i1, $i2, $i3, $i4, $i5);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p13 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb3;
}



const genlmsg_cancel: ref;

axiom genlmsg_cancel == $sub.ref(0, 165810);

procedure genlmsg_cancel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation genlmsg_cancel($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 20), 16));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} nlmsg_cancel($p0, $p5);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const nlmsg_free: ref;

axiom nlmsg_free == $sub.ref(0, 166842);

procedure nlmsg_free($p0: ref);
  free requires assertsPassed;



implementation nlmsg_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} kfree_skb($p0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    return;
}



const kfree_skb: ref;

axiom kfree_skb == $sub.ref(0, 167874);

procedure kfree_skb($p0: ref);
  free requires assertsPassed;



implementation kfree_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    return;
}



const nlmsg_cancel: ref;

axiom nlmsg_cancel == $sub.ref(0, 168906);

procedure nlmsg_cancel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nlmsg_cancel($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} nlmsg_trim($p0, $p2);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    return;
}



const nlmsg_trim: ref;

axiom nlmsg_trim == $sub.ref(0, 169938);

procedure nlmsg_trim($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nlmsg_trim($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i19: i64;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $i25: i32;
  var vslice_dummy_var_32: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i64($i6, $i7);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 141} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 143} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} vslice_dummy_var_32 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i19);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i20, $i24);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} skb_trim($p0, $i25);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} warn_slowpath_null(.str.3, 523);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 170970);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 148} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 172002);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    return;
}



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 173034);

procedure skb_trim($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation skb_trim($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "skb_trim:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    return;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 174066);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 152} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const nlmsg_total_size: ref;

axiom nlmsg_total_size == $sub.ref(0, 175098);

procedure nlmsg_total_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_total_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} {:cexpr "nlmsg_total_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i1 := nlmsg_msg_size($i0);
    call {:si_unique_call 155} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 4));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __nlmsg_put: ref;

axiom __nlmsg_put == $sub.ref(0, 176130);

procedure __nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "__nlmsg_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 157} {:cexpr "__nlmsg_put:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 158} {:cexpr "__nlmsg_put:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 159} {:cexpr "__nlmsg_put:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 160} {:cexpr "__nlmsg_put:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p6 := external_alloc();
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 177162);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 1} true;
    call {:si_unique_call 162} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 163} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const nlmsg_msg_size: ref;

axiom nlmsg_msg_size == $sub.ref(0, 178194);

procedure nlmsg_msg_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_msg_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} {:cexpr "nlmsg_msg_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 16);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 179226);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nlmsg_end: ref;

axiom nlmsg_end == $sub.ref(0, 180258);

procedure nlmsg_end($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation nlmsg_end($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p2 := skb_tail_pointer($p0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i4, $i6);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    return;
}



const skb_tail_pointer: ref;

axiom skb_tail_pointer == $sub.ref(0, 181290);

procedure skb_tail_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_tail_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const team_option_get: ref;

axiom team_option_get == $sub.ref(0, 182322);

procedure team_option_get($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_option_get($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 166} $i14 := devirtbounce.2($p13, $p0, $p2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 167} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const nla_put_string: ref;

axiom nla_put_string == $sub.ref(0, 183354);

procedure nla_put_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_put_string($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} {:cexpr "nla_put_string:arg:attrtype"} boogie_si_record_i32($i1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i3 := strlen($p2);
    call {:si_unique_call 170} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i6 := nla_put($p0, $i1, $i5, $p2);
    call {:si_unique_call 172} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const nla_put_u8: ref;

axiom nla_put_u8 == $sub.ref(0, 184386);

procedure nla_put_u8($p0: ref, $i1: i32, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nla_put_u8($p0: ref, $i1: i32, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 174} {:cexpr "nla_put_u8:arg:attrtype"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i2);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i4 := nla_put($p0, $i1, 1, $p3);
    call {:si_unique_call 176} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_put: ref;

axiom nla_put == $sub.ref(0, 185418);

procedure nla_put($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_put($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 177} {:cexpr "nla_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 178} {:cexpr "nla_put:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_put_flag: ref;

axiom nla_put_flag == $sub.ref(0, 186450);

procedure nla_put_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nla_put_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "nla_put_flag:arg:attrtype"} boogie_si_record_i32($i1);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i2 := nla_put($p0, $i1, 0, $0.ref);
    call {:si_unique_call 183} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const nla_put_s32: ref;

axiom nla_put_s32 == $sub.ref(0, 187482);

procedure nla_put_s32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation nla_put_s32($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 185} {:cexpr "nla_put_s32:arg:attrtype"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i5 := nla_put($p0, $i1, 4, $p4);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const nla_nest_cancel: ref;

axiom nla_nest_cancel == $sub.ref(0, 188514);

procedure nla_nest_cancel($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation nla_nest_cancel($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} nlmsg_trim($p0, $p2);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 189546);

procedure strlen($p0: ref) returns ($r: i64);



const genlmsg_new: ref;

axiom genlmsg_new == $sub.ref(0, 190578);

procedure genlmsg_new($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation genlmsg_new($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} {:cexpr "genlmsg_new:arg:payload"} boogie_si_record_i64($i0);
    call {:si_unique_call 190} {:cexpr "genlmsg_new:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i3 := genlmsg_total_size($i2);
    call {:si_unique_call 192} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p5 := nlmsg_new($i4, $i1);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const genlmsg_total_size: ref;

axiom genlmsg_total_size == $sub.ref(0, 191610);

procedure genlmsg_total_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation genlmsg_total_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} {:cexpr "genlmsg_total_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i1 := genlmsg_msg_size($i0);
    call {:si_unique_call 196} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 4));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const nlmsg_new: ref;

axiom nlmsg_new == $sub.ref(0, 192642);

procedure nlmsg_new($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nlmsg_new($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} {:cexpr "nlmsg_new:arg:payload"} boogie_si_record_i64($i0);
    call {:si_unique_call 198} {:cexpr "nlmsg_new:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i3 := nlmsg_total_size($i2);
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p4 := alloc_skb($i3, $i1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const alloc_skb: ref;

axiom alloc_skb == $sub.ref(0, 193674);

procedure alloc_skb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_skb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} {:cexpr "alloc_skb:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 203} {:cexpr "alloc_skb:arg:priority"} boogie_si_record_i32($i1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p2 := __alloc_skb($i0, $i1, 0, $sub.i32(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __alloc_skb: ref;

axiom __alloc_skb == $sub.ref(0, 194706);

procedure __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_skb($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} {:cexpr "__alloc_skb:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 206} {:cexpr "__alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 207} {:cexpr "__alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 208} {:cexpr "__alloc_skb:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p4 := external_alloc();
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const genlmsg_msg_size: ref;

axiom genlmsg_msg_size == $sub.ref(0, 195738);

procedure genlmsg_msg_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation genlmsg_msg_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "genlmsg_msg_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 4);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_net: ref;

axiom dev_net == $sub.ref(0, 196770);

procedure dev_net($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_net($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1336, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p2 := read_pnet($p1);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const genlmsg_multicast_netns: ref;

axiom genlmsg_multicast_netns == $sub.ref(0, 197802);

procedure genlmsg_multicast_netns($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation genlmsg_multicast_netns($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} {:cexpr "genlmsg_multicast_netns:arg:portid"} boogie_si_record_i32($i3);
    call {:si_unique_call 213} {:cexpr "genlmsg_multicast_netns:arg:group"} boogie_si_record_i32($i4);
    call {:si_unique_call 214} {:cexpr "genlmsg_multicast_netns:arg:flags"} boogie_si_record_i32($i5);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(100, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.2, $p6);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i7, $i4);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 215} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i9);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 217} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i9, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 225} {:cexpr "tmp___2"} boogie_si_record_i64($i31);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.2, $p34);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $i4);
    call {:si_unique_call 226} {:cexpr "group"} boogie_si_record_i32($i36);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 6648)), $mul.ref(464, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i39 := nlmsg_multicast($p38, $p2, $i3, $i36, $i5);
    call {:si_unique_call 228} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i33 := $i39;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb12;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1(1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i16 := $xor.i1($i15, 1);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 218} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i17);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 220} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 223} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} warn_slowpath_null(.str.4, 297);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const nlmsg_multicast: ref;

axiom nlmsg_multicast == $sub.ref(0, 198834);

procedure nlmsg_multicast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation nlmsg_multicast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} {:cexpr "nlmsg_multicast:arg:portid"} boogie_si_record_i32($i2);
    call {:si_unique_call 230} {:cexpr "nlmsg_multicast:arg:group"} boogie_si_record_i32($i3);
    call {:si_unique_call 231} {:cexpr "nlmsg_multicast:arg:flags"} boogie_si_record_i32($i4);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i3);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i8 := netlink_broadcast($p0, $p1, $i2, $i3, $i4);
    call {:si_unique_call 233} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const netlink_broadcast: ref;

axiom netlink_broadcast == $sub.ref(0, 199866);

procedure netlink_broadcast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netlink_broadcast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 234} {:cexpr "netlink_broadcast:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 235} {:cexpr "netlink_broadcast:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 236} {:cexpr "netlink_broadcast:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 237} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 238} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const read_pnet: ref;

axiom read_pnet == $sub.ref(0, 200898);

procedure read_pnet($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation read_pnet($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 201930);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 202962);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 240} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __team_find_option: ref;

axiom __team_find_option == $sub.ref(0, 203994);

procedure __team_find_option($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __team_find_option($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p11: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(328, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $i15, $p16, $p19, $p20, $p21, $p22, $i23, $i24, $p11 := __team_find_option_loop_$bb4($p1, $i9, $p12, $p13, $i14, $i15, $p16, $p19, $p20, $p21, $p22, $i23, $i24, $p11);
    goto $bb4_last;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i14 := strcmp($p13, $p1);
    call {:si_unique_call 243} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p16 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i9);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p20;
    goto $bb10_dummy;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 205026);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 245} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $p3 := external_alloc();
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __team_option_inst_add_option: ref;

axiom __team_option_inst_add_option == $sub.ref(0, 206058);

procedure __team_option_inst_add_option($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_option_inst_add_option($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i5 := __team_option_inst_add($p0, $p1, $0.ref);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 248} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __team_option_inst_del_option($p0, $p1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb8;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 207090);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} free_($p0);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    return;
}



const __team_option_inst_del_option: ref;

axiom __team_option_inst_del_option == $sub.ref(0, 208122);

procedure __team_option_inst_del_option($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __team_option_inst_del_option($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1)), $mul.ref(0, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $i20, $i21, $p23, $p24, $p26, $i27, $i28, $p15, $p16 := __team_option_inst_del_option_loop_$bb4($p1, $i13, $p17, $p18, $i19, $i20, $i21, $p23, $p24, $p26, $i27, $i28, $p15, $p16);
    goto $bb4_last;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p1);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i19, $i20);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i13);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p24, $p15;
    goto $bb9_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} __team_option_inst_del($p16);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_896;
}



const __team_option_inst_del: ref;

axiom __team_option_inst_del == $sub.ref(0, 209154);

procedure __team_option_inst_del($p0: ref);
  free requires assertsPassed;



implementation __team_option_inst_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} list_del($p1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} kfree($p2);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 210186);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 211218);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 254} $free($p0);
    return;
}



const __team_option_inst_add: ref;

axiom __team_option_inst_add == $sub.ref(0, 212250);

procedure __team_option_inst_add($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_option_inst_add($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i8: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 255} {:cexpr "array_size"} boogie_si_record_i32($i4);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i7 := $ult.i32(0, $i6);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb7;

  $bb7:
    call $p9, $p10, $i11, $i12, $p14, $p16, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $i8 := __team_option_inst_add_loop_$bb7($p0, $p1, $p2, $i6, $p9, $p10, $i11, $i12, $p14, $p16, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $i8);
    goto $bb7_last;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p9 := kmalloc(64, 208);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p2);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i8);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} list_add_tail($p21, $p22);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i8, 1);
    call {:si_unique_call 260} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i33, $i6);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb19:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i33;
    goto $bb19_dummy;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(40, 1));
    call {:si_unique_call 258} $i30 := devirtbounce.3($p28, $p0, $p29);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 259} {:cexpr "err"} boogie_si_record_i32($i30);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i13 := $i32;
    goto $bb11;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_936;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 213282);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 262} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 214314);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 265} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p2 := ldv_malloc($i0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 215346);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 1} true;
    call {:si_unique_call 268} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 269} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 270} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p4 := malloc($i0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 1} true;
    call {:si_unique_call 272} __VERIFIER_assume($i7);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 216378);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 273} $r := $malloc($i0);
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 217410);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const team_options_unregister: ref;

axiom team_options_unregister == $sub.ref(0, 218442);

procedure team_options_unregister($p0: ref, $p1: ref, $i2: i64);



const __team_options_mark_removed: ref;

axiom __team_options_mark_removed == $sub.ref(0, 219474);

procedure __team_options_mark_removed($p0: ref, $p1: ref, $i2: i64);



const __team_options_unregister: ref;

axiom __team_options_unregister == $sub.ref(0, 220506);

procedure __team_options_unregister($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation __team_options_unregister($p0: ref, $p1: ref, $i2: i64)
{
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} {:cexpr "__team_options_unregister:arg:option_count"} boogie_si_record_i64($i2);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i3 := $ult.i64(0, $i2);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i4, $p5 := 0, $p1;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $i9, $i10, $p11, $p12, $i13, $p14, $i15, $i16, $i4, $p5 := __team_options_unregister_loop_$bb4($p0, $i2, $p6, $p7, $p8, $i9, $i10, $p11, $p12, $i13, $p14, $i15, $i16, $i4, $p5);
    goto $bb4_last;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p8 := __team_find_option($p0, $p7);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 279} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p5, $mul.ref(1, 64));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i13);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i16 := $ult.i64($i15, $i2);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i4, $p5 := $i13, $p14;
    goto $bb9_dummy;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} __team_option_inst_del_option($p0, $p8);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} list_del($p11);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p8);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} kfree($p12);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1004;
}



const __team_option_inst_mark_removed_option: ref;

axiom __team_option_inst_mark_removed_option == $sub.ref(0, 221538);

procedure __team_option_inst_mark_removed_option($p0: ref, $p1: ref);



const team_option_inst_set_change: ref;

axiom team_option_inst_set_change == $sub.ref(0, 222570);

procedure team_option_inst_set_change($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_option_inst_set_change($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 40), 64)), $mul.ref(56, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 1);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    return;
}



const team_options_change_check: ref;

axiom team_options_change_check == $sub.ref(0, 223602);

procedure team_options_change_check($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_options_change_check($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} __team_options_change_check($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const team_mode_register: ref;

axiom team_mode_register == $sub.ref(0, 224634);

procedure team_mode_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_mode_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i22: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i3 := is_good_mode_name($p2);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 282} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i64($i9, 32);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p12 := kmalloc(24, 208);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} spin_lock(mode_list_lock);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p18 := __find_mode($p17);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} list_add_tail($p24, mode_list);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} spin_unlock(mode_list_lock);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p13);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} kfree($p21);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 17);
    goto $bb16;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const is_good_mode_name: ref;

axiom is_good_mode_name == $sub.ref(0, 225666);

procedure is_good_mode_name($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_good_mode_name($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p4: ref;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i2 := $sext.i8.i32($i1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb4;

  $bb4:
    call $i5, $i6, $i7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $i26, $i27, $i28, $p4 := is_good_mode_name_loop_$bb4($i5, $i6, $i7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $i26, $i27, $i28, $p4);
    goto $bb4_last;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i7, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 3);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p4, $mul.ref(1, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i27 := $sext.i8.i32($i26);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i28 == 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p25;
    goto $bb15_dummy;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p4);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i15, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 4);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p4);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i22 := $sext.i8.i32($i21);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 95);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb13;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1087;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 226698);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} _raw_spin_lock($p2);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    return;
}



const __find_mode: ref;

axiom __find_mode == $sub.ref(0, 227730);

procedure __find_mode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __find_mode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p6: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, mode_list);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $p2i.ref.i64(mode_list));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $p10, $i11, $i12, $p13, $p16, $p17, $p18, $p19, $i20, $i21, $p6 := __find_mode_loop_$bb4($p0, $p7, $p8, $p9, $p10, $i11, $i12, $p13, $p16, $p17, $p18, $p19, $i20, $i21, $p6);
    goto $bb4_last;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i11 := strcmp($p10, $p0);
    call {:si_unique_call 291} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, $p2i.ref.i64(mode_list));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p17;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 228762);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} _raw_spin_unlock($p2);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 229794);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 230826);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    return;
}



const team_mode_unregister: ref;

axiom team_mode_unregister == $sub.ref(0, 231858);

procedure team_mode_unregister($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mode_unregister($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} spin_lock(mode_list_lock);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $p3 := __find_mode($p2);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} spin_unlock(mode_list_lock);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} list_del_init($p6);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} kfree($p7);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 232890);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} __list_del_entry($p0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} INIT_LIST_HEAD($p0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 233922);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 234954);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    return;
}



const team_mode_option_get: ref;

axiom team_mode_option_get == $sub.ref(0, 235986);

procedure team_mode_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mode_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p5);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mode_option_set: ref;

axiom team_mode_option_set == $sub.ref(0, 237018);

procedure team_mode_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.24;



implementation team_mode_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i5 := team_change_mode($p0, $p4);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 301} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const team_notify_peers_count_get: ref;

axiom team_notify_peers_count_get == $sub.ref(0, 238050);

procedure team_notify_peers_count_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers_count_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_notify_peers_count_set: ref;

axiom team_notify_peers_count_set == $sub.ref(0, 239082);

procedure team_notify_peers_count_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers_count_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_notify_peers_interval_get: ref;

axiom team_notify_peers_interval_get == $sub.ref(0, 240114);

procedure team_notify_peers_interval_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers_interval_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_notify_peers_interval_set: ref;

axiom team_notify_peers_interval_set == $sub.ref(0, 241146);

procedure team_notify_peers_interval_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_notify_peers_interval_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mcast_rejoin_count_get: ref;

axiom team_mcast_rejoin_count_get == $sub.ref(0, 242178);

procedure team_mcast_rejoin_count_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin_count_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(0, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mcast_rejoin_count_set: ref;

axiom team_mcast_rejoin_count_set == $sub.ref(0, 243210);

procedure team_mcast_rejoin_count_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin_count_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(0, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mcast_rejoin_interval_get: ref;

axiom team_mcast_rejoin_interval_get == $sub.ref(0, 244242);

procedure team_mcast_rejoin_interval_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin_interval_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(4, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_mcast_rejoin_interval_set: ref;

axiom team_mcast_rejoin_interval_set == $sub.ref(0, 245274);

procedure team_mcast_rejoin_interval_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_mcast_rejoin_interval_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(4, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i4);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_port_en_option_get: ref;

axiom team_port_en_option_get == $sub.ref(0, 246306);

procedure team_port_en_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_port_en_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i6 := team_port_enabled($p5);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i6);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i9);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_port_en_option_set: ref;

axiom team_port_en_option_set == $sub.ref(0, 247338);

procedure team_port_en_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation team_port_en_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} team_port_disable($p0, $p5);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} team_port_enable($p0, $p5);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_user_linkup_option_get: ref;

axiom team_user_linkup_option_get == $sub.ref(0, 248370);

procedure team_user_linkup_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_user_linkup_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(0, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i9);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i12);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_user_linkup_option_set: ref;

axiom team_user_linkup_option_set == $sub.ref(0, 249402);

procedure team_user_linkup_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_user_linkup_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(0, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i9);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i12);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} team_refresh_port_linkup($p5);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} __team_carrier_check($p14);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_user_linkup_en_option_get: ref;

axiom team_user_linkup_en_option_get == $sub.ref(0, 250434);

procedure team_user_linkup_en_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_user_linkup_en_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(1, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i9);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i12);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_user_linkup_en_option_set: ref;

axiom team_user_linkup_en_option_set == $sub.ref(0, 251466);

procedure team_user_linkup_en_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_user_linkup_en_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(1, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i9);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i12);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} team_refresh_port_linkup($p5);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __team_carrier_check($p14);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_priority_option_get: ref;

axiom team_priority_option_get == $sub.ref(0, 252498);

procedure team_priority_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_priority_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i7);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_priority_option_set: ref;

axiom team_priority_option_set == $sub.ref(0, 253530);

procedure team_priority_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation team_priority_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 309} {:cexpr "priority"} boogie_si_record_i32($i8);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i8);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i8);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} team_queue_override_port_prio_changed($p0, $p5);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_queue_id_option_get: ref;

axiom team_queue_id_option_get == $sub.ref(0, 254562);

procedure team_queue_id_option_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_queue_id_option_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i8);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_queue_id_option_set: ref;

axiom team_queue_id_option_set == $sub.ref(0, 255594);

procedure team_queue_id_option_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation team_queue_id_option_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i16;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    call {:si_unique_call 311} {:cexpr "new_queue_id"} boogie_si_record_i16($i9);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i9);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i12, $i13);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i9);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i21 := $uge.i32($i16, $i20);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i9);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} team_queue_override_port_change_queue_id($p0, $p5, $i23);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;
}



const team_queue_override_port_change_queue_id: ref;

axiom team_queue_override_port_change_queue_id == $sub.ref(0, 256626);

procedure team_queue_override_port_change_queue_id($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation team_queue_override_port_change_queue_id($p0: ref, $p1: ref, $i2: i16)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} {:cexpr "team_queue_override_port_change_queue_id:arg:new_queue_id"} boogie_si_record_i16($i2);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i3 := team_port_enabled($p1);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 315} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __team_queue_override_port_del($p0, $p1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i2);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} __team_queue_override_port_add($p0, $p1);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} __team_queue_override_enabled_check($p0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_port_enabled: ref;

axiom team_port_enabled == $sub.ref(0, 257658);

procedure team_port_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_port_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __team_queue_override_port_del: ref;

axiom __team_queue_override_port_del == $sub.ref(0, 258690);

procedure __team_queue_override_port_del($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __team_queue_override_port_del($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} list_del_rcu($p6);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __team_queue_override_port_add: ref;

axiom __team_queue_override_port_add == $sub.ref(0, 259722);

procedure __team_queue_override_port_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __team_queue_override_port_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p20: ref;
  var $p21: ref;
  var $p36: ref;
  var $p19: ref;
  var $p26: ref;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $p10 := __team_get_qom_list($p0, $i9);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p10);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i16, $i17);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p19 := $p10;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $p19;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} list_add_tail_rcu($p37, $p26);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p20, $p21 := $p10, $p14;
    goto $bb8;

  $bb8:
    call $i22, $i23, $i24, $p25, $p27, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p20, $p21, $p36 := __team_queue_override_port_add_loop_$bb8($p1, $i17, $i22, $i23, $i24, $p25, $p27, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $p20, $p21, $p36);
    goto $bb8_last;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i22 := team_queue_override_port_has_gt_prio_than($p1, $p21);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 322} {:cexpr "tmp"} boogie_si_record_i8($i23);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p25 := $p20;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $i17);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p36 := $p27;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p19 := $p36;
    goto $bb7;

  $bb14:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $p20, $p21 := $p27, $p32;
    goto $bb14_dummy;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p26 := $p25;
    goto $bb12;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;
}



const __team_queue_override_enabled_check: ref;

axiom __team_queue_override_enabled_check == $sub.ref(0, 260754);

procedure __team_queue_override_enabled_check($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation __team_queue_override_enabled_check($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p12: ref;
  var $i17: i8;
  var $p26: ref;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $p52: ref;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(441, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i17);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i29, $i31);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.9);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.25);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p35, .str.2);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p36, .str.26);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.7, $p38);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 857);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p38, $i41);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p42, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.8, $p43);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i64($i47);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i17);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(441, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i53);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, $i55);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i17);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p52 := (if $i51 == 1 then .str.27 else .str.28);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} __dynamic_netdev_dbg.ref.ref.ref.ref($p1, $p50, .str.26, $p52);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb4;

  $bb4:
    call $p13, $i14, $i15, $i16, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $p12 := __team_queue_override_enabled_check_loop_$bb4($i10, $p13, $i14, $i15, $i16, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $p12);
    goto $bb4_last;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i10);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p22;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;
}



const __dynamic_netdev_dbg: ref;

axiom __dynamic_netdev_dbg == $sub.ref(0, 261786);

procedure __dynamic_netdev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    return;
}



const __team_get_qom_list: ref;

axiom __team_get_qom_list == $sub.ref(0, 262818);

procedure __team_get_qom_list($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation __team_get_qom_list($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} {:cexpr "__team_get_qom_list:arg:queue_id"} boogie_si_record_i16($i1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(448, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i64($i1);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 16));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const team_queue_override_port_has_gt_prio_than: ref;

axiom team_queue_override_port_has_gt_prio_than == $sub.ref(0, 263850);

procedure team_queue_override_port_has_gt_prio_than($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_queue_override_port_has_gt_prio_than($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, $i5);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(120, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i9, $i11);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, $i16);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;
}



const list_add_tail_rcu: ref;

axiom list_add_tail_rcu == $sub.ref(0, 264882);

procedure list_add_tail_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail_rcu($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} __list_add_rcu($p0, $p3, $p1);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    return;
}



const __list_add_rcu: ref;

axiom __list_add_rcu == $sub.ref(0, 265914);

procedure __list_add_rcu($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add_rcu($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    return;
}



const list_del_rcu: ref;

axiom list_del_rcu == $sub.ref(0, 266946);

procedure list_del_rcu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_rcu($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} __list_del_entry($p0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $i2p.i64.ref($sub.i64(0, 2401263026316508672)));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    return;
}



const team_queue_override_port_prio_changed: ref;

axiom team_queue_override_port_prio_changed == $sub.ref(0, 267978);

procedure team_queue_override_port_prio_changed($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation team_queue_override_port_prio_changed($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i6 := team_port_enabled($p1);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 332} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} __team_queue_override_port_del($p0, $p1);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} __team_queue_override_port_add($p0, $p1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} __team_queue_override_enabled_check($p0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_refresh_port_linkup: ref;

axiom team_refresh_port_linkup == $sub.ref(0, 269010);

procedure team_refresh_port_linkup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_refresh_port_linkup($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i12: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(1, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i12, 0);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(52, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i20);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i22);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(68, 1)), $mul.ref(0, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const __team_carrier_check: ref;

axiom __team_carrier_check == $sub.ref(0, 270042);

procedure __team_carrier_check($p0: ref);
  free requires assertsPassed;



implementation __team_carrier_check($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p14: ref;
  var $i18: i8;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(440, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i18);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} netif_carrier_off($p31);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} netif_carrier_on($p29);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p14 := $p8;
    goto $bb8;

  $bb8:
    call $p15, $i16, $i17, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p14 := __team_carrier_check_loop_$bb8($i12, $p15, $i16, $i17, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $p14);
    goto $bb8_last;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 160)), $mul.ref(52, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i12);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p23;
    goto $bb14_dummy;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 271074);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 272106);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    return;
}



const team_port_enable: ref;

axiom team_port_enable == $sub.ref(0, 273138);

procedure team_port_enable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation team_port_enable($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i2 := team_port_enabled($p1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 339} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(176, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 340} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(176, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(176, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i6);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p14 := team_port_index_hash($p0, $i13);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} hlist_add_head_rcu($p15, $p14);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} team_adjust_ops($p0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} team_queue_override_port_add($p0, $p1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(56, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} team_notify_peers($p0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} team_mcast_rejoin($p0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(56, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 345} devirtbounce.4($p23, $p0, $p1);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_port_disable: ref;

axiom team_port_disable == $sub.ref(0, 274170);

procedure team_port_disable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation team_port_disable($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i2 := team_port_enabled($p1);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 349} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(64, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} hlist_del_rcu($p15);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} __reconstruct_port_hlist($p0, $i17);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $sub.i32(0, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(176, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(176, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} team_queue_override_port_del($p0, $p1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} team_adjust_ops($p0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} team_notify_peers($p0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} team_mcast_rejoin($p0);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(64, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 350} devirtbounce.4($p14, $p0, $p1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const hlist_del_rcu: ref;

axiom hlist_del_rcu == $sub.ref(0, 275202);

procedure hlist_del_rcu($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_del_rcu($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} __hlist_del($p0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $i2p.i64.ref($sub.i64(0, 2401263026316508672)));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    return;
}



const __reconstruct_port_hlist: ref;

axiom __reconstruct_port_hlist == $sub.ref(0, 276234);

procedure __reconstruct_port_hlist($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __reconstruct_port_hlist($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} {:cexpr "__reconstruct_port_hlist:arg:rm_index"} boogie_si_record_i32($i1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    call {:si_unique_call 359} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(176, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, $i2);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $i10, $i11, $p12, $p13, $i14, $p15, $p16, $i17, $i18, $i19, $i6 := __reconstruct_port_hlist_loop_$bb4($p0, $p3, $p7, $p8, $p9, $i10, $i11, $p12, $p13, $i14, $p15, $p16, $i17, $i18, $i19, $i6);
    goto $bb4_last;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p7 := team_get_port_by_index($p0, $i6);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} hlist_del_rcu($p8);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p15 := team_port_index_hash($p0, $i14);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} hlist_add_head_rcu($p16, $p15);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i6, 1);
    call {:si_unique_call 364} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p3);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i17);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1818;
}



const team_queue_override_port_del: ref;

axiom team_queue_override_port_del == $sub.ref(0, 277266);

procedure team_queue_override_port_del($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation team_queue_override_port_del($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} __team_queue_override_port_del($p0, $p1);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} __team_queue_override_enabled_check($p0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    return;
}



const team_adjust_ops: ref;

axiom team_adjust_ops == $sub.ref(0, 278298);

procedure team_adjust_ops($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_adjust_ops($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(176, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i6 := team_is_mode_set($p0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 368} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(24, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p28);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(176, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i36 := team_is_mode_set($p0);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 370} {:cexpr "tmp___1"} boogie_si_record_i8($i37);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(16, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p58);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i50 == 1;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(16, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, team_dummy_receive);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(16, 1));
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, team_dummy_receive);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb18;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(16, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, team_dummy_receive);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(24, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, team_dummy_transmit);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(24, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, team_dummy_transmit);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(24, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, team_dummy_transmit);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_notify_peers: ref;

axiom team_notify_peers == $sub.ref(0, 279330);

procedure team_notify_peers($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation team_notify_peers($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p18: ref;
  var vslice_dummy_var_33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i7 := netif_running($p6);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 372} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(8, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} atomic_add($i14, $p16);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_33 := schedule_delayed_work($p18, 0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_mcast_rejoin: ref;

axiom team_mcast_rejoin == $sub.ref(0, 280362);

procedure team_mcast_rejoin($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation team_mcast_rejoin($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p18: ref;
  var vslice_dummy_var_34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(0, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i7 := netif_running($p6);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 376} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(0, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(8, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} atomic_add($i14, $p16);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_34 := schedule_delayed_work($p18, 0);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 281394);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(72, 1));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 380} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const atomic_add: ref;

axiom atomic_add == $sub.ref(0, 282426);

procedure atomic_add($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation atomic_add($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} {:cexpr "atomic_add:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 382} devirtbounce.5(0, $p2, $i0, $p2);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 283458);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 385} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 284490);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i3 := ldv_queue_delayed_work_on_6(8192, $p0, $p1, $i2);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 388} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_6: ref;

axiom ldv_queue_delayed_work_on_6 == $sub.ref(0, 285522);

procedure ldv_queue_delayed_work_on_6($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation ldv_queue_delayed_work_on_6($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "ldv_queue_delayed_work_on_6:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 390} {:cexpr "ldv_queue_delayed_work_on_6:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 392} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 393} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} activate_work_1($p8, 2);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 286554);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 395} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 396} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 397} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 398} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 287586);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i2 := $M.9;
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.11;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.13;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.15;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.15 := $i1;
    call {:si_unique_call 403} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $M.13 := $i1;
    call {:si_unique_call 402} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $M.12 := $p0;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.11 := $i1;
    call {:si_unique_call 401} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.10 := $p0;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.9 := $i1;
    call {:si_unique_call 400} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 288618);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const team_dummy_transmit: ref;

axiom team_dummy_transmit == $sub.ref(0, 289650);

procedure team_dummy_transmit($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_dummy_transmit($p0: ref, $p1: ref) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} dev_kfree_skb_any($p1);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_is_mode_set: ref;

axiom team_is_mode_set == $sub.ref(0, 290682);

procedure team_is_mode_set($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_is_mode_set($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, $p2i.ref.i64(__team_no_mode));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const team_dummy_receive: ref;

axiom team_dummy_receive == $sub.ref(0, 291714);

procedure team_dummy_receive($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation team_dummy_receive($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 292746);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 293778);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    return;
}



const team_get_port_by_index: ref;

axiom team_get_port_by_index == $sub.ref(0, 294810);

procedure team_get_port_by_index($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation team_get_port_by_index($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p12: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} {:cexpr "team_get_port_by_index:arg:port_index"} boogie_si_record_i32($i1);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p2 := team_port_index_hash($p0, $i1);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p12 := $p9;
    goto $bb7;

  $bb7:
    call $p13, $i14, $i15, $p16, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p12 := team_get_port_by_index_loop_$bb7($i1, $p13, $i14, $i15, $p16, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $p12);
    goto $bb7_last;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p16 := $p12;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p25;
    goto $bb16_dummy;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p20);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref($sub.ref(0, 8), 160));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p25 := $p24;
    goto $bb15;

  $bb9:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 8), 160));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2094;
}



const team_port_index_hash: ref;

axiom team_port_index_hash == $sub.ref(0, 295842);

procedure team_port_index_hash($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation team_port_index_hash($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "team_port_index_hash:arg:port_index"} boogie_si_record_i32($i1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 15);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 8));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const hlist_add_head_rcu: ref;

axiom hlist_add_head_rcu == $sub.ref(0, 296874);

procedure hlist_add_head_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation hlist_add_head_rcu($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1(0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 412} devirtbounce.6(0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p0);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p3);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} __compiletime_assert_402();
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __compiletime_assert_402: ref;

axiom __compiletime_assert_402 == $sub.ref(0, 297906);

procedure __compiletime_assert_402();
  free requires assertsPassed;



implementation __compiletime_assert_402()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    return;
}



const __hlist_del: ref;

axiom __hlist_del == $sub.ref(0, 298938);

procedure __hlist_del($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __hlist_del($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p4);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_queue_override_port_add: ref;

axiom team_queue_override_port_add == $sub.ref(0, 299970);

procedure team_queue_override_port_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation team_queue_override_port_add($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} __team_queue_override_port_add($p0, $p1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __team_queue_override_enabled_check($p0);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    return;
}



const team_change_mode: ref;

axiom team_change_mode == $sub.ref(0, 301002);

procedure team_change_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.17, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.24;



implementation team_change_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i5 := list_empty($p4);
    call {:si_unique_call 416} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i8 := team_is_mode_set($p0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 419} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p17 := team_mode_get($p1);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i20 := __team_change_mode($p0, $p17);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 426} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} netdev_info.ref.ref.ref($p3, .str.57, $p1);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} netdev_err.ref.ref.ref($p3, .str.56, $p1);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} team_mode_put($p17);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb3;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} netdev_err.ref.ref.ref($p3, .str.55, $p1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i15 := strcmp($p14, $p1);
    call {:si_unique_call 421} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} netdev_err.ref.ref($p3, .str.54);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} netdev_err.ref.ref($p3, .str.53);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 302034);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 303066);

procedure netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation netdev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    return;
}



const team_mode_get: ref;

axiom team_mode_get == $sub.ref(0, 304098);

procedure team_mode_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.17;



implementation team_mode_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} spin_lock(mode_list_lock);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p1 := __find_mode($p0);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} spin_unlock(mode_list_lock);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i13 := ldv_try_module_get_10($p12);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 437} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p18 := $p10;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p19 := $p18;
    goto $bb12;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb11;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} spin_unlock(mode_list_lock);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_35 := __request_module.i1.ref.ref(1, .str.58, $p0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} spin_lock(mode_list_lock);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p5 := __find_mode($p0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const __team_change_mode: ref;

axiom __team_change_mode == $sub.ref(0, 305130);

procedure __team_change_mode($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.13, $M.15, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.24;



implementation __team_change_mode($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i18: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i2 := team_is_mode_set($p0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 440} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 449} cmdloc_dummy_var_9 := $memcpy.i8(cmdloc_dummy_var_7, cmdloc_dummy_var_8, $p33, $p36, 72, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} team_adjust_ops($p0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    call {:si_unique_call 447} $i29 := devirtbounce.8($p28, $p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 448} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i18 := $i29;
    goto $bb9;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(8, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 441} cmdloc_dummy_var_4 := $memset.i8(cmdloc_dummy_var_3, $p9, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} team_adjust_ops($p0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p7);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} team_mode_put($p13);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} team_set_no_mode($p0);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(944, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 446} cmdloc_dummy_var_6 := $memset.i8(cmdloc_dummy_var_5, $p15, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 443} devirtbounce.7($p7, $p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const team_mode_put: ref;

axiom team_mode_put == $sub.ref(0, 306162);

procedure team_mode_put($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation team_mode_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} ldv_module_put_11($p2);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 307194);

procedure netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_11: ref;

axiom ldv_module_put_11 == $sub.ref(0, 308226);

procedure ldv_module_put_11($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_module_put_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} ldv_module_put($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 309258);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i3 := $M.17;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.17;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $M.17 := $i6;
    call {:si_unique_call 454} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} ldv_error();
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 310290);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 455} __VERIFIER_error();
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 311322);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const team_set_no_mode: ref;

axiom team_set_no_mode == $sub.ref(0, 312354);

procedure team_set_no_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_set_no_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(440, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, __team_no_mode);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 313386);

procedure __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 456} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 1} true;
    call {:si_unique_call 457} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 458} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_try_module_get_10: ref;

axiom ldv_try_module_get_10 == $sub.ref(0, 314418);

procedure ldv_try_module_get_10($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_try_module_get_10($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 460} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 315450);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i3 := ldv_undef_int();
    call {:si_unique_call 462} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i5 := $M.17;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $M.17 := $i6;
    call {:si_unique_call 463} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 316482);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 1} true;
    call {:si_unique_call 464} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 466} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const team_init: ref;

axiom team_init == $sub.ref(0, 317514);

procedure team_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.11, $M.13, $M.15, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i14: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i38: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i31: i32;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p2 := netdev_priv($p0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __mutex_init($p5, .str.37, $p1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} team_set_no_mode($p3);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p6 := __alloc_percpu(48, 8);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p6);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p47, $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $0.ref);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $0.ref);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p57, $0.ref);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p59, $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $0.ref);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p63, $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $0.ref);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p67, $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $0.ref);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p71, $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $0.ref);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p75, $mul.ref(8, 8)), $mul.ref(0, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $0.ref);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p79, $mul.ref(9, 8)), $mul.ref(0, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $0.ref);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p83, $mul.ref(10, 8)), $mul.ref(0, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $0.ref);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p87, $mul.ref(11, 8)), $mul.ref(0, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $0.ref);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p91, $mul.ref(12, 8)), $mul.ref(0, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $0.ref);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p95, $mul.ref(13, 8)), $mul.ref(0, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p97, $0.ref);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p99, $mul.ref(14, 8)), $mul.ref(0, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p101, $0.ref);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(184, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p103, $mul.ref(15, 8)), $mul.ref(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p105, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} INIT_LIST_HEAD($p35);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i36 := team_queue_override_init($p3);
    call {:si_unique_call 481} {:cexpr "err"} boogie_si_record_i32($i36);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} team_adjust_ops($p3);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(328, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} INIT_LIST_HEAD($p39);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} INIT_LIST_HEAD($p40);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} team_notify_peers_init($p3);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} team_mcast_rejoin_init($p3);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i41 := team_options_register($p3, team_options, 10);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 489} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} netif_carrier_off($p0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} team_set_lockdep_class($p0);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb24:
    assume $i42 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} team_mcast_rejoin_fini($p3);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} team_notify_peers_fini($p3);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} team_queue_override_fini($p3);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i38 := $i41;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} free_percpu($p45);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i31 := $i38;
    goto $bb14;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb22;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb14;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i11 := cpumask_next($sub.i32(0, 1), $p10);
    call {:si_unique_call 473} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i14 := $i11;
    goto $bb6;

  $bb6:
    call $i15, $i16, $p17, $i18, $i19, $p20, $p21, $p22, $i23, $i24, $i25, $i14 := team_init_loop_$bb6($p7, $i15, $i16, $p17, $i18, $i19, $p20, $p21, $p22, $i23, $i24, $i25, $i14);
    goto $bb6_last;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call {:si_unique_call 474} $i15 := devirtbounce.9(0, $p7);
    call {:si_unique_call 475} {:cexpr "__ptr"} boogie_si_record_i64($i15);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i16, 8));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, $i15);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} u64_stats_init($p21);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i23 := cpumask_next($i14, $p22);
    call {:si_unique_call 478} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i23, $i24);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i23;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2402;
}



const team_uninit: ref;

axiom team_uninit == $sub.ref(0, 318546);

procedure team_uninit($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.13, $M.15, $CurrAddr, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed, $M.24;



implementation team_uninit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p19: ref;
  var $p20: ref;
  var $p33: ref;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p1 := netdev_priv($p0);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} mutex_lock_nested($p3, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.18, $p10);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i15, $i17);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_37 := __team_change_mode($p2, $0.ref);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __team_options_unregister($p2, team_options, 10);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} team_mcast_rejoin_fini($p2);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} team_notify_peers_fini($p2);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} team_queue_override_fini($p2);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} mutex_unlock($p33);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p13, $p8;
    goto $bb4;

  $bb4:
    call $p21, $p22, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p19, $p20, vslice_dummy_var_36 := team_uninit_loop_$bb4($p2, $i17, $p21, $p22, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p19, $p20, vslice_dummy_var_36);
    goto $bb4_last;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.19, $p21);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_36 := team_port_del($p2, $p22);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.18, $p25);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, $i17);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p19, $p20 := $p28, $p19;
    goto $bb6_dummy;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2577;
}



const team_open: ref;

axiom team_open == $sub.ref(0, 319578);

procedure team_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation team_open($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_close: ref;

axiom team_close == $sub.ref(0, 320610);

procedure team_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation team_close($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const team_xmit: ref;

axiom team_xmit == $sub.ref(0, 321642);

procedure team_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p2 := netdev_priv($p1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 505} {:cexpr "len"} boogie_si_record_i32($i5);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i6 := team_queue_override_transmit($p3, $p0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 507} {:cexpr "tx_success"} boogie_si_record_i8($i7);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(24, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 508} $i12 := devirtbounce.10($p11, $p3, $p0);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 509} {:cexpr "tx_success"} boogie_si_record_i8($i13);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i31 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __bad_size_call_parameter();
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32(1, 1);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i71 == 1);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i75 == 1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 525} devirtbounce.5(0, $p81, 1, $p81);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb48:
    assume $i75 == 1;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 524} devirtbounce.12(0, $p78, $p78);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i71 == 1;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 523} devirtbounce.12(0, $p74, $p74);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb14;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32(1, 1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i60 == 1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i64 == 1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 522} devirtbounce.5(0, $p70, 1, $p70);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb41:
    assume $i64 == 1;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 521} devirtbounce.12(0, $p67, $p67);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i60 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 520} devirtbounce.12(0, $p63, $p63);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb8:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb14;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32(1, 1);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i49 == 1);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i53 == 1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 519} devirtbounce.5(0, $p59, 1, $p59);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb34:
    assume $i53 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 518} devirtbounce.12(0, $p56, $p56);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i49 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 517} devirtbounce.12(0, $p52, $p52);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb17:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb14;

  $bb21:
    assume $i37 == 1;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32(1, 1);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i42 == 1);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 516} devirtbounce.5(0, $p48, 1, $p48);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume $i42 == 1;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 515} devirtbounce.12(0, $p45, $p45);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i38 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 48)), $mul.ref(44, 1));
    call {:si_unique_call 514} devirtbounce.12(0, $p41, $p41);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 510} $i18 := devirtbounce.11(0, this_cpu_off, $p17);
    call {:si_unique_call 511} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i18);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p19 := $i2p.i64.ref($i18);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} u64_stats_init($p20);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 1);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i5);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i26, $i27);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i28);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} u64_stats_init($p30);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb3;
}



const team_select_queue: ref;

axiom team_select_queue == $sub.ref(0, 322674);

procedure team_select_queue($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation team_select_queue($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i16)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i16;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i16;
  var $i36: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i4 := skb_rx_queue_recorded($p1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 528} {:cexpr "tmp___2"} boogie_si_record_i8($i5);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    call {:si_unique_call 532} {:cexpr "txq"} boogie_si_record_i16($i10);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p11 := qdisc_skb_cb($p1);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, $i13);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i10);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i18 := $uge.i32($i15, $i17);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 535} {:cexpr "tmp___4"} boogie_si_record_i64($i21);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i23 := $i10;
    goto $bb6;

  $bb6:
    call $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35 := team_select_queue_loop_$bb6($p0, $i23, $i24, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $i35);
    goto $bb6_last;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i24, $i28);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    call {:si_unique_call 536} {:cexpr "txq"} boogie_si_record_i16($i30);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i34 := $uge.i32($i31, $i33);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i35 := $i30;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb10;

  $bb7:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i30;
    goto $bb7_dummy;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i7 := skb_get_rx_queue($p1);
    call {:si_unique_call 530} {:cexpr "tmp___0"} boogie_si_record_i16($i7);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    call {:si_unique_call 531} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  $bb7_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;
}



const team_change_rx_flags: ref;

axiom team_change_rx_flags == $sub.ref(0, 323706);

procedure team_change_rx_flags($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_change_rx_flags($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p24: ref;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 541} {:cexpr "team_change_rx_flags:arg:change"} boogie_si_record_i32($i1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p6 := netdev_priv($p0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} rcu_read_lock();
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p10);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __read_once_size($p11, $p13, 8);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i16 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 546} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p15);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i20, $i22);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} rcu_read_unlock();
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p24 := $p18;
    goto $bb4;

  $bb4:
    call $i25, $i26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $i53, $p54, $p55, $p56, $i57, $i58, $p24, vslice_dummy_var_38, vslice_dummy_var_39 := team_change_rx_flags_loop_$bb4($p0, $i1, $p4, $p5, $i22, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $p42, $p43, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $i53, $p54, $p55, $p56, $i57, $i58, $p24, vslice_dummy_var_38, vslice_dummy_var_39);
    goto $bb4_last;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i1, 256);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i1, 512);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p47);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p4);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p5);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __read_once_size($p48, $p50, 8);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p5);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i53 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 553} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p52);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p54, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, $i22);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i58 == 1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $p24 := $p55;
    goto $bb12_dummy;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 512);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i41 := (if $i40 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 549} {:cexpr "inc"} boogie_si_record_i32($i41);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_39 := dev_set_allmulti($p43, $i41);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 256);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 547} {:cexpr "inc"} boogie_si_record_i32($i31);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_38 := dev_set_promiscuity($p33, $i31);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;
}



const team_set_rx_mode: ref;

axiom team_set_rx_mode == $sub.ref(0, 324738);

procedure team_set_rx_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_set_rx_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p23: ref;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p5 := netdev_priv($p0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} rcu_read_lock();
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p9);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} __read_once_size($p10, $p12, 8);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i15 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 563} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p14);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i19, $i21);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} rcu_read_unlock();
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p23 := $p17;
    goto $bb4;

  $bb4:
    call $p24, $p25, $p27, $p28, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $i43, $p23, vslice_dummy_var_40, vslice_dummy_var_41 := team_set_rx_mode_loop_$bb4($p0, $p3, $p4, $i21, $p24, $p25, $p27, $p28, $p31, $p32, $p33, $p34, $p35, $p36, $p37, $i38, $p39, $p40, $p41, $i42, $i43, $p23, vslice_dummy_var_40, vslice_dummy_var_41);
    goto $bb4_last;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_40 := dev_uc_sync_multiple($p25, $p0);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} vslice_dummy_var_41 := dev_mc_sync_multiple($p28, $p0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p32);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p4);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __read_once_size($p33, $p35, 8);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i38 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 568} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p37);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, $i21);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i43 == 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $p23 := $p40;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2861;
}



const team_set_mac_address: ref;

axiom team_set_mac_address == $sub.ref(0, 325770);

procedure team_set_mac_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_set_mac_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p35: ref;
  var $p52: ref;
  var $i16: i32;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p3 := netdev_priv($p0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(564, 1));
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    cmdloc_dummy_var_11 := $M.0;
    call {:si_unique_call 573} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p18, $p20, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_12;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} mutex_lock_nested($p24, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p28, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i31, $i33);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} mutex_unlock($p52);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p35 := $p29;
    goto $bb14;

  $bb14:
    call $p37, $p38, $i39, $i40, $p42, $p43, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $p35 := team_set_mac_address_loop_$bb14($p4, $i33, $p37, $p38, $i39, $i40, $p42, $p43, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $p35);
    goto $bb14_last;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(48, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p47, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, $i33);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb19:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $p35 := $p48;
    goto $bb19_dummy;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(48, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    call {:si_unique_call 575} devirtbounce.4($p43, $p4, $p35);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i11 := is_valid_ether_addr($p10);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i8($i12);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 99);
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb5;

  $bb19_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2936;
}



const team_change_mtu: ref;

axiom team_change_mtu == $sub.ref(0, 326802);

procedure team_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p16: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p49: ref;
  var $p63: ref;
  var $p64: ref;
  var $i38: i32;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "team_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p2 := netdev_priv($p0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} mutex_lock_nested($p4, 0);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(456, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(456, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} mutex_unlock($p36);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i1);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $i20, $p21, $i22, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p16 := team_change_mtu_loop_$bb4($i1, $i14, $p17, $p18, $i19, $i20, $p21, $i22, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p16);
    goto $bb4_last;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i19 := dev_set_mtu($p18, $i1);
    call {:si_unique_call 581} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p21, $i22 := $p16, $i19;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i14);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p31;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} netdev_err.ref.ref.ref($p0, .str.61, $p26);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i45, $i47);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(456, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, 0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} mutex_unlock($p64);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i38 := $i22;
    goto $bb13;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p49 := $p43;
    goto $bb17;

  $bb17:
    call $p50, $p51, $p52, $i53, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p49, vslice_dummy_var_42 := team_change_mtu_loop_$bb17($p0, $i47, $p50, $p51, $p52, $i53, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p49, vslice_dummy_var_42);
    goto $bb17_last;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} vslice_dummy_var_42 := dev_set_mtu($p51, $i53);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $i47);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $p49 := $p59;
    goto $bb19_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3024;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;
}



const team_get_stats64: ref;

axiom team_get_stats64 == $sub.ref(0, 327834);

procedure team_get_stats64($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_get_stats64($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i72: i32;
  var $i73: i32;
  var $i8: i32;
  var $i9: i32;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p2 := netdev_priv($p0);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i5 := cpumask_next($sub.i32(0, 1), $p4);
    call {:si_unique_call 588} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, $i6);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i8);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, $i74);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i9);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p77, $i76);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i10, $i11, $i12 := $i5, 0, 0;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $i55, $i56, $p57, $p58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i10, $i11, $i12, $i72, $i73 := team_get_stats64_loop_$bb4($p1, $p3, $p13, $p14, $i15, $i16, $p17, $i18, $i19, $p20, $p21, $i22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $i55, $i56, $p57, $p58, $i59, $i60, $p61, $p62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i10, $i11, $i12, $i72, $i73);
    goto $bb4_last;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 589} $i15 := devirtbounce.9(0, $p14);
    call {:si_unique_call 590} {:cexpr "__ptr"} boogie_si_record_i64($i15);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i10);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref($i16, 8));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i18, $i15);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p20 := $i2p.i64.ref($i19);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call $p21, $i22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41 := team_get_stats64_loop_$bb6($p20, $p21, $i22, $p23, $i24, $p25, $i26, $p27, $i28, $p29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41);
    goto $bb6_last;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i22 := u64_stats_fetch_begin_irq($p21);
    call {:si_unique_call 592} {:cexpr "start"} boogie_si_record_i32($i22);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    call {:si_unique_call 593} {:cexpr "rx_packets"} boogie_si_record_i64($i24);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    call {:si_unique_call 594} {:cexpr "rx_bytes"} boogie_si_record_i64($i26);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    call {:si_unique_call 595} {:cexpr "rx_multicast"} boogie_si_record_i64($i28);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    call {:si_unique_call 596} {:cexpr "tx_packets"} boogie_si_record_i64($i30);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    call {:si_unique_call 597} {:cexpr "tx_bytes"} boogie_si_record_i64($i32);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i34 := u64_stats_fetch_retry_irq($p33, $i22);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 599} {:cexpr "tmp___0"} boogie_si_record_i8($i35);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i37, $i38, $i39, $i40, $i41 := $i24, $i26, $i28, $i30, $i32;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, $i37);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i48 := $add.i64($i47, $i38);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, $i48);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i51, $i39);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i52);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, $i40);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i60 := $add.i64($i59, $i41);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i60);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $i12);
    call {:si_unique_call 600} {:cexpr "rx_dropped"} boogie_si_record_i32($i64);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, $i11);
    call {:si_unique_call 601} {:cexpr "tx_dropped"} boogie_si_record_i32($i67);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i69 := cpumask_next($i10, $p68);
    call {:si_unique_call 603} {:cexpr "tmp___1"} boogie_si_record_i32($i69);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i69, $i70);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i72, $i73 := $i64, $i67;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i8, $i9 := $i72, $i73;
    goto $bb3;

  $bb10:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11, $i12 := $i69, $i67, $i64;
    goto $bb10_dummy;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb7_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3066;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;
}



const team_vlan_rx_add_vid: ref;

axiom team_vlan_rx_add_vid == $sub.ref(0, 328866);

procedure team_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation team_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p16: ref;
  var $p35: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p47: ref;
  var $p62: ref;
  var $i36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} {:cexpr "team_vlan_rx_add_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 605} {:cexpr "team_vlan_rx_add_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p3 := netdev_priv($p0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} mutex_lock_nested($p5, 0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i12, $i14);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} mutex_unlock($p35);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb4;

  $bb4:
    call $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p16 := team_vlan_rx_add_vid_loop_$bb4($i1, $i2, $i14, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $i26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p16);
    goto $bb4_last;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i2);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i23 := vlan_vid_add($p18, $i20, $i22);
    call {:si_unique_call 609} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p25, $i26 := $p16, $i23;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p30, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i14);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p31;
    goto $bb10_dummy;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p40, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i43, $i45);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} mutex_unlock($p62);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i36 := $i26;
    goto $bb13;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p47 := $p41;
    goto $bb17;

  $bb17:
    call $p48, $p49, $i50, $i51, $i52, $i53, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p47 := team_vlan_rx_add_vid_loop_$bb17($i1, $i2, $i45, $p48, $p49, $i50, $i51, $i52, $i53, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $p47);
    goto $bb17_last;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i1);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i2);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vlan_vid_del($p49, $i51, $i53);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p57, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, $i45);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $p47 := $p58;
    goto $bb19_dummy;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3185;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;
}



const team_vlan_rx_kill_vid: ref;

axiom team_vlan_rx_kill_vid == $sub.ref(0, 329898);

procedure team_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 617} {:cexpr "team_vlan_rx_kill_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 618} {:cexpr "team_vlan_rx_kill_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p7 := netdev_priv($p0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} rcu_read_lock();
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p11);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __read_once_size($p12, $p14, 8);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i17 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 623} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p16);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i21, $i23);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} rcu_read_unlock();
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p25 := $p19;
    goto $bb4;

  $bb4:
    call $p26, $p27, $i28, $i29, $i30, $i31, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $i40, $p41, $p42, $p43, $i44, $i45, $p25 := team_vlan_rx_kill_vid_loop_$bb4($i1, $i2, $p5, $p6, $i23, $p26, $p27, $i28, $i29, $i30, $i31, $p33, $p34, $p35, $p36, $p37, $p38, $p39, $i40, $p41, $p42, $p43, $i44, $i45, $p25);
    goto $bb4_last;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i1);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i2);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vlan_vid_del($p27, $i29, $i31);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p34);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p5);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p6);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __read_once_size($p35, $p37, 8);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p6);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i40 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 627} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p39);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, $i23);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i45 == 1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p25 := $p42;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;
}



const team_poll_controller: ref;

axiom team_poll_controller == $sub.ref(0, 330930);

procedure team_poll_controller($p0: ref);
  free requires assertsPassed;



implementation team_poll_controller($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    return;
}



const team_netpoll_setup: ref;

axiom team_netpoll_setup == $sub.ref(0, 331962);

procedure team_netpoll_setup($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_netpoll_setup($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p16: ref;
  var $i29: i32;
  var $i15: i32;
  var $i20: i32;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p2 := netdev_priv($p0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} mutex_lock_nested($p4, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i20 := $i15;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} mutex_unlock($p30);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p16 := $p9;
    goto $bb4;

  $bb4:
    call $i17, $i18, $i19, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $p16, $i29 := team_netpoll_setup_loop_$bb4($p3, $i13, $i17, $i18, $i19, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $p16, $i29);
    goto $bb4_last;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i17 := team_port_enable_netpoll($p3, $p16);
    call {:si_unique_call 632} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $i13);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i29 := $i17;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i15 := $i29;
    goto $bb3;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p16 := $p25;
    goto $bb10_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} __team_netpoll_cleanup($p3);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;
}



const team_netpoll_cleanup: ref;

axiom team_netpoll_cleanup == $sub.ref(0, 332994);

procedure team_netpoll_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_netpoll_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p1 := netdev_priv($p0);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} mutex_lock_nested($p3, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __team_netpoll_cleanup($p2);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} mutex_unlock($p4);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    return;
}



const team_add_slave: ref;

axiom team_add_slave == $sub.ref(0, 334026);

procedure team_add_slave($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.24, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.17, assertsPassed;



implementation team_add_slave($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p2 := netdev_priv($p0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} mutex_lock_nested($p4, 0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i5 := team_port_add($p3, $p1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 642} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} mutex_unlock($p6);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const team_del_slave: ref;

axiom team_del_slave == $sub.ref(0, 335058);

procedure team_del_slave($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.24, $M.17, assertsPassed;



implementation team_del_slave($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $p2 := netdev_priv($p0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} mutex_lock_nested($p4, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i5 := team_port_del($p3, $p1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 647} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} mutex_unlock($p6);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const team_fix_features: ref;

axiom team_fix_features == $sub.ref(0, 336090);

procedure team_fix_features($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_fix_features($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p27: ref;
  var $i28: i64;
  var $i48: i64;
  var $i26: i64;
  var $i49: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 653} {:cexpr "team_fix_features:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p6 := netdev_priv($p0);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    call {:si_unique_call 655} {:cexpr "team_fix_features:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i1, $sub.i64(0, 2032738));
    call {:si_unique_call 656} {:cexpr "features"} boogie_si_record_i64($i8);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i9 := $or.i64($i8, 34361835520);
    call {:si_unique_call 657} {:cexpr "features"} boogie_si_record_i64($i9);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} rcu_read_lock();
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p12);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} __read_once_size($p13, $p15, 8);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i18 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 661} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p17);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p19, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i22, $i24);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i26 := $i9;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} rcu_read_unlock();
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i49 := netdev_add_tso_features($i26, $i1);
    call {:si_unique_call 669} {:cexpr "features"} boogie_si_record_i64($i49);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p27, $i28 := $p20, $i9;
    goto $bb4;

  $bb4:
    call $p29, $p30, $p31, $i32, $i33, $p35, $p36, $p37, $p38, $p39, $p40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $p27, $i28, $i48 := team_fix_features_loop_$bb4($i1, $p4, $p5, $i24, $p29, $p30, $p31, $i32, $i33, $p35, $p36, $p37, $p38, $p39, $p40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $p27, $i28, $i48);
    goto $bb4_last;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p27, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i33 := netdev_increment_features($i28, $i32, $i1);
    call {:si_unique_call 663} {:cexpr "features"} boogie_si_record_i64($i33);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p36);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p4);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p5);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} __read_once_size($p37, $p39, 8);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i42 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 666} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p41);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p43, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, $i24);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i48 := $i33;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i26 := $i48;
    goto $bb3;

  $bb6:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $p27, $i28 := $p44, $i33;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3354;
}



const switchdev_port_fdb_add: ref;

axiom switchdev_port_fdb_add == $sub.ref(0, 337122);

procedure switchdev_port_fdb_add($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i16, $i5: i16) returns ($r: i32);
  free requires assertsPassed;



implementation switchdev_port_fdb_add($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i16, $i5: i16) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 670} {:cexpr "switchdev_port_fdb_add:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 671} {:cexpr "switchdev_port_fdb_add:arg:arg5"} boogie_si_record_i16($i5);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 672} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 673} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const switchdev_port_fdb_del: ref;

axiom switchdev_port_fdb_del == $sub.ref(0, 338154);

procedure switchdev_port_fdb_del($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i16) returns ($r: i32);
  free requires assertsPassed;



implementation switchdev_port_fdb_del($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i16) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 674} {:cexpr "switchdev_port_fdb_del:arg:arg4"} boogie_si_record_i16($i4);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 675} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 676} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const switchdev_port_fdb_dump: ref;

axiom switchdev_port_fdb_dump == $sub.ref(0, 339186);

procedure switchdev_port_fdb_dump($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation switchdev_port_fdb_dump($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 677} {:cexpr "switchdev_port_fdb_dump:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 679} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const switchdev_port_bridge_setlink: ref;

axiom switchdev_port_bridge_setlink == $sub.ref(0, 340218);

procedure switchdev_port_bridge_setlink($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation switchdev_port_bridge_setlink($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 680} {:cexpr "switchdev_port_bridge_setlink:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 1} true;
    call {:si_unique_call 681} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 682} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const switchdev_port_bridge_getlink: ref;

axiom switchdev_port_bridge_getlink == $sub.ref(0, 341250);

procedure switchdev_port_bridge_getlink($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation switchdev_port_bridge_getlink($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 683} {:cexpr "switchdev_port_bridge_getlink:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 684} {:cexpr "switchdev_port_bridge_getlink:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 685} {:cexpr "switchdev_port_bridge_getlink:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 686} {:cexpr "switchdev_port_bridge_getlink:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 1} true;
    call {:si_unique_call 687} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 688} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const switchdev_port_bridge_dellink: ref;

axiom switchdev_port_bridge_dellink == $sub.ref(0, 342282);

procedure switchdev_port_bridge_dellink($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation switchdev_port_bridge_dellink($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 689} {:cexpr "switchdev_port_bridge_dellink:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 690} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 691} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const team_change_carrier: ref;

axiom team_change_carrier == $sub.ref(0, 343314);

procedure team_change_carrier($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_change_carrier($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 692} {:cexpr "team_change_carrier:arg:new_carrier"} boogie_si_record_i1($i1);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p3 := netdev_priv($p0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(440, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i2);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} netif_carrier_off($p0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} netif_carrier_on($p0);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const passthru_features_check: ref;

axiom passthru_features_check == $sub.ref(0, 344346);

procedure passthru_features_check($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation passthru_features_check($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 696} {:cexpr "passthru_features_check:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 1} true;
    call {:si_unique_call 697} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 698} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 345378);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 346410);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} __rcu_read_lock();
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 702} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i3 := rcu_is_watching();
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 704} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} lockdep_rcu_suspicious(.str.30, 849, .str.31);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 347442);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    call {:si_unique_call 706} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 707} devirtbounce.6(0);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.0;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 708} cmdloc_dummy_var_15 := $memcpy.i8(cmdloc_dummy_var_13, cmdloc_dummy_var_14, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    call {:si_unique_call 709} devirtbounce.6(0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 348474);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const netdev_increment_features: ref;

axiom netdev_increment_features == $sub.ref(0, 349506);

procedure netdev_increment_features($i0: i64, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation netdev_increment_features($i0: i64, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} {:cexpr "netdev_increment_features:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 713} {:cexpr "netdev_increment_features:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 714} {:cexpr "netdev_increment_features:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 1} true;
    call {:si_unique_call 715} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 716} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 350538);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 718} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} __rcu_read_unlock();
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i3 := rcu_is_watching();
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 720} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} lockdep_rcu_suspicious(.str.30, 900, .str.32);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const netdev_add_tso_features: ref;

axiom netdev_add_tso_features == $sub.ref(0, 351570);

procedure netdev_add_tso_features($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation netdev_add_tso_features($i0: i64, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} {:cexpr "netdev_add_tso_features:arg:features"} boogie_si_record_i64($i0);
    call {:si_unique_call 725} {:cexpr "netdev_add_tso_features:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i2 := netdev_increment_features($i0, 1638400, $i1);
    call {:si_unique_call 727} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rcu_is_watching: ref;

axiom rcu_is_watching == $sub.ref(0, 352602);

procedure rcu_is_watching() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_is_watching() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 728} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 729} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 353634);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 354666);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} devirtbounce.6(0);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} __preempt_count_sub(1);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 355698);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} lock_release($p0, 1, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 356730);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 735} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 357762);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i0);
    call {:si_unique_call 739} devirtbounce.5(0, __preempt_count, $i3, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 738} devirtbounce.12(0, __preempt_count, __preempt_count);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 737} devirtbounce.12(0, __preempt_count, __preempt_count);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 358794);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} __preempt_count_add(1);
    call {:si_unique_call 741} devirtbounce.6(0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 359826);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} lock_acquire($p0, 0, 0, 2, 0, $0.ref, 0);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 360858);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 744} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 745} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 746} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 747} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    return;
}



const __preempt_count_add: ref;

axiom __preempt_count_add == $sub.ref(0, 361890);

procedure __preempt_count_add($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __preempt_count_add($i0: i32)
{
  var $i1: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} {:cexpr "__preempt_count_add:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32(0, 1);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    call {:si_unique_call 751} devirtbounce.5(0, __preempt_count, $i0, __preempt_count);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    call {:si_unique_call 750} devirtbounce.12(0, __preempt_count, __preempt_count);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    call {:si_unique_call 749} devirtbounce.12(0, __preempt_count, __preempt_count);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 362922);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    return;
}



const team_port_del: ref;

axiom team_port_del == $sub.ref(0, 363954);

procedure team_port_del($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.24, $M.17, assertsPassed;



implementation team_port_del($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i9: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p6 := team_port_get_rtnl($p1);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i10 := team_port_find($p0, $p6);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 756} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} team_port_disable($p0, $p6);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} list_del_rcu($p15);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} team_upper_dev_unlink($p3, $p1);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} netdev_rx_handler_unregister($p1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} team_port_disable_netpoll($p6);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vlan_vids_del_by_dev($p1, $p3);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} dev_uc_unsync($p1, $p3);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} dev_mc_unsync($p1, $p3);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_43 := dev_close($p1);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} team_port_leave($p0, $p6);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} __team_option_inst_mark_removed_port($p0, $p6);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} __team_options_change_check($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} __team_option_inst_del_port($p0, $p6);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} __team_port_change_port_removed($p6);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} vslice_dummy_var_44 := team_port_set_orig_dev_addr($p6);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_45 := dev_set_mtu($p1, $i20);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} kfree_call_rcu($p22, $i2p.i64.ref(144));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} netdev_info.ref.ref.ref($p3, .str.34, $p5);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} __team_compute_features($p0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} netdev_err.ref.ref.ref($p3, .str.33, $p5);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 2);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} netdev_err.ref.ref.ref($p3, .str.33, $p5);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 2);
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 364986);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    return;
}



const team_port_get_rtnl: ref;

axiom team_port_get_rtnl == $sub.ref(0, 366018);

procedure team_port_get_rtnl($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation team_port_get_rtnl($p0: ref) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i1 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 778} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(920, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 262144);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p13 := $p7;
    goto $bb12;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1(1);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i4 := lockdep_rtnl_is_held();
    call {:si_unique_call 780} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} lockdep_rcu_suspicious(.str.2, 51, .str.35);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb3;
}



const team_port_find: ref;

axiom team_port_find == $sub.ref(0, 367050);

procedure team_port_find($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation team_port_find($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p12: ref;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i8, $i10);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p12 := $p6;
    goto $bb4;

  $bb4:
    call $i13, $i14, $i15, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p12 := team_port_find_loop_$bb4($p1, $i10, $i13, $i14, $i15, $p18, $p19, $p20, $p21, $p22, $i23, $i24, $p12);
    goto $bb4_last;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i10);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p21;
    goto $bb10_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;
}



const team_upper_dev_unlink: ref;

axiom team_upper_dev_unlink == $sub.ref(0, 368082);

procedure team_upper_dev_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_upper_dev_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} netdev_upper_dev_unlink($p1, $p0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 262145));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    return;
}



const netdev_rx_handler_unregister: ref;

axiom netdev_rx_handler_unregister == $sub.ref(0, 369114);

procedure netdev_rx_handler_unregister($p0: ref);
  free requires assertsPassed;



implementation netdev_rx_handler_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    return;
}



const team_port_disable_netpoll: ref;

axiom team_port_disable_netpoll == $sub.ref(0, 370146);

procedure team_port_disable_netpoll($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_port_disable_netpoll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} synchronize_rcu_bh();
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} __netpoll_cleanup($p2);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} kfree($p6);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vlan_vids_del_by_dev: ref;

axiom vlan_vids_del_by_dev == $sub.ref(0, 371178);

procedure vlan_vids_del_by_dev($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vlan_vids_del_by_dev($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    return;
}



const dev_uc_unsync: ref;

axiom dev_uc_unsync == $sub.ref(0, 372210);

procedure dev_uc_unsync($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_uc_unsync($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    return;
}



const dev_mc_unsync: ref;

axiom dev_mc_unsync == $sub.ref(0, 373242);

procedure dev_mc_unsync($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_mc_unsync($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    return;
}



const dev_close: ref;

axiom dev_close == $sub.ref(0, 374274);

procedure dev_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_close($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 1} true;
    call {:si_unique_call 786} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 787} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_port_leave: ref;

axiom team_port_leave == $sub.ref(0, 375306);

procedure team_port_leave($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_leave($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(40, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} dev_put($p11);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(40, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 788} devirtbounce.4($p9, $p0, $p1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __team_option_inst_mark_removed_port: ref;

axiom __team_option_inst_mark_removed_port == $sub.ref(0, 376338);

procedure __team_option_inst_mark_removed_port($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __team_option_inst_mark_removed_port($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1)), $mul.ref(0, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p13, $p14, $i15, $i16, $i17, $p18, $p19, $p21, $p22, $p23, $p24, $i25, $i26, $p11 := __team_option_inst_mark_removed_port_loop_$bb4($p1, $i9, $p13, $p14, $i15, $i16, $i17, $p18, $p19, $p21, $p22, $p23, $p24, $i25, $i26, $p11);
    goto $bb4_last;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i9);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p22;
    goto $bb9_dummy;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 1);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3718;
}



const __team_option_inst_del_port: ref;

axiom __team_option_inst_del_port == $sub.ref(0, 377370);

procedure __team_option_inst_del_port($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __team_option_inst_del_port($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1)), $mul.ref(0, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p15, $p16 := $p8, $p4;
    goto $bb4;

  $bb4:
    call $p17, $p18, $p19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $p29, $p30, $p32, $i33, $i34, $p15, $p16 := __team_option_inst_del_port_loop_$bb4($p1, $i13, $p17, $p18, $p19, $i20, $i21, $p23, $p24, $i25, $i26, $i27, $p29, $p30, $p32, $i33, $i34, $p15, $p16);
    goto $bb4_last;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, $i13);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $p15, $p16 := $p30, $p15;
    goto $bb12_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i25, $i26);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb8;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} __team_option_inst_del($p16);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;
}



const __team_port_change_port_removed: ref;

axiom __team_port_change_port_removed == $sub.ref(0, 378402);

procedure __team_port_change_port_removed($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_port_change_port_removed($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(71, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} __team_port_change_send($p0, 0);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} __team_carrier_check($p3);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const team_port_set_orig_dev_addr: ref;

axiom team_port_set_orig_dev_addr == $sub.ref(0, 379434);

procedure team_port_set_orig_dev_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_set_orig_dev_addr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i6 := __set_port_dev_addr($p2, $p5);
    call {:si_unique_call 794} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_set_mtu: ref;

axiom dev_set_mtu == $sub.ref(0, 380466);

procedure dev_set_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 795} {:cexpr "dev_set_mtu:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 797} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kfree_call_rcu: ref;

axiom kfree_call_rcu == $sub.ref(0, 381498);

procedure kfree_call_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kfree_call_rcu($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    return;
}



const __team_compute_features: ref;

axiom __team_compute_features == $sub.ref(0, 382530);

procedure __team_compute_features($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __team_compute_features($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i16;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i11, $i12, $i13 := 14, 0, 4195328;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i12);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 2968)), $mul.ref(264, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p56, $i53);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2968)), $mul.ref(566, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i11);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, $sub.i32(0, 1025));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i64);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i13, 4195328);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} netdev_change_features($p78);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i68 == 1;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, 1024);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, $i73);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i14, $p15, $i16, $i17 := 4195328, $p5, 0, 14;
    goto $bb4;

  $bb4:
    call $i18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $i40, $i41, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i14, $p15, $i16, $i17, $i50, $i51, $i52 := __team_compute_features_loop_$bb4($i9, $i18, $p19, $p20, $p21, $i22, $i23, $i24, $p25, $p26, $p27, $i28, $i29, $p30, $p31, $p32, $i33, $i34, $i35, $i36, $p37, $p38, $p39, $i40, $i41, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $i14, $p15, $i16, $i17, $i50, $i51, $i52);
    goto $bb4_last;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i16);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2968)), $mul.ref(264, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i23 := netdev_increment_features($i18, $i22, 1671291);
    call {:si_unique_call 799} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    call {:si_unique_call 800} {:cexpr "vlan_features"} boogie_si_record_i32($i24);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $i14);
    call {:si_unique_call 801} {:cexpr "dst_release_flag"} boogie_si_record_i32($i29);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2968)), $mul.ref(566, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i17);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i34, $i35);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i9);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i50, $i51, $i52 := $i41, $i24, $i29;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i11, $i12, $i13 := $i50, $i51, $i52;
    goto $bb3;

  $bb9:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i14, $p15, $i16, $i17 := $i29, $p46, $i24, $i41;
    goto $bb9_dummy;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 2968)), $mul.ref(566, 1));
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    call {:si_unique_call 802} {:cexpr "max_hard_header_len"} boogie_si_record_i16($i40);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3816;
}



const netdev_change_features: ref;

axiom netdev_change_features == $sub.ref(0, 383562);

procedure netdev_change_features($p0: ref);
  free requires assertsPassed;



implementation netdev_change_features($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    return;
}



const __team_port_change_send: ref;

axiom __team_port_change_send == $sub.ref(0, 384594);

procedure __team_port_change_send($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_port_change_send($p0: ref, $i1: i1)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $i5: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p2 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 805} {:cexpr "__team_port_change_send:arg:linkup"} boogie_si_record_i1($i1);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(70, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 1);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i3);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i5);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i8);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} team_refresh_port_linkup($p0);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i3);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i27 := team_nl_send_event_port_get($p26, $p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 811} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i27, $sub.i32(0, 3));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} netdev_warn.ref.ref.ref.i32($p33, .str.29, $p37, $i27);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i12 := __ethtool_get_settings($p11, $p2);
    call {:si_unique_call 808} {:cexpr "err"} boogie_si_record_i32($i12);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i14 := ethtool_cmd_speed($p2);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i14);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.20, $p17);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i18);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __ethtool_get_settings: ref;

axiom __ethtool_get_settings == $sub.ref(0, 385626);

procedure __ethtool_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __ethtool_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 1} true;
    call {:si_unique_call 813} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 814} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ethtool_cmd_speed: ref;

axiom ethtool_cmd_speed == $sub.ref(0, 386658);

procedure ethtool_cmd_speed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_cmd_speed($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.21, $p1);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 16);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.22, $p5);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i4, $i7);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const team_nl_send_event_port_get: ref;

axiom team_nl_send_event_port_get == $sub.ref(0, 387690);

procedure team_nl_send_event_port_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_send_event_port_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i2 := team_nl_send_port_list_get($p0, 0, 0, 0, team_nl_send_multicast, $p1);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 816} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const team_nl_send_port_list_get: ref;

axiom team_nl_send_port_list_get == $sub.ref(0, 388722);

procedure team_nl_send_port_list_get($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_send_port_list_get($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i18: i32;
  var $p19: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p72: ref;
  var $i73: i32;
  var $i79: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i63: i32;
  var $p64: ref;
  var $p88: ref;
  var $p62: ref;
  var $p77: ref;
  var $i78: i8;
  var $p89: ref;
  var $i90: i8;
  var $p53: ref;
  var $i54: i8;
  var $p91: ref;
  var $p93: ref;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $p38: ref;
  var $p51: ref;
  var $i52: i32;
  var $p110: ref;
  var $p111: ref;
  var $i24: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 818} {:cexpr "team_nl_send_port_list_get:arg:portid"} boogie_si_record_i32($i1);
    call {:si_unique_call 819} {:cexpr "team_nl_send_port_list_get:arg:seq"} boogie_si_record_i32($i2);
    call {:si_unique_call 820} {:cexpr "team_nl_send_port_list_get:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i8 := list_empty($p7);
    call {:si_unique_call 822} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i16 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 824} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i17 == 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p19 := $p15;
    goto $bb7;

  $bb7:
    call $p20, $i21, $i22, $i23, $p19, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p39, $p40, $i41, $i42, $p43, $i44, $i45, $p46, $i47, $i48, $p49, $i50, $i55, $i56, $p57, $i58, $p59, $i60, $i61, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i74, $p75, $i76, $p72, $i73, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $i63, $p64, $p88, $p62, $p77, $i78, $p89, $i90, $p53, $i54, $p91, $p93, $i94, $p95, vslice_dummy_var_46 := team_nl_send_port_list_get_loop_$bb7($p0, $i1, $i2, $i3, $p4, $p5, $p6, $p20, $i21, $i22, $i23, $p19, $p25, $i26, $p27, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $p37, $p39, $p40, $i41, $i42, $p43, $i44, $i45, $p46, $i47, $i48, $p49, $i50, $i55, $i56, $p57, $i58, $p59, $i60, $i61, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i74, $p75, $i76, $p72, $i73, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $i63, $p64, $p88, $p62, $p77, $i78, $p89, $i90, $p53, $i54, $p91, $p93, $i94, $p95, vslice_dummy_var_46);
    goto $bb7_last;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p6);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i3, 2);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p27 := genlmsg_put($p25, $i1, $i2, team_nl_family, $i26, 3);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p6);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i35 := nla_put_u32($p30, 1, $i34);
    call {:si_unique_call 829} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p37 := $p27;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p6);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p40 := nla_nest_start($p39, 3);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p43 := $p27;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p5);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p19);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $p89, $i90 := $p19, 0;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p53, $i54 := $p89, $i90;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p6);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_46 := nla_nest_end($p91, $p40);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p6);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} genlmsg_end($p93, $p27);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i8.i1($i54);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p20, $p95 := $p53, $p27;
    assume true;
    goto $bb8, $bb51;

  $bb51:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p6);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i3, 2);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p98 := nlmsg_put($p96, $i1, $i2, 3, 0, $i97);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p6);
    call {:si_unique_call 844} $i109 := devirtbounce($p4, $p108, $p0, $i1);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 845} {:cexpr "tmp___2"} boogie_si_record_i32($i109);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i24 := $i109;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i100 == 1;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    call $i101, $i102, $i103, $p104, $p105, $i106, $i107 := team_nl_send_port_list_get_loop_$bb56($p0, $i1, $i2, $p4, $p6, $i97, $i101, $i102, $i103, $p104, $p105, $i106, $i107);
    goto $bb56_last;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 842} {:cexpr "err"} boogie_si_record_i32($i101);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i103 := $i101;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p6);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p105 := nlmsg_put($p104, $i1, $i2, 3, 0, $i97);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i107 == 1);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb60_dummy;

  $bb57:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p95, $i103;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p6);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} genlmsg_cancel($p110, $p51);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p6);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} nlmsg_free($p111);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i24 := $i52;
    goto $bb11;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i21 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 826} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $p19 := $p20;
    goto $bb10_dummy;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i24 := $i18;
    goto $bb11;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i56 == 1;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i58, $i60);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p62 := $p19;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p77, $i78 := $p62, 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p89, $i90 := $p77, $i78;
    goto $bb50;

  $bb32:
    assume $i61 == 1;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i63, $p64 := 0, $p19;
    goto $bb35;

  $bb35:
    call $p65, $i66, $i67, $p68, $i69, $i70, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $i63, $p64, $p88 := team_nl_send_port_list_get_loop_$bb35($p6, $i60, $p65, $i66, $i67, $p68, $i69, $i70, $i79, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $i63, $p64, $p88);
    goto $bb35_last;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p6);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i66 := team_nl_fill_one_port_get($p65, $p64);
    call {:si_unique_call 838} {:cexpr "err"} boogie_si_record_i32($i66);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p68, $i69, $i70 := $p64, $i63, $i66;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i63, 1);
    call {:si_unique_call 839} {:cexpr "i"} boogie_si_record_i32($i79);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p64, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p83, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, $i60);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p88 := $p84;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p62 := $p88;
    goto $bb34;

  $bb47:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i63, $p64 := $i79, $p84;
    goto $bb47_dummy;

  $bb37:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, $sub.i32(0, 90));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p72, $i73 := $p27, $i70;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p72, $i73;
    goto $bb27;

  $bb39:
    assume $i71 == 1;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i69, 0);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p75, $i76 := $p27, $i70;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p77, $i78 := $p68, 1;
    goto $bb44;

  $bb41:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p75, $i76;
    goto $bb27;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p6);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i47 := team_nl_fill_one_port_get($p46, $p5);
    call {:si_unique_call 832} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p49, $i50 := $p27, $i47;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p53, $i54 := $p19, 0;
    goto $bb29;

  $bb25:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p49, $i50;
    goto $bb27;

  $bb20:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p38 := $p43;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p38, $sub.i32(0, 90);
    goto $bb27;

  $bb16:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p38 := $p37;
    goto $bb18;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 90);
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb5;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p15 := $p14;
    goto $bb3;

  $bb60_dummy:
    assume false;
    return;

  $bb56_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i101 := __send_and_alloc_skb($p6, $p0, $i1, $p4);
    goto SeqInstr_115, SeqInstr_116;

  $bb47_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4048;

  $bb10_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;
}



const team_nl_fill_one_port_get: ref;

axiom team_nl_fill_one_port_get == $sub.ref(0, 389754);

procedure team_nl_fill_one_port_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_nl_fill_one_port_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p2 := nla_nest_start($p0, 1);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $i9 := nla_put_u32($p0, 1, $i8);
    call {:si_unique_call 849} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(70, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(71, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $i31 := nla_put_u32($p0, 4, $i30);
    call {:si_unique_call 857} {:cexpr "tmp___3"} boogie_si_record_i32($i31);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(8, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i38 := nla_put_u8($p0, 5, $i37);
    call {:si_unique_call 859} {:cexpr "tmp___4"} boogie_si_record_i32($i38);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_47 := nla_nest_end($p0, $p2);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} nla_nest_cancel($p0, $p2);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 90);
    goto $bb32;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i26 := nla_put_flag($p0, 3);
    call {:si_unique_call 855} {:cexpr "tmp___2"} boogie_si_record_i32($i26);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i27 == 1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume $i27 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i20 := nla_put_flag($p0, 6);
    call {:si_unique_call 853} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $i14 := nla_put_flag($p0, 2);
    call {:si_unique_call 851} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(70, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_put: ref;

axiom dev_put == $sub.ref(0, 390786);

procedure dev_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dev_put($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} __bad_size_call_parameter();
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 872} devirtbounce.5(0, $p39, $sub.i32(0, 1), $p39);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 871} devirtbounce.12(0, $p37, $p37);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 870} devirtbounce.12(0, $p34, $p34);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 869} devirtbounce.5(0, $p31, $sub.i32(0, 1), $p31);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 868} devirtbounce.12(0, $p29, $p29);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 867} devirtbounce.12(0, $p26, $p26);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 866} devirtbounce.5(0, $p23, $sub.i32(0, 1), $p23);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 865} devirtbounce.12(0, $p21, $p21);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i16 == 1;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 864} devirtbounce.12(0, $p18, $p18);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 863} devirtbounce.5(0, $p15, $sub.i32(0, 1), $p15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 862} devirtbounce.12(0, $p13, $p13);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 861} devirtbounce.12(0, $p10, $p10);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 391818);

procedure __bad_size_call_parameter();



const synchronize_rcu_bh: ref;

axiom synchronize_rcu_bh == $sub.ref(0, 392850);

procedure synchronize_rcu_bh();
  free requires assertsPassed;



implementation synchronize_rcu_bh()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    return;
}



const __netpoll_cleanup: ref;

axiom __netpoll_cleanup == $sub.ref(0, 393882);

procedure __netpoll_cleanup($p0: ref);
  free requires assertsPassed;



implementation __netpoll_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    return;
}



const netdev_upper_dev_unlink: ref;

axiom netdev_upper_dev_unlink == $sub.ref(0, 394914);

procedure netdev_upper_dev_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_upper_dev_unlink($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_rtnl_is_held: ref;

axiom lockdep_rtnl_is_held == $sub.ref(0, 395946);

procedure lockdep_rtnl_is_held() returns ($r: i32);
  free requires assertsPassed;



implementation lockdep_rtnl_is_held() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 1} true;
    call {:si_unique_call 874} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 875} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const team_port_add: ref;

axiom team_port_add == $sub.ref(0, 396978);

procedure team_port_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.24, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.17, assertsPassed;



implementation team_port_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i64;
  var $i75: i32;
  var $i76: i1;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $i97: i32;
  var $i98: i1;
  var $i100: i32;
  var $i101: i1;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $i111: i32;
  var $i112: i1;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i1;
  var $i120: i8;
  var $i121: i1;
  var $i113: i32;
  var $i110: i32;
  var $i102: i32;
  var $i99: i32;
  var $i96: i32;
  var $i77: i32;
  var $p125: ref;
  var $i126: i32;
  var $i66: i32;
  var $p128: ref;
  var $i12: i32;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 8);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 262144);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1024);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i24 := team_dev_type_check_change($p5, $p1);
    call {:si_unique_call 884} {:cexpr "err"} boogie_si_record_i32($i24);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 1);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(360, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 160);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p35 := kzalloc($i34, 208);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p0);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} INIT_LIST_HEAD($p41);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i43);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i48 := dev_set_mtu($p1, $i47);
    call {:si_unique_call 889} {:cexpr "err"} boogie_si_record_i32($i48);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i64($i73);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 894} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p69, $p71, $i74, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i75 := team_port_enter($p0, $p36);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 896} {:cexpr "err"} boogie_si_record_i32($i75);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i78 := dev_open($p1);
    call {:si_unique_call 900} {:cexpr "err"} boogie_si_record_i32($i78);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i97 := vlan_vids_add_by_dev($p1, $p5);
    call {:si_unique_call 907} {:cexpr "err"} boogie_si_record_i32($i97);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i100 := team_port_enable_netpoll($p0, $p36);
    call {:si_unique_call 911} {:cexpr "err"} boogie_si_record_i32($i100);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i105 := $and.i64($i104, 32768);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i106 := $eq.i64($i105, 0);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p36);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i108 := netdev_rx_handler_register($p1, team_handle_frame, $p107);
    call {:si_unique_call 916} {:cexpr "err"} boogie_si_record_i32($i108);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i111 := team_upper_dev_link($p5, $p1);
    call {:si_unique_call 920} {:cexpr "err"} boogie_si_record_i32($i111);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i114 := __team_option_inst_add_port($p0, $p36);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 924} {:cexpr "err"} boogie_si_record_i32($i114);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $sub.i32(0, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} list_add_tail_rcu($p117, $p118);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} team_port_enable($p0, $p36);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} __team_compute_features($p0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i119 := netif_carrier_ok($p1);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i120 := $zext.i1.i8($i119);
    call {:si_unique_call 931} {:cexpr "tmp___3"} boogie_si_record_i8($i120);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i8.i1($i120);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} __team_port_change_port_added($p36, $i121);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} __team_options_change_check($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} netdev_info.ref.ref.ref($p5, .str.19, $p7);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i115 == 1;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} netdev_err.ref.ref.ref($p5, .str.18, $p7);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} team_upper_dev_unlink($p5, $p1);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i113 := $i114;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} netdev_rx_handler_unregister($p1);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i110 := $i113;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} team_port_disable_netpoll($p36);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i102 := $i110;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vlan_vids_del_by_dev($p1, $p5);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i99 := $i102;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_50 := dev_close($p1);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i96 := $i99;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} team_port_leave($p0, $p36);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_49 := team_port_set_orig_dev_addr($p36);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i77 := $i96;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_48 := dev_set_mtu($p1, $i126);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i66 := $i77;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p36);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} kfree($p128);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i12 := $i66;
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i112 == 1;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} netdev_err.ref.ref.ref($p5, .str.17, $p7);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i113 := $i111;
    goto $bb58;

  $bb52:
    assume $i109 == 1;
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} netdev_err.ref.ref.ref($p5, .str.16, $p7);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i110 := $i108;
    goto $bb54;

  $bb49:
    assume $i106 == 1;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} dev_disable_lro($p1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume $i101 == 1;
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} netdev_err.ref.ref.ref($p5, .str.15, $p7);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i102 := $i100;
    goto $bb47;

  $bb41:
    assume $i98 == 1;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} netdev_err.ref.ref.ref($p5, .str.14, $p7);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i99 := $i97;
    goto $bb43;

  $bb34:
    assume $i79 == 1;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p80, .str.9);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p81, .str.10);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p82, .str.2);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p83, .str.13);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.7, $p85);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 1168);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p85, $i88);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p89, 0);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.8, $p90);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 902} {:cexpr "tmp___2"} boogie_si_record_i64($i94);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i96 := $i78;
    goto $bb39;

  $bb36:
    assume $i95 == 1;
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} __dynamic_netdev_dbg.ref.ref.ref.ref($p3, $p5, .str.13, $p7);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i76 == 1;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} netdev_err.ref.ref.ref($p5, .str.12, $p7);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i77 := $i75;
    goto $bb32;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p50, .str.9);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p51, .str.10);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p52, .str.2);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, .str.11);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.7, $p55);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 1152);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p55, $i58);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p59, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.8, $p60);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 891} {:cexpr "tmp___1"} boogie_si_record_i64($i64);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i66 := $i48;
    goto $bb28;

  $bb25:
    assume $i65 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p5, .str.11, $i48);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} netdev_err.ref.ref.ref($p5, .str.8, $p7);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i12 := $i24;
    goto $bb3;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i21 := vlan_uses_dev($p5);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 881} {:cexpr "tmp"} boogie_si_record_i8($i22);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} netdev_err.ref.ref.ref($p5, .str.7, $p7);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} netdev_err.ref.ref.ref($p5, .str.6, $p7);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} netdev_err.ref.ref.ref($p5, .str.5, $p7);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const vlan_uses_dev: ref;

axiom vlan_uses_dev == $sub.ref(0, 398010);

procedure vlan_uses_dev($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vlan_uses_dev($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 1} true;
    call {:si_unique_call 935} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 936} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_dev_type_check_change: ref;

axiom team_dev_type_check_change == $sub.ref(0, 399042);

procedure team_dev_type_check_change($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_dev_type_check_change($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i13: i32;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p2 := netdev_priv($p0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(564, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(564, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, $i11);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i15 := list_empty($p14);
    call {:si_unique_call 939} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i17 := call_netdevice_notifiers(14, $p0);
    call {:si_unique_call 942} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i18 := notifier_to_errno($i17);
    call {:si_unique_call 944} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} dev_uc_flush($p0);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} dev_mc_flush($p0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} team_setup_by_port($p0, $p1);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_51 := call_netdevice_notifiers(15, $p0);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} netdev_err.ref.ref($p0, .str.21);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} netdev_err.ref.ref.ref($p0, .str.20, $p5);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const team_port_enter: ref;

axiom team_port_enter == $sub.ref(0, 400074);

procedure team_port_enter($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_port_enter($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} dev_hold($p3);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(32, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(32, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 951} $i14 := devirtbounce.13($p13, $p0, $p1);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 952} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} netdev_err.ref.ref.ref($p17, .str.12, $p21);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} dev_put($p24);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i22 := $i14;
    goto $bb8;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const dev_open: ref;

axiom dev_open == $sub.ref(0, 401106);

procedure dev_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 1} true;
    call {:si_unique_call 955} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vlan_vids_add_by_dev: ref;

axiom vlan_vids_add_by_dev == $sub.ref(0, 402138);

procedure vlan_vids_add_by_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vlan_vids_add_by_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const team_port_enable_netpoll: ref;

axiom team_port_enable_netpoll == $sub.ref(0, 403170);

procedure team_port_enable_netpoll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_enable_netpoll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2968)), $mul.ref(1328, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $p9 := kzalloc(160, 208);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i15 := __netpoll_setup($p10, $p14);
    call {:si_unique_call 961} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p9);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p10);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} kfree($p17);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const dev_disable_lro: ref;

axiom dev_disable_lro == $sub.ref(0, 404202);

procedure dev_disable_lro($p0: ref);
  free requires assertsPassed;



implementation dev_disable_lro($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    return;
}



const team_handle_frame: ref;

axiom team_handle_frame == $sub.ref(0, 405234);

procedure team_handle_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_handle_frame($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i16: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $p0);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $p2 := skb_share_check($p1, 32);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p0, $p2);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $p8 := team_port_get_rcu($p7);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i11 := team_port_enabled($p8);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 966} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(16, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 967} $i20 := devirtbounce.14($p19, $p10, $p8, $p2);
    call {:si_unique_call 968} {:cexpr "res"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i16, 1);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i51 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __bad_size_call_parameter();
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32(1, 1);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i91 == 1);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i95 == 1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 984} devirtbounce.5(0, $p101, 1, $p101);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb58:
    assume $i95 == 1;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 983} devirtbounce.12(0, $p98, $p98);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i91 == 1;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 982} devirtbounce.12(0, $p94, $p94);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb20:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i54 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb24;

  $bb25:
    assume $i54 == 1;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32(1, 1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i80 == 1);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i84 == 1);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 981} devirtbounce.5(0, $p90, 1, $p90);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb51:
    assume $i84 == 1;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 980} devirtbounce.12(0, $p87, $p87);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i80 == 1;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 979} devirtbounce.12(0, $p83, $p83);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb18:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb24;

  $bb29:
    assume $i56 == 1;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32(1, 1);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i69 == 1);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i73 == 1);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 978} devirtbounce.5(0, $p79, 1, $p79);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb44:
    assume $i73 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 977} devirtbounce.12(0, $p76, $p76);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i69 == 1;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 976} devirtbounce.12(0, $p72, $p72);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb27:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb24;

  $bb31:
    assume $i57 == 1;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32(1, 1);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i58 == 1);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i62 == 1);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 975} devirtbounce.5(0, $p68, 1, $p68);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb36:
    assume $i62 == 1;
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 974} devirtbounce.12(0, $p65, $p65);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i58 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 48)), $mul.ref(40, 1));
    call {:si_unique_call 973} devirtbounce.12(0, $p61, $p61);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 969} $i24 := devirtbounce.11(0, this_cpu_off, $p23);
    call {:si_unique_call 970} {:cexpr "tcp_ptr__"} boogie_si_record_i64($i24);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p25 := $i2p.i64.ref($i24);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} u64_stats_init($p26);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, 1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p30, $i29);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i32, $i35);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i36);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p2);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(144, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 2);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} u64_stats_init($p47);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, $p49);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 1);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p25, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i16 := 2;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const netdev_rx_handler_register: ref;

axiom netdev_rx_handler_register == $sub.ref(0, 406266);

procedure netdev_rx_handler_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_rx_handler_register($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 1} true;
    call {:si_unique_call 986} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 987} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const team_upper_dev_link: ref;

axiom team_upper_dev_link == $sub.ref(0, 407298);

procedure team_upper_dev_link($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_upper_dev_link($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i2 := netdev_master_upper_dev_link($p1, $p0);
    call {:si_unique_call 989} {:cexpr "err"} boogie_si_record_i32($i2);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 262144);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const __team_option_inst_add_port: ref;

axiom __team_option_inst_add_port == $sub.ref(0, 408330);

procedure __team_option_inst_add_port($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_option_inst_add_port($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p11: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(328, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $i15, $i16, $i17, $p19, $p20, $p21, $p22, $i23, $i24, $p11 := __team_option_inst_add_port_loop_$bb4($p0, $p1, $i9, $p12, $i13, $i14, $i15, $i16, $i17, $p19, $p20, $p21, $p22, $i23, $i24, $p11);
    goto $bb4_last;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i9);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p20;
    goto $bb14_dummy;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i15 := __team_option_inst_add($p0, $p11, $p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 991} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} __team_option_inst_del_port($p0, $p1);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i25 := $i17;
    goto $bb17;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 409362);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(72, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 994} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __team_port_change_port_added: ref;

axiom __team_port_change_port_added == $sub.ref(0, 410394);

procedure __team_port_change_port_added($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_port_change_port_added($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 995} {:cexpr "__team_port_change_port_added:arg:linkup"} boogie_si_record_i1($i1);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} __team_port_change_send($p0, $i3);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __team_carrier_check($p5);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const netdev_master_upper_dev_link: ref;

axiom netdev_master_upper_dev_link == $sub.ref(0, 411426);

procedure netdev_master_upper_dev_link($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_master_upper_dev_link($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 1} true;
    call {:si_unique_call 998} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 999} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_share_check: ref;

axiom skb_share_check == $sub.ref(0, 412458);

procedure skb_share_check($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_share_check($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} {:cexpr "skb_share_check:arg:pri"} boogie_si_record_i32($i1);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 16);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i4 := skb_shared($p0);
    call {:si_unique_call 1003} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $p13 := $p0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p6 := skb_clone($p0, $i1);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i11 := ldv__builtin_expect($i10, 1);
    call {:si_unique_call 1006} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} kfree_skb($p0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $p6;
    goto $bb9;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} consume_skb($p0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} __might_sleep(.str.22, 1196, 0);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_port_get_rcu: ref;

axiom team_port_get_rcu == $sub.ref(0, 413490);

procedure team_port_get_rcu($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_port_get_rcu($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(920, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __read_once_size($p3, $p5, 8);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i8 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1012} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p7);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i11 := rcu_read_lock_held();
    call {:si_unique_call 1014} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} lockdep_rcu_suspicious(.str.2, 46, .str.23);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb3;
}



const u64_stats_init: ref;

axiom u64_stats_init == $sub.ref(0, 414522);

procedure u64_stats_init($p0: ref);
  free requires assertsPassed;



implementation u64_stats_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    return;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 415554);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1016} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1017} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 416586);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1019} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    return;
}



const skb_shared: ref;

axiom skb_shared == $sub.ref(0, 417618);

procedure skb_shared($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_shared($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i2 := atomic_read($p1);
    call {:si_unique_call 1021} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_clone: ref;

axiom skb_clone == $sub.ref(0, 418650);

procedure skb_clone($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_clone($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} {:cexpr "skb_clone:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $p2 := external_alloc();
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 419682);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 420714);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __netpoll_setup: ref;

axiom __netpoll_setup == $sub.ref(0, 421746);

procedure __netpoll_setup($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __netpoll_setup($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1024} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1025} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_hold: ref;

axiom dev_hold == $sub.ref(0, 422778);

procedure dev_hold($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation dev_hold($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} __bad_size_call_parameter();
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32(1, 1);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 1037} devirtbounce.5(0, $p39, 1, $p39);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 1036} devirtbounce.12(0, $p37, $p37);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 1035} devirtbounce.12(0, $p34, $p34);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32(1, 1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 1034} devirtbounce.5(0, $p31, 1, $p31);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 1033} devirtbounce.12(0, $p29, $p29);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 1032} devirtbounce.12(0, $p26, $p26);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32(1, 1);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 1031} devirtbounce.5(0, $p23, 1, $p23);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1030} devirtbounce.12(0, $p21, $p21);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i16 == 1;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 1029} devirtbounce.12(0, $p18, $p18);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(1, 1);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32(1, $sub.i32(0, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 1028} devirtbounce.5(0, $p15, 1, $p15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1027} devirtbounce.12(0, $p13, $p13);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1026} devirtbounce.12(0, $p10, $p10);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const call_netdevice_notifiers: ref;

axiom call_netdevice_notifiers == $sub.ref(0, 423810);

procedure call_netdevice_notifiers($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation call_netdevice_notifiers($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1039} {:cexpr "call_netdevice_notifiers:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1040} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1041} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const notifier_to_errno: ref;

axiom notifier_to_errno == $sub.ref(0, 424842);

procedure notifier_to_errno($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation notifier_to_errno($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} {:cexpr "notifier_to_errno:arg:ret"} boogie_si_record_i32($i0);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, $sub.i32(0, 32769));
    call {:si_unique_call 1043} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 1);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(1, $i1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i4 := $i3;
    goto $bb3;
}



const dev_uc_flush: ref;

axiom dev_uc_flush == $sub.ref(0, 425874);

procedure dev_uc_flush($p0: ref);
  free requires assertsPassed;



implementation dev_uc_flush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    return;
}



const dev_mc_flush: ref;

axiom dev_mc_flush == $sub.ref(0, 426906);

procedure dev_mc_flush($p0: ref);
  free requires assertsPassed;



implementation dev_mc_flush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    return;
}



const team_setup_by_port: ref;

axiom team_setup_by_port == $sub.ref(0, 427938);

procedure team_setup_by_port($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_setup_by_port($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(536, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(536, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p3);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(564, 1));
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(564, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p7, $i6);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(566, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(566, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, $i9);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(960, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(960, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(605, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} llvm.memmove.p0i8.p0i8.i64($p18, $p20, $i23, 8, 0);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} eth_hw_addr_inherit($p0, $p1);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 428970);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const eth_hw_addr_inherit: ref;

axiom eth_hw_addr_inherit == $sub.ref(0, 430002);

procedure eth_hw_addr_inherit($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_hw_addr_inherit($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(604, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(604, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, $i3);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} ether_addr_copy($p6, $p8);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    return;
}



const ether_addr_copy: ref;

axiom ether_addr_copy == $sub.ref(0, 431034);

procedure ether_addr_copy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ether_addr_copy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(4, 2));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(4, 2));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i7);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    return;
}



const __team_netpoll_cleanup: ref;

axiom __team_netpoll_cleanup == $sub.ref(0, 432066);

procedure __team_netpoll_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __team_netpoll_cleanup($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1)), $mul.ref(0, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p11 := $p5;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p11 := __team_netpoll_cleanup_loop_$bb4($i9, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p11);
    goto $bb4_last;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} team_port_disable_netpoll($p11);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p15, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, $i9);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p16;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5046;
}



const vlan_vid_del: ref;

axiom vlan_vid_del == $sub.ref(0, 433098);

procedure vlan_vid_del($p0: ref, $i1: i16, $i2: i16);
  free requires assertsPassed;



implementation vlan_vid_del($p0: ref, $i1: i16, $i2: i16)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} {:cexpr "vlan_vid_del:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 1049} {:cexpr "vlan_vid_del:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    return;
}



const vlan_vid_add: ref;

axiom vlan_vid_add == $sub.ref(0, 434130);

procedure vlan_vid_add($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation vlan_vid_add($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1050} {:cexpr "vlan_vid_add:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 1051} {:cexpr "vlan_vid_add:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1052} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1053} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const u64_stats_fetch_begin_irq: ref;

axiom u64_stats_fetch_begin_irq == $sub.ref(0, 435162);

procedure u64_stats_fetch_begin_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation u64_stats_fetch_begin_irq($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const u64_stats_fetch_retry_irq: ref;

axiom u64_stats_fetch_retry_irq == $sub.ref(0, 436194);

procedure u64_stats_fetch_retry_irq($p0: ref, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation u64_stats_fetch_retry_irq($p0: ref, $i1: i32) returns ($r: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} {:cexpr "u64_stats_fetch_retry_irq:arg:start"} boogie_si_record_i32($i1);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const cpumask_next: ref;

axiom cpumask_next == $sub.ref(0, 437226);

procedure cpumask_next($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_next($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} {:cexpr "cpumask_next:arg:n"} boogie_si_record_i32($i0);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i0, $sub.i32(0, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i0, 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i10 := find_next_bit($p5, $i7, $i9);
    call {:si_unique_call 1058} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_52 := cpumask_check($i0);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cpumask_check: ref;

axiom cpumask_check == $sub.ref(0, 438258);

procedure cpumask_check($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_check($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var vslice_dummy_var_53: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} {:cexpr "cpumask_check:arg:cpu"} boogie_si_record_i32($i0);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, $i0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 1060} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i3);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 1062} {:cexpr "tmp___1"} boogie_si_record_i64($i7);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_53 := ldv__builtin_expect($i24, 0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i10 := $xor.i1($i9, 1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 1063} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1065} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1068} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} warn_slowpath_null(.str.38, 117);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 439290);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1070} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1071} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1072} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1073} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 440322);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1075} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1077} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 441354);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 1078} {:cexpr "a"} boogie_si_record_i32($i2);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 442386);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const dev_uc_sync_multiple: ref;

axiom dev_uc_sync_multiple == $sub.ref(0, 443418);

procedure dev_uc_sync_multiple($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_uc_sync_multiple($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1079} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1080} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_mc_sync_multiple: ref;

axiom dev_mc_sync_multiple == $sub.ref(0, 444450);

procedure dev_mc_sync_multiple($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_mc_sync_multiple($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1081} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1082} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_set_promiscuity: ref;

axiom dev_set_promiscuity == $sub.ref(0, 445482);

procedure dev_set_promiscuity($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_promiscuity($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1083} {:cexpr "dev_set_promiscuity:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1084} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1085} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_set_allmulti: ref;

axiom dev_set_allmulti == $sub.ref(0, 446514);

procedure dev_set_allmulti($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_allmulti($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1086} {:cexpr "dev_set_allmulti:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1087} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1088} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_rx_queue_recorded: ref;

axiom skb_rx_queue_recorded == $sub.ref(0, 447546);

procedure skb_rx_queue_recorded($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_rx_queue_recorded($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_get_rx_queue: ref;

axiom skb_get_rx_queue == $sub.ref(0, 448578);

procedure skb_get_rx_queue($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation skb_get_rx_queue($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 65535);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const qdisc_skb_cb: ref;

axiom qdisc_skb_cb == $sub.ref(0, 449610);

procedure qdisc_skb_cb($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qdisc_skb_cb($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const team_queue_override_transmit: ref;

axiom team_queue_override_transmit == $sub.ref(0, 450642);

procedure team_queue_override_transmit($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_queue_override_transmit($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p33: ref;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(441, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $p18 := __team_get_qom_list($p0, $i17);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p20);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p2);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} __read_once_size($p21, $p23, 8);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1096} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p25);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p27, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p18);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i30, $i31);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p33 := $p28;
    goto $bb11;

  $bb11:
    call $i34, $i35, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $p45, $p46, $p47, $i48, $i49, $p33 := team_queue_override_transmit_loop_$bb11($p0, $p1, $p4, $p5, $i31, $i34, $i35, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $p45, $p46, $p47, $i48, $i49, $p33);
    goto $bb11_last;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i34 := team_dev_queue_xmit($p0, $p33, $p1);
    call {:si_unique_call 1098} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 160)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p38);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p4);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __read_once_size($p39, $p41, 8);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p5);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i44 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1101} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p43);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p45, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, $i31);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $p33 := $p46;
    goto $bb16_dummy;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5231;
}



const team_dev_queue_xmit: ref;

axiom team_dev_queue_xmit == $sub.ref(0, 451674);

procedure team_dev_queue_xmit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_dev_queue_xmit($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i20: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $p3 := qdisc_skb_cb($p2);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 28)), $mul.ref(4, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} skb_set_queue_mapping($p2, $i7);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i13 := netpoll_tx_running($p12);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1105} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i64($i15);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1107} {:cexpr "tmp___1"} boogie_si_record_i64($i17);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i20 := dev_queue_xmit($p2);
    call {:si_unique_call 1110} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} team_netpoll_send_skb($p1, $p2);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;
}



const skb_set_queue_mapping: ref;

axiom skb_set_queue_mapping == $sub.ref(0, 452706);

procedure skb_set_queue_mapping($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_set_queue_mapping($p0: ref, $i1: i16)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} {:cexpr "skb_set_queue_mapping:arg:queue_mapping"} boogie_si_record_i16($i1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(140, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, $i1);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    return;
}



const netpoll_tx_running: ref;

axiom netpoll_tx_running == $sub.ref(0, 453738);

procedure netpoll_tx_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netpoll_tx_running($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i1 := arch_local_save_flags();
    call {:si_unique_call 1113} {:cexpr "_flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i2 := arch_irqs_disabled_flags($i1);
    call {:si_unique_call 1115} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const team_netpoll_send_skb: ref;

axiom team_netpoll_send_skb == $sub.ref(0, 454770);

procedure team_netpoll_send_skb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation team_netpoll_send_skb($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} netpoll_send_skb($p3, $p1);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_queue_xmit: ref;

axiom dev_queue_xmit == $sub.ref(0, 455802);

procedure dev_queue_xmit($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_queue_xmit($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(24, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i3 := dev_queue_xmit_sk($p2, $p0);
    call {:si_unique_call 1118} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_queue_xmit_sk: ref;

axiom dev_queue_xmit_sk == $sub.ref(0, 456834);

procedure dev_queue_xmit_sk($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_queue_xmit_sk($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1119} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netpoll_send_skb: ref;

axiom netpoll_send_skb == $sub.ref(0, 457866);

procedure netpoll_send_skb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netpoll_send_skb($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i2 := arch_local_irq_save();
    call {:si_unique_call 1122} {:cexpr "flags"} boogie_si_record_i64($i2);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} trace_hardirqs_off();
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} netpoll_send_skb_on_dev($p0, $p1, $p4);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i5 := arch_irqs_disabled_flags($i2);
    call {:si_unique_call 1126} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} trace_hardirqs_on();
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} arch_local_irq_restore($i2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} arch_local_irq_restore($i2);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} trace_hardirqs_off();
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const arch_local_irq_save: ref;

axiom arch_local_irq_save == $sub.ref(0, 458898);

procedure arch_local_irq_save() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_irq_save() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i0 := arch_local_save_flags();
    call {:si_unique_call 1132} {:cexpr "f"} boogie_si_record_i64($i0);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} arch_local_irq_disable();
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const trace_hardirqs_off: ref;

axiom trace_hardirqs_off == $sub.ref(0, 459930);

procedure trace_hardirqs_off();
  free requires assertsPassed;



implementation trace_hardirqs_off()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    return;
}



const netpoll_send_skb_on_dev: ref;

axiom netpoll_send_skb_on_dev == $sub.ref(0, 460962);

procedure netpoll_send_skb_on_dev($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation netpoll_send_skb_on_dev($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    return;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 461994);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const arch_local_irq_restore: ref;

axiom arch_local_irq_restore == $sub.ref(0, 463026);

procedure arch_local_irq_restore($i0: i64);
  free requires assertsPassed;



implementation arch_local_irq_restore($i0: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} {:cexpr "arch_local_irq_restore:arg:f"} boogie_si_record_i64($i0);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1137} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1139} $i8 := devirtbounce.15(0, 44, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(8, 1)), $mul.ref(0, 1)), 1, $i0);
    call {:si_unique_call 1140} {:cexpr "__eax"} boogie_si_record_i64($i8);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1138} devirtbounce.1(0, .str.36, 836, 12);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_restore_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const trace_hardirqs_on: ref;

axiom trace_hardirqs_on == $sub.ref(0, 464058);

procedure trace_hardirqs_on();
  free requires assertsPassed;



implementation trace_hardirqs_on()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 465090);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1142} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1144} $i7 := devirtbounce.16(0, 43, pv_irq_ops, 1);
    call {:si_unique_call 1145} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1143} devirtbounce.1(0, .str.36, 831, 12);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_local_irq_disable: ref;

axiom arch_local_irq_disable == $sub.ref(0, 466122);

procedure arch_local_irq_disable();
  free requires assertsPassed;



implementation arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1147} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 1149} $i7 := devirtbounce.16(0, 45, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 1150} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1148} devirtbounce.1(0, .str.36, 841, 12);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_irq_disable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const team_mcast_rejoin_fini: ref;

axiom team_mcast_rejoin_fini == $sub.ref(0, 467154);

procedure team_mcast_rejoin_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation team_mcast_rejoin_fini($p0: ref)
{
  var $p2: ref;
  var vslice_dummy_var_54: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} vslice_dummy_var_54 := ldv_cancel_delayed_work_sync_13($p2);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    return;
}



const team_notify_peers_fini: ref;

axiom team_notify_peers_fini == $sub.ref(0, 468186);

procedure team_notify_peers_fini($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation team_notify_peers_fini($p0: ref)
{
  var $p2: ref;
  var vslice_dummy_var_55: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} vslice_dummy_var_55 := ldv_cancel_delayed_work_sync_12($p2);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    return;
}



const team_queue_override_fini: ref;

axiom team_queue_override_fini == $sub.ref(0, 469218);

procedure team_queue_override_fini($p0: ref);
  free requires assertsPassed;



implementation team_queue_override_fini($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(448, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} kfree($p3);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cancel_delayed_work_sync_12: ref;

axiom ldv_cancel_delayed_work_sync_12 == $sub.ref(0, 470250);

procedure ldv_cancel_delayed_work_sync_12($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation ldv_cancel_delayed_work_sync_12($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1155} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1156} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} disable_work_1($p5);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 471282);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1158} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1159} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 472314);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i1 := $M.9;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i3 := $M.9;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.11;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i11 := $M.11;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.13;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i19 := $M.13;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.15;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i27 := $M.15;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.16;
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 1163} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.14;
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 1162} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.12;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 1161} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.10;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 1160} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_cancel_delayed_work_sync_13: ref;

axiom ldv_cancel_delayed_work_sync_13 == $sub.ref(0, 473346);

procedure ldv_cancel_delayed_work_sync_13($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation ldv_cancel_delayed_work_sync_13($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1165} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1166} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} disable_work_1($p5);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 474378);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_percpu: ref;

axiom __alloc_percpu == $sub.ref(0, 475410);

procedure __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_percpu($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} {:cexpr "__alloc_percpu:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1169} {:cexpr "__alloc_percpu:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p2 := external_alloc();
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const team_queue_override_init: ref;

axiom team_queue_override_init == $sub.ref(0, 476442);

procedure team_queue_override_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_queue_override_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i16: i32;
  var $p17: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2968)), $mul.ref(1024, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    call {:si_unique_call 1171} {:cexpr "queue_cnt"} boogie_si_record_i32($i5);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i5);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 16);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p10 := kmalloc($i9, 208);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(448, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p10);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32(0, $i5);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i16, $p17 := 0, $p10;
    goto $bb11;

  $bb11:
    call $p18, $i19, $i20, $i16, $p17 := team_queue_override_init_loop_$bb11($i5, $p18, $i19, $i20, $i16, $p17);
    goto $bb11_last;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(1, 16));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} INIT_LIST_HEAD($p17);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i16, 1);
    call {:si_unique_call 1174} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i19, $i5);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17 := $i19, $p18;
    goto $bb13_dummy;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5507;
}



const team_notify_peers_init: ref;

axiom team_notify_peers_init == $sub.ref(0, 477474);

procedure team_notify_peers_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_notify_peers_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p21: ref;
  var $p25: ref;
  var $p28: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} __init_work($p6, 0);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 137438953408);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 1179} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} lockdep_init_map($p17, .str.39, $p1, 0);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} INIT_LIST_HEAD($p21);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, team_notify_peers_work);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1)), $mul.ref(80, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} init_timer_key($p28, 2097152, .str.40, $p3);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, delayed_work_timer_fn);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(464, 1)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    return;
}



const team_mcast_rejoin_init: ref;

axiom team_mcast_rejoin_init == $sub.ref(0, 478506);

procedure team_mcast_rejoin_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_mcast_rejoin_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p21: ref;
  var $p25: ref;
  var $p28: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p39: ref;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} __init_work($p6, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, 137438953408);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 1187} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} lockdep_init_map($p17, .str.41, $p1, 0);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} INIT_LIST_HEAD($p21);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, team_mcast_rejoin_work);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1)), $mul.ref(80, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} init_timer_key($p28, 2097152, .str.42, $p3);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, delayed_work_timer_fn);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(704, 1)), $mul.ref(16, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i35);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    return;
}



const team_set_lockdep_class: ref;

axiom team_set_lockdep_class == $sub.ref(0, 479538);

procedure team_set_lockdep_class($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_set_lockdep_class($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(616, 1)), $mul.ref(0, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} lockdep_init_map($p4, .str.59, team_netdev_addr_lock_key, 0);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} netdev_for_each_tx_queue($p0, team_set_lockdep_class_one, $0.ref);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(2960, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, team_tx_busylock_key);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    return;
}



const free_percpu: ref;

axiom free_percpu == $sub.ref(0, 480570);

procedure free_percpu($p0: ref);
  free requires assertsPassed;



implementation free_percpu($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 481602);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    return;
}



const team_set_lockdep_class_one: ref;

axiom team_set_lockdep_class_one == $sub.ref(0, 482634);

procedure team_set_lockdep_class_one($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation team_set_lockdep_class_one($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(328, 1)), $mul.ref(0, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} lockdep_init_map($p6, .str.60, team_netdev_xmit_lock_key, 0);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    return;
}



const netdev_for_each_tx_queue: ref;

axiom netdev_for_each_tx_queue == $sub.ref(0, 483666);

procedure netdev_for_each_tx_queue($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation netdev_for_each_tx_queue($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1024, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 0);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $i11, $i12, $i13, $i6 := netdev_for_each_tx_queue_loop_$bb4($p0, $p1, $p2, $p3, $p7, $p8, $i9, $p10, $i11, $i12, $i13, $i6);
    goto $bb4_last;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i6);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 504));
    call {:si_unique_call 1195} devirtbounce.17($p1, $p0, $p10, $p2);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i6, 1);
    call {:si_unique_call 1196} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p3);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, $i11);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5590;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 484698);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    return;
}



const team_mcast_rejoin_work: ref;

axiom team_mcast_rejoin_work == $sub.ref(0, 485730);

procedure team_mcast_rejoin_work($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation team_mcast_rejoin_work($p0: ref)
{
  var $p1: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var vslice_dummy_var_56: i1;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i3 := rtnl_trylock();
    call {:si_unique_call 1199} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 720), 976)), $mul.ref(704, 1)), $mul.ref(8, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $i10 := atomic_dec_if_positive($p9);
    call {:si_unique_call 1202} {:cexpr "val"} boogie_si_record_i32($i10);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 720), 976)), $mul.ref(0, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} vslice_dummy_var_57 := call_netdevice_notifiers(22, $p13);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} rtnl_unlock();
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i10, 0);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 720), 976)), $mul.ref(704, 1)), $mul.ref(4, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} $i19 := msecs_to_jiffies($i18);
    call {:si_unique_call 1207} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 720), 976)), $mul.ref(704, 1)), $mul.ref(16, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} vslice_dummy_var_58 := schedule_delayed_work($p21, $i19);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} rtnl_unlock();
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 720), 976)), $mul.ref(704, 1)), $mul.ref(16, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} vslice_dummy_var_56 := schedule_delayed_work($p6, 0);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 486762);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 487794);

procedure delayed_work_timer_fn($i0: i64);



const rtnl_trylock: ref;

axiom rtnl_trylock == $sub.ref(0, 488826);

procedure rtnl_trylock() returns ($r: i32);
  free requires assertsPassed;



implementation rtnl_trylock() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1210} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1211} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const atomic_dec_if_positive: ref;

axiom atomic_dec_if_positive == $sub.ref(0, 489858);

procedure atomic_dec_if_positive($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_dec_if_positive($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i11: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i1 := atomic_read($p0);
    call {:si_unique_call 1213} {:cexpr "c"} boogie_si_record_i32($i1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, $sub.i32(0, 1));
    call {:si_unique_call 1214} {:cexpr "dec"} boogie_si_record_i32($i2);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1216} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i8 := $i2;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i2, $i1;
    goto $bb4;

  $bb4:
    call $i11, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := atomic_dec_if_positive_loop_$bb4($p0, $i11, $i9, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i13 := atomic_cmpxchg($p0, $i10, $i9);
    call {:si_unique_call 1218} {:cexpr "old"} boogie_si_record_i32($i13);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i10);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i17 := ldv__builtin_expect($i16, 1);
    call {:si_unique_call 1220} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i19 := $i9;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i13, $sub.i32(0, 1));
    call {:si_unique_call 1221} {:cexpr "dec"} boogie_si_record_i32($i20);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1223} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i11 := $i20;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i9, $i10 := $i20, $i13;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i8 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i12 := $i8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 490890);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 491922);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 1226} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 492954);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1227} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1228} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1229} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 493986);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 1231} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 1232} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 1233} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1234} $i4 := devirtbounce.18(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 1235} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const team_notify_peers_work: ref;

axiom team_notify_peers_work == $sub.ref(0, 495018);

procedure team_notify_peers_work($p0: ref);
  free requires assertsPassed;
  modifies $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation team_notify_peers_work($p0: ref)
{
  var $p1: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var vslice_dummy_var_59: i1;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i3 := rtnl_trylock();
    call {:si_unique_call 1237} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 480), 976)), $mul.ref(464, 1)), $mul.ref(8, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i10 := atomic_dec_if_positive($p9);
    call {:si_unique_call 1240} {:cexpr "val"} boogie_si_record_i32($i10);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 480), 976)), $mul.ref(0, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vslice_dummy_var_60 := call_netdevice_notifiers(19, $p13);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} rtnl_unlock();
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i10, 0);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 480), 976)), $mul.ref(464, 1)), $mul.ref(4, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i19 := msecs_to_jiffies($i18);
    call {:si_unique_call 1245} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 480), 976)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_61 := schedule_delayed_work($p21, $i19);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} rtnl_unlock();
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 480), 976)), $mul.ref(464, 1)), $mul.ref(16, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vslice_dummy_var_59 := schedule_delayed_work($p6, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_ethtool_get_drvinfo: ref;

axiom team_ethtool_get_drvinfo == $sub.ref(0, 496050);

procedure team_ethtool_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation team_ethtool_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_62: i64;
  var vslice_dummy_var_63: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vslice_dummy_var_62 := strlcpy($p3, .str.9, 32);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_63 := strlcpy($p6, .str.62, 32);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    return;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 497082);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1249} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1250} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 498114);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1251} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1252} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1253} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const team_setup: ref;

axiom team_setup == $sub.ref(0, 499146);

procedure team_setup($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_setup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} ether_setup($p0);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, team_netdev_ops);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(520, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, team_ethtool_ops);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1320, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, team_destructor);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1040, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 0);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 4096);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 66561));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 1179648);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i18, 4096);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i19);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i22, 16384);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i26, 8192);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i27);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(248, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, 1672187);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(248, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, $sub.i64(0, 19));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(248, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i32);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(248, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i38 := $or.i64($i35, $i37);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    return;
}



const team_validate: ref;

axiom team_validate == $sub.ref(0, 500178);

procedure team_validate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation team_validate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p0, $mul.ref(1, 8));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p0, $mul.ref(1, 8));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i8 := nla_len($p7);
    call {:si_unique_call 1256} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 6);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p0, $mul.ref(1, 8));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p13 := nla_data($p12);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i14 := is_valid_ether_addr($p13);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 1259} {:cexpr "tmp___1"} boogie_si_record_i8($i15);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 99);
    goto $bb5;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb9;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb5;
}



const team_newlink: ref;

axiom team_newlink == $sub.ref(0, 501210);

procedure team_newlink($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23;



implementation team_newlink($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i8 := register_netdevice($p1);
    call {:si_unique_call 1262} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} eth_hw_addr_random($p1);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const team_get_num_tx_queues: ref;

axiom team_get_num_tx_queues == $sub.ref(0, 502242);

procedure team_get_num_tx_queues() returns ($r: i32);
  free requires assertsPassed;



implementation team_get_num_tx_queues() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $r := 16;
    return;
}



const team_get_num_rx_queues: ref;

axiom team_get_num_rx_queues == $sub.ref(0, 503274);

procedure team_get_num_rx_queues() returns ($r: i32);
  free requires assertsPassed;



implementation team_get_num_rx_queues() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $r := 16;
    return;
}



const eth_hw_addr_random: ref;

axiom eth_hw_addr_random == $sub.ref(0, 504306);

procedure eth_hw_addr_random($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23;



implementation eth_hw_addr_random($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(604, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} eth_random_addr($p3);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    return;
}



const register_netdevice: ref;

axiom register_netdevice == $sub.ref(0, 505338);

procedure register_netdevice($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdevice($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1264} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1265} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 506370);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.23;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} get_random_bytes($p0, 6);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.23, $p0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p0, $i4);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.23, $p0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p0, $i8);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 507402);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    return;
}



const nla_len: ref;

axiom nla_len == $sub.ref(0, 508434);

procedure nla_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 4));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_data: ref;

axiom nla_data == $sub.ref(0, 509466);

procedure nla_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation nla_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ether_setup: ref;

axiom ether_setup == $sub.ref(0, 510498);

procedure ether_setup($p0: ref);
  free requires assertsPassed;



implementation ether_setup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    return;
}



const team_destructor: ref;

axiom team_destructor == $sub.ref(0, 511530);

procedure team_destructor($p0: ref);
  free requires assertsPassed;



implementation team_destructor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $p1 := netdev_priv($p0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} free_percpu($p5);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} free_netdev($p0);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 512562);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    return;
}



const team_device_event: ref;

axiom team_device_event == $sub.ref(0, 513594);

procedure team_device_event($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.24, $M.17, assertsPassed;



implementation team_device_event($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i8: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} {:cexpr "team_device_event:arg:event"} boogie_si_record_i64($i1);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p4 := netdev_notifier_info_to_dev($p3);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p5 := team_port_get_rtnl($p4);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $slt.i64($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i64($i1, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i64($i1, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i1, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 976)), $mul.ref(456, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i46);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i47 == 1);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i8 := 32770;
    goto $bb3;

  $bb42:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} vslice_dummy_var_64 := call_netdevice_notifiers($i1, $p51);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb8:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i64($i1, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i1, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb14;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i8 := 32770;
    goto $bb3;

  $bb15:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i1, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb14;

  $bb19:
    assume $i15 == 1;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} team_compute_features($p42);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i64($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i64($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb25:
    assume $i18 == 1;
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} vslice_dummy_var_65 := team_del_slave($p39, $p4);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i1, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb27:
    assume $i19 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $i28 := netif_running($p27);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 1278} {:cexpr "tmp___2"} boogie_si_record_i8($i29);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i30 == 1;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i33 := netif_carrier_ok($p32);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 1284} {:cexpr "tmp___1"} boogie_si_record_i8($i34);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} team_port_change_check($p5, $i35);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb31:
    assume $i21 == 1;
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} team_port_change_check($p5, 0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb33:
    assume $i22 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i23 := netif_carrier_ok($p4);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 1281} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i25 == 1;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} team_port_change_check($p5, 1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const netdev_notifier_info_to_dev: ref;

axiom netdev_notifier_info_to_dev == $sub.ref(0, 514626);

procedure netdev_notifier_info_to_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_notifier_info_to_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const team_port_change_check: ref;

axiom team_port_change_check == $sub.ref(0, 515658);

procedure team_port_change_check($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_port_change_check($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1286} {:cexpr "team_port_change_check:arg:linkup"} boogie_si_record_i1($i1);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} mutex_lock_nested($p5, 0);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i2);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} __team_port_change_check($p0, $i6);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} mutex_unlock($p7);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const team_compute_features: ref;

axiom team_compute_features == $sub.ref(0, 516690);

procedure team_compute_features($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation team_compute_features($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} mutex_lock_nested($p1, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} __team_compute_features($p0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} mutex_unlock($p2);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    return;
}



const __team_port_change_check: ref;

axiom __team_port_change_check == $sub.ref(0, 517722);

procedure __team_port_change_check($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_port_change_check($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1293} {:cexpr "__team_port_change_check:arg:linkup"} boogie_si_record_i1($i1);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i2);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i7, $i9);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(40, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} __team_carrier_check($p13);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} __team_port_change_send($p0, $i11);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const team_nl_cmd_noop: ref;

axiom team_nl_cmd_noop == $sub.ref(0, 518754);

procedure team_nl_cmd_noop($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation team_nl_cmd_noop($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p2 := nlmsg_new(3760, 208);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p10 := genlmsg_put($p2, $i7, $i9, team_nl_family, 0, 0);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} genlmsg_end($p2, $p10);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p13 := genl_info_net($p1);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i16 := genlmsg_unicast($p13, $p2, $i15);
    call {:si_unique_call 1302} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} nlmsg_free($p2);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 90);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const team_nl_cmd_options_set: ref;

axiom team_nl_cmd_options_set == $sub.ref(0, 519786);

procedure team_nl_cmd_options_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_cmd_options_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i56: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i1;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i8;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $p160: ref;
  var $p161: ref;
  var $p112: ref;
  var $i113: i8;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $i93: i8;
  var $p94: ref;
  var $i169: i8;
  var $i92: i8;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $p33: ref;
  var $i175: i32;
  var $i18: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p4 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p5 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p3);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p8 := team_nl_team_get($p1);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(2, 8));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(2, 8));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p23 := nla_data($p22);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(2, 8));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $i29 := nla_len($p28);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p2, $i29);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.24, $p2);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i31 := nla_ok($p24, $i30);
    call {:si_unique_call 1312} {:cexpr "tmp___9"} boogie_si_record_i32($i31);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i175 := team_nl_send_event_options_get($p8, $p3);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 1342} {:cexpr "err"} boogie_si_record_i32($i175);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i18 := $i175;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} team_nl_team_put($p8);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p33 := $p23;
    goto $bb12;

  $bb12:
    call $i34, $i35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i59, $i60, $i56, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $p84, $p85, $p86, $p87, $i88, $p89, $i90, $i91, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $i110, $i111, $p114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i137, $p138, $p139, $p140, $i141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $p160, $p161, $p112, $i113, $p163, $p164, $p165, $p166, $i167, $i168, $i93, $p94, $i169, $i92, $i170, $p171, $i172, $i173, $i174, $p33 := team_nl_cmd_options_set_loop_$bb12($p2, $p3, $p4, $p5, $p8, $i34, $i35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i57, $i58, $i59, $i60, $i56, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $p84, $p85, $p86, $p87, $i88, $p89, $i90, $i91, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $i110, $i111, $p114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i137, $p138, $p139, $p140, $i141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $p160, $p161, $p112, $i113, $p163, $p164, $p165, $p166, $i167, $i168, $i93, $p94, $i169, $i92, $i170, $p171, $i172, $i173, $i174, $p33);
    goto $bb12_last;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i34 := nla_type($p33);
    call {:si_unique_call 1314} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 1);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i37 := nla_parse_nested($p36, 7, $p33, team_nl_option_policy);
    call {:si_unique_call 1316} {:cexpr "err"} boogie_si_record_i32($i37);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.25, $p40);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i43 == 1);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.25, $p44);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.25, $p48);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $i50 := nla_get_u8($p49);
    call {:si_unique_call 1318} {:cexpr "tmp___1"} boogie_si_record_i8($i50);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i51, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i51, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, 14);
    assume {:verifier.code 0} true;
    $i56 := $i37;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i18 := $i56;
    goto $bb7;

  $bb33:
    assume $i55 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i61 := 4;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(4, 8));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.25, $p62);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i61, 3);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.25, $p67);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $p69 := nla_data($p68);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(6, 8));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.25, $p70);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(7, 8));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.25, $p76);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i81, $i82 := 0, 0;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 976)), $mul.ref(344, 1)), $mul.ref(0, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p8, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i88, $i90);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i92 := 0;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i8.i1($i92);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i170 == 1);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 2);
    goto $bb7;

  $bb111:
    assume $i170 == 1;
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p171 := nla_next($p33, $p2);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.24, $p2);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i173 := nla_ok($p171, $i172);
    call {:si_unique_call 1340} {:cexpr "tmp___9"} boogie_si_record_i32($i173);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i174 := $ne.i32($i173, 0);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i174 == 1);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb114:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $p33 := $p171;
    goto $bb114_dummy;

  $bb58:
    assume $i91 == 1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i93, $p94 := 0, $p85;
    goto $bb61;

  $bb61:
    call $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $i110, $i111, $p114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i137, $p138, $p139, $p140, $i141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $p160, $p161, $p112, $i113, $p163, $p164, $p165, $p166, $i167, $i168, $i93, $p94, $i169 := team_nl_cmd_options_set_loop_$bb61($p3, $p5, $p8, $i61, $p63, $p69, $i75, $i81, $i82, $i90, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $i110, $i111, $p114, $p115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $p135, $i136, $i137, $p138, $p139, $p140, $i141, $p142, $p143, $p144, $p145, $p146, $p147, $p148, $i149, $i150, $p151, $p152, $i153, $i154, $p155, $p156, $i157, $i158, $i159, $p160, $p161, $p112, $i113, $p163, $p164, $p165, $p166, $i167, $i168, $i93, $p94, $i169);
    goto $bb61_last;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1));
    $p98 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i101 == 1);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i108 := 0;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p96, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, $i61);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i111 == 1);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p96, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i116 := strcmp($p115, $p69);
    call {:si_unique_call 1325} {:cexpr "tmp___4"} boogie_si_record_i32($i116);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i117 == 1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i108, $i75);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i118 == 1);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p96, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb75;

  $bb75:
    $p123 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, $i81);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p126, $p97);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    call {:si_unique_call 1336} devirtbounce.1(0, .str.2, 2534, 12);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    call team_nl_cmd_options_set_loop_$bb104();
    goto $bb104_last;

  $bb92:
    assume $i130 == 1;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i154 := nla_get_s32($p63);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i154);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i157 := team_option_set($p8, $p94, $p5);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 1334} {:cexpr "err"} boogie_si_record_i32($i157);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i159 := $i157;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p160, 1);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} list_add($p161, $p3);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, 1;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p112, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, $i90);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i169 := $i113;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i92 := $i169;
    goto $bb60;

  $bb108:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i93, $p94 := $i113, $p164;
    goto $bb108_dummy;

  $bb105:
    assume $i158 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i18 := $i159;
    goto $bb7;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb90:
    assume $i129 == 1;
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p63);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i153 := $zext.i1.i8($i150);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p152, $i153);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb88:
    assume $i128 == 1;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i141 := nla_len($p63);
    call {:si_unique_call 1327} {:cexpr "tmp___7"} boogie_si_record_i32($i141);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i141);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p145 := nla_data($p63);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, $p145);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb86:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i131 == 1);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i136 := nla_len($p63);
    call {:si_unique_call 1331} {:cexpr "tmp___5"} boogie_si_record_i32($i136);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i137 := $sgt.i32($i136, 32);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p138 := nla_data($p63);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p140, $p138);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb100:
    assume $i137 == 1;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb95:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i61, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb94;

  $bb97:
    assume $i132 == 1;
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i133 := nla_get_u32($p63);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i133);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb78:
    assume $i125 == 1;
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb73:
    assume $i121 == 1;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i8.i1($i82);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i122 == 1);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb75;

  $bb71:
    assume $i118 == 1;
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb69:
    assume $i117 == 1;
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb66:
    assume $i111 == 1;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p112, $i113 := $p94, $i93;
    goto $bb68;

  $bb63:
    assume $i101 == 1;
    $p102 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb65;

  $bb55:
    assume $i79 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i80 := nla_get_u32($p77);
    call {:si_unique_call 1323} {:cexpr "opt_array_index"} boogie_si_record_i32($i80);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i81, $i82 := $i80, 1;
    goto $bb57;

  $bb52:
    assume $i73 == 1;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i74 := nla_get_u32($p71);
    call {:si_unique_call 1321} {:cexpr "tmp___3"} boogie_si_record_i32($i74);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb54;

  $bb46:
    assume $i64 == 1;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p63);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb48;

  $bb49:
    assume $i66 == 1;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb31:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i51, 11);
    assume {:verifier.code 0} true;
    $i56 := $i37;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb35;

  $bb36:
    assume $i57 == 1;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i61 := 2;
    goto $bb44;

  $bb29:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i51, 6);
    assume {:verifier.code 0} true;
    $i56 := $i37;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb35;

  $bb38:
    assume $i58 == 1;
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i61 := 3;
    goto $bb44;

  $bb27:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i51, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i59 == 1);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i61 := 1;
    goto $bb44;

  $bb40:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i51, 3);
    assume {:verifier.code 0} true;
    $i56 := $i37;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb35;

  $bb42:
    assume $i60 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb44;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb21;

  $bb17:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i18 := $i39;
    goto $bb7;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb104_dummy:
    assume false;
    return;

  $bb104_last:
    assume {:verifier.code 0} true;
    goto $bb104_dummy;

  $bb108_dummy:
    assume false;
    return;

  $bb61_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6131;

  $bb114_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6050;
}



const team_nl_cmd_options_get: ref;

axiom team_nl_cmd_options_get == $sub.ref(0, 520818);

procedure team_nl_cmd_options_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_cmd_options_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p18: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p2);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p2);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $p5 := team_nl_team_get($p1);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 976)), $mul.ref(344, 1)), $mul.ref(0, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i14, $i16);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i31 := team_nl_send_options_get($p5, $i28, $i30, 4, team_nl_send_unicast, $p2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 1347} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} team_nl_team_put($p5);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p18 := $p11;
    goto $bb8;

  $bb8:
    call $p19, $p21, $p22, $p23, $p24, $i25, $i26, $p18 := team_nl_cmd_options_get_loop_$bb8($p2, $i16, $p19, $p21, $p22, $p23, $p24, $i25, $i26, $p18);
    goto $bb8_last;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} list_add_tail($p19, $p2);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, $i16);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p22;
    goto $bb10_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;
}



const team_nl_cmd_port_list_get: ref;

axiom team_nl_cmd_port_list_get == $sub.ref(0, 521850);

procedure team_nl_cmd_port_list_get($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_cmd_port_list_get($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p2 := team_nl_team_get($p1);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i10 := team_nl_send_port_list_get($p2, $i7, $i9, 4, team_nl_send_unicast, $0.ref);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 1351} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} team_nl_team_put($p2);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const team_nl_team_get: ref;

axiom team_nl_team_get == $sub.ref(0, 522882);

procedure team_nl_team_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_nl_team_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p1 := genl_info_net($p0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(1, 8));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(1, 8));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i13 := nla_get_u32($p12);
    call {:si_unique_call 1355} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $p14 := dev_get_by_index($p1, $i13);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(team_netdev_ops));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $p23 := netdev_priv($p14);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} mutex_lock_nested($p25, 0);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p8 := $p23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p14);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} dev_put($p14);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;
}



const team_nl_send_unicast: ref;

axiom team_nl_send_unicast == $sub.ref(0, 523914);

procedure team_nl_send_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation team_nl_send_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} {:cexpr "team_nl_send_unicast:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p5 := dev_net($p4);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i6 := genlmsg_unicast($p5, $p0, $i2);
    call {:si_unique_call 1363} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const team_nl_team_put: ref;

axiom team_nl_team_put == $sub.ref(0, 524946);

procedure team_nl_team_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation team_nl_team_put($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(16, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} mutex_unlock($p1);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} dev_put($p3);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    return;
}



const genlmsg_unicast: ref;

axiom genlmsg_unicast == $sub.ref(0, 525978);

procedure genlmsg_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation genlmsg_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} {:cexpr "genlmsg_unicast:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6648)), $mul.ref(464, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i5 := nlmsg_unicast($p4, $p1, $i2);
    call {:si_unique_call 1368} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const nlmsg_unicast: ref;

axiom nlmsg_unicast == $sub.ref(0, 527010);

procedure nlmsg_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_unicast($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} {:cexpr "nlmsg_unicast:arg:portid"} boogie_si_record_i32($i2);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i3 := netlink_unicast($p0, $p1, $i2, 64);
    call {:si_unique_call 1371} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const netlink_unicast: ref;

axiom netlink_unicast == $sub.ref(0, 528042);

procedure netlink_unicast($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netlink_unicast($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1372} {:cexpr "netlink_unicast:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1373} {:cexpr "netlink_unicast:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1374} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1375} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const genl_info_net: ref;

axiom genl_info_net == $sub.ref(0, 529074);

procedure genl_info_net($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation genl_info_net($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p2 := read_pnet($p1);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const nla_get_u32: ref;

axiom nla_get_u32 == $sub.ref(0, 530106);

procedure nla_get_u32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_get_u32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p1 := nla_data($p0);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_get_by_index: ref;

axiom dev_get_by_index == $sub.ref(0, 531138);

procedure dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} {:cexpr "dev_get_by_index:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $p2 := external_alloc();
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const nla_type: ref;

axiom nla_type == $sub.ref(0, 532170);

procedure nla_type($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_type($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, $sub.i32(0, 49153));
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const nla_parse_nested: ref;

axiom nla_parse_nested == $sub.ref(0, 533202);

procedure nla_parse_nested($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_parse_nested($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} {:cexpr "nla_parse_nested:arg:maxtype"} boogie_si_record_i32($i1);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i4 := nla_len($p2);
    call {:si_unique_call 1382} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p5 := nla_data($p2);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i7 := nla_parse($p0, $i1, $p6, $i4, $p3);
    call {:si_unique_call 1385} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const nla_get_u8: ref;

axiom nla_get_u8 == $sub.ref(0, 534234);

procedure nla_get_u8($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation nla_get_u8($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p1 := nla_data($p0);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const nla_get_s32: ref;

axiom nla_get_s32 == $sub.ref(0, 535266);

procedure nla_get_s32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_get_s32($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p1 := nla_data($p0);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const team_option_set: ref;

axiom team_option_set == $sub.ref(0, 536298);

procedure team_option_set($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_option_set($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1388} $i14 := devirtbounce.2($p13, $p0, $p2);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 1389} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 537330);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} __list_add($p0, $p1, $p3);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    return;
}



const nla_next: ref;

axiom nla_next == $sub.ref(0, 538362);

procedure nla_next($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation nla_next($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 3);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 4));
    call {:si_unique_call 1391} {:cexpr "totlen"} boogie_si_record_i32($i6);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.24, $p1);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, $i6);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p1, $i8);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p0, $mul.ref($i9, 4));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const nla_ok: ref;

axiom nla_ok == $sub.ref(0, 539394);

procedure nla_ok($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nla_ok($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i3: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} {:cexpr "nla_ok:arg:remaining"} boogie_si_record_i32($i1);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i2 := $sgt.i32($i1, 3);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i3);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 3);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, $i1);
    assume {:verifier.code 0} true;
    $i3 := $i11;
    goto $bb3;
}



const nla_parse: ref;

axiom nla_parse == $sub.ref(0, 540426);

procedure nla_parse($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation nla_parse($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} {:cexpr "nla_parse:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1394} {:cexpr "nla_parse:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1395} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1396} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 541458);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p1 := calloc(1, $i0);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1399} __VERIFIER_assume($i4);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 542490);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1401} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 1402} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_net_device_ops_6: ref;

axiom ldv_net_device_ops_6 == $sub.ref(0, 543522);

procedure ldv_net_device_ops_6();
  free requires assertsPassed;
  modifies $M.27, $M.0, $CurrAddr;



implementation ldv_net_device_ops_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $M.27 := $p0;
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 544554);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.30, $M.31;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $M.28 := 0;
    call {:si_unique_call 1404} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1405} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 1406} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 1407} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 545586);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 1408} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 1409} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $M.13 := 0;
    call {:si_unique_call 1410} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 1411} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 546618);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1412} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1413} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1414} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} ldv_stop();
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i21 := $M.15;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i23 := $M.15;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.15 := 4;
    call {:si_unique_call 1424} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p25 := $M.10;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} team_notify_peers_work($p25);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 1426} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i16 := $M.13;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i18 := $M.13;
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.13 := 4;
    call {:si_unique_call 1421} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p20 := $M.10;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} team_notify_peers_work($p20);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 1423} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i11 := $M.11;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i13 := $M.11;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.11 := 4;
    call {:si_unique_call 1418} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p15 := $M.10;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} team_notify_peers_work($p15);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 1420} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i8 := $M.9;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.9 := 4;
    call {:si_unique_call 1415} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p10 := $M.10;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} team_notify_peers_work($p10);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 1417} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 547650);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_ethtool_ops_5: ref;

axiom ldv_initialize_ethtool_ops_5 == $sub.ref(0, 548682);

procedure ldv_initialize_ethtool_ops_5();
  free requires assertsPassed;
  modifies $M.32, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.32 := $p0;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_rtnl_link_ops_4: ref;

axiom ldv_initialize_rtnl_link_ops_4 == $sub.ref(0, 549714);

procedure ldv_initialize_rtnl_link_ops_4();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.0, $CurrAddr;



implementation ldv_initialize_rtnl_link_ops_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $M.33 := $p0;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $p2 := ldv_init_zalloc(8);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $M.34 := $p2;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $M.35 := $p4;
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 550746);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.30, $M.31, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1432} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1433} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1434} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_stop();
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i21 := $M.31;
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i23 := $M.31;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.31 := 4;
    call {:si_unique_call 1444} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p25 := $M.36;
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} team_mcast_rejoin_work($p25);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1446} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i16 := $M.30;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i18 := $M.30;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.30 := 4;
    call {:si_unique_call 1441} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p20 := $M.36;
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} team_mcast_rejoin_work($p20);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 1443} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i11 := $M.29;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i13 := $M.29;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.29 := 4;
    call {:si_unique_call 1438} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p15 := $M.36;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} team_mcast_rejoin_work($p15);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 1440} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i6 := $M.28;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i8 := $M.28;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.28 := 4;
    call {:si_unique_call 1435} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p10 := $M.36;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} team_mcast_rejoin_work($p10);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $M.28 := 1;
    call {:si_unique_call 1437} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 551778);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.37, $M.38, $M.9, $M.11, $M.13, $M.15, $M.39, $M.40, $M.41, $M.42, $M.28, $M.29, $M.30, $M.31, $M.43, $M.44, $M.45, $M.46, $M.47, $M.32, $M.33, $M.34, $M.35, $M.27, $M.51, $M.52, $M.80, $M.2, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.14, $M.36, $M.16, $M.12, $M.10, $M.17, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.23, assertsPassed, $M.24;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $i101: i32;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i16;
  var $i145: i32;
  var $i146: i16;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i16;
  var $i152: i32;
  var $i153: i16;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i16;
  var $i159: i32;
  var $i160: i16;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $i177: i32;
  var $i178: i1;
  var $p179: ref;
  var $i180: i16;
  var $i181: i32;
  var $i182: i16;
  var $i183: i16;
  var $i184: i32;
  var $i185: i16;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i16;
  var $i191: i32;
  var $i192: i16;
  var $i193: i16;
  var $i194: i32;
  var $i195: i16;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $i202: i16;
  var $i203: i16;
  var $i204: i32;
  var $i205: i16;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i16;
  var $i211: i32;
  var $i212: i16;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i16;
  var $i218: i32;
  var $i219: i16;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i16;
  var $i225: i32;
  var $i226: i16;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $i231: i16;
  var $i232: i32;
  var $i233: i16;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i16;
  var $i239: i32;
  var $i240: i16;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i16;
  var $i246: i32;
  var $i247: i16;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i16;
  var $i253: i32;
  var $i254: i16;
  var $i255: i16;
  var $i256: i32;
  var $i257: i16;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i16;
  var $i263: i32;
  var $i264: i16;
  var $i265: i16;
  var $i266: i32;
  var $i267: i16;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i16;
  var $i273: i32;
  var $i274: i16;
  var $i275: i16;
  var $i276: i32;
  var $i277: i16;
  var $i279: i32;
  var $i280: i1;
  var $i281: i32;
  var $i282: i32;
  var $p283: ref;
  var $i284: i32;
  var $i285: i32;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i32;
  var $p291: ref;
  var $i292: i32;
  var $i293: i32;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i32;
  var $p299: ref;
  var $i300: i32;
  var $i301: i32;
  var $i303: i32;
  var $i304: i1;
  var $p305: ref;
  var $p306: ref;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $p311: ref;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $p316: ref;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $i321: i32;
  var $i322: i32;
  var $i323: i1;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $i331: i64;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $i336: i64;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $i341: i64;
  var $i343: i32;
  var $i344: i1;
  var $p345: ref;
  var $i346: i32;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i350: i32;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i376: i64;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $i381: i64;
  var $i383: i32;
  var $i384: i1;
  var $p385: ref;
  var $i386: i64;
  var $i388: i32;
  var $i389: i1;
  var $p390: ref;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $i395: i32;
  var $i396: i32;
  var $i397: i1;
  var $p398: ref;
  var $i399: i32;
  var $i400: i32;
  var $i401: i1;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $p409: ref;
  var $i410: i32;
  var $i412: i32;
  var $i413: i1;
  var $p414: ref;
  var $p415: ref;
  var $i416: i32;
  var $i418: i32;
  var $i419: i1;
  var $p420: ref;
  var $i421: i32;
  var $i422: i1;
  var $p423: ref;
  var $i424: i32;
  var $i425: i1;
  var $p426: ref;
  var $i427: i32;
  var $i428: i1;
  var $p429: ref;
  var $i430: i16;
  var $i431: i32;
  var $i432: i16;
  var $i433: i16;
  var $i434: i32;
  var $i435: i16;
  var $i437: i32;
  var $i438: i1;
  var $p439: ref;
  var $i440: i16;
  var $i441: i32;
  var $i442: i16;
  var $i443: i16;
  var $i444: i32;
  var $i445: i16;
  var $i447: i32;
  var $i448: i1;
  var $p449: ref;
  var $i450: i16;
  var $i451: i32;
  var $i452: i16;
  var $i453: i16;
  var $i454: i32;
  var $i455: i16;
  var $i457: i32;
  var $i458: i1;
  var $p459: ref;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $i465: i32;
  var $i466: i1;
  var $p467: ref;
  var $i469: i32;
  var $i470: i1;
  var $p471: ref;
  var $p472: ref;
  var $i474: i32;
  var $i475: i1;
  var $p476: ref;
  var $p477: ref;
  var $i479: i32;
  var $i480: i1;
  var $p481: ref;
  var $p482: ref;
  var $i484: i32;
  var $i485: i1;
  var $p486: ref;
  var $i487: i32;
  var $i489: i32;
  var $i490: i1;
  var $p491: ref;
  var $i492: i32;
  var $i494: i32;
  var $i495: i1;
  var $p496: ref;
  var $i497: i32;
  var $i498: i32;
  var $i499: i32;
  var $i500: i1;
  var $p501: ref;
  var $i502: i8;
  var $i503: i1;
  var $i505: i32;
  var $i506: i1;
  var $p507: ref;
  var $i508: i8;
  var $i509: i1;
  var $i511: i32;
  var $i512: i1;
  var $p513: ref;
  var $i514: i8;
  var $i515: i1;
  var $i517: i32;
  var $i518: i1;
  var $p519: ref;
  var $i521: i32;
  var $i522: i1;
  var $p523: ref;
  var $i525: i32;
  var $i526: i1;
  var $p527: ref;
  var $i529: i32;
  var $i530: i1;
  var $p531: ref;
  var $i533: i32;
  var $i534: i1;
  var $p535: ref;
  var $i537: i32;
  var $i538: i1;
  var $p539: ref;
  var $i541: i32;
  var $i542: i1;
  var $i543: i32;
  var $i544: i1;
  var $i545: i1;
  var $i546: i1;
  var $i547: i1;
  var $i548: i1;
  var $i549: i1;
  var $i550: i1;
  var $i551: i1;
  var $i552: i32;
  var $i553: i1;
  var $p554: ref;
  var $i555: i32;
  var $i556: i32;
  var $i557: i32;
  var $i558: i1;
  var $i560: i32;
  var $i561: i1;
  var $i563: i32;
  var $i564: i1;
  var $i566: i32;
  var $i567: i1;
  var $p568: ref;
  var $p569: ref;
  var $i571: i32;
  var $i572: i1;
  var $p573: ref;
  var $p574: ref;
  var $i576: i32;
  var $i577: i1;
  var $p578: ref;
  var $p579: ref;
  var $i581: i32;
  var $i582: i1;
  var $i584: i32;
  var $i585: i1;
  var $i587: i32;
  var $i588: i1;
  var $i590: i32;
  var $i591: i1;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $i596: i32;
  var $i597: i1;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $i602: i32;
  var $i603: i1;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $i608: i32;
  var $i609: i1;
  var $i611: i32;
  var $i612: i32;
  var $i613: i32;
  var $i614: i1;
  var $i616: i32;
  var $i617: i32;
  var $i618: i32;
  var $i619: i1;
  var $i621: i32;
  var $i622: i1;
  var $i623: i32;
  var $i624: i1;
  var $i625: i32;
  var $i626: i1;
  var $i627: i1;
  var $i628: i1;
  var $i629: i32;
  var $i630: i1;
  var $i631: i32;
  var $i632: i1;
  var $i633: i32;
  var $i634: i1;
  var $i635: i32;
  var $i636: i32;
  var $i637: i1;
  var $i638: i32;
  var $i639: i1;
  var $i640: i32;
  var $i641: i1;
  var $i642: i32;
  var $i643: i1;
  var $i644: i32;
  var $i645: i1;
  var $i646: i64;
  var $i648: i32;
  var $i649: i1;
  var $i650: i32;
  var $i651: i1;
  var $i652: i32;
  var $i653: i1;
  var $i654: i1;
  var $i655: i1;
  var $i656: i32;
  var $i657: i1;
  var $p658: ref;
  var $i659: i32;
  var $i660: i1;
  var $p661: ref;
  var vslice_dummy_var_66: ref;
  var vslice_dummy_var_67: ref;
  var vslice_dummy_var_68: ref;
  var vslice_dummy_var_69: ref;
  var vslice_dummy_var_70: ref;
  var vslice_dummy_var_71: ref;
  var vslice_dummy_var_72: ref;
  var vslice_dummy_var_73: ref;
  var vslice_dummy_var_74: ref;
  var vslice_dummy_var_75: ref;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: ref;
  var vslice_dummy_var_79: ref;
  var vslice_dummy_var_80: ref;
  var vslice_dummy_var_81: ref;
  var vslice_dummy_var_82: ref;
  var vslice_dummy_var_83: ref;
  var vslice_dummy_var_84: ref;
  var vslice_dummy_var_85: ref;
  var vslice_dummy_var_86: ref;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i64;
  var vslice_dummy_var_113: i64;
  var vslice_dummy_var_114: i64;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i64;
  var vslice_dummy_var_117: i64;
  var vslice_dummy_var_118: i64;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i16;
  var vslice_dummy_var_129: i16;
  var vslice_dummy_var_130: i16;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: ref;
  var vslice_dummy_var_140: ref;
  var vslice_dummy_var_141: ref;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;

  $bb0:
    call {:si_unique_call 1448} $initialize();
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p9 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} $p10 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $p12 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $p13 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p14 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p15 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p16 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $p17 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $p18 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $p19 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} $p20 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p21 := ldv_init_zalloc(8);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $p23 := ldv_init_zalloc(448);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p26 := ldv_init_zalloc(16);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $p28 := ldv_init_zalloc(12);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p30 := ldv_init_zalloc(184);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p32 := ldv_init_zalloc(1);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $p33 := ldv_init_zalloc(232);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $p35 := ldv_init_zalloc(112);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $p37 := ldv_init_zalloc(1);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p38 := ldv_init_zalloc(232);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $p40 := ldv_init_zalloc(16);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} $p42 := ldv_init_zalloc(232);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $p44 := ldv_init_zalloc(8);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p46 := ldv_init_zalloc(12);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p48 := ldv_init_zalloc(1);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} $p49 := ldv_init_zalloc(232);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $p51 := ldv_init_zalloc(232);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p53 := ldv_init_zalloc(7104);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p55 := ldv_init_zalloc(24);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p57 := ldv_init_zalloc(1);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p58 := ldv_init_zalloc(196);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_initialize();
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p0);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_66 := ldv_memset($p60, 0, 8);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p1);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} vslice_dummy_var_67 := ldv_memset($p62, 0, 2);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p2);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_68 := ldv_memset($p64, 0, 4);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p3);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} vslice_dummy_var_69 := ldv_memset($p66, 0, 2);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p4);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} vslice_dummy_var_70 := ldv_memset($p68, 0, 2);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p5);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} vslice_dummy_var_71 := ldv_memset($p70, 0, 4);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p6);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_72 := ldv_memset($p72, 0, 2);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p7);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} vslice_dummy_var_73 := ldv_memset($p74, 0, 4);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p8);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} vslice_dummy_var_74 := ldv_memset($p76, 0, 8);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p9);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} vslice_dummy_var_75 := ldv_memset($p78, 0, 2);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_76 := ldv_memset($p10, 0, 1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p11);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} vslice_dummy_var_77 := ldv_memset($p81, 0, 4);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p12);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} vslice_dummy_var_78 := ldv_memset($p83, 0, 2);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p13);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_79 := ldv_memset($p85, 0, 2);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p14);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} vslice_dummy_var_80 := ldv_memset($p87, 0, 2);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p15);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vslice_dummy_var_81 := ldv_memset($p89, 0, 4);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p16);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} vslice_dummy_var_82 := ldv_memset($p91, 0, 2);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p17);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} vslice_dummy_var_83 := ldv_memset($p93, 0, 4);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p18);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} vslice_dummy_var_84 := ldv_memset($p95, 0, 4);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p19);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} vslice_dummy_var_85 := ldv_memset($p97, 0, 8);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p20);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} vslice_dummy_var_86 := ldv_memset($p99, 0, 8);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1515} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} work_init_1();
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1519} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1520} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} work_init_2();
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1523} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $p143, $i144, $i145, $i146, $i148, $i149, $p150, $i151, $i152, $i153, $i155, $i156, $p157, $i158, $i159, $i160, $i162, $i163, $p164, $p165, $i167, $i168, $p169, $p170, $i172, $i173, $p174, $p175, $i177, $i178, $p179, $i180, $i181, $i182, $i183, $i184, $i185, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i197, $i198, $p199, $i200, $i201, $i202, $i203, $i204, $i205, $i207, $i208, $p209, $i210, $i211, $i212, $i214, $i215, $p216, $i217, $i218, $i219, $i221, $i222, $p223, $i224, $i225, $i226, $i228, $i229, $p230, $i231, $i232, $i233, $i235, $i236, $p237, $i238, $i239, $i240, $i242, $i243, $p244, $i245, $i246, $i247, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $i257, $i259, $i260, $p261, $i262, $i263, $i264, $i265, $i266, $i267, $i269, $i270, $p271, $i272, $i273, $i274, $i275, $i276, $i277, $i279, $i280, $i281, $i282, $p283, $i284, $i285, $i287, $i288, $i289, $i290, $p291, $i292, $i293, $i295, $i296, $i297, $i298, $p299, $i300, $i301, $i303, $i304, $p305, $p306, $i308, $i309, $p310, $p311, $i313, $i314, $p315, $p316, $i318, $i319, $p320, $i321, $i322, $i323, $i324, $i325, $p326, $i328, $i329, $p330, $i331, $i333, $i334, $p335, $i336, $i338, $i339, $p340, $i341, $i343, $i344, $p345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $p353, $i354, $i355, $p356, $i357, $i358, $p359, $i360, $i361, $p362, $i364, $i365, $p366, $i367, $i368, $p369, $i370, $i371, $p372, $i373, $i374, $p375, $i376, $i378, $i379, $p380, $i381, $i383, $i384, $p385, $i386, $i388, $i389, $p390, $i391, $i392, $i393, $p394, $i395, $i396, $i397, $p398, $i399, $i400, $i401, $p402, $p403, $i404, $i406, $i407, $p408, $p409, $i410, $i412, $i413, $p414, $p415, $i416, $i418, $i419, $p420, $i421, $i422, $p423, $i424, $i425, $p426, $i427, $i428, $p429, $i430, $i431, $i432, $i433, $i434, $i435, $i437, $i438, $p439, $i440, $i441, $i442, $i443, $i444, $i445, $i447, $i448, $p449, $i450, $i451, $i452, $i453, $i454, $i455, $i457, $i458, $p459, $i461, $i462, $p463, $i465, $i466, $p467, $i469, $i470, $p471, $p472, $i474, $i475, $p476, $p477, $i479, $i480, $p481, $p482, $i484, $i485, $p486, $i487, $i489, $i490, $p491, $i492, $i494, $i495, $p496, $i497, $i498, $i499, $i500, $p501, $i502, $i503, $i505, $i506, $p507, $i508, $i509, $i511, $i512, $p513, $i514, $i515, $i517, $i518, $p519, $i521, $i522, $p523, $i525, $i526, $p527, $i529, $i530, $p531, $i533, $i534, $p535, $i537, $i538, $p539, $i541, $i542, $i543, $i544, $i545, $i546, $i547, $i548, $i549, $i550, $i551, $i552, $i553, $p554, $i555, $i556, $i557, $i558, $i560, $i561, $i563, $i564, $i566, $i567, $p568, $p569, $i571, $i572, $p573, $p574, $i576, $i577, $p578, $p579, $i581, $i582, $i584, $i585, $i587, $i588, $i590, $i591, $p592, $p593, $p594, $i596, $i597, $p598, $p599, $p600, $i602, $i603, $p604, $p605, $p606, $i608, $i609, $i611, $i612, $i613, $i614, $i616, $i617, $i618, $i619, $i621, $i622, $i623, $i624, $i625, $i626, $i627, $i628, $i629, $i630, $i631, $i632, $i633, $i634, $i635, $i636, $i637, $i638, $i639, $i640, $i641, $i642, $i643, $i644, $i645, $i646, $i648, $i649, $i650, $i651, $i652, $i653, $i654, $i655, $i656, $i657, $p658, $i659, $i660, $p661, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p22, $p24, $p25, $p27, $p29, $p31, $p32, $p34, $p36, $p37, $p39, $p41, $p43, $p45, $p47, $p48, $p50, $p52, $p54, $p56, $p57, $p59, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $p143, $i144, $i145, $i146, $i148, $i149, $p150, $i151, $i152, $i153, $i155, $i156, $p157, $i158, $i159, $i160, $i162, $i163, $p164, $p165, $i167, $i168, $p169, $p170, $i172, $i173, $p174, $p175, $i177, $i178, $p179, $i180, $i181, $i182, $i183, $i184, $i185, $i187, $i188, $p189, $i190, $i191, $i192, $i193, $i194, $i195, $i197, $i198, $p199, $i200, $i201, $i202, $i203, $i204, $i205, $i207, $i208, $p209, $i210, $i211, $i212, $i214, $i215, $p216, $i217, $i218, $i219, $i221, $i222, $p223, $i224, $i225, $i226, $i228, $i229, $p230, $i231, $i232, $i233, $i235, $i236, $p237, $i238, $i239, $i240, $i242, $i243, $p244, $i245, $i246, $i247, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $i256, $i257, $i259, $i260, $p261, $i262, $i263, $i264, $i265, $i266, $i267, $i269, $i270, $p271, $i272, $i273, $i274, $i275, $i276, $i277, $i279, $i280, $i281, $i282, $p283, $i284, $i285, $i287, $i288, $i289, $i290, $p291, $i292, $i293, $i295, $i296, $i297, $i298, $p299, $i300, $i301, $i303, $i304, $p305, $p306, $i308, $i309, $p310, $p311, $i313, $i314, $p315, $p316, $i318, $i319, $p320, $i321, $i322, $i323, $i324, $i325, $p326, $i328, $i329, $p330, $i331, $i333, $i334, $p335, $i336, $i338, $i339, $p340, $i341, $i343, $i344, $p345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $p353, $i354, $i355, $p356, $i357, $i358, $p359, $i360, $i361, $p362, $i364, $i365, $p366, $i367, $i368, $p369, $i370, $i371, $p372, $i373, $i374, $p375, $i376, $i378, $i379, $p380, $i381, $i383, $i384, $p385, $i386, $i388, $i389, $p390, $i391, $i392, $i393, $p394, $i395, $i396, $i397, $p398, $i399, $i400, $i401, $p402, $p403, $i404, $i406, $i407, $p408, $p409, $i410, $i412, $i413, $p414, $p415, $i416, $i418, $i419, $p420, $i421, $i422, $p423, $i424, $i425, $p426, $i427, $i428, $p429, $i430, $i431, $i432, $i433, $i434, $i435, $i437, $i438, $p439, $i440, $i441, $i442, $i443, $i444, $i445, $i447, $i448, $p449, $i450, $i451, $i452, $i453, $i454, $i455, $i457, $i458, $p459, $i461, $i462, $p463, $i465, $i466, $p467, $i469, $i470, $p471, $p472, $i474, $i475, $p476, $p477, $i479, $i480, $p481, $p482, $i484, $i485, $p486, $i487, $i489, $i490, $p491, $i492, $i494, $i495, $p496, $i497, $i498, $i499, $i500, $p501, $i502, $i503, $i505, $i506, $p507, $i508, $i509, $i511, $i512, $p513, $i514, $i515, $i517, $i518, $p519, $i521, $i522, $p523, $i525, $i526, $p527, $i529, $i530, $p531, $i533, $i534, $p535, $i537, $i538, $p539, $i541, $i542, $i543, $i544, $i545, $i546, $i547, $i548, $i549, $i550, $i551, $i552, $i553, $p554, $i555, $i556, $i557, $i558, $i560, $i561, $i563, $i564, $i566, $i567, $p568, $p569, $i571, $i572, $p573, $p574, $i576, $i577, $p578, $p579, $i581, $i582, $i584, $i585, $i587, $i588, $i590, $i591, $p592, $p593, $p594, $i596, $i597, $p598, $p599, $p600, $i602, $i603, $p604, $p605, $p606, $i608, $i609, $i611, $i612, $i613, $i614, $i616, $i617, $i618, $i619, $i621, $i622, $i623, $i624, $i625, $i626, $i627, $i628, $i629, $i630, $i631, $i632, $i633, $i634, $i635, $i636, $i637, $i638, $i639, $i640, $i641, $i642, $i643, $i644, $i645, $i646, $i648, $i649, $i650, $i651, $i652, $i653, $i654, $i655, $i656, $i657, $p658, $i659, $i660, $p661, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i101, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i101, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i101, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_stop();
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb300_dummy;

  $bb9:
    assume $i105 == 1;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i650 := $M.44;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i651 := $ne.i32($i650, 0);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb421:
    assume $i651 == 1;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1741} $i652 := __VERIFIER_nondet_int();
    call {:si_unique_call 1742} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i652);
    call {:si_unique_call 1743} {:cexpr "tmp___26"} boogie_si_record_i32($i652);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    $i653 := $slt.i32($i652, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i653 == 1);
    assume {:verifier.code 0} true;
    $i654 := $eq.i32($i652, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    assume !($i654 == 1);
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} ldv_stop();
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb426:
    assume $i654 == 1;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i659 := $M.44;
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i660 := $eq.i32($i659, 1);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb435:
    assume $i660 == 1;
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p661 := $M.32;
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} vslice_dummy_var_158 := ethtool_op_get_link($p661);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb424:
    assume $i653 == 1;
    assume {:verifier.code 0} true;
    $i655 := $eq.i32($i652, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    assume !($i655 == 1);
    goto $bb428;

  $bb429:
    assume $i655 == 1;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i656 := $M.44;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i657 := $eq.i32($i656, 1);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i657 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb431:
    assume $i657 == 1;
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p658 := $M.32;
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} team_ethtool_get_drvinfo($p658, $p59);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb7:
    assume $i104 == 1;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i648 := $M.43;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i649 := $ne.i32($i648, 0);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  $bb419:
    assume !($i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb418:
    assume $i649 == 1;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} invoke_work_2();
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb5:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i101, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i106 == 1);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i640 := $M.42;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i641 := $ne.i32($i640, 0);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i641 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb406:
    assume $i641 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1734} $i642 := __VERIFIER_nondet_int();
    call {:si_unique_call 1735} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i642);
    call {:si_unique_call 1736} {:cexpr "tmp___25"} boogie_si_record_i32($i642);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    $i643 := $eq.i32($i642, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i643 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_stop();
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb409:
    assume $i643 == 1;
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i644 := $M.42;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i645 := $eq.i32($i644, 1);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb411:
    assume $i645 == 1;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i646 := $load.i64($M.0, $p20);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} vslice_dummy_var_157 := team_device_event($p56, $i646, $p57);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb413;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i106 == 1;
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i623 := $M.41;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $i624 := $ne.i32($i623, 0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i624 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb376:
    assume $i624 == 1;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1716} $i625 := __VERIFIER_nondet_int();
    call {:si_unique_call 1717} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i625);
    call {:si_unique_call 1718} {:cexpr "tmp___24"} boogie_si_record_i32($i625);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $i626 := $slt.i32($i625, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i626 == 1);
    assume {:verifier.code 0} true;
    $i627 := $eq.i32($i625, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    assume !($i627 == 1);
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_stop();
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb381:
    assume $i627 == 1;
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i633 := $M.41;
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i634 := $eq.i32($i633, 1);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb394:
    assume $i634 == 1;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} $i635 := team_module_init();
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $M.47 := $i635;
    call {:si_unique_call 1723} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i635);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i636 := $M.47;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i637 := $ne.i32($i636, 0);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $i638 := $M.47;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i639 := $eq.i32($i638, 0);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb399:
    assume $i639 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} ldv_initialize_ethtool_ops_5();
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} ldv_initialize_rtnl_link_ops_4();
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} ldv_net_device_ops_6();
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb396:
    assume $i637 == 1;
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} ldv_check_final_state();
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb379:
    assume $i626 == 1;
    assume {:verifier.code 0} true;
    $i628 := $eq.i32($i625, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    assume !($i628 == 1);
    goto $bb383;

  $bb384:
    assume $i628 == 1;
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i629 := $M.41;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i630 := $eq.i32($i629, 2);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    assume !($i630 == 1);
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb386:
    assume $i630 == 1;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i631 := $M.40;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i632 := $eq.i32($i631, 0);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb389, $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    assume !($i632 == 1);
    goto $bb388;

  $bb389:
    assume $i632 == 1;
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} team_module_exit();
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb3:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i101, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i101, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i108 == 1);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i621 := $M.39;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i622 := $ne.i32($i621, 0);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb373:
    assume $i622 == 1;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} invoke_work_1();
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb16:
    assume $i108 == 1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i541 := $M.38;
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i542 := $ne.i32($i541, 0);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb301:
    assume $i542 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1676} $i543 := __VERIFIER_nondet_int();
    call {:si_unique_call 1677} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i543);
    call {:si_unique_call 1678} {:cexpr "tmp___23"} boogie_si_record_i32($i543);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $i544 := $slt.i32($i543, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    $i545 := $slt.i32($i543, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i545 == 1);
    assume {:verifier.code 0} true;
    $i546 := $slt.i32($i543, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    $i547 := $eq.i32($i543, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume !($i547 == 1);
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} ldv_stop();
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb310:
    assume $i547 == 1;
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i618 := $M.38;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i619 := $eq.i32($i618, 2);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb367:
    assume $i619 == 1;
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} vslice_dummy_var_156 := ldv_init_4();
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb308:
    assume $i546 == 1;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i608 := $M.38;
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i609 := $eq.i32($i608, 3);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $i613 := $M.38;
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i613, 2);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb364:
    assume $i614 == 1;
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} vslice_dummy_var_155 := ldv_release_4();
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1710} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i616 := $M.40;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i617 := $sub.i32($i616, 1);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $M.40 := $i617;
    call {:si_unique_call 1711} {:cexpr "ref_cnt"} boogie_si_record_i32($i617);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb361:
    assume $i609 == 1;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} vslice_dummy_var_154 := ldv_release_4();
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i611 := $M.40;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i612 := $sub.i32($i611, 1);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $M.40 := $i612;
    call {:si_unique_call 1708} {:cexpr "ref_cnt"} boogie_si_record_i32($i612);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb306:
    assume $i545 == 1;
    assume {:verifier.code 0} true;
    $i548 := $slt.i32($i543, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i548 == 1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i590 := $M.38;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i591 := $eq.i32($i590, 1);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $i596 := $M.38;
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i597 := $eq.i32($i596, 3);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $i602 := $M.38;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i603 := $eq.i32($i602, 2);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i603 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb358:
    assume $i603 == 1;
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $p604 := $M.33;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $p605 := $M.34;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $p606 := $M.35;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} vslice_dummy_var_153 := team_newlink($p54, $p604, $p605, $p606);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb355:
    assume $i597 == 1;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p598 := $M.33;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p599 := $M.34;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p600 := $M.35;
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} vslice_dummy_var_152 := team_newlink($p54, $p598, $p599, $p600);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb352:
    assume $i591 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p592 := $M.33;
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $p593 := $M.34;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p594 := $M.35;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} vslice_dummy_var_151 := team_newlink($p54, $p592, $p593, $p594);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb313:
    assume $i548 == 1;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i581 := $M.38;
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i581, 1);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $i584 := $M.38;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i585 := $eq.i32($i584, 3);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i585 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $i587 := $M.38;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i588 := $eq.i32($i587, 2);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb349:
    assume $i588 == 1;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_150 := team_get_num_rx_queues();
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb346:
    assume $i585 == 1;
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} vslice_dummy_var_149 := team_get_num_rx_queues();
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb343:
    assume $i582 == 1;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} vslice_dummy_var_148 := team_get_num_rx_queues();
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb304:
    assume $i544 == 1;
    assume {:verifier.code 0} true;
    $i549 := $slt.i32($i543, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i549 == 1);
    assume {:verifier.code 0} true;
    $i550 := $slt.i32($i543, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i550 == 1);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i566 := $M.38;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i567 := $eq.i32($i566, 1);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $i571 := $M.38;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i572 := $eq.i32($i571, 3);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $i576 := $M.38;
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i577 := $eq.i32($i576, 2);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb340:
    assume $i577 == 1;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $p578 := $M.34;
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p579 := $M.35;
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} vslice_dummy_var_147 := team_validate($p578, $p579);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb337:
    assume $i572 == 1;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p573 := $M.34;
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p574 := $M.35;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} vslice_dummy_var_146 := team_validate($p573, $p574);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb334:
    assume $i567 == 1;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p568 := $M.34;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p569 := $M.35;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} vslice_dummy_var_145 := team_validate($p568, $p569);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb317:
    assume $i550 == 1;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i557 := $M.38;
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i557, 1);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $i560 := $M.38;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i561 := $eq.i32($i560, 3);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $i563 := $M.38;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i564 := $eq.i32($i563, 2);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i564 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb331:
    assume $i564 == 1;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} vslice_dummy_var_144 := team_get_num_tx_queues();
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb328:
    assume $i561 == 1;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} vslice_dummy_var_143 := team_get_num_tx_queues();
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb325:
    assume $i558 == 1;
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_142 := team_get_num_tx_queues();
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb315:
    assume $i549 == 1;
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i543, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i551 == 1);
    goto $bb312;

  $bb319:
    assume $i551 == 1;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i552 := $M.38;
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i553 := $eq.i32($i552, 1);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb321:
    assume $i553 == 1;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p554 := $M.33;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} team_setup($p554);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i555 := $M.40;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i556 := $add.i32($i555, 1);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $M.40 := $i556;
    call {:si_unique_call 1681} {:cexpr "ref_cnt"} boogie_si_record_i32($i556);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb14:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i101, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb11;

  $bb18:
    assume $i109 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i110 := $M.37;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb20:
    assume $i111 == 1;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1528} $i112 := __VERIFIER_nondet_int();
    call {:si_unique_call 1529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i112);
    call {:si_unique_call 1530} {:cexpr "tmp___22"} boogie_si_record_i32($i112);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i112, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i112, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i112, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i112, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i112, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i112, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} ldv_stop();
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb33:
    assume $i118 == 1;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i529 := $M.37;
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i529, 1);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $i533 := $M.37;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i533, 3);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $i537 := $M.37;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i538 := $eq.i32($i537, 2);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb294:
    assume $i538 == 1;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p539 := $M.27;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} vslice_dummy_var_141 := team_get_stats64($p539, $p31);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1674} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb291:
    assume $i534 == 1;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p535 := $M.27;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} vslice_dummy_var_140 := team_get_stats64($p535, $p31);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb288:
    assume $i530 == 1;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p531 := $M.27;
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} vslice_dummy_var_139 := team_get_stats64($p531, $p31);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1670} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb31:
    assume $i117 == 1;
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i517 := $M.37;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i517, 1);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $i521 := $M.37;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i521, 3);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $i525 := $M.37;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i526 := $eq.i32($i525, 2);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb285:
    assume $i526 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $p527 := $M.27;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} vslice_dummy_var_138 := team_set_mac_address($p527, $p25);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb282:
    assume $i522 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p523 := $M.27;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} vslice_dummy_var_137 := team_set_mac_address($p523, $p25);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb279:
    assume $i518 == 1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p519 := $M.27;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} vslice_dummy_var_136 := team_set_mac_address($p519, $p25);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb29:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i112, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i119 == 1);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i499 := $M.37;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i499, 1);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $i505 := $M.37;
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i505, 3);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $i511 := $M.37;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i511, 2);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb276:
    assume $i512 == 1;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p513 := $M.27;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i514 := $load.i8($M.0, $p10);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i515 := $trunc.i8.i1($i514);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} vslice_dummy_var_135 := team_change_carrier($p513, $i515);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb273:
    assume $i506 == 1;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p507 := $M.27;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i508 := $load.i8($M.0, $p10);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i509 := $trunc.i8.i1($i508);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} vslice_dummy_var_134 := team_change_carrier($p507, $i509);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb270:
    assume $i500 == 1;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p501 := $M.27;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i502 := $load.i8($M.0, $p10);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i503 := $trunc.i8.i1($i502);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} vslice_dummy_var_133 := team_change_carrier($p501, $i503);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb36:
    assume $i119 == 1;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i494 := $M.37;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i495 := $eq.i32($i494, 2);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb267:
    assume $i495 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p496 := $M.27;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} team_uninit($p496);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i497 := $M.40;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i498 := $sub.i32($i497, 1);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $M.40 := $i498;
    call {:si_unique_call 1656} {:cexpr "ref_cnt"} boogie_si_record_i32($i498);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    goto $bb269;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i112, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i112, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i121 == 1);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i484 := $M.37;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i484, 3);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i489 := $M.37;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i489, 2);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb264:
    assume $i490 == 1;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p491 := $M.27;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i492 := $load.i32($M.0, $p11);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} vslice_dummy_var_132 := team_change_mtu($p491, $i492);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb261:
    assume $i485 == 1;
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p486 := $M.27;
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i487 := $load.i32($M.0, $p11);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} vslice_dummy_var_131 := team_change_mtu($p486, $i487);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb40:
    assume $i121 == 1;
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i469 := $M.37;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i469, 1);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $i474 := $M.37;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i475 := $eq.i32($i474, 3);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i479 := $M.37;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i480 := $eq.i32($i479, 2);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i480 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb258:
    assume $i480 == 1;
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p481 := $M.27;
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p482 := $load.ref($M.0, $p8);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} vslice_dummy_var_130 := team_select_queue($p481, $p34, $p32, $p482);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb255:
    assume $i475 == 1;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p476 := $M.27;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p477 := $load.ref($M.0, $p8);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} vslice_dummy_var_129 := team_select_queue($p476, $p34, $p32, $p477);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb252:
    assume $i470 == 1;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p471 := $M.27;
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p8);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} vslice_dummy_var_128 := team_select_queue($p471, $p34, $p32, $p472);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb38:
    assume $i120 == 1;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i457 := $M.37;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i457, 1);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $i461 := $M.37;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i461, 3);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $i465 := $M.37;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, 2);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb249:
    assume $i466 == 1;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p467 := $M.27;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} vslice_dummy_var_127 := team_netpoll_setup($p467, $p24);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb246:
    assume $i462 == 1;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p463 := $M.27;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} vslice_dummy_var_126 := team_netpoll_setup($p463, $p24);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb243:
    assume $i458 == 1;
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p459 := $M.27;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} vslice_dummy_var_125 := team_netpoll_setup($p459, $p24);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb25:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i112, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i112, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i112, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i124 == 1);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i427 := $M.37;
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i427, 1);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i437 := $M.37;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, 3);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i447 := $M.37;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i447, 2);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb240:
    assume $i448 == 1;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p449 := $M.27;
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i450 := $load.i16($M.0, $p3);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i451 := $zext.i16.i32($i450);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i452 := $trunc.i32.i16($i451);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i453 := $load.i16($M.0, $p12);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i454 := $zext.i16.i32($i453);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i455 := $trunc.i32.i16($i454);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_124 := switchdev_port_fdb_add($p47, $p22, $p449, $p48, $i452, $i455);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb237:
    assume $i438 == 1;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p439 := $M.27;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i440 := $load.i16($M.0, $p3);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i441 := $zext.i16.i32($i440);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i442 := $trunc.i32.i16($i441);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i443 := $load.i16($M.0, $p12);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i444 := $zext.i16.i32($i443);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i445 := $trunc.i32.i16($i444);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_123 := switchdev_port_fdb_add($p47, $p22, $p439, $p48, $i442, $i445);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb234:
    assume $i428 == 1;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p429 := $M.27;
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i430 := $load.i16($M.0, $p3);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i431 := $zext.i16.i32($i430);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i432 := $trunc.i32.i16($i431);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i433 := $load.i16($M.0, $p12);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i434 := $zext.i16.i32($i433);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i435 := $trunc.i32.i16($i434);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_122 := switchdev_port_fdb_add($p47, $p22, $p429, $p48, $i432, $i435);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb46:
    assume $i124 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i418 := $M.37;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i418, 1);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i421 := $M.37;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, 3);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $i424 := $M.37;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i424, 2);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb231:
    assume $i425 == 1;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p426 := $M.27;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} team_poll_controller($p426);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb228:
    assume $i422 == 1;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $p423 := $M.27;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} team_poll_controller($p423);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb225:
    assume $i419 == 1;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p420 := $M.27;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} team_poll_controller($p420);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb44:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i112, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i125 == 1);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i400 := $M.37;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 1);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i406 := $M.37;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i406, 3);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i412 := $M.37;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i412, 2);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb222:
    assume $i413 == 1;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p414 := $M.27;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p415 := $M.27;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i416 := $load.i32($M.0, $p15);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} vslice_dummy_var_121 := switchdev_port_fdb_dump($p43, $p36, $p414, $p415, $i416);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb219:
    assume $i407 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p408 := $M.27;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $p409 := $M.27;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i410 := $load.i32($M.0, $p15);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} vslice_dummy_var_120 := switchdev_port_fdb_dump($p43, $p36, $p408, $p409, $i410);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb216:
    assume $i401 == 1;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p402 := $M.27;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p403 := $M.27;
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.0, $p15);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} vslice_dummy_var_119 := switchdev_port_fdb_dump($p43, $p36, $p402, $p403, $i404);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb48:
    assume $i125 == 1;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i388 := $M.37;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 1);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i392 := $M.37;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 3);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i396 := $M.37;
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i396, 2);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb213:
    assume $i397 == 1;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p398 := $M.27;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i399 := $load.i32($M.0, $p7);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} team_change_rx_flags($p398, $i399);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb210:
    assume $i393 == 1;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p394 := $M.27;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i395 := $load.i32($M.0, $p7);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} team_change_rx_flags($p394, $i395);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb207:
    assume $i389 == 1;
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p390 := $M.27;
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.0, $p7);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} team_change_rx_flags($p390, $i391);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb42:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i112, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i112, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i127 == 1);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i373 := $M.37;
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 1);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i378 := $M.37;
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 3);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i383 := $M.37;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i383, 2);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb204:
    assume $i384 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p385 := $M.27;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i386 := $load.i64($M.0, $p0);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_118 := passthru_features_check($p50, $p385, $i386);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i379 == 1;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p380 := $M.27;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i381 := $load.i64($M.0, $p0);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} vslice_dummy_var_117 := passthru_features_check($p50, $p380, $i381);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb198:
    assume $i374 == 1;
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p375 := $M.27;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i376 := $load.i64($M.0, $p0);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} vslice_dummy_var_116 := passthru_features_check($p50, $p375, $i376);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb52:
    assume $i127 == 1;
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i364 := $M.37;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 1);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i367 := $M.37;
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 3);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i370 := $M.37;
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 2);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb195:
    assume $i371 == 1;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p372 := $M.27;
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} team_set_rx_mode($p372);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume $i368 == 1;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p369 := $M.27;
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} team_set_rx_mode($p369);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb189:
    assume $i365 == 1;
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p366 := $M.27;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} team_set_rx_mode($p366);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb50:
    assume $i126 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i360 := $M.37;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 3);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb186:
    assume $i361 == 1;
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $p362 := $M.27;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} vslice_dummy_var_115 := team_close($p362);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb23:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i112, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i112, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i112, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i112, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i131 == 1);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i351 := $M.37;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 1);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i354 := $M.37;
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 3);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i357 := $M.37;
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 2);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb183:
    assume $i358 == 1;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p359 := $M.27;
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} team_netpoll_cleanup($p359);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1599} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb180:
    assume $i355 == 1;
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p356 := $M.27;
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} team_netpoll_cleanup($p356);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb177:
    assume $i352 == 1;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p353 := $M.27;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} team_netpoll_cleanup($p353);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb60:
    assume $i131 == 1;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i343 := $M.37;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 1);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb171:
    assume $i344 == 1;
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p345 := $M.27;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $i346 := team_init($p345);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $M.46 := $i346;
    call {:si_unique_call 1591} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i346);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i347 := $M.46;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 0);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb173:
    assume $i348 == 1;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i349 := $M.40;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i350 := $add.i32($i349, 1);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $M.40 := $i350;
    call {:si_unique_call 1593} {:cexpr "ref_cnt"} boogie_si_record_i32($i350);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    goto $bb175;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i112, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i132 == 1);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i328 := $M.37;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 1);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i333 := $M.37;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 3);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i338 := $M.37;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i338, 2);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb168:
    assume $i339 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p340 := $M.27;
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i341 := $load.i64($M.0, $p19);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} vslice_dummy_var_114 := team_fix_features($p340, $i341);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb165:
    assume $i334 == 1;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p335 := $M.27;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i336 := $load.i64($M.0, $p19);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} vslice_dummy_var_113 := team_fix_features($p335, $i336);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb162:
    assume $i329 == 1;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p330 := $M.27;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i331 := $load.i64($M.0, $p19);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_112 := team_fix_features($p330, $i331);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb62:
    assume $i132 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i324 := $M.37;
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 3);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb159:
    assume $i325 == 1;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p326 := $M.27;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_111 := team_xmit($p39, $p326);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb56:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i112, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i112, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i134 == 1);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i318 := $M.37;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 2);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb153:
    assume $i319 == 1;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p320 := $M.27;
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $i321 := team_open($p320);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.45 := $i321;
    call {:si_unique_call 1580} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i321);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i322 := $M.45;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb155:
    assume $i323 == 1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb66:
    assume $i134 == 1;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i303 := $M.37;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 1);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i308 := $M.37;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 3);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i313 := $M.37;
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 2);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb150:
    assume $i314 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p315 := $M.27;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p316 := $M.27;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_110 := team_del_slave($p315, $p316);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    goto $bb152;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb147:
    assume $i309 == 1;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p310 := $M.27;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p311 := $M.27;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} vslice_dummy_var_109 := team_del_slave($p310, $p311);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    goto $bb149;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb144:
    assume $i304 == 1;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p305 := $M.27;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p306 := $M.27;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} vslice_dummy_var_108 := team_del_slave($p305, $p306);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto $bb146;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i133 == 1;
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i279 := $M.37;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 1);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i287 := $M.37;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 3);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i295 := $M.37;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 2);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb141:
    assume $i296 == 1;
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.0, $p5);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p2);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p299 := $M.27;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.0, $p18);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.0, $p17);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} vslice_dummy_var_107 := switchdev_port_bridge_getlink($p52, $i297, $i298, $p299, $i300, $i301);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1572} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume $i288 == 1;
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.0, $p5);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i290 := $load.i32($M.0, $p2);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p291 := $M.27;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.0, $p18);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.0, $p17);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_106 := switchdev_port_bridge_getlink($p52, $i289, $i290, $p291, $i292, $i293);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb135:
    assume $i280 == 1;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.0, $p5);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.0, $p2);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p283 := $M.27;
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i284 := $load.i32($M.0, $p18);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p17);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_105 := switchdev_port_bridge_getlink($p52, $i281, $i282, $p283, $i284, $i285);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1568} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb54:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i112, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i112, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i112, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i137 == 1);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i249 := $M.37;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 1);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i259 := $M.37;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 3);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i269 := $M.37;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 2);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb132:
    assume $i270 == 1;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p271 := $M.27;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i272 := $load.i16($M.0, $p14);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i273 := $zext.i16.i32($i272);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i274 := $trunc.i32.i16($i273);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i275 := $load.i16($M.0, $p13);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i276 := $zext.i16.i32($i275);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i32.i16($i276);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_104 := team_vlan_rx_add_vid($p271, $i274, $i277);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1566} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb129:
    assume $i260 == 1;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p261 := $M.27;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i262 := $load.i16($M.0, $p14);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i263 := $zext.i16.i32($i262);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i264 := $trunc.i32.i16($i263);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i265 := $load.i16($M.0, $p13);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i266 := $zext.i16.i32($i265);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i16($i266);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_103 := team_vlan_rx_add_vid($p261, $i264, $i267);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1564} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb126:
    assume $i250 == 1;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p251 := $M.27;
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i252 := $load.i16($M.0, $p14);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i253 := $zext.i16.i32($i252);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i254 := $trunc.i32.i16($i253);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i255 := $load.i16($M.0, $p13);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i256 := $zext.i16.i32($i255);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i257 := $trunc.i32.i16($i256);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} vslice_dummy_var_102 := team_vlan_rx_add_vid($p251, $i254, $i257);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1562} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb72:
    assume $i137 == 1;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i228 := $M.37;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 1);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i235 := $M.37;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 3);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i242 := $M.37;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 2);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb123:
    assume $i243 == 1;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p244 := $M.27;
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i245 := $load.i16($M.0, $p9);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i246 := $zext.i16.i32($i245);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i32.i16($i246);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_101 := switchdev_port_bridge_dellink($p244, $p27, $i247);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb120:
    assume $i236 == 1;
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p237 := $M.27;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i238 := $load.i16($M.0, $p9);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i238);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i32.i16($i239);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_100 := switchdev_port_bridge_dellink($p237, $p27, $i240);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1558} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb117:
    assume $i229 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p230 := $M.27;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i231 := $load.i16($M.0, $p9);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i231);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i32.i16($i232);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_99 := switchdev_port_bridge_dellink($p230, $p27, $i233);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb70:
    assume $i136 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i207 := $M.37;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 1);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i214 := $M.37;
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 3);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i221 := $M.37;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 2);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb114:
    assume $i222 == 1;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p223 := $M.27;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i224 := $load.i16($M.0, $p16);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i225 := $zext.i16.i32($i224);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i226 := $trunc.i32.i16($i225);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} vslice_dummy_var_98 := switchdev_port_bridge_setlink($p223, $p41, $i226);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb111:
    assume $i215 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p216 := $M.27;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i217 := $load.i16($M.0, $p16);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i217);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i16($i218);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_97 := switchdev_port_bridge_setlink($p216, $p41, $i219);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i208 == 1;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p209 := $M.27;
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i210 := $load.i16($M.0, $p16);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32($i210);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i16($i211);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_96 := switchdev_port_bridge_setlink($p209, $p41, $i212);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb68:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i112, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i112, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i139 == 1);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i177 := $M.37;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 1);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i187 := $M.37;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 3);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i197 := $M.37;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 2);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb105:
    assume $i198 == 1;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p199 := $M.27;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.0, $p6);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i16($i201);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i203 := $load.i16($M.0, $p1);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i204 := $zext.i16.i32($i203);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i16($i204);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_95 := team_vlan_rx_kill_vid($p199, $i202, $i205);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume $i188 == 1;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p189 := $M.27;
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i190 := $load.i16($M.0, $p6);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i190);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i32.i16($i191);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i193 := $load.i16($M.0, $p1);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i194 := $zext.i16.i32($i193);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i195 := $trunc.i32.i16($i194);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_94 := team_vlan_rx_kill_vid($p189, $i192, $i195);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb99:
    assume $i178 == 1;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p179 := $M.27;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $i180 := $load.i16($M.0, $p6);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i181 := $zext.i16.i32($i180);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i16($i181);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i183 := $load.i16($M.0, $p1);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i183);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i16($i184);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_93 := team_vlan_rx_kill_vid($p179, $i182, $i185);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb76:
    assume $i139 == 1;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i162 := $M.37;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 1);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i167 := $M.37;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 3);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i172 := $M.37;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 2);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb96:
    assume $i173 == 1;
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p174 := $M.27;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p175 := $M.27;
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_92 := team_add_slave($p174, $p175);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i168 == 1;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p169 := $M.27;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p170 := $M.27;
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_91 := team_add_slave($p169, $p170);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb90:
    assume $i163 == 1;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p164 := $M.27;
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p165 := $M.27;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vslice_dummy_var_90 := team_add_slave($p164, $p165);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1538} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    goto $bb92;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i112, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb35;

  $bb78:
    assume $i140 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i141 := $M.37;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 1);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i148 := $M.37;
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 3);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i155 := $M.37;
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 2);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb86:
    assume $i156 == 1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p157 := $M.27;
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i158 := $load.i16($M.0, $p4);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i159 := $zext.i16.i32($i158);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i159);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_89 := switchdev_port_fdb_del($p29, $p45, $p157, $p37, $i160);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume $i149 == 1;
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p150 := $M.27;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.0, $p4);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i151);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i16($i152);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_88 := switchdev_port_fdb_del($p29, $p45, $p150, $p37, $i153);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb80:
    assume $i142 == 1;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p143 := $M.27;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i144 := $load.i16($M.0, $p4);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i145);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_87 := switchdev_port_fdb_del($p29, $p45, $p143, $p37, $i146);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb300_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1525} $i101 := __VERIFIER_nondet_int();
    call {:si_unique_call 1526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i101);
    call {:si_unique_call 1527} {:cexpr "tmp___21"} boogie_si_record_i32($i101);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 552810);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    return;
}



const ldv_release_4: ref;

axiom ldv_release_4 == $sub.ref(0, 553842);

procedure ldv_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1750} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_init_4: ref;

axiom ldv_init_4 == $sub.ref(0, 554874);

procedure ldv_init_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_init_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1752} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1753} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const team_module_exit: ref;

axiom team_module_exit == $sub.ref(0, 555906);

procedure team_module_exit();
  free requires assertsPassed;



implementation team_module_exit()
{
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} team_nl_fini();
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} rtnl_link_unregister(team_link_ops);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} vslice_dummy_var_159 := unregister_netdevice_notifier(team_notifier_block);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    return;
}



const team_module_init: ref;

axiom team_module_init == $sub.ref(0, 556938);

procedure team_module_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation team_module_init() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;
  var $i6: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} vslice_dummy_var_160 := register_netdevice_notifier(team_notifier_block);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} $i1 := rtnl_link_register(team_link_ops);
    call {:si_unique_call 1759} {:cexpr "err"} boogie_si_record_i32($i1);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i4 := team_nl_init();
    call {:si_unique_call 1762} {:cexpr "err"} boogie_si_record_i32($i4);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} rtnl_link_unregister(team_link_ops);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} vslice_dummy_var_161 := unregister_netdevice_notifier(team_notifier_block);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i6 := $i3;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 557970);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i0 := $M.17;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} ldv_error();
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const register_netdevice_notifier: ref;

axiom register_netdevice_notifier == $sub.ref(0, 559002);

procedure register_netdevice_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdevice_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1765} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1766} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const rtnl_link_register: ref;

axiom rtnl_link_register == $sub.ref(0, 560034);

procedure rtnl_link_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation rtnl_link_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1767} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1768} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_nl_init: ref;

axiom team_nl_init == $sub.ref(0, 561066);

procedure team_nl_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation team_nl_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $i0 := _genl_register_family_with_ops_grps(team_nl_family, team_nl_ops, 4, team_nl_mcgrps, 1);
    call {:si_unique_call 1770} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rtnl_link_unregister: ref;

axiom rtnl_link_unregister == $sub.ref(0, 562098);

procedure rtnl_link_unregister($p0: ref);
  free requires assertsPassed;



implementation rtnl_link_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdevice_notifier: ref;

axiom unregister_netdevice_notifier == $sub.ref(0, 563130);

procedure unregister_netdevice_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_netdevice_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1771} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1772} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _genl_register_family_with_ops_grps: ref;

axiom _genl_register_family_with_ops_grps == $sub.ref(0, 564162);

procedure _genl_register_family_with_ops_grps($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation _genl_register_family_with_ops_grps($p0: ref, $p1: ref, $i2: i64, $p3: ref, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} {:cexpr "_genl_register_family_with_ops_grps:arg:n_ops"} boogie_si_record_i64($i2);
    call {:si_unique_call 1774} {:cexpr "_genl_register_family_with_ops_grps:arg:n_mcgrps"} boogie_si_record_i64($i4);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(128, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, __this_module);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, $p1);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i2);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(96, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p8, $i7);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(88, 1));
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, $p3);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i4);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(100, 1));
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p11, $i10);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i12 := __genl_register_family($p0);
    call {:si_unique_call 1776} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const __genl_register_family: ref;

axiom __genl_register_family == $sub.ref(0, 565194);

procedure __genl_register_family($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __genl_register_family($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1777} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1778} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const team_nl_fini: ref;

axiom team_nl_fini == $sub.ref(0, 566226);

procedure team_nl_fini();
  free requires assertsPassed;



implementation team_nl_fini()
{
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} vslice_dummy_var_162 := genl_unregister_family(team_nl_family);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    return;
}



const genl_unregister_family: ref;

axiom genl_unregister_family == $sub.ref(0, 567258);

procedure genl_unregister_family($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation genl_unregister_family($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1780} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1781} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 568290);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1782} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 1} true;
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 569322);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 570354);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 571386);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 572418);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 573450);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 574482);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 575514);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 576546);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 577578);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 578610);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 579642);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 580674);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 581706);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1783} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1784} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1785} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1786} __VERIFIER_assume($i4);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 582738);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 583770);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 584802);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 585834);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1787} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1788} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1789} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1790} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1791} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1792} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1793} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1794} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1795} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1796} __VERIFIER_assume($i7);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1797} __VERIFIER_assume($i11);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 586866);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 587898);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 588930);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 589962);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 590994);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 592026);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1798} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1799} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1800} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1801} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1802} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1803} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1804} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1805} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1806} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1807} __VERIFIER_assume($i7);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1808} __VERIFIER_assume($i11);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 593058);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 594090);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 595122);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 596154);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 597186);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 598218);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 599250);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 600282);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 601314);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1809} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1810} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1811} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1812} __VERIFIER_assume($i10);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 602346);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1813} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1814} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1815} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 603378);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1816} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1817} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1818} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 604410);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1819} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1820} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 605442);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 606474);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1821} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1822} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 607506);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 608538);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 609570);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1823} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1824} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1825} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1826} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $p6 := malloc($i5);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 1828} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 610602);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 611634);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.51, $M.0, $M.52, $M.80, $M.2, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.47, $M.45, $M.46, $M.32, $M.29, $M.38, $M.31, $M.39, $M.9, $M.40, $M.34, $M.42, $M.30, $M.27, $M.14, $M.36, $M.13, $M.33, $M.28, $M.35, $M.11, $M.43, $M.44, $M.41, $M.37, $M.15, $M.16, $M.12, $M.10, $M.17;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1829} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.51 := $store.i8($M.51, __kstrtab_team_modeop_port_enter, 116);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(2, 1)), 97);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(3, 1)), 109);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(4, 1)), 95);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(5, 1)), 109);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(6, 1)), 111);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(7, 1)), 100);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(10, 1)), 112);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(12, 1)), 112);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(13, 1)), 111);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(14, 1)), 114);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(17, 1)), 101);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.51 := $store.i8($M.51, $add.ref($add.ref(__kstrtab_team_modeop_port_enter, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, team_nl_mcgrps, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_nl_mcgrps, $mul.ref(0, 16)), $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.52 := $store.i16($M.52, team_nl_option_policy, 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(0, 1)), 5);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(1, 4)), $mul.ref(2, 1)), 32);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(0, 1)), 6);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(2, 4)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(0, 1)), 1);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(3, 4)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(0, 1)), 11);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(4, 4)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(0, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(5, 4)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(0, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(6, 4)), $mul.ref(2, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(0, 1)), 0);
    $M.52 := $store.i16($M.52, $add.ref($add.ref($add.ref(team_nl_option_policy, $mul.ref(0, 32)), $mul.ref(7, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, team_nl_policy, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(team_nl_policy, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(2, 1)), 0);
    $M.0 := $store.ref($M.0, team_nl_ops, team_nl_policy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(8, 1)), team_nl_cmd_noop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(0, 40)), $mul.ref(34, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(0, 1)), team_nl_policy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(8, 1)), team_nl_cmd_options_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(32, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(1, 40)), $mul.ref(34, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(0, 1)), team_nl_policy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(8, 1)), team_nl_cmd_options_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(2, 40)), $mul.ref(34, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(0, 1)), team_nl_policy);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(8, 1)), team_nl_cmd_port_list_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(32, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_nl_ops, $mul.ref(0, 160)), $mul.ref(3, 40)), $mul.ref(34, 1)), 1);
    $M.0 := $store.ref($M.0, team_ethtool_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(16, 1)), team_ethtool_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_ethtool_ops, $mul.ref(0, 392)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, team_netdev_ops, team_init);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), team_uninit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), team_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), team_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), team_xmit);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), team_select_queue);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), team_change_rx_flags);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), team_set_rx_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), team_set_mac_address);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), team_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), team_get_stats64);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), team_vlan_rx_add_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), team_vlan_rx_kill_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), team_poll_controller);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), team_netpoll_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), team_netpoll_cleanup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), team_add_slave);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), team_del_slave);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), team_fix_features);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), switchdev_port_fdb_add);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), switchdev_port_fdb_del);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), switchdev_port_fdb_dump);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), switchdev_port_bridge_setlink);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), switchdev_port_bridge_getlink);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), switchdev_port_bridge_dellink);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), team_change_carrier);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), passthru_features_check);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(team_netdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.i8($M.0, team_tx_busylock_key, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(team_tx_busylock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, team_netdev_xmit_lock_key, 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_xmit_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, team_netdev_addr_lock_key, 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref($add.ref(team_netdev_addr_lock_key, $mul.ref(0, 8)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, team_options, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(16, 1)), .str.43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(32, 1)), 1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(48, 1)), team_mode_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(0, 64)), $mul.ref(56, 1)), team_mode_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(16, 1)), .str.44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(48, 1)), team_notify_peers_count_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(1, 64)), $mul.ref(56, 1)), team_notify_peers_count_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(16, 1)), .str.45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(48, 1)), team_notify_peers_interval_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(2, 64)), $mul.ref(56, 1)), team_notify_peers_interval_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(16, 1)), .str.46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(48, 1)), team_mcast_rejoin_count_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(3, 64)), $mul.ref(56, 1)), team_mcast_rejoin_count_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(16, 1)), .str.47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(48, 1)), team_mcast_rejoin_interval_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(4, 64)), $mul.ref(56, 1)), team_mcast_rejoin_interval_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(16, 1)), .str.48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(32, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(48, 1)), team_port_en_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(5, 64)), $mul.ref(56, 1)), team_port_en_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(16, 1)), .str.49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(32, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(48, 1)), team_user_linkup_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(6, 64)), $mul.ref(56, 1)), team_user_linkup_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(16, 1)), .str.50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(32, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(48, 1)), team_user_linkup_en_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(7, 64)), $mul.ref(56, 1)), team_user_linkup_en_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(16, 1)), .str.51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(32, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(48, 1)), team_priority_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(8, 64)), $mul.ref(56, 1)), team_priority_option_set);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(16, 1)), .str.52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(48, 1)), team_queue_id_option_get);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(team_options, $mul.ref(0, 640)), $mul.ref(9, 64)), $mul.ref(56, 1)), team_queue_id_option_set);
    $M.0 := $store.ref($M.0, __team_no_mode, .str.24);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(__team_no_mode, $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(__team_no_mode, $mul.ref(0, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(__team_no_mode, $mul.ref(0, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(__team_no_mode, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.2 := $store.i32($M.2, team_nl_family, 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(0, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(1, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(2, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(3, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(7, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(8, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(9, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(10, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(11, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(13, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(8, 1)), $mul.ref(15, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(24, 1)), 1);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(28, 1)), 3);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(32, 1)), 1);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(33, 1)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(40, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(48, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(56, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(64, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(72, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(80, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(88, 1)), $0.ref);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(96, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(100, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(104, 1)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(8, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(team_nl_family, $mul.ref(0, 136)), $mul.ref(128, 1)), $0.ref);
    $M.81 := $store.i8($M.81, __kstrtab_team_mode_unregister, 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(2, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(3, 1)), 109);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(5, 1)), 109);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(7, 1)), 100);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(10, 1)), 117);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(11, 1)), 110);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(14, 1)), 103);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(15, 1)), 105);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(16, 1)), 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(17, 1)), 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(19, 1)), 114);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(__kstrtab_team_mode_unregister, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.82 := $store.i8($M.82, __kstrtab_team_mode_register, 116);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(1, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(2, 1)), 97);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(3, 1)), 109);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(5, 1)), 109);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(6, 1)), 111);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(7, 1)), 100);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(10, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(12, 1)), 103);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(13, 1)), 105);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(14, 1)), 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(15, 1)), 116);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(__kstrtab_team_mode_register, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.ref($M.0, mode_list, mode_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(mode_list, $mul.ref(0, 16)), $mul.ref(8, 1)), mode_list);
    $M.83 := $store.i32($M.83, mode_list_lock, 0);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.83 := $store.ref($M.83, $add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.83 := $store.ref($M.83, $add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.83 := $store.ref($M.83, $add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str);
    $M.83 := $store.i32($M.83, $add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.83 := $store.i64($M.83, $add.ref($add.ref($add.ref($add.ref($add.ref(mode_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.84 := $store.i8($M.84, __kstrtab_team_options_change_check, 116);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(1, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(2, 1)), 97);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(3, 1)), 109);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(5, 1)), 111);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(6, 1)), 112);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(7, 1)), 116);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(8, 1)), 105);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(9, 1)), 111);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(10, 1)), 110);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(11, 1)), 115);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(12, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(13, 1)), 99);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(14, 1)), 104);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(15, 1)), 97);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(16, 1)), 110);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(17, 1)), 103);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(20, 1)), 99);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(21, 1)), 104);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(24, 1)), 107);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(__kstrtab_team_options_change_check, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.85 := $store.i8($M.85, __kstrtab_team_option_inst_set_change, 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(1, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(2, 1)), 97);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(3, 1)), 109);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(4, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(5, 1)), 111);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(6, 1)), 112);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(7, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(8, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(9, 1)), 111);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(10, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(12, 1)), 105);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(13, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(14, 1)), 115);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(15, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(16, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(17, 1)), 115);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(18, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(19, 1)), 116);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(20, 1)), 95);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(21, 1)), 99);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(22, 1)), 104);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(23, 1)), 97);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(24, 1)), 110);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(25, 1)), 103);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.85 := $store.i8($M.85, $add.ref($add.ref(__kstrtab_team_option_inst_set_change, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.86 := $store.i8($M.86, __kstrtab_team_options_unregister, 116);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(1, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(2, 1)), 97);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(3, 1)), 109);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(5, 1)), 111);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(6, 1)), 112);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(7, 1)), 116);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(8, 1)), 105);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(9, 1)), 111);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(10, 1)), 110);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(11, 1)), 115);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(13, 1)), 117);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(14, 1)), 110);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(15, 1)), 114);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(17, 1)), 103);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(18, 1)), 105);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(19, 1)), 115);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(20, 1)), 116);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.86 := $store.i8($M.86, $add.ref($add.ref(__kstrtab_team_options_unregister, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.87 := $store.i8($M.87, __kstrtab_team_options_register, 116);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(1, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(2, 1)), 97);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(3, 1)), 109);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(5, 1)), 111);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(6, 1)), 112);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(7, 1)), 116);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(8, 1)), 105);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(9, 1)), 111);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(10, 1)), 110);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(11, 1)), 115);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(13, 1)), 114);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(16, 1)), 105);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(18, 1)), 116);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(__kstrtab_team_options_register, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.88 := $store.i8($M.88, __kstrtab_team_modeop_port_change_dev_addr, 116);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(1, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(2, 1)), 97);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(3, 1)), 109);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(4, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(5, 1)), 109);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(6, 1)), 111);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(7, 1)), 100);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(8, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(9, 1)), 111);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(10, 1)), 112);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(11, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(12, 1)), 112);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(13, 1)), 111);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(14, 1)), 114);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(15, 1)), 116);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(16, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(17, 1)), 99);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(18, 1)), 104);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(19, 1)), 97);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(20, 1)), 110);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(21, 1)), 103);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(22, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(23, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(24, 1)), 100);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(25, 1)), 101);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(26, 1)), 118);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(27, 1)), 95);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(28, 1)), 97);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(29, 1)), 100);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(30, 1)), 100);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(31, 1)), 114);
    $M.88 := $store.i8($M.88, $add.ref($add.ref(__kstrtab_team_modeop_port_change_dev_addr, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.47 := 0;
    call {:si_unique_call 1830} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1831} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1832} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.32 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 1833} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1834} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1835} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 1837} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1838} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.34 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1840} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.27 := $0.ref;
    $M.14 := $0.ref;
    $M.36 := $0.ref;
    $M.13 := 0;
    call {:si_unique_call 1841} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.33 := $0.ref;
    $M.28 := 0;
    call {:si_unique_call 1842} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.35 := $0.ref;
    $M.11 := 0;
    call {:si_unique_call 1843} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1844} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1846} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1848} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.16 := $0.ref;
    $M.12 := $0.ref;
    $M.10 := $0.ref;
    $M.17 := 1;
    call {:si_unique_call 1849} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    call {:si_unique_call 1850} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 612666);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(team_nl_send_unicast, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(team_nl_send_multicast, $p0);
    assume {:branchcond $i8} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(team_options_register, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $i3 := $zext.i32.i64(arg2);
    call {:si_unique_call 1851} $i4 := team_options_register($p1, $p2, $i3);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    $r := $i4;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    call {:si_unique_call 1852} $i5 := team_nl_send_multicast(arg, arg1, arg2);
    $r := $i5;
    return;

  $bb4:
    assume $i9 == 1;
    call {:si_unique_call 1853} $i6 := team_nl_send_unicast(arg, arg1, arg2);
    $r := $i6;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 613698);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 614730);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i83 := $eq.ref(team_nl_cmd_port_list_get, $p0);
    assume true;
    goto $bb32, $bb63;

  $bb63:
    assume !($i83 == 1);
    $i82 := $eq.ref(team_nl_cmd_options_get, $p0);
    assume {:branchcond $i82} true;
    goto $bb31, $bb62;

  $bb62:
    assume !($i82 == 1);
    $i81 := $eq.ref(team_nl_cmd_options_set, $p0);
    assume {:branchcond $i81} true;
    goto $bb30, $bb61;

  $bb61:
    assume !($i81 == 1);
    $i80 := $eq.ref(team_nl_cmd_noop, $p0);
    assume {:branchcond $i80} true;
    goto $bb29, $bb60;

  $bb60:
    assume !($i80 == 1);
    $i79 := $eq.ref(team_validate, $p0);
    assume true;
    goto $bb28, $bb59;

  $bb59:
    assume !($i79 == 1);
    $i78 := $eq.ref(team_del_slave, $p0);
    assume {:branchcond $i78} true;
    goto $bb27, $bb58;

  $bb58:
    assume !($i78 == 1);
    $i77 := $eq.ref(team_add_slave, $p0);
    assume {:branchcond $i77} true;
    goto $bb26, $bb57;

  $bb57:
    assume !($i77 == 1);
    $i76 := $eq.ref(team_netpoll_setup, $p0);
    assume {:branchcond $i76} true;
    goto $bb25, $bb56;

  $bb56:
    assume !($i76 == 1);
    $i75 := $eq.ref(team_set_mac_address, $p0);
    assume true;
    goto $bb24, $bb55;

  $bb55:
    assume !($i75 == 1);
    $i74 := $eq.ref(team_xmit, $p0);
    assume true;
    goto $bb23, $bb54;

  $bb54:
    assume !($i74 == 1);
    $i73 := $eq.ref(team_queue_id_option_set, $p0);
    assume true;
    goto $bb22, $bb53;

  $bb53:
    assume !($i73 == 1);
    $i72 := $eq.ref(team_queue_id_option_get, $p0);
    assume {:branchcond $i72} true;
    goto $bb21, $bb52;

  $bb52:
    assume !($i72 == 1);
    $i71 := $eq.ref(team_priority_option_set, $p0);
    assume true;
    goto $bb20, $bb51;

  $bb51:
    assume !($i71 == 1);
    $i70 := $eq.ref(team_priority_option_get, $p0);
    assume true;
    goto $bb19, $bb50;

  $bb50:
    assume !($i70 == 1);
    $i69 := $eq.ref(team_user_linkup_en_option_set, $p0);
    assume {:branchcond $i69} true;
    goto $bb18, $bb49;

  $bb49:
    assume !($i69 == 1);
    $i68 := $eq.ref(team_user_linkup_en_option_get, $p0);
    assume {:branchcond $i68} true;
    goto $bb17, $bb48;

  $bb48:
    assume !($i68 == 1);
    $i67 := $eq.ref(team_user_linkup_option_set, $p0);
    assume true;
    goto $bb16, $bb47;

  $bb47:
    assume !($i67 == 1);
    $i66 := $eq.ref(team_user_linkup_option_get, $p0);
    assume true;
    goto $bb15, $bb46;

  $bb46:
    assume !($i66 == 1);
    $i65 := $eq.ref(team_port_en_option_set, $p0);
    assume {:branchcond $i65} true;
    goto $bb14, $bb45;

  $bb45:
    assume !($i65 == 1);
    $i64 := $eq.ref(team_port_en_option_get, $p0);
    assume true;
    goto $bb13, $bb44;

  $bb44:
    assume !($i64 == 1);
    $i63 := $eq.ref(team_mcast_rejoin_interval_set, $p0);
    assume {:branchcond $i63} true;
    goto $bb12, $bb43;

  $bb43:
    assume !($i63 == 1);
    $i62 := $eq.ref(team_mcast_rejoin_interval_get, $p0);
    assume true;
    goto $bb11, $bb42;

  $bb42:
    assume !($i62 == 1);
    $i61 := $eq.ref(team_mcast_rejoin_count_set, $p0);
    assume true;
    goto $bb10, $bb41;

  $bb41:
    assume !($i61 == 1);
    $i60 := $eq.ref(team_mcast_rejoin_count_get, $p0);
    assume true;
    goto $bb9, $bb40;

  $bb40:
    assume !($i60 == 1);
    $i59 := $eq.ref(team_notify_peers_interval_set, $p0);
    assume true;
    goto $bb8, $bb39;

  $bb39:
    assume !($i59 == 1);
    $i58 := $eq.ref(team_notify_peers_interval_get, $p0);
    assume true;
    goto $bb7, $bb38;

  $bb38:
    assume !($i58 == 1);
    $i57 := $eq.ref(team_notify_peers_count_set, $p0);
    assume true;
    goto $bb6, $bb37;

  $bb37:
    assume !($i57 == 1);
    $i56 := $eq.ref(team_notify_peers_count_get, $p0);
    assume true;
    goto $bb5, $bb36;

  $bb36:
    assume !($i56 == 1);
    $i55 := $eq.ref(team_mode_option_set, $p0);
    assume true;
    goto $bb4, $bb35;

  $bb35:
    assume !($i55 == 1);
    $i54 := $eq.ref(team_mode_option_get, $p0);
    assume true;
    goto $bb3, $bb34;

  $bb34:
    assume !($i54 == 1);
    $i53 := $eq.ref(team_modeop_port_enter, $p0);
    assume true;
    goto $bb2, $bb33;

  $bb33:
    assume !($i53 == 1);
    assume false;
    return;

  $bb2:
    assume $i53 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1854} $i2 := team_modeop_port_enter(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i54 == 1;
    call {:si_unique_call 1855} $i3 := team_mode_option_get(arg, arg1);
    $r := $i3;
    return;

  $bb4:
    assume $i55 == 1;
    call {:si_unique_call 1856} $i4 := team_mode_option_set(arg, arg1);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    $r := $i4;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i56 == 1;
    call {:si_unique_call 1857} $i5 := team_notify_peers_count_get(arg, arg1);
    $r := $i5;
    return;

  $bb6:
    assume $i57 == 1;
    call {:si_unique_call 1858} $i6 := team_notify_peers_count_set(arg, arg1);
    $r := $i6;
    return;

  $bb7:
    assume $i58 == 1;
    call {:si_unique_call 1859} $i7 := team_notify_peers_interval_get(arg, arg1);
    $r := $i7;
    return;

  $bb8:
    assume $i59 == 1;
    call {:si_unique_call 1860} $i8 := team_notify_peers_interval_set(arg, arg1);
    $r := $i8;
    return;

  $bb9:
    assume $i60 == 1;
    call {:si_unique_call 1861} $i9 := team_mcast_rejoin_count_get(arg, arg1);
    $r := $i9;
    return;

  $bb10:
    assume $i61 == 1;
    call {:si_unique_call 1862} $i10 := team_mcast_rejoin_count_set(arg, arg1);
    $r := $i10;
    return;

  $bb11:
    assume $i62 == 1;
    call {:si_unique_call 1863} $i11 := team_mcast_rejoin_interval_get(arg, arg1);
    $r := $i11;
    return;

  $bb12:
    assume $i63 == 1;
    call {:si_unique_call 1864} $i12 := team_mcast_rejoin_interval_set(arg, arg1);
    $r := $i12;
    return;

  $bb13:
    assume $i64 == 1;
    call {:si_unique_call 1865} $i13 := team_port_en_option_get(arg, arg1);
    $r := $i13;
    return;

  $bb14:
    assume $i65 == 1;
    call {:si_unique_call 1866} $i14 := team_port_en_option_set(arg, arg1);
    $r := $i14;
    return;

  $bb15:
    assume $i66 == 1;
    call {:si_unique_call 1867} $i15 := team_user_linkup_option_get(arg, arg1);
    $r := $i15;
    return;

  $bb16:
    assume $i67 == 1;
    call {:si_unique_call 1868} $i16 := team_user_linkup_option_set(arg, arg1);
    $r := $i16;
    return;

  $bb17:
    assume $i68 == 1;
    call {:si_unique_call 1869} $i17 := team_user_linkup_en_option_get(arg, arg1);
    $r := $i17;
    return;

  $bb18:
    assume $i69 == 1;
    call {:si_unique_call 1870} $i18 := team_user_linkup_en_option_set(arg, arg1);
    $r := $i18;
    return;

  $bb19:
    assume $i70 == 1;
    call {:si_unique_call 1871} $i19 := team_priority_option_get(arg, arg1);
    $r := $i19;
    return;

  $bb20:
    assume $i71 == 1;
    call {:si_unique_call 1872} $i20 := team_priority_option_set(arg, arg1);
    $r := $i20;
    return;

  $bb21:
    assume $i72 == 1;
    call {:si_unique_call 1873} $i21 := team_queue_id_option_get(arg, arg1);
    $r := $i21;
    return;

  $bb22:
    assume $i73 == 1;
    call {:si_unique_call 1874} $i22 := team_queue_id_option_set(arg, arg1);
    $r := $i22;
    return;

  $bb23:
    assume $i74 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1875} $i25 := team_xmit($p23, $p24);
    $r := $i25;
    return;

  $bb24:
    assume $i75 == 1;
    $p26 := $bitcast.ref.ref(arg);
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1876} $i28 := team_set_mac_address($p26, $p27);
    $r := $i28;
    return;

  $bb25:
    assume $i76 == 1;
    $p29 := $bitcast.ref.ref(arg);
    $p30 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1877} $i31 := team_netpoll_setup($p29, $p30);
    $r := $i31;
    return;

  $bb26:
    assume $i77 == 1;
    $p32 := $bitcast.ref.ref(arg);
    $p33 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1878} $i34 := team_add_slave($p32, $p33);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    $r := $i34;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i78 == 1;
    $p35 := $bitcast.ref.ref(arg);
    $p36 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1879} $i37 := team_del_slave($p35, $p36);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    $r := $i37;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i79 == 1;
    $p38 := $bitcast.ref.ref(arg);
    $p39 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1880} $i40 := team_validate($p38, $p39);
    $r := $i40;
    return;

  $bb29:
    assume $i80 == 1;
    $p41 := $bitcast.ref.ref(arg);
    $p42 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1881} $i43 := team_nl_cmd_noop($p41, $p42);
    $r := $i43;
    return;

  $bb30:
    assume $i81 == 1;
    $p44 := $bitcast.ref.ref(arg);
    $p45 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1882} $i46 := team_nl_cmd_options_set($p44, $p45);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    $r := $i46;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i82 == 1;
    $p47 := $bitcast.ref.ref(arg);
    $p48 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1883} $i49 := team_nl_cmd_options_get($p47, $p48);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    $r := $i49;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i83 == 1;
    $p50 := $bitcast.ref.ref(arg);
    $p51 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1884} $i52 := team_nl_cmd_port_list_get($p50, $p51);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    $r := $i52;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 615762);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i103 := $eq.ref(team_nl_cmd_port_list_get, $p0);
    assume true;
    goto $bb32, $bb63;

  $bb63:
    assume !($i103 == 1);
    $i102 := $eq.ref(team_nl_cmd_options_get, $p0);
    assume true;
    goto $bb31, $bb62;

  $bb62:
    assume !($i102 == 1);
    $i101 := $eq.ref(team_nl_cmd_options_set, $p0);
    assume true;
    goto $bb30, $bb61;

  $bb61:
    assume !($i101 == 1);
    $i100 := $eq.ref(team_nl_cmd_noop, $p0);
    assume {:branchcond $i100} true;
    goto $bb29, $bb60;

  $bb60:
    assume !($i100 == 1);
    $i99 := $eq.ref(team_validate, $p0);
    assume {:branchcond $i99} true;
    goto $bb28, $bb59;

  $bb59:
    assume !($i99 == 1);
    $i98 := $eq.ref(team_del_slave, $p0);
    assume {:branchcond $i98} true;
    goto $bb27, $bb58;

  $bb58:
    assume !($i98 == 1);
    $i97 := $eq.ref(team_add_slave, $p0);
    assume {:branchcond $i97} true;
    goto $bb26, $bb57;

  $bb57:
    assume !($i97 == 1);
    $i96 := $eq.ref(team_netpoll_setup, $p0);
    assume {:branchcond $i96} true;
    goto $bb25, $bb56;

  $bb56:
    assume !($i96 == 1);
    $i95 := $eq.ref(team_set_mac_address, $p0);
    assume {:branchcond $i95} true;
    goto $bb24, $bb55;

  $bb55:
    assume !($i95 == 1);
    $i94 := $eq.ref(team_xmit, $p0);
    assume true;
    goto $bb23, $bb54;

  $bb54:
    assume !($i94 == 1);
    $i93 := $eq.ref(team_queue_id_option_set, $p0);
    assume {:branchcond $i93} true;
    goto $bb22, $bb53;

  $bb53:
    assume !($i93 == 1);
    $i92 := $eq.ref(team_queue_id_option_get, $p0);
    assume {:branchcond $i92} true;
    goto $bb21, $bb52;

  $bb52:
    assume !($i92 == 1);
    $i91 := $eq.ref(team_priority_option_set, $p0);
    assume true;
    goto $bb20, $bb51;

  $bb51:
    assume !($i91 == 1);
    $i90 := $eq.ref(team_priority_option_get, $p0);
    assume {:branchcond $i90} true;
    goto $bb19, $bb50;

  $bb50:
    assume !($i90 == 1);
    $i89 := $eq.ref(team_user_linkup_en_option_set, $p0);
    assume {:branchcond $i89} true;
    goto $bb18, $bb49;

  $bb49:
    assume !($i89 == 1);
    $i88 := $eq.ref(team_user_linkup_en_option_get, $p0);
    assume true;
    goto $bb17, $bb48;

  $bb48:
    assume !($i88 == 1);
    $i87 := $eq.ref(team_user_linkup_option_set, $p0);
    assume true;
    goto $bb16, $bb47;

  $bb47:
    assume !($i87 == 1);
    $i86 := $eq.ref(team_user_linkup_option_get, $p0);
    assume {:branchcond $i86} true;
    goto $bb15, $bb46;

  $bb46:
    assume !($i86 == 1);
    $i85 := $eq.ref(team_port_en_option_set, $p0);
    assume {:branchcond $i85} true;
    goto $bb14, $bb45;

  $bb45:
    assume !($i85 == 1);
    $i84 := $eq.ref(team_port_en_option_get, $p0);
    assume {:branchcond $i84} true;
    goto $bb13, $bb44;

  $bb44:
    assume !($i84 == 1);
    $i83 := $eq.ref(team_mcast_rejoin_interval_set, $p0);
    assume true;
    goto $bb12, $bb43;

  $bb43:
    assume !($i83 == 1);
    $i82 := $eq.ref(team_mcast_rejoin_interval_get, $p0);
    assume {:branchcond $i82} true;
    goto $bb11, $bb42;

  $bb42:
    assume !($i82 == 1);
    $i81 := $eq.ref(team_mcast_rejoin_count_set, $p0);
    assume {:branchcond $i81} true;
    goto $bb10, $bb41;

  $bb41:
    assume !($i81 == 1);
    $i80 := $eq.ref(team_mcast_rejoin_count_get, $p0);
    assume {:branchcond $i80} true;
    goto $bb9, $bb40;

  $bb40:
    assume !($i80 == 1);
    $i79 := $eq.ref(team_notify_peers_interval_set, $p0);
    assume true;
    goto $bb8, $bb39;

  $bb39:
    assume !($i79 == 1);
    $i78 := $eq.ref(team_notify_peers_interval_get, $p0);
    assume {:branchcond $i78} true;
    goto $bb7, $bb38;

  $bb38:
    assume !($i78 == 1);
    $i77 := $eq.ref(team_notify_peers_count_set, $p0);
    assume {:branchcond $i77} true;
    goto $bb6, $bb37;

  $bb37:
    assume !($i77 == 1);
    $i76 := $eq.ref(team_notify_peers_count_get, $p0);
    assume {:branchcond $i76} true;
    goto $bb5, $bb36;

  $bb36:
    assume !($i76 == 1);
    $i75 := $eq.ref(team_mode_option_set, $p0);
    assume true;
    goto $bb4, $bb35;

  $bb35:
    assume !($i75 == 1);
    $i74 := $eq.ref(team_mode_option_get, $p0);
    assume true;
    goto $bb3, $bb34;

  $bb34:
    assume !($i74 == 1);
    $i73 := $eq.ref(team_modeop_port_enter, $p0);
    assume true;
    goto $bb2, $bb33;

  $bb33:
    assume !($i73 == 1);
    assume false;
    return;

  $bb2:
    assume $i73 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1885} $i2 := team_modeop_port_enter(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i74 == 1;
    $p3 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1886} $i4 := team_mode_option_get(arg, $p3);
    $r := $i4;
    return;

  $bb4:
    assume $i75 == 1;
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1887} $i6 := team_mode_option_set(arg, $p5);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    $r := $i6;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i76 == 1;
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1888} $i8 := team_notify_peers_count_get(arg, $p7);
    $r := $i8;
    return;

  $bb6:
    assume $i77 == 1;
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1889} $i10 := team_notify_peers_count_set(arg, $p9);
    $r := $i10;
    return;

  $bb7:
    assume $i78 == 1;
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1890} $i12 := team_notify_peers_interval_get(arg, $p11);
    $r := $i12;
    return;

  $bb8:
    assume $i79 == 1;
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1891} $i14 := team_notify_peers_interval_set(arg, $p13);
    $r := $i14;
    return;

  $bb9:
    assume $i80 == 1;
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1892} $i16 := team_mcast_rejoin_count_get(arg, $p15);
    $r := $i16;
    return;

  $bb10:
    assume $i81 == 1;
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1893} $i18 := team_mcast_rejoin_count_set(arg, $p17);
    $r := $i18;
    return;

  $bb11:
    assume $i82 == 1;
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1894} $i20 := team_mcast_rejoin_interval_get(arg, $p19);
    $r := $i20;
    return;

  $bb12:
    assume $i83 == 1;
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1895} $i22 := team_mcast_rejoin_interval_set(arg, $p21);
    $r := $i22;
    return;

  $bb13:
    assume $i84 == 1;
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1896} $i24 := team_port_en_option_get(arg, $p23);
    $r := $i24;
    return;

  $bb14:
    assume $i85 == 1;
    $p25 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1897} $i26 := team_port_en_option_set(arg, $p25);
    $r := $i26;
    return;

  $bb15:
    assume $i86 == 1;
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1898} $i28 := team_user_linkup_option_get(arg, $p27);
    $r := $i28;
    return;

  $bb16:
    assume $i87 == 1;
    $p29 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1899} $i30 := team_user_linkup_option_set(arg, $p29);
    $r := $i30;
    return;

  $bb17:
    assume $i88 == 1;
    $p31 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1900} $i32 := team_user_linkup_en_option_get(arg, $p31);
    $r := $i32;
    return;

  $bb18:
    assume $i89 == 1;
    $p33 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1901} $i34 := team_user_linkup_en_option_set(arg, $p33);
    $r := $i34;
    return;

  $bb19:
    assume $i90 == 1;
    $p35 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1902} $i36 := team_priority_option_get(arg, $p35);
    $r := $i36;
    return;

  $bb20:
    assume $i91 == 1;
    $p37 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1903} $i38 := team_priority_option_set(arg, $p37);
    $r := $i38;
    return;

  $bb21:
    assume $i92 == 1;
    $p39 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1904} $i40 := team_queue_id_option_get(arg, $p39);
    $r := $i40;
    return;

  $bb22:
    assume $i93 == 1;
    $p41 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1905} $i42 := team_queue_id_option_set(arg, $p41);
    $r := $i42;
    return;

  $bb23:
    assume $i94 == 1;
    $p43 := $bitcast.ref.ref(arg);
    $p44 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1906} $i45 := team_xmit($p43, $p44);
    $r := $i45;
    return;

  $bb24:
    assume $i95 == 1;
    $p46 := $bitcast.ref.ref(arg);
    $p47 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1907} $i48 := team_set_mac_address($p46, $p47);
    $r := $i48;
    return;

  $bb25:
    assume $i96 == 1;
    $p49 := $bitcast.ref.ref(arg);
    $p50 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1908} $i51 := team_netpoll_setup($p49, $p50);
    $r := $i51;
    return;

  $bb26:
    assume $i97 == 1;
    $p52 := $bitcast.ref.ref(arg);
    $p53 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1909} $i54 := team_add_slave($p52, $p53);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    $r := $i54;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i98 == 1;
    $p55 := $bitcast.ref.ref(arg);
    $p56 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1910} $i57 := team_del_slave($p55, $p56);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    $r := $i57;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i99 == 1;
    $p58 := $bitcast.ref.ref(arg);
    $p59 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1911} $i60 := team_validate($p58, $p59);
    $r := $i60;
    return;

  $bb29:
    assume $i100 == 1;
    $p61 := $bitcast.ref.ref(arg);
    $p62 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1912} $i63 := team_nl_cmd_noop($p61, $p62);
    $r := $i63;
    return;

  $bb30:
    assume $i101 == 1;
    $p64 := $bitcast.ref.ref(arg);
    $p65 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1913} $i66 := team_nl_cmd_options_set($p64, $p65);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    $r := $i66;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i102 == 1;
    $p67 := $bitcast.ref.ref(arg);
    $p68 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1914} $i69 := team_nl_cmd_options_get($p67, $p68);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    $r := $i69;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i103 == 1;
    $p70 := $bitcast.ref.ref(arg);
    $p71 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1915} $i72 := team_nl_cmd_port_list_get($p70, $p71);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    $r := $i72;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 616794);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(team_ethtool_get_drvinfo, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(team_modeop_port_change_dev_addr, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 1916} team_modeop_port_change_dev_addr(arg, arg1);
    return;

  $bb3:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1917} team_ethtool_get_drvinfo($p1, $p2);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 617826);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 618858);

procedure devirtbounce.6(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 619890);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.13, $M.15, $M.17, $M.10, $M.12, $M.14, $M.16, $M.24, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(team_destructor, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(team_setup, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(team_notify_peers_work, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(team_mcast_rejoin_work, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(team_netpoll_cleanup, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(team_poll_controller, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(team_set_rx_mode, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(team_uninit, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(team_mode_unregister, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(team_options_change_check, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(team_option_inst_set_change, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1918} team_option_inst_set_change($p1);
    return;

  $bb3:
    assume $i12 == 1;
    call {:si_unique_call 1919} team_options_change_check(arg);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1920} team_mode_unregister($p2);
    return;

  $bb5:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1921} team_uninit($p3);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i15 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1922} team_set_rx_mode($p4);
    return;

  $bb7:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1923} team_poll_controller($p5);
    return;

  $bb8:
    assume $i17 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1924} team_netpoll_cleanup($p6);
    return;

  $bb9:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1925} team_mcast_rejoin_work($p7);
    return;

  $bb10:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1926} team_notify_peers_work($p8);
    return;

  $bb11:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1927} team_setup($p9);
    return;

  $bb12:
    assume $i21 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1928} team_destructor($p10);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 620922);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.9, $M.11, $M.13, $M.15, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(ethtool_op_get_link, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(team_handle_frame, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(team_close, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(team_open, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(team_init, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(team_mode_register, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1929} $i2 := team_mode_register($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1930} $i4 := team_init($p3);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    $r := $i4;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1931} $i6 := team_open($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1932} $i8 := team_close($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1933} $i10 := team_handle_frame($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1934} $i12 := ethtool_op_get_link($p11);
    $r := $i12;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 621954);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 622986);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i1)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(team_dummy_transmit, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1935} $i1 := team_dummy_transmit(arg, arg1);
    $r := $i1;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 624018);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 625050);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(team_ethtool_get_drvinfo, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(team_modeop_port_change_dev_addr, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1936} team_modeop_port_change_dev_addr($p1, $p2);
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1937} team_ethtool_get_drvinfo($p3, $p4);
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 626082);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i102 := $eq.ref(team_nl_cmd_port_list_get, $p0);
    assume true;
    goto $bb32, $bb63;

  $bb63:
    assume !($i102 == 1);
    $i101 := $eq.ref(team_nl_cmd_options_get, $p0);
    assume true;
    goto $bb31, $bb62;

  $bb62:
    assume !($i101 == 1);
    $i100 := $eq.ref(team_nl_cmd_options_set, $p0);
    assume {:branchcond $i100} true;
    goto $bb30, $bb61;

  $bb61:
    assume !($i100 == 1);
    $i99 := $eq.ref(team_nl_cmd_noop, $p0);
    assume {:branchcond $i99} true;
    goto $bb29, $bb60;

  $bb60:
    assume !($i99 == 1);
    $i98 := $eq.ref(team_validate, $p0);
    assume {:branchcond $i98} true;
    goto $bb28, $bb59;

  $bb59:
    assume !($i98 == 1);
    $i97 := $eq.ref(team_del_slave, $p0);
    assume {:branchcond $i97} true;
    goto $bb27, $bb58;

  $bb58:
    assume !($i97 == 1);
    $i96 := $eq.ref(team_add_slave, $p0);
    assume {:branchcond $i96} true;
    goto $bb26, $bb57;

  $bb57:
    assume !($i96 == 1);
    $i95 := $eq.ref(team_netpoll_setup, $p0);
    assume {:branchcond $i95} true;
    goto $bb25, $bb56;

  $bb56:
    assume !($i95 == 1);
    $i94 := $eq.ref(team_set_mac_address, $p0);
    assume true;
    goto $bb24, $bb55;

  $bb55:
    assume !($i94 == 1);
    $i93 := $eq.ref(team_xmit, $p0);
    assume {:branchcond $i93} true;
    goto $bb23, $bb54;

  $bb54:
    assume !($i93 == 1);
    $i92 := $eq.ref(team_queue_id_option_set, $p0);
    assume {:branchcond $i92} true;
    goto $bb22, $bb53;

  $bb53:
    assume !($i92 == 1);
    $i91 := $eq.ref(team_queue_id_option_get, $p0);
    assume true;
    goto $bb21, $bb52;

  $bb52:
    assume !($i91 == 1);
    $i90 := $eq.ref(team_priority_option_set, $p0);
    assume {:branchcond $i90} true;
    goto $bb20, $bb51;

  $bb51:
    assume !($i90 == 1);
    $i89 := $eq.ref(team_priority_option_get, $p0);
    assume {:branchcond $i89} true;
    goto $bb19, $bb50;

  $bb50:
    assume !($i89 == 1);
    $i88 := $eq.ref(team_user_linkup_en_option_set, $p0);
    assume true;
    goto $bb18, $bb49;

  $bb49:
    assume !($i88 == 1);
    $i87 := $eq.ref(team_user_linkup_en_option_get, $p0);
    assume true;
    goto $bb17, $bb48;

  $bb48:
    assume !($i87 == 1);
    $i86 := $eq.ref(team_user_linkup_option_set, $p0);
    assume {:branchcond $i86} true;
    goto $bb16, $bb47;

  $bb47:
    assume !($i86 == 1);
    $i85 := $eq.ref(team_user_linkup_option_get, $p0);
    assume {:branchcond $i85} true;
    goto $bb15, $bb46;

  $bb46:
    assume !($i85 == 1);
    $i84 := $eq.ref(team_port_en_option_set, $p0);
    assume {:branchcond $i84} true;
    goto $bb14, $bb45;

  $bb45:
    assume !($i84 == 1);
    $i83 := $eq.ref(team_port_en_option_get, $p0);
    assume true;
    goto $bb13, $bb44;

  $bb44:
    assume !($i83 == 1);
    $i82 := $eq.ref(team_mcast_rejoin_interval_set, $p0);
    assume {:branchcond $i82} true;
    goto $bb12, $bb43;

  $bb43:
    assume !($i82 == 1);
    $i81 := $eq.ref(team_mcast_rejoin_interval_get, $p0);
    assume {:branchcond $i81} true;
    goto $bb11, $bb42;

  $bb42:
    assume !($i81 == 1);
    $i80 := $eq.ref(team_mcast_rejoin_count_set, $p0);
    assume {:branchcond $i80} true;
    goto $bb10, $bb41;

  $bb41:
    assume !($i80 == 1);
    $i79 := $eq.ref(team_mcast_rejoin_count_get, $p0);
    assume true;
    goto $bb9, $bb40;

  $bb40:
    assume !($i79 == 1);
    $i78 := $eq.ref(team_notify_peers_interval_set, $p0);
    assume {:branchcond $i78} true;
    goto $bb8, $bb39;

  $bb39:
    assume !($i78 == 1);
    $i77 := $eq.ref(team_notify_peers_interval_get, $p0);
    assume {:branchcond $i77} true;
    goto $bb7, $bb38;

  $bb38:
    assume !($i77 == 1);
    $i76 := $eq.ref(team_notify_peers_count_set, $p0);
    assume {:branchcond $i76} true;
    goto $bb6, $bb37;

  $bb37:
    assume !($i76 == 1);
    $i75 := $eq.ref(team_notify_peers_count_get, $p0);
    assume true;
    goto $bb5, $bb36;

  $bb36:
    assume !($i75 == 1);
    $i74 := $eq.ref(team_mode_option_set, $p0);
    assume true;
    goto $bb4, $bb35;

  $bb35:
    assume !($i74 == 1);
    $i73 := $eq.ref(team_mode_option_get, $p0);
    assume true;
    goto $bb3, $bb34;

  $bb34:
    assume !($i73 == 1);
    $i72 := $eq.ref(team_modeop_port_enter, $p0);
    assume {:branchcond $i72} true;
    goto $bb2, $bb33;

  $bb33:
    assume !($i72 == 1);
    assume false;
    return;

  $bb2:
    assume $i72 == 1;
    call {:si_unique_call 1938} $i1 := team_modeop_port_enter(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i73 == 1;
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1939} $i3 := team_mode_option_get(arg, $p2);
    $r := $i3;
    return;

  $bb4:
    assume $i74 == 1;
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1940} $i5 := team_mode_option_set(arg, $p4);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    $r := $i5;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i75 == 1;
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1941} $i7 := team_notify_peers_count_get(arg, $p6);
    $r := $i7;
    return;

  $bb6:
    assume $i76 == 1;
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1942} $i9 := team_notify_peers_count_set(arg, $p8);
    $r := $i9;
    return;

  $bb7:
    assume $i77 == 1;
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1943} $i11 := team_notify_peers_interval_get(arg, $p10);
    $r := $i11;
    return;

  $bb8:
    assume $i78 == 1;
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1944} $i13 := team_notify_peers_interval_set(arg, $p12);
    $r := $i13;
    return;

  $bb9:
    assume $i79 == 1;
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1945} $i15 := team_mcast_rejoin_count_get(arg, $p14);
    $r := $i15;
    return;

  $bb10:
    assume $i80 == 1;
    $p16 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1946} $i17 := team_mcast_rejoin_count_set(arg, $p16);
    $r := $i17;
    return;

  $bb11:
    assume $i81 == 1;
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1947} $i19 := team_mcast_rejoin_interval_get(arg, $p18);
    $r := $i19;
    return;

  $bb12:
    assume $i82 == 1;
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1948} $i21 := team_mcast_rejoin_interval_set(arg, $p20);
    $r := $i21;
    return;

  $bb13:
    assume $i83 == 1;
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1949} $i23 := team_port_en_option_get(arg, $p22);
    $r := $i23;
    return;

  $bb14:
    assume $i84 == 1;
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1950} $i25 := team_port_en_option_set(arg, $p24);
    $r := $i25;
    return;

  $bb15:
    assume $i85 == 1;
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1951} $i27 := team_user_linkup_option_get(arg, $p26);
    $r := $i27;
    return;

  $bb16:
    assume $i86 == 1;
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1952} $i29 := team_user_linkup_option_set(arg, $p28);
    $r := $i29;
    return;

  $bb17:
    assume $i87 == 1;
    $p30 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1953} $i31 := team_user_linkup_en_option_get(arg, $p30);
    $r := $i31;
    return;

  $bb18:
    assume $i88 == 1;
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1954} $i33 := team_user_linkup_en_option_set(arg, $p32);
    $r := $i33;
    return;

  $bb19:
    assume $i89 == 1;
    $p34 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1955} $i35 := team_priority_option_get(arg, $p34);
    $r := $i35;
    return;

  $bb20:
    assume $i90 == 1;
    $p36 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1956} $i37 := team_priority_option_set(arg, $p36);
    $r := $i37;
    return;

  $bb21:
    assume $i91 == 1;
    $p38 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1957} $i39 := team_queue_id_option_get(arg, $p38);
    $r := $i39;
    return;

  $bb22:
    assume $i92 == 1;
    $p40 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1958} $i41 := team_queue_id_option_set(arg, $p40);
    $r := $i41;
    return;

  $bb23:
    assume $i93 == 1;
    $p42 := $bitcast.ref.ref(arg);
    $p43 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1959} $i44 := team_xmit($p42, $p43);
    $r := $i44;
    return;

  $bb24:
    assume $i94 == 1;
    $p45 := $bitcast.ref.ref(arg);
    $p46 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1960} $i47 := team_set_mac_address($p45, $p46);
    $r := $i47;
    return;

  $bb25:
    assume $i95 == 1;
    $p48 := $bitcast.ref.ref(arg);
    $p49 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1961} $i50 := team_netpoll_setup($p48, $p49);
    $r := $i50;
    return;

  $bb26:
    assume $i96 == 1;
    $p51 := $bitcast.ref.ref(arg);
    $p52 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1962} $i53 := team_add_slave($p51, $p52);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    $r := $i53;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i97 == 1;
    $p54 := $bitcast.ref.ref(arg);
    $p55 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1963} $i56 := team_del_slave($p54, $p55);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    $r := $i56;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i98 == 1;
    $p57 := $bitcast.ref.ref(arg);
    $p58 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1964} $i59 := team_validate($p57, $p58);
    $r := $i59;
    return;

  $bb29:
    assume $i99 == 1;
    $p60 := $bitcast.ref.ref(arg);
    $p61 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1965} $i62 := team_nl_cmd_noop($p60, $p61);
    $r := $i62;
    return;

  $bb30:
    assume $i100 == 1;
    $p63 := $bitcast.ref.ref(arg);
    $p64 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1966} $i65 := team_nl_cmd_options_set($p63, $p64);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    $r := $i65;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i101 == 1;
    $p66 := $bitcast.ref.ref(arg);
    $p67 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1967} $i68 := team_nl_cmd_options_get($p66, $p67);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    $r := $i68;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i102 == 1;
    $p69 := $bitcast.ref.ref(arg);
    $p70 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1968} $i71 := team_nl_cmd_port_list_get($p69, $p70);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    $r := $i71;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 627114);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(team_dummy_receive, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1969} $i1 := team_dummy_receive(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 628146);

procedure devirtbounce.15(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: i64, arg1: ref, arg2: i32, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 629178);

procedure devirtbounce.16(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 630210);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(team_set_lockdep_class_one, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1970} team_set_lockdep_class_one(arg, arg1, arg2);
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 631242);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.51, $M.0, $M.52, $M.80, $M.2, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.47, $M.45, $M.46, $M.32, $M.29, $M.38, $M.31, $M.39, $M.9, $M.40, $M.34, $M.42, $M.30, $M.27, $M.14, $M.36, $M.13, $M.33, $M.28, $M.35, $M.11, $M.43, $M.44, $M.41, $M.37, $M.15, $M.16, $M.12, $M.10, $M.17, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1971} __SMACK_static_init();
    call {:si_unique_call 1972} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $M.37, $M.38, $M.9, $M.11, $M.13, $M.15, $M.39, $M.40, $M.41, $M.42, $M.28, $M.29, $M.30, $M.31, $M.43, $M.44, $M.45, $M.46, $M.47, $M.32, $M.33, $M.34, $M.35, $M.27, $M.51, $M.52, $M.80, $M.2, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.14, $M.36, $M.16, $M.12, $M.10, $M.17, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.23, $M.24;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation __team_options_register_loop_$bb43(in_$p5: ref, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i65: i32) returns (out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i65: i32)
{

  entry:
    out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i65 := in_$i66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$i65;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  $bb45:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := out_$i70;
    goto $bb45_dummy;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    out_$i71 := $sge.i32(out_$i70, 0);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$i70 := $sub.i32(out_$i65, 1);
    call {:si_unique_call 31} {:cexpr "i"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} kfree(out_$p69);
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_146;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(in_$p5, $mul.ref(out_$i66, 8));
    goto corral_source_split_145;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i65);
    goto corral_source_split_144;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i65 := __team_options_register_loop_$bb43(in_$p5, out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$i65);
    return;

  exit:
    return;
}



procedure __team_options_register_loop_$bb43(in_$p5: ref, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i65: i32) returns (out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i65: i32);



implementation __team_options_register_loop_$bb35(in_$p0: ref, in_$p5: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i55: i32) returns (out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i55: i32)
{

  entry:
    out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i55 := in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i55;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  $bb37:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i59;
    goto $bb37_dummy;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    out_$i60 := $sge.i32(out_$i59, 0);
    goto corral_source_split_133;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    out_$i59 := $sub.i32(out_$i55, 1);
    call {:si_unique_call 28} {:cexpr "i"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_132;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} __team_option_inst_del_option(in_$p0, out_$p58);
    goto corral_source_split_131;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_130;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(in_$p5, $mul.ref(out_$i56, 8));
    goto corral_source_split_129;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i55);
    goto corral_source_split_128;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i55 := __team_options_register_loop_$bb35(in_$p0, in_$p5, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i55);
    return;

  exit:
    return;
}



procedure __team_options_register_loop_$bb35(in_$p0: ref, in_$p5: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i1, in_$i55: i32) returns (out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i1, out_$i55: i32);



implementation __team_options_register_loop_$bb23(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i64, in_$i51: i1, in_$i36: i32) returns (out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i64, out_$i51: i1, out_$i36: i32)
{

  entry:
    out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36 := in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i36;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  $bb29:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i49;
    goto $bb29_dummy;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$i51 := $ult.i64(out_$i50, in_$i2);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_116;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i36, 1);
    call {:si_unique_call 25} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_115;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} list_add_tail(out_$p47, out_$p48);
    goto corral_source_split_114;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 976)), $mul.ref(328, 1));
    goto corral_source_split_113;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p46, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_111;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(in_$p5, $mul.ref(out_$i44, 8));
    goto corral_source_split_110;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i36);
    goto corral_source_split_109;

  $bb26:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := out_$i36, out_$i40;
    assume true;
    goto $bb26;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_102;

  SeqInstr_9:
    call {:si_unique_call 22} {:cexpr "err"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_101;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} out_$i40 := __team_option_inst_add_option(in_$p0, out_$p39);
    goto SeqInstr_8;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(in_$p5, $mul.ref(out_$i37, 8));
    goto corral_source_split_99;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36 := __team_options_register_loop_$bb23(in_$p0, in_$i2, in_$p5, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i36);
    return;

  exit:
    return;
}



procedure __team_options_register_loop_$bb23(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i32, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i64, in_$i51: i1, in_$i36: i32) returns (out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i32, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i64, out_$i51: i1, out_$i36: i32);
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_options_register_loop_$bb8(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$p20: ref, in_$p21: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p10: ref, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$p20: ref, out_$p21: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p10: ref, out_$i11: i32)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p10, out_$i11 := in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p20, in_$p21, in_$i23, in_$p24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p10, in_$i11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  $bb17:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$i11 := out_$p32, out_$i31;
    goto $bb17_dummy;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$i34 := $ult.i64(out_$i33, in_$i2);
    goto corral_source_split_88;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i31);
    goto corral_source_split_87;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p10, $mul.ref(1, 64));
    goto corral_source_split_86;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i11, 1);
    call {:si_unique_call 20} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_85;

  $bb15:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i11;
    assume true;
    goto $bb15;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_79;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(in_$p5, $mul.ref(out_$i25, 8));
    goto corral_source_split_78;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i11);
    goto corral_source_split_77;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p24, out_$p21);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(in_$p5, $mul.ref(out_$i23, 8));
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i11);
    goto corral_source_split_74;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} out_$p21 := kmemdup(out_$p20, 64, 208);
    goto corral_source_split_72;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_71;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i11;
    assume true;
    goto $bb11;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} out_$p14 := __team_find_option(in_$p0, out_$p13);
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_60;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p10, out_$i11 := __team_options_register_loop_$bb8(in_$p0, in_$i2, in_$p5, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p10, out_$i11);
    return;

  exit:
    return;
}



procedure __team_options_register_loop_$bb8(in_$p0: ref, in_$i2: i64, in_$p5: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$p20: ref, in_$p21: ref, in_$i23: i64, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i32, in_$i31: i32, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p10: ref, in_$i11: i32) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$p20: ref, out_$p21: ref, out_$i23: i64, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i32, out_$i31: i32, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p10: ref, out_$i11: i32);
  modifies $M.0;



implementation __team_options_change_check_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p14: ref, in_$i15: i8, in_$i16: i1, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p13: ref) returns (out_$p14: ref, out_$i15: i8, out_$i16: i1, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p13: ref)
{

  entry:
    out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p13 := in_$p14, in_$i15, in_$i16, in_$p17, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  $bb9:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p20;
    goto $bb9_dummy;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i11);
    goto corral_source_split_188;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_184;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_183;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} list_add_tail(out_$p17, in_$p1);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p13, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_180;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i8.i1(out_$i15);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.0, out_$p14);
    goto corral_source_split_176;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p13 := __team_options_change_check_loop_$bb4(in_$p1, in_$i11, out_$p14, out_$i15, out_$i16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p13);
    return;

  exit:
    return;
}



procedure __team_options_change_check_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p14: ref, in_$i15: i8, in_$i16: i1, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p13: ref) returns (out_$p14: ref, out_$i15: i8, out_$i16: i1, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p13: ref);



implementation team_nl_send_options_get_loop_$bb44(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p6: ref, in_$i78: i32, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i1) returns (out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i1)
{

  entry:
    out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88 := in_$i82, in_$i83, in_$i84, in_$p85, in_$p86, in_$i87, in_$i88;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$i82 := __send_and_alloc_skb(in_$p6, in_$p0, in_$i1, in_$p4);
    goto SeqInstr_26;

  $bb48:
    assume {:verifier.code 0} true;
    assume out_$i88 == 1;
    goto $bb48_dummy;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i64(out_$i87, 0);
    goto corral_source_split_330;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    out_$i87 := $p2i.ref.i64(out_$p86);
    goto corral_source_split_329;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} out_$p86 := nlmsg_put(out_$p85, in_$i1, in_$i2, 3, 0, in_$i78);
    goto corral_source_split_328;

  $bb47:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, in_$p6);
    goto corral_source_split_327;

  $bb46:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$i84 := out_$i82;
    assume true;
    goto $bb46;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_323;

  SeqInstr_27:
    call {:si_unique_call 66} {:cexpr "err"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_322;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88 := team_nl_send_options_get_loop_$bb44(in_$p0, in_$i1, in_$i2, in_$p4, in_$p6, in_$i78, out_$i82, out_$i83, out_$i84, out_$p85, out_$p86, out_$i87, out_$i88);
    return;

  exit:
    return;
}



procedure team_nl_send_options_get_loop_$bb44(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p6: ref, in_$i78: i32, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i1) returns (out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i1);
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_send_options_get_loop_$bb23(in_$p0: ref, in_$p6: ref, in_$i41: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i62: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i44: i32, in_$p45: ref, in_$p71: ref) returns (out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i62: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i44: i32, out_$p45: ref, out_$p71: ref)
{

  entry:
    out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71 := in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i62, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i44, in_$p45, in_$p71;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_276;

  $bb36:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i44, out_$p45 := out_$i62, out_$p67;
    goto $bb36_dummy;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p67;
    assume true;
    goto $bb36;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, in_$i41);
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 64)), $mul.ref(16, 1));
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 64));
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_304;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i44, 1);
    call {:si_unique_call 63} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_303;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50, out_$i51 := out_$p45, out_$i44, out_$i47;
    assume true;
    goto $bb26;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_280;

  SeqInstr_24:
    call {:si_unique_call 58} {:cexpr "err"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_279;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_$i47 := team_nl_fill_one_option_get(out_$p46, in_$p0, out_$p45);
    goto SeqInstr_23;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, in_$p6);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71 := team_nl_send_options_get_loop_$bb23(in_$p0, in_$p6, in_$i41, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71);
    return;

  exit:
    return;
}



procedure team_nl_send_options_get_loop_$bb23(in_$p0: ref, in_$p6: ref, in_$i41: i64, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i62: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i44: i32, in_$p45: ref, in_$p71: ref) returns (out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i62: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i44: i32, out_$p45: ref, out_$p71: ref);
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_send_options_get_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$p14: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$i42: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$p53: ref, in_$i54: i32, in_$i62: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i44: i32, in_$p45: ref, in_$p71: ref, in_$p43: ref, in_$p60: ref, in_$i61: i8, in_$p72: ref, in_$p74: ref, in_$i75: i1, in_$p76: ref, in_vslice_dummy_var_30: i32) returns (out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$p14: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$i42: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$p53: ref, out_$i54: i32, out_$i62: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i44: i32, out_$p45: ref, out_$p71: ref, out_$p43: ref, out_$p60: ref, out_$i61: i8, out_$p72: ref, out_$p74: ref, out_$i75: i1, out_$p76: ref, out_vslice_dummy_var_30: i32)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$i18, out_$p14, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i55, out_$p56, out_$i57, out_$p53, out_$i54, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71, out_$p43, out_$p60, out_$i61, out_$p72, out_$p74, out_$i75, out_$p76, out_vslice_dummy_var_30 := in_$p15, in_$i16, in_$i17, in_$i18, in_$p14, in_$p20, in_$i21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i55, in_$p56, in_$i57, in_$p53, in_$i54, in_$i62, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$i44, in_$p45, in_$p71, in_$p43, in_$p60, in_$i61, in_$p72, in_$p74, in_$i75, in_$p76, in_vslice_dummy_var_30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$p14 := out_$p15;
    goto $bb7_dummy;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i16;
    assume true;
    goto $bb7;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_236;

  SeqInstr_21:
    call {:si_unique_call 52} {:cexpr "err"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_235;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} out_$i16 := __send_and_alloc_skb(in_$p6, in_$p0, in_$i1, in_$p4);
    goto SeqInstr_20;

  $bb5:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_234;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    out_$p15, out_$p76 := out_$p60, out_$p22;
    assume true;
    goto $bb5;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$i75 := $trunc.i8.i1(out_$i61);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} genlmsg_end(out_$p74, out_$p22);
    goto corral_source_split_300;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, in_$p6);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} out_vslice_dummy_var_30 := nla_nest_end(out_$p72, out_$p35);
    goto corral_source_split_298;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, in_$p6);
    goto corral_source_split_297;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p60, out_$i61 := out_$p43, 0;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p60, out_$i61 := out_$p49, 1;
    goto $bb33;

  $bb30:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$p56, out_$i57 := out_$p22, out_$i51;
    assume true;
    goto $bb30;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i50, 0);
    goto corral_source_split_286;

  $bb27:
    assume out_$i52 == 1;
    goto corral_source_split_285;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    out_$p53, out_$i54 := out_$p22, out_$i51;
    assume true;
    goto $bb27;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, $sub.i32(0, 90));
    goto corral_source_split_283;

  $bb25:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50, out_$i51 := out_$p45, out_$i44, out_$i47;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_280;

  SeqInstr_24:
    call {:si_unique_call 58} {:cexpr "err"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_279;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_$i47 := team_nl_fill_one_option_get(out_$p46, in_$p0, out_$p45);
    goto SeqInstr_23;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, in_$p6);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    call out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71 := team_nl_send_options_get_loop_$bb23(in_$p0, in_$p6, out_$i41, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$i44, out_$p45 := 0, out_$p14;
    goto $bb23;

  $bb36:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i44, out_$p45 := out_$i62, out_$p67;
    assume false;
    return;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p71 := out_$p67;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, out_$i41);
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_309;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 64)), $mul.ref(16, 1));
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p66, $mul.ref($sub.ref(0, 16), 64));
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(out_$p45, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_304;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i44, 1);
    call {:si_unique_call 63} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_303;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb20:
    assume out_$i42 == 1;
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p14;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i64(out_$i40, out_$i41);
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_271;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_270;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p14, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_269;

  $bb18:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p22;
    assume true;
    goto $bb18;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i36, 0);
    goto corral_source_split_265;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_264;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} out_$p35 := nla_nest_start(out_$p34, 2);
    goto corral_source_split_263;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, in_$p6);
    goto corral_source_split_262;

  $bb14:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p22;
    assume true;
    goto $bb14;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_256;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} out_$i30 := nla_put_u32(out_$p25, 1, out_$i29);
    call {:si_unique_call 55} {:cexpr "tmp"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_254;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_253;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_252;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_251;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, in_$p6);
    goto corral_source_split_250;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, 0);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} out_$p22 := genlmsg_put(out_$p20, in_$i1, in_$i2, team_nl_family, out_$i21, 2);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$i21 := $or.i32(in_$i3, 2);
    goto corral_source_split_243;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, in_$p6);
    goto corral_source_split_242;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb22;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p71;
    goto $bb22;

  $bb37:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_312;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$i18, out_$p14, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i55, out_$p56, out_$i57, out_$p53, out_$i54, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71, out_$p43, out_$p60, out_$i61, out_$p72, out_$p74, out_$i75, out_$p76, out_vslice_dummy_var_30 := team_nl_send_options_get_loop_$bb4(in_$p0, in_$i1, in_$i2, in_$i3, in_$p4, in_$p5, in_$p6, out_$p15, out_$i16, out_$i17, out_$i18, out_$p14, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i55, out_$p56, out_$i57, out_$p53, out_$i54, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$i44, out_$p45, out_$p71, out_$p43, out_$p60, out_$i61, out_$p72, out_$p74, out_$i75, out_$p76, out_vslice_dummy_var_30);
    return;

  exit:
    return;
}



procedure team_nl_send_options_get_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$p14: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i64, in_$i42: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$p53: ref, in_$i54: i32, in_$i62: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$i44: i32, in_$p45: ref, in_$p71: ref, in_$p43: ref, in_$p60: ref, in_$i61: i8, in_$p72: ref, in_$p74: ref, in_$i75: i1, in_$p76: ref, in_vslice_dummy_var_30: i32) returns (out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$p14: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i64, out_$i42: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$p53: ref, out_$i54: i32, out_$i62: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$i44: i32, out_$p45: ref, out_$p71: ref, out_$p43: ref, out_$p60: ref, out_$i61: i8, out_$p72: ref, out_$p74: ref, out_$i75: i1, out_$p76: ref, out_vslice_dummy_var_30: i32);
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_fill_one_option_get_loop_$bb73()
{

  entry:
    goto $bb73, exit;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb73_dummy;

  $bb73_dummy:
    call {:si_unique_call 1} team_nl_fill_one_option_get_loop_$bb73();
    return;

  exit:
    return;
}



procedure team_nl_fill_one_option_get_loop_$bb73();



implementation __team_find_option_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := in_$p12, in_$p13, in_$i14, in_$i15, in_$p16, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p20;
    goto $bb10_dummy;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i9);
    goto corral_source_split_856;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_855;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_854;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_853;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_852;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_851;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_845;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} out_$i14 := strcmp(out_$p13, in_$p1);
    call {:si_unique_call 243} {:cexpr "tmp"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_844;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_843;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := __team_find_option_loop_$bb4(in_$p1, in_$i9, out_$p12, out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11);
    return;

  exit:
    return;
}



procedure __team_find_option_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref);



implementation __team_option_inst_del_option_loop_$bb4(in_$p1: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p15, out_$p16 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$p26, in_$i27, in_$i28, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  $bb9:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p24, out_$p15;
    goto $bb9_dummy;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i13);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_910;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_908;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_907;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} __team_option_inst_del(out_$p16);
    goto corral_source_split_905;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i19, out_$i20);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_899;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p15, out_$p16 := __team_option_inst_del_option_loop_$bb4(in_$p1, in_$i13, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p26, out_$i27, out_$i28, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure __team_option_inst_del_option_loop_$bb4(in_$p1: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p15: ref, out_$p16: ref);



implementation __team_option_inst_add_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p14: ref, out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p14, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p14, in_$p16, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i8;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_936;

  $bb19:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i33;
    goto $bb19_dummy;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$i34 := $ult.i32(out_$i33, in_$i6);
    goto corral_source_split_974;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i8, 1);
    call {:si_unique_call 260} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_973;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb16;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_969;

  SeqInstr_45:
    call {:si_unique_call 259} {:cexpr "err"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_968;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(40, 1));
    call {:si_unique_call 258} out_$i30 := devirtbounce.3(out_$p28, in_$p0, out_$p29);
    goto SeqInstr_44;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_966;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, 0);
    goto corral_source_split_963;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} list_add_tail(out_$p21, out_$p22);
    goto corral_source_split_959;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_958;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p20, 0);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p19, 1);
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_953;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p18, out_$i8);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_951;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p16, in_$p2);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_949;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, in_$p1);
    goto corral_source_split_948;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_947;

  $bb10:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i64(out_$i11, 0);
    goto corral_source_split_941;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_940;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_939;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} out_$p9 := kmalloc(64, 208);
    goto corral_source_split_938;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p14, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i8 := __team_option_inst_add_loop_$bb7(in_$p0, in_$p1, in_$p2, in_$i6, out_$p9, out_$p10, out_$i11, out_$i12, out_$p14, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i8);
    return;

  exit:
    return;
}



procedure __team_option_inst_add_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i6: i32, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p14: ref, out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i8: i32);
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_options_unregister_loop_$bb4(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i4: i32, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i4: i32, out_$p5: ref)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i4, out_$p5 := in_$p6, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i4, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1004;

  $bb9:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i4, out_$p5 := out_$i13, out_$p14;
    goto $bb9_dummy;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i64(out_$i15, in_$i2);
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i13);
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p5, $mul.ref(1, 64));
    goto corral_source_split_1020;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 279} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1019;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} kfree(out_$p12);
    goto corral_source_split_1017;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} list_del(out_$p11);
    goto corral_source_split_1015;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} __team_option_inst_del_option(in_$p0, out_$p8);
    goto corral_source_split_1013;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_1012;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} out_$p8 := __team_find_option(in_$p0, out_$p7);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_1007;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_1006;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i4, out_$p5 := __team_options_unregister_loop_$bb4(in_$p0, in_$i2, out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i4, out_$p5);
    return;

  exit:
    return;
}



procedure __team_options_unregister_loop_$bb4(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i4: i32, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i4: i32, out_$p5: ref);



implementation is_good_mode_name_loop_$bb4(in_$i5: i8, in_$i6: i32, in_$i7: i64, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i8, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p4: ref) returns (out_$i5: i8, out_$i6: i32, out_$i7: i64, out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i8, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p4: ref)
{

  entry:
    out_$i5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p4 := in_$i5, in_$i6, in_$i7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1087;

  $bb15:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p25;
    goto $bb15_dummy;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_1120;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i8.i32(out_$i26);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_1118;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p4, $mul.ref(1, 1));
    goto corral_source_split_1117;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 95);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i8.i32(out_$i21);
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i8($M.0, out_$p4);
    goto corral_source_split_1109;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_1108;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 0);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$i19 := $and.i32(out_$i18, 4);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i8.i32(out_$i17);
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i8($M.0, out_$p16);
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i15, 1));
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p4);
    goto corral_source_split_1099;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$i11 := $and.i32(out_$i10, 3);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i8.i32(out_$i9);
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.0, out_$p8);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i7, 1));
    goto corral_source_split_1092;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i6 := $zext.i8.i32(out_$i5);
    goto corral_source_split_1090;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $load.i8($M.0, out_$p4);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p4 := is_good_mode_name_loop_$bb4(out_$i5, out_$i6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$p4);
    return;

  exit:
    return;
}



procedure is_good_mode_name_loop_$bb4(in_$i5: i8, in_$i6: i32, in_$i7: i64, in_$p8: ref, in_$i9: i8, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i8, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i8, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$p4: ref) returns (out_$i5: i8, out_$i6: i32, out_$i7: i64, out_$p8: ref, out_$i9: i8, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i8, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i8, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$p4: ref);



implementation __find_mode_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p6: ref)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p6 := in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1138;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p17;
    goto $bb10_dummy;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, $p2i.ref.i64(mode_list));
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1152;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1151;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$p13 := out_$p6;
    assume true;
    goto $bb7;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} out_$i11 := strcmp(out_$p10, in_$p0);
    call {:si_unique_call 291} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_1141;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p6 := __find_mode_loop_$bb4(in_$p0, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p6);
    return;

  exit:
    return;
}



procedure __find_mode_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$p13: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p6: ref) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$p13: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p6: ref);



implementation __team_queue_override_port_add_loop_$bb8(in_$p1: ref, in_$i17: i64, in_$i22: i1, in_$i23: i8, in_$i24: i1, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p20: ref, in_$p21: ref, in_$p36: ref) returns (out_$i22: i1, out_$i23: i8, out_$i24: i1, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p20: ref, out_$p21: ref, out_$p36: ref)
{

  entry:
    out_$i22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p21, out_$p36 := in_$i22, in_$i23, in_$i24, in_$p25, in_$p27, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p20, in_$p21, in_$p36;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  $bb14:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$p21 := out_$p27, out_$p32;
    goto $bb14_dummy;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p27;
    assume true;
    goto $bb14;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, in_$i17);
    goto corral_source_split_1501;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p31, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_1499;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p31, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_1498;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_1497;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 160)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_1495;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p21, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_1494;

  $bb11:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p20;
    assume true;
    goto $bb11;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i8.i1(out_$i23);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i1.i8(out_$i22);
    call {:si_unique_call 322} {:cexpr "tmp"} boogie_si_record_i8(out_$i23);
    goto corral_source_split_1485;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} out_$i22 := team_queue_override_port_has_gt_prio_than(in_$p1, out_$p21);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p21, out_$p36 := __team_queue_override_port_add_loop_$bb8(in_$p1, in_$i17, out_$i22, out_$i23, out_$i24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p20, out_$p21, out_$p36);
    return;

  exit:
    return;
}



procedure __team_queue_override_port_add_loop_$bb8(in_$p1: ref, in_$i17: i64, in_$i22: i1, in_$i23: i8, in_$i24: i1, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p20: ref, in_$p21: ref, in_$p36: ref) returns (out_$i22: i1, out_$i23: i8, out_$i24: i1, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p20: ref, out_$p21: ref, out_$p36: ref);



implementation __team_queue_override_enabled_check_loop_$bb4(in_$i10: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p12 := in_$p13, in_$i14, in_$i15, in_$i16, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i10);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p21, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p21, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_1537;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1536;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_1523;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_1522;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_1521;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(124, 1));
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p12 := __team_queue_override_enabled_check_loop_$bb4(in_$i10, out_$p13, out_$i14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p12);
    return;

  exit:
    return;
}



procedure __team_queue_override_enabled_check_loop_$bb4(in_$i10: i64, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p12: ref);



implementation __team_carrier_check_loop_$bb8(in_$i12: i64, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p14 := in_$p15, in_$i16, in_$i17, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1698;

  $bb14:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p23;
    goto $bb14_dummy;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i12);
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p22, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p22, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_1712;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_1711;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1710;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1709;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$i17 := $trunc.i8.i1(out_$i16);
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i8($M.0, out_$p15);
    goto corral_source_split_1701;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 160)), $mul.ref(52, 1));
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p14 := __team_carrier_check_loop_$bb8(in_$i12, out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p14);
    return;

  exit:
    return;
}



procedure __team_carrier_check_loop_$bb8(in_$i12: i64, in_$p15: ref, in_$i16: i8, in_$i17: i1, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p14: ref) returns (out_$p15: ref, out_$i16: i8, out_$i17: i1, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p14: ref);



implementation __reconstruct_port_hlist_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6 := in_$p7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$i14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1818;

  $bb6:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i17;
    goto $bb6_dummy;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i17);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p3);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i6, 1);
    call {:si_unique_call 364} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} hlist_add_head_rcu(out_$p16, out_$p15);
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} out_$p15 := team_port_index_hash(in_$p0, out_$i14);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p12, out_$i11);
    goto corral_source_split_1827;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i11 := $sub.i32(out_$i10, 1);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} hlist_del_rcu(out_$p8);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_1821;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} out_$p7 := team_get_port_by_index(in_$p0, out_$i6);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6 := __reconstruct_port_hlist_loop_$bb4(in_$p0, in_$p3, out_$p7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6);
    return;

  exit:
    return;
}



procedure __reconstruct_port_hlist_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i6: i32);
  modifies $M.0;



implementation team_get_port_by_index_loop_$bb7(in_$i1: i32, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12 := in_$p13, in_$i14, in_$i15, in_$p16, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p12;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2094;

  $bb16:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p25;
    goto $bb16_dummy;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_2114;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  $bb14:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p25 := $0.ref;
    goto $bb15;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    out_$p25 := out_$p24;
    goto $bb15;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p23, $mul.ref($sub.ref(0, 8), 160));
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_2110;

  $bb13:
    assume out_$i22 == 1;
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_2105;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2104;

  $bb10:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p12;
    assume true;
    goto $bb10;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, in_$i1);
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_2097;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(48, 1));
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12 := team_get_port_by_index_loop_$bb7(in_$i1, out_$p13, out_$i14, out_$i15, out_$p16, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12);
    return;

  exit:
    return;
}



procedure team_get_port_by_index_loop_$bb7(in_$i1: i32, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p12: ref) returns (out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p12: ref);



implementation team_init_loop_$bb6(in_$p7: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i14: i32) returns (out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i14: i32)
{

  entry:
    out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i14 := in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i14;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2402;

  $bb8:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i23;
    goto $bb8_dummy;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i23, out_$i24);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} out_$i23 := cpumask_next(out_$i14, out_$p22);
    call {:si_unique_call 478} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_2412;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} u64_stats_init(out_$p21);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p20 := $i2p.i64.ref(out_$i19);
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i18, out_$i15);
    goto corral_source_split_2408;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.0, out_$p17);
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i16, 8));
    goto corral_source_split_2406;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2405;

  $bb7:
    call {:si_unique_call 474} out_$i15 := devirtbounce.9(0, in_$p7);
    call {:si_unique_call 475} {:cexpr "__ptr"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_2404;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i14 := team_init_loop_$bb6(in_$p7, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i14);
    return;

  exit:
    return;
}



procedure team_init_loop_$bb6(in_$p7: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i14: i32) returns (out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i14: i32);



implementation team_uninit_loop_$bb4(in_$p2: ref, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p19: ref, in_$p20: ref, in_vslice_dummy_var_36: i32) returns (out_$p21: ref, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p19: ref, out_$p20: ref, out_vslice_dummy_var_36: i32)
{

  entry:
    out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p19, out_$p20, out_vslice_dummy_var_36 := in_$p21, in_$p22, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p19, in_$p20, in_vslice_dummy_var_36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2577;

  $bb6:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$p20 := out_$p28, out_$p19;
    goto $bb6_dummy;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, in_$i17);
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p19, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p27, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.18, out_$p25);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p19, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2582;

  SeqInstr_84:
    goto corral_source_split_2581;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} out_vslice_dummy_var_36 := team_port_del(in_$p2, out_$p22);
    goto SeqInstr_83;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.19, out_$p21);
    goto corral_source_split_2580;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2579;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p19, out_$p20, out_vslice_dummy_var_36 := team_uninit_loop_$bb4(in_$p2, in_$i17, out_$p21, out_$p22, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p19, out_$p20, out_vslice_dummy_var_36);
    return;

  exit:
    return;
}



procedure team_uninit_loop_$bb4(in_$p2: ref, in_$i17: i64, in_$p21: ref, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p19: ref, in_$p20: ref, in_vslice_dummy_var_36: i32) returns (out_$p21: ref, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p19: ref, out_$p20: ref, out_vslice_dummy_var_36: i32);
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.24, $M.17, assertsPassed;



implementation team_select_queue_loop_$bb6(in_$p0: ref, in_$i23: i16, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i16) returns (out_$i23: i16, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i16)
{

  entry:
    out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35 := in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  $bb7:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i30;
    goto $bb7_dummy;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i30;
    assume true;
    goto $bb7;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    out_$i34 := $uge.i32(out_$i31, out_$i33);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i16.i32(out_$i30);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    call {:si_unique_call 536} {:cexpr "txq"} boogie_si_record_i16(out_$i30);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i24, out_$i28);
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i27);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i16(out_$i26);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(1028, 1));
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i23);
    goto corral_source_split_2751;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35 := team_select_queue_loop_$bb6(in_$p0, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35);
    return;

  exit:
    return;
}



procedure team_select_queue_loop_$bb6(in_$p0: ref, in_$i23: i16, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i16) returns (out_$i23: i16, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i16);



implementation team_change_rx_flags_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p5: ref, in_$i22: i64, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p24: ref, in_vslice_dummy_var_38: i32, in_vslice_dummy_var_39: i32) returns (out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p24: ref, out_vslice_dummy_var_38: i32, out_vslice_dummy_var_39: i32)
{

  entry:
    out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p24, out_vslice_dummy_var_38, out_vslice_dummy_var_39 := in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p24, in_vslice_dummy_var_38, in_vslice_dummy_var_39;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;

  $bb12:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p24 := out_$p55;
    goto $bb12_dummy;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, in_$i22);
    goto corral_source_split_2831;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p54, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2829;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref(out_$p54, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_$i53 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 553} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __read_once_size(out_$p48, out_$p50, 8);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p4, out_$p47);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_2818;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p24, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2817;

  $bb10:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} out_vslice_dummy_var_39 := dev_set_allmulti(out_$p43, out_$i41);
    goto corral_source_split_2815;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p24, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i41 := (if out_$i40 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 549} {:cexpr "inc"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i32(out_$i38, 512);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2808;

  $bb9:
    assume out_$i36 == 1;
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_2805;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(in_$i1, 512);
    goto corral_source_split_2804;

  $bb7:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} out_vslice_dummy_var_38 := dev_set_promiscuity(out_$p33, out_$i31);
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p24, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i31 := (if out_$i30 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 547} {:cexpr "inc"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, 256);
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_2795;

  $bb6:
    assume out_$i26 == 1;
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_2792;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(in_$i1, 256);
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p24, out_vslice_dummy_var_38, out_vslice_dummy_var_39 := team_change_rx_flags_loop_$bb4(in_$p0, in_$i1, in_$p4, in_$p5, in_$i22, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p24, out_vslice_dummy_var_38, out_vslice_dummy_var_39);
    return;

  exit:
    return;
}



procedure team_change_rx_flags_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p5: ref, in_$i22: i64, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p24: ref, in_vslice_dummy_var_38: i32, in_vslice_dummy_var_39: i32) returns (out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p24: ref, out_vslice_dummy_var_38: i32, out_vslice_dummy_var_39: i32);
  modifies $M.0;



implementation team_set_rx_mode_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i21: i64, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p23: ref, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32) returns (out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p23: ref, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32)
{

  entry:
    out_$p24, out_$p25, out_$p27, out_$p28, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p23, out_vslice_dummy_var_40, out_vslice_dummy_var_41 := in_$p24, in_$p25, in_$p27, in_$p28, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p23, in_vslice_dummy_var_40, in_vslice_dummy_var_41;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2861;

  $bb6:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p40;
    goto $bb6_dummy;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, in_$i21);
    goto corral_source_split_2883;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p39, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2881;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p39, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_2879;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} out_$i38 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 568} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2878;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_2877;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2876;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __read_once_size(out_$p33, out_$p35, 8);
    goto corral_source_split_2875;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_2874;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2873;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_2872;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p3, out_$p32);
    goto corral_source_split_2871;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_2870;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2869;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} out_vslice_dummy_var_41 := dev_mc_sync_multiple(out_$p28, in_$p0);
    goto corral_source_split_2868;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_2867;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p23, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2866;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} out_vslice_dummy_var_40 := dev_uc_sync_multiple(out_$p25, in_$p0);
    goto corral_source_split_2865;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2864;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2863;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$p27, out_$p28, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p23, out_vslice_dummy_var_40, out_vslice_dummy_var_41 := team_set_rx_mode_loop_$bb4(in_$p0, in_$p3, in_$p4, in_$i21, out_$p24, out_$p25, out_$p27, out_$p28, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p23, out_vslice_dummy_var_40, out_vslice_dummy_var_41);
    return;

  exit:
    return;
}



procedure team_set_rx_mode_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i21: i64, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p23: ref, in_vslice_dummy_var_40: i32, in_vslice_dummy_var_41: i32) returns (out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p28: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p23: ref, out_vslice_dummy_var_40: i32, out_vslice_dummy_var_41: i32);
  modifies $M.0;



implementation team_set_mac_address_loop_$bb14(in_$p4: ref, in_$i33: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p35: ref) returns (out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p35: ref)
{

  entry:
    out_$p37, out_$p38, out_$i39, out_$i40, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p35 := in_$p37, in_$p38, in_$i39, in_$i40, in_$p42, in_$p43, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p35;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2936;

  $bb19:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$p35 := out_$p48;
    goto $bb19_dummy;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, in_$i33);
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_2952;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p47, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_2951;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p47, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_2950;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_2949;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_2948;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p35, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  $bb17:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    call {:si_unique_call 575} devirtbounce.4(out_$p43, in_$p4, out_$p35);
    goto corral_source_split_2945;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(48, 1));
    goto corral_source_split_2944;

  $bb16:
    assume out_$i40 == 1;
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2939;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 976)), $mul.ref(368, 1)), $mul.ref(48, 1));
    goto corral_source_split_2938;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$i39, out_$i40, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p35 := team_set_mac_address_loop_$bb14(in_$p4, in_$i33, out_$p37, out_$p38, out_$i39, out_$i40, out_$p42, out_$p43, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p35);
    return;

  exit:
    return;
}



procedure team_set_mac_address_loop_$bb14(in_$p4: ref, in_$i33: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p42: ref, in_$p43: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p35: ref) returns (out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p42: ref, out_$p43: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p35: ref);
  modifies $M.0, $CurrAddr;



implementation team_change_mtu_loop_$bb17(in_$p0: ref, in_$i47: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p49: ref, in_vslice_dummy_var_42: i32) returns (out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p49: ref, out_vslice_dummy_var_42: i32)
{

  entry:
    out_$p50, out_$p51, out_$p52, out_$i53, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p49, out_vslice_dummy_var_42 := in_$p50, in_$p51, in_$p52, in_$i53, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p49, in_vslice_dummy_var_42;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3024;

  $bb19:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$p49 := out_$p59;
    goto $bb19_dummy;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, in_$i47);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p58, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3035;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p58, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_3033;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p49, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} out_vslice_dummy_var_42 := dev_set_mtu(out_$p51, out_$i53);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_3029;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_3027;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3026;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p50, out_$p51, out_$p52, out_$i53, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p49, out_vslice_dummy_var_42 := team_change_mtu_loop_$bb17(in_$p0, in_$i47, out_$p50, out_$p51, out_$p52, out_$i53, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p49, out_vslice_dummy_var_42);
    return;

  exit:
    return;
}



procedure team_change_mtu_loop_$bb17(in_$p0: ref, in_$i47: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p49: ref, in_vslice_dummy_var_42: i32) returns (out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p49: ref, out_vslice_dummy_var_42: i32);



implementation team_change_mtu_loop_$bb4(in_$i1: i32, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16 := in_$p17, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  $bb10:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p31;
    goto $bb10_dummy;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i14);
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p30, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3007;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_3005;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3004;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3003;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$p21, out_$i22 := out_$p16, out_$i19;
    assume true;
    goto $bb7;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} out_$i19 := dev_set_mtu(out_$p18, in_$i1);
    call {:si_unique_call 581} {:cexpr "err"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_2982;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16 := team_change_mtu_loop_$bb4(in_$i1, in_$i14, out_$p17, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16);
    return;

  exit:
    return;
}



procedure team_change_mtu_loop_$bb4(in_$i1: i32, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p16: ref);



implementation team_get_stats64_loop_$bb6(in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64) returns (out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64)
{

  entry:
    out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := in_$p21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3066;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    goto $bb7_dummy;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := out_$i24, out_$i26, out_$i28, out_$i30, out_$i32;
    assume true;
    goto $bb7;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i8(out_$i34);
    call {:si_unique_call 599} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} out_$i34 := u64_stats_fetch_retry_irq(out_$p33, out_$i22);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 597} {:cexpr "tx_bytes"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    call {:si_unique_call 596} {:cexpr "tx_packets"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    call {:si_unique_call 595} {:cexpr "rx_multicast"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    call {:si_unique_call 594} {:cexpr "rx_bytes"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3070;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    call {:si_unique_call 593} {:cexpr "rx_packets"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p20, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} out_$i22 := u64_stats_fetch_begin_irq(out_$p21);
    call {:si_unique_call 592} {:cexpr "start"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3067;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := team_get_stats64_loop_$bb6(in_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41);
    return;

  exit:
    return;
}



procedure team_get_stats64_loop_$bb6(in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64) returns (out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64);



implementation team_get_stats64_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i72: i32, in_$i73: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i72: i32, out_$i73: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i10, out_$i11, out_$i12, out_$i72, out_$i73 := in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$p29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i10, in_$i11, in_$i12, in_$i72, in_$i73;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  $bb10:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11, out_$i12 := out_$i69, out_$i67, out_$i64;
    goto $bb10_dummy;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$i72, out_$i73 := out_$i64, out_$i67;
    assume true;
    goto $bb10;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i69, out_$i70);
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} out_$i69 := cpumask_next(out_$i10, out_$p68);
    call {:si_unique_call 603} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, cpu_possible_mask);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, out_$i11);
    call {:si_unique_call 601} {:cexpr "tx_dropped"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    goto corral_source_split_3112;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i63, out_$i12);
    call {:si_unique_call 600} {:cexpr "rx_dropped"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3110;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p61, out_$i60);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$i60 := $add.i64(out_$i59, out_$i41);
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.0, out_$p58);
    goto corral_source_split_3104;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p57, out_$i56);
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i64(out_$i55, out_$i40);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i64($M.0, out_$p54);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p53, out_$i52);
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i51, out_$i39);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, out_$p50);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p49, out_$i48);
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i64(out_$i47, out_$i38);
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i64($M.0, out_$p46);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p45, out_$i44);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i64(out_$i43, out_$i37);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_3084;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_3083;

  $bb8:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := out_$i24, out_$i26, out_$i28, out_$i30, out_$i32;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i8(out_$i34);
    call {:si_unique_call 599} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} out_$i34 := u64_stats_fetch_retry_irq(out_$p33, out_$i22);
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    call {:si_unique_call 597} {:cexpr "tx_bytes"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    call {:si_unique_call 596} {:cexpr "tx_packets"} boogie_si_record_i64(out_$i30);
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    call {:si_unique_call 595} {:cexpr "rx_multicast"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    call {:si_unique_call 594} {:cexpr "rx_bytes"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3070;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    call {:si_unique_call 593} {:cexpr "rx_packets"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3068;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} out_$i22 := u64_stats_fetch_begin_irq(out_$p21);
    call {:si_unique_call 592} {:cexpr "start"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_3067;

  $bb6:
    call out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41 := team_get_stats64_loop_$bb6(out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41);
    goto $bb6_last;

  $bb6_last:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3066;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i36 == 1;
    assume false;
    return;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$p20 := $i2p.i64.ref(out_$i19);
    goto corral_source_split_3064;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i18, out_$i15);
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.0, out_$p17);
    goto corral_source_split_3062;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(__per_cpu_offset, $mul.ref(0, 65536)), $mul.ref(out_$i16, 8));
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i10);
    goto corral_source_split_3060;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    call {:si_unique_call 589} out_$i15 := devirtbounce.9(0, out_$p14);
    call {:si_unique_call 590} {:cexpr "__ptr"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_3059;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p3, $mul.ref(0, 976)), $mul.ref(8, 1));
    goto corral_source_split_3058;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i10, out_$i11, out_$i12, out_$i72, out_$i73 := team_get_stats64_loop_$bb4(in_$p1, in_$p3, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$p29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i10, out_$i11, out_$i12, out_$i72, out_$i73);
    return;

  exit:
    return;
}



procedure team_get_stats64_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i64, in_$p42: ref, in_$i43: i64, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i64, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i32, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i72: i32, in_$i73: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i64, out_$p42: ref, out_$i43: i64, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i64, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i32, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i72: i32, out_$i73: i32);
  modifies $M.0;



implementation team_vlan_rx_add_vid_loop_$bb17(in_$i1: i16, in_$i2: i16, in_$i45: i64, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p47: ref) returns (out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p47: ref)
{

  entry:
    out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p47 := in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p47;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3185;

  $bb19:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$p47 := out_$p58;
    goto $bb19_dummy;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, in_$i45);
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p57, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p57, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p47, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vlan_vid_del(out_$p49, out_$i51, out_$i53);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i16(out_$i52);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(in_$i2);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i16(out_$i50);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i32(in_$i1);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_3188;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p47 := team_vlan_rx_add_vid_loop_$bb17(in_$i1, in_$i2, in_$i45, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p47);
    return;

  exit:
    return;
}



procedure team_vlan_rx_add_vid_loop_$bb17(in_$i1: i16, in_$i2: i16, in_$i45: i64, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p47: ref) returns (out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p47: ref);



implementation team_vlan_rx_add_vid_loop_$bb4(in_$i1: i16, in_$i2: i16, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$i26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  $bb10:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p31;
    goto $bb10_dummy;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i14);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p30, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p30, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3169;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3168;

  $bb7:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$p25, out_$i26 := out_$p16, out_$i23;
    assume true;
    goto $bb7;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} out_$i23 := vlan_vid_add(out_$p18, out_$i20, out_$i22);
    call {:si_unique_call 609} {:cexpr "err"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i16(out_$i21);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(in_$i2);
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i16(out_$i19);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(in_$i1);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3148;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16 := team_vlan_rx_add_vid_loop_$bb4(in_$i1, in_$i2, in_$i14, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p16);
    return;

  exit:
    return;
}



procedure team_vlan_rx_add_vid_loop_$bb4(in_$i1: i16, in_$i2: i16, in_$i14: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$i26: i32, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$i26: i32, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p16: ref);



implementation team_vlan_rx_kill_vid_loop_$bb4(in_$i1: i16, in_$i2: i16, in_$p5: ref, in_$p6: ref, in_$i23: i64, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i16, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p25: ref) returns (out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i16, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p25: ref)
{

  entry:
    out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p25 := in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3231;

  $bb6:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p25 := out_$p42;
    goto $bb6_dummy;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, in_$i23);
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p41, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(out_$p41, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} out_$i40 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 627} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3249;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_3248;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __read_once_size(out_$p35, out_$p37, 8);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p5, out_$p34);
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3240;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vlan_vid_del(out_$p27, out_$i29, out_$i31);
    goto corral_source_split_3239;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i32.i16(out_$i30);
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(in_$i2);
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i32.i16(out_$i28);
    goto corral_source_split_3236;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(in_$i1);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3234;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p25, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p25 := team_vlan_rx_kill_vid_loop_$bb4(in_$i1, in_$i2, in_$p5, in_$p6, in_$i23, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p25);
    return;

  exit:
    return;
}



procedure team_vlan_rx_kill_vid_loop_$bb4(in_$i1: i16, in_$i2: i16, in_$p5: ref, in_$p6: ref, in_$i23: i64, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i16, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p25: ref) returns (out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i16, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p25: ref);
  modifies $M.0;



implementation team_netpoll_setup_loop_$bb4(in_$p3: ref, in_$i13: i64, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p16: ref, in_$i29: i32) returns (out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p16: ref, out_$i29: i32)
{

  entry:
    out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p16, out_$i29 := in_$i17, in_$i18, in_$i19, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p16, in_$i29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3279;

  $bb10:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p16 := out_$p25;
    goto $bb10_dummy;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i17;
    assume true;
    goto $bb10;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, in_$i13);
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p24, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p24, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_3292;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3291;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i17;
    assume true;
    goto $bb7;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_3282;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} out_$i17 := team_port_enable_netpoll(in_$p3, out_$p16);
    call {:si_unique_call 632} {:cexpr "err"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p16, out_$i29 := team_netpoll_setup_loop_$bb4(in_$p3, in_$i13, out_$i17, out_$i18, out_$i19, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p16, out_$i29);
    return;

  exit:
    return;
}



procedure team_netpoll_setup_loop_$bb4(in_$p3: ref, in_$i13: i64, in_$i17: i32, in_$i18: i1, in_$i19: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p16: ref, in_$i29: i32) returns (out_$i17: i32, out_$i18: i1, out_$i19: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p16: ref, out_$i29: i32);
  modifies $M.0, $CurrAddr;



implementation team_fix_features_loop_$bb4(in_$i1: i64, in_$p4: ref, in_$p5: ref, in_$i24: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p27: ref, in_$i28: i64, in_$i48: i64) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p27: ref, out_$i28: i64, out_$i48: i64)
{

  entry:
    out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p27, out_$i28, out_$i48 := in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p27, in_$i28, in_$i48;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3354;

  $bb6:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$p27, out_$i28 := out_$p44, out_$i33;
    goto $bb6_dummy;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i33;
    assume true;
    goto $bb6;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, in_$i24);
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p43, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p43, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} out_$i42 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 666} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} __read_once_size(out_$p37, out_$p39, 8);
    goto corral_source_split_3367;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_3366;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_3365;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p4, out_$p36);
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_3362;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(out_$p27, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} out_$i33 := netdev_increment_features(out_$i28, out_$i32, in_$i1);
    call {:si_unique_call 663} {:cexpr "features"} boogie_si_record_i64(out_$i33);
    goto corral_source_split_3360;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 2968)), $mul.ref(240, 1));
    goto corral_source_split_3358;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3357;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p27, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p27, out_$i28, out_$i48 := team_fix_features_loop_$bb4(in_$i1, in_$p4, in_$p5, in_$i24, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p27, out_$i28, out_$i48);
    return;

  exit:
    return;
}



procedure team_fix_features_loop_$bb4(in_$i1: i64, in_$p4: ref, in_$p5: ref, in_$i24: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p27: ref, in_$i28: i64, in_$i48: i64) returns (out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p27: ref, out_$i28: i64, out_$i48: i64);
  modifies $M.0;



implementation team_port_find_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p12: ref) returns (out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p12: ref)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p12 := in_$i13, in_$i14, in_$i15, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p21;
    goto $bb10_dummy;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i10);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p20, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3649;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3648;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i64(out_$i13, out_$i14);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3641;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p12 := team_port_find_loop_$bb4(in_$p1, in_$i10, out_$i13, out_$i14, out_$i15, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p12);
    return;

  exit:
    return;
}



procedure team_port_find_loop_$bb4(in_$p1: ref, in_$i10: i64, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p12: ref) returns (out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p12: ref);



implementation __team_option_inst_mark_removed_port_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3718;

  $bb9:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p22;
    goto $bb9_dummy;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i9);
    goto corral_source_split_3737;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_3736;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3735;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3734;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3733;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3732;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p19, 1);
    goto corral_source_split_3730;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(57, 1));
    goto corral_source_split_3729;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p18, 1);
    goto corral_source_split_3728;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_3727;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_3726;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i15, out_$i16);
    goto corral_source_split_3724;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3723;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_3722;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_3721;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3720;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11 := __team_option_inst_mark_removed_port_loop_$bb4(in_$p1, in_$i9, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p11);
    return;

  exit:
    return;
}



procedure __team_option_inst_mark_removed_port_loop_$bb4(in_$p1: ref, in_$i9: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p11: ref);
  modifies $M.0;



implementation __team_option_inst_del_port_loop_$bb4(in_$p1: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i8, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i8, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p15: ref, out_$p16: ref)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$p15, out_$p16 := in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$p29, in_$p30, in_$p32, in_$i33, in_$i34, in_$p15, in_$p16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3756;

  $bb12:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$p15, out_$p16 := out_$p30, out_$p15;
    goto $bb12_dummy;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, in_$i13);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3777;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto corral_source_split_3776;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_3775;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3774;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} __team_option_inst_del(out_$p16);
    goto corral_source_split_3772;

  $bb9:
    assume out_$i27 == 1;
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i64(out_$i25, out_$i26);
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_3767;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_3765;

  $bb6:
    assume out_$i21 == 1;
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3759;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb8;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$p15, out_$p16 := __team_option_inst_del_port_loop_$bb4(in_$p1, in_$i13, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p32, out_$i33, out_$i34, out_$p15, out_$p16);
    return;

  exit:
    return;
}



procedure __team_option_inst_del_port_loop_$bb4(in_$p1: ref, in_$i13: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i8, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p15: ref, in_$p16: ref) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i8, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p15: ref, out_$p16: ref);



implementation __team_compute_features_loop_$bb4(in_$i9: i64, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i16, in_$i41: i16, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i16, in_$i50: i16, in_$i51: i32, in_$i52: i32) returns (out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i16, out_$i41: i16, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i16, out_$i50: i16, out_$i51: i32, out_$i52: i32)
{

  entry:
    out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i14, out_$p15, out_$i16, out_$i17, out_$i50, out_$i51, out_$i52 := in_$i18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$i14, in_$p15, in_$i16, in_$i17, in_$i50, in_$i51, in_$i52;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3816;

  $bb9:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i14, out_$p15, out_$i16, out_$i17 := out_$i29, out_$p46, out_$i24, out_$i41;
    goto $bb9_dummy;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i50, out_$i51, out_$i52 := out_$i41, out_$i24, out_$i29;
    assume true;
    goto $bb9;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i9);
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3845;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3844;

  $bb7:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := out_$i17;
    goto $bb8;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i40;
    goto $bb8;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.0, out_$p39);
    call {:si_unique_call 802} {:cexpr "max_hard_header_len"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 2968)), $mul.ref(566, 1));
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3839;

  $bb6:
    assume out_$i36 == 1;
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i34, out_$i35);
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i17);
    goto corral_source_split_3835;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 2968)), $mul.ref(566, 1));
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, out_$i14);
    call {:si_unique_call 801} {:cexpr "dst_release_flag"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 2968)), $mul.ref(548, 1));
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_3826;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i64.i32(out_$i23);
    call {:si_unique_call 800} {:cexpr "vlan_features"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} out_$i23 := netdev_increment_features(out_$i18, out_$i22, 1671291);
    call {:si_unique_call 799} {:cexpr "tmp"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 2968)), $mul.ref(264, 1));
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p15, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3819;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i32.i64(out_$i16);
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i14, out_$p15, out_$i16, out_$i17, out_$i50, out_$i51, out_$i52 := __team_compute_features_loop_$bb4(in_$i9, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$i14, out_$p15, out_$i16, out_$i17, out_$i50, out_$i51, out_$i52);
    return;

  exit:
    return;
}



procedure __team_compute_features_loop_$bb4(in_$i9: i64, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i64, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i16, in_$i41: i16, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i16, in_$i50: i16, in_$i51: i32, in_$i52: i32) returns (out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i64, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i16, out_$i41: i16, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i16, out_$i50: i16, out_$i51: i32, out_$i52: i32);



implementation team_nl_send_port_list_get_loop_$bb56(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p6: ref, in_$i97: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1) returns (out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1)
{

  entry:
    out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107 := in_$i101, in_$i102, in_$i103, in_$p104, in_$p105, in_$i106, in_$i107;
    goto $bb56, exit;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} out_$i101 := __send_and_alloc_skb(in_$p6, in_$p0, in_$i1, in_$p4);
    goto SeqInstr_116;

  $bb60:
    assume {:verifier.code 0} true;
    assume out_$i107 == 1;
    goto $bb60_dummy;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i64(out_$i106, 0);
    goto corral_source_split_4091;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_4090;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_$p105 := nlmsg_put(out_$p104, in_$i1, in_$i2, 3, 0, in_$i97);
    goto corral_source_split_4089;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, in_$p6);
    goto corral_source_split_4088;

  $bb58:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$i103 := out_$i101;
    assume true;
    goto $bb58;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_4084;

  SeqInstr_117:
    call {:si_unique_call 842} {:cexpr "err"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_4083;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  $bb60_dummy:
    call {:si_unique_call 1} out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107 := team_nl_send_port_list_get_loop_$bb56(in_$p0, in_$i1, in_$i2, in_$p4, in_$p6, in_$i97, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107);
    return;

  exit:
    return;
}



procedure team_nl_send_port_list_get_loop_$bb56(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$p4: ref, in_$p6: ref, in_$i97: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$p104: ref, in_$p105: ref, in_$i106: i64, in_$i107: i1) returns (out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$p104: ref, out_$p105: ref, out_$i106: i64, out_$i107: i1);
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_send_port_list_get_loop_$bb35(in_$p6: ref, in_$i60: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i79: i32, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i63: i32, in_$p64: ref, in_$p88: ref) returns (out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i79: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i63: i32, out_$p64: ref, out_$p88: ref)
{

  entry:
    out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88 := in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i79, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i63, in_$p64, in_$p88;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4048;

  $bb47:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i63, out_$p64 := out_$i79, out_$p84;
    goto $bb47_dummy;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$p88 := out_$p84;
    assume true;
    goto $bb47;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, in_$i60);
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p83, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4065;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i63, 1);
    call {:si_unique_call 839} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_4064;

  $bb38:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$p68, out_$i69, out_$i70 := out_$p64, out_$i63, out_$i66;
    assume true;
    goto $bb38;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_$i66 := team_nl_fill_one_port_get(out_$p65, out_$p64);
    call {:si_unique_call 838} {:cexpr "err"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_4051;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, in_$p6);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88 := team_nl_send_port_list_get_loop_$bb35(in_$p6, in_$i60, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88);
    return;

  exit:
    return;
}



procedure team_nl_send_port_list_get_loop_$bb35(in_$p6: ref, in_$i60: i64, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i79: i32, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i63: i32, in_$p64: ref, in_$p88: ref) returns (out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i79: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i63: i32, out_$p64: ref, out_$p88: ref);
  modifies $M.0, $CurrAddr;



implementation team_nl_send_port_list_get_loop_$bb7(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$p19: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$p72: ref, in_$i73: i32, in_$i79: i32, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i63: i32, in_$p64: ref, in_$p88: ref, in_$p62: ref, in_$p77: ref, in_$i78: i8, in_$p89: ref, in_$i90: i8, in_$p53: ref, in_$i54: i8, in_$p91: ref, in_$p93: ref, in_$i94: i1, in_$p95: ref, in_vslice_dummy_var_46: i32) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$p19: ref, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$p72: ref, out_$i73: i32, out_$i79: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i63: i32, out_$p64: ref, out_$p88: ref, out_$p62: ref, out_$p77: ref, out_$i78: i8, out_$p89: ref, out_$i90: i8, out_$p53: ref, out_$i54: i8, out_$p91: ref, out_$p93: ref, out_$i94: i1, out_$p95: ref, out_vslice_dummy_var_46: i32)
{

  entry:
    out_$p20, out_$i21, out_$i22, out_$i23, out_$p19, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i74, out_$p75, out_$i76, out_$p72, out_$i73, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88, out_$p62, out_$p77, out_$i78, out_$p89, out_$i90, out_$p53, out_$i54, out_$p91, out_$p93, out_$i94, out_$p95, out_vslice_dummy_var_46 := in_$p20, in_$i21, in_$i22, in_$i23, in_$p19, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i55, in_$i56, in_$p57, in_$i58, in_$p59, in_$i60, in_$i61, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i74, in_$p75, in_$i76, in_$p72, in_$i73, in_$i79, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$i63, in_$p64, in_$p88, in_$p62, in_$p77, in_$i78, in_$p89, in_$i90, in_$p53, in_$i54, in_$p91, in_$p93, in_$i94, in_$p95, in_vslice_dummy_var_46;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$p19 := out_$p20;
    goto $bb10_dummy;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i21;
    assume true;
    goto $bb10;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_3979;

  SeqInstr_114:
    call {:si_unique_call 826} {:cexpr "err"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_3978;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_$i21 := __send_and_alloc_skb(in_$p6, in_$p0, in_$i1, in_$p4);
    goto SeqInstr_113;

  $bb8:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    out_$p20, out_$p95 := out_$p53, out_$p27;
    assume true;
    goto $bb8;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i8.i1(out_$i54);
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} genlmsg_end(out_$p93, out_$p27);
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, in_$p6);
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_vslice_dummy_var_46 := nla_nest_end(out_$p91, out_$p40);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.0, in_$p6);
    goto corral_source_split_4033;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4032;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p53, out_$i54 := out_$p89, out_$i90;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p53, out_$i54 := out_$p19, 0;
    goto $bb29;

  $bb26:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$p49, out_$i50 := out_$p27, out_$i47;
    assume true;
    goto $bb26;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_$i47 := team_nl_fill_one_port_get(out_$p46, in_$p5);
    call {:si_unique_call 832} {:cexpr "err"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, in_$p6);
    goto corral_source_split_4016;

  $bb23:
    assume out_$i45 == 1;
    goto corral_source_split_4015;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_4013;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(in_$p5);
    goto corral_source_split_4012;

  $bb21:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p27;
    assume true;
    goto $bb21;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i41, 0);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_4007;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} out_$p40 := nla_nest_start(out_$p39, 3);
    goto corral_source_split_4006;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, in_$p6);
    goto corral_source_split_4005;

  $bb17:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p27;
    assume true;
    goto $bb17;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} out_$i35 := nla_put_u32(out_$p30, 1, out_$i34);
    call {:si_unique_call 829} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_3997;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_3996;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3995;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 976)), $mul.ref(0, 1));
    goto corral_source_split_3994;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3993;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} out_$p27 := genlmsg_put(out_$p25, in_$i1, in_$i2, team_nl_family, out_$i26, 3);
    goto corral_source_split_3987;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    out_$i26 := $or.i32(in_$i3, 2);
    goto corral_source_split_3986;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, in_$p6);
    goto corral_source_split_3985;

  $bb31:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$p89, out_$i90 := out_$p19, 0;
    goto $bb50;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    out_$p89, out_$i90 := out_$p77, out_$i78;
    goto $bb50;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4062;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p77, out_$i78 := out_$p62, 0;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p77, out_$i78 := out_$p68, 1;
    goto $bb44;

  $bb42:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    out_$p75, out_$i76 := out_$p27, out_$i70;
    assume true;
    goto $bb42;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i69, 0);
    goto corral_source_split_4058;

  $bb39:
    assume out_$i71 == 1;
    goto corral_source_split_4057;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    out_$p72, out_$i73 := out_$p27, out_$i70;
    assume true;
    goto $bb39;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, $sub.i32(0, 90));
    goto corral_source_split_4055;

  $bb37:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4054;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    out_$p68, out_$i69, out_$i70 := out_$p64, out_$i63, out_$i66;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_4052;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} out_$i66 := team_nl_fill_one_port_get(out_$p65, out_$p64);
    call {:si_unique_call 838} {:cexpr "err"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_4051;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, in_$p6);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    call out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88 := team_nl_send_port_list_get_loop_$bb35(in_$p6, out_$i60, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88);
    goto $bb35_last;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$i63, out_$p64 := 0, out_$p19;
    goto $bb35;

  $bb47:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i63, out_$p64 := out_$i79, out_$p84;
    assume false;
    return;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$p88 := out_$p84;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, out_$i60);
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p83, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_4067;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_4066;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p64, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4065;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i63, 1);
    call {:si_unique_call 839} {:cexpr "i"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_4064;

  $bb38:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb32:
    assume out_$i61 == 1;
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    out_$p62 := out_$p19;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i58, out_$i60);
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 976)), $mul.ref(312, 1));
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p19, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4040;

  $bb30:
    assume out_$i56 == 1;
    goto corral_source_split_4039;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_4021;

  $bb24:
    assume !(out_$i45 == 1);
    goto corral_source_split_4020;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb34;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$p62 := out_$p88;
    goto $bb34;

  $bb48:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4073;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$i22, out_$i23, out_$p19, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i74, out_$p75, out_$i76, out_$p72, out_$i73, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88, out_$p62, out_$p77, out_$i78, out_$p89, out_$i90, out_$p53, out_$i54, out_$p91, out_$p93, out_$i94, out_$p95, out_vslice_dummy_var_46 := team_nl_send_port_list_get_loop_$bb7(in_$p0, in_$i1, in_$i2, in_$i3, in_$p4, in_$p5, in_$p6, out_$p20, out_$i21, out_$i22, out_$i23, out_$p19, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i55, out_$i56, out_$p57, out_$i58, out_$p59, out_$i60, out_$i61, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i74, out_$p75, out_$i76, out_$p72, out_$i73, out_$i79, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$i63, out_$p64, out_$p88, out_$p62, out_$p77, out_$i78, out_$p89, out_$i90, out_$p53, out_$i54, out_$p91, out_$p93, out_$i94, out_$p95, out_vslice_dummy_var_46);
    return;

  exit:
    return;
}



procedure team_nl_send_port_list_get_loop_$bb7(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$p19: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p65: ref, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$p72: ref, in_$i73: i32, in_$i79: i32, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$i63: i32, in_$p64: ref, in_$p88: ref, in_$p62: ref, in_$p77: ref, in_$i78: i8, in_$p89: ref, in_$i90: i8, in_$p53: ref, in_$i54: i8, in_$p91: ref, in_$p93: ref, in_$i94: i1, in_$p95: ref, in_vslice_dummy_var_46: i32) returns (out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$p19: ref, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p65: ref, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$p72: ref, out_$i73: i32, out_$i79: i32, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$i63: i32, out_$p64: ref, out_$p88: ref, out_$p62: ref, out_$p77: ref, out_$i78: i8, out_$p89: ref, out_$i90: i8, out_$p53: ref, out_$i54: i8, out_$p91: ref, out_$p93: ref, out_$i94: i1, out_$p95: ref, out_vslice_dummy_var_46: i32);
  modifies $M.0, $CurrAddr, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_option_inst_add_port_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$i13: i8, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i8, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4775;

  $bb14:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p20;
    goto $bb14_dummy;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i9);
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4786;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_4784;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i15;
    assume true;
    goto $bb11;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 0);
    goto corral_source_split_4791;

  SeqInstr_138:
    call {:si_unique_call 991} {:cexpr "err"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4790;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_$i15 := __team_option_inst_add(in_$p0, out_$p11, in_$p1);
    goto SeqInstr_137;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    out_$i14 := $trunc.i8.i1(out_$i13);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p12);
    goto corral_source_split_4778;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i14 == 1);
    goto corral_source_split_4781;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11 := __team_option_inst_add_port_loop_$bb4(in_$p0, in_$p1, in_$i9, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p11);
    return;

  exit:
    return;
}



procedure __team_option_inst_add_port_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i9: i64, in_$p12: ref, in_$i13: i8, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i8, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p11: ref);
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation __team_netpoll_cleanup_loop_$bb4(in_$i9: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p11: ref)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p11 := in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5046;

  $bb6:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p16;
    goto $bb6_dummy;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, in_$i9);
    goto corral_source_split_5055;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_5054;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p15, $mul.ref($sub.ref(0, 24), 160)), $mul.ref(24, 1));
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p15, $mul.ref($sub.ref(0, 24), 160));
    goto corral_source_split_5052;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_5051;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5050;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5049;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} team_port_disable_netpoll(out_$p11);
    goto corral_source_split_5048;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p11 := __team_netpoll_cleanup_loop_$bb4(in_$i9, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p11);
    return;

  exit:
    return;
}



procedure __team_netpoll_cleanup_loop_$bb4(in_$i9: i64, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p11: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p11: ref);
  modifies $M.0;



implementation team_queue_override_transmit_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p5: ref, in_$i31: i64, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p33: ref) returns (out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p33: ref)
{

  entry:
    out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p33 := in_$i34, in_$i35, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p33;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5231;

  $bb16:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$p33 := out_$p46;
    goto $bb16_dummy;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, in_$i31);
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_5251;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p45, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(128, 1));
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(out_$p45, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} out_$i44 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1101} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_5246;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5245;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __read_once_size(out_$p39, out_$p41, 8);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_5241;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p4, out_$p38);
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_5239;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(0, 160)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_5238;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    goto corral_source_split_5234;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} out_$i34 := team_dev_queue_xmit(in_$p0, out_$p33, in_$p1);
    call {:si_unique_call 1098} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_5233;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p33 := team_queue_override_transmit_loop_$bb11(in_$p0, in_$p1, in_$p4, in_$p5, in_$i31, out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p33);
    return;

  exit:
    return;
}



procedure team_queue_override_transmit_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p5: ref, in_$i31: i64, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p33: ref) returns (out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p33: ref);
  modifies $M.0;



implementation arch_local_irq_restore_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_restore_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_restore_loop_$bb3();



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation arch_local_irq_disable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_irq_disable_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_irq_disable_loop_$bb3();



implementation team_queue_override_init_loop_$bb11(in_$i5: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i16: i32, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i16: i32, out_$p17: ref)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i16, out_$p17 := in_$p18, in_$i19, in_$i20, in_$i16, in_$p17;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5507;

  $bb13:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i19, out_$p18;
    goto $bb13_dummy;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i19, in_$i5);
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1174} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_5511;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} INIT_LIST_HEAD(out_$p17);
    goto corral_source_split_5510;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p17, $mul.ref(1, 16));
    goto corral_source_split_5509;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i16, out_$p17 := team_queue_override_init_loop_$bb11(in_$i5, out_$p18, out_$i19, out_$i20, out_$i16, out_$p17);
    return;

  exit:
    return;
}



procedure team_queue_override_init_loop_$bb11(in_$i5: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i16: i32, in_$p17: ref) returns (out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i16: i32, out_$p17: ref);
  modifies $M.0;



implementation netdev_for_each_tx_queue_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6 := in_$p7, in_$p8, in_$i9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5590;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$i13 := $ugt.i32(out_$i12, out_$i11);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, in_$p3);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1196} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5596;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 504));
    call {:si_unique_call 1195} devirtbounce.17(in_$p1, in_$p0, out_$p10, in_$p2);
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i32.i64(out_$i6);
    goto corral_source_split_5594;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_5593;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6 := netdev_for_each_tx_queue_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p3, out_$p7, out_$p8, out_$i9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i6);
    return;

  exit:
    return;
}



procedure netdev_for_each_tx_queue_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i6: i32);



implementation atomic_dec_if_positive_loop_$bb4(in_$p0: ref, in_$i11: i32, in_$i9: i32, in_$i10: i32, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i9: i32, out_$i10: i32, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i9, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i9, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i20, out_$i13;
    goto $bb11_dummy;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i20;
    assume true;
    goto $bb11;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_5670;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 1223} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_5669;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_5668;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_5667;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_5666;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i13, $sub.i32(0, 1));
    call {:si_unique_call 1221} {:cexpr "dec"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_5665;

  $bb9:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i9;
    assume true;
    goto $bb9;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_5661;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} out_$i17 := ldv__builtin_expect(out_$i16, 1);
    call {:si_unique_call 1220} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_5660;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i15);
    goto corral_source_split_5659;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i1.i32(out_$i14);
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, out_$i10);
    goto corral_source_split_5657;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} out_$i13 := atomic_cmpxchg(in_$p0, out_$i10, out_$i9);
    call {:si_unique_call 1218} {:cexpr "old"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_5656;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i9, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := atomic_dec_if_positive_loop_$bb4(in_$p0, out_$i11, out_$i9, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure atomic_dec_if_positive_loop_$bb4(in_$p0: ref, in_$i11: i32, in_$i9: i32, in_$i10: i32, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i9: i32, out_$i10: i32, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation team_nl_cmd_options_set_loop_$bb104()
{

  entry:
    goto $bb104, exit;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb104_dummy;

  $bb104_dummy:
    call {:si_unique_call 1} team_nl_cmd_options_set_loop_$bb104();
    return;

  exit:
    return;
}



procedure team_nl_cmd_options_set_loop_$bb104();



implementation team_nl_cmd_options_set_loop_$bb61(in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$i61: i32, in_$p63: ref, in_$p69: ref, in_$i75: i32, in_$i81: i32, in_$i82: i8, in_$i90: i64, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p112: ref, in_$i113: i8, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$i168: i1, in_$i93: i8, in_$p94: ref, in_$i169: i8) returns (out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p112: ref, out_$i113: i8, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$i168: i1, out_$i93: i8, out_$p94: ref, out_$i169: i8)
{

  entry:
    out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169 := in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p114, in_$p115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$p135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i141, in_$p142, in_$p143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$i149, in_$i150, in_$p151, in_$p152, in_$i153, in_$i154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$p160, in_$p161, in_$p112, in_$i113, in_$p163, in_$p164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i93, in_$p94, in_$i169;
    goto $bb61, exit;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6131;

  $bb108:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i93, out_$p94 := out_$i113, out_$p164;
    goto $bb108_dummy;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i113;
    assume true;
    goto $bb108;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i64(out_$i167, in_$i90);
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$i167 := $p2i.ref.i64(out_$p166);
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p165, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p165 := $bitcast.ref.ref(out_$p164);
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$p164 := $load.ref($M.0, out_$p163);
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6163;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6162;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, 1;
    goto $bb68;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  $bb66:
    assume out_$i111 == 1;
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, in_$i61);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6150;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i108 := 0;
    goto $bb65;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i107;
    goto $bb65;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_6141;

  $bb63:
    assume out_$i101 == 1;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, 0);
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1));
    out_$p98 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_6134;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb64:
    assume !(out_$i101 == 1);
    goto corral_source_split_6147;

  $bb69:
    assume out_$i117 == 1;
    goto corral_source_split_6170;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} out_$i116 := strcmp(out_$p115, in_$p69);
    call {:si_unique_call 1325} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6157;

  $bb67:
    assume !(out_$i111 == 1);
    goto corral_source_split_6156;

  $bb71:
    assume out_$i118 == 1;
    goto corral_source_split_6175;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i108, in_$i75);
    goto corral_source_split_6173;

  $bb70:
    assume !(out_$i117 == 1);
    goto corral_source_split_6172;

  $bb77:
    assume !(out_$i122 == 1);
    goto corral_source_split_6189;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$i122 := $trunc.i8.i1(in_$i82);
    goto corral_source_split_6183;

  $bb73:
    assume out_$i121 == 1;
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_6180;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_6179;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_6178;

  $bb72:
    assume !(out_$i118 == 1);
    goto corral_source_split_6177;

  $bb78:
    assume out_$i125 == 1;
    goto corral_source_split_6191;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, in_$i81);
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, out_$p123);
    goto corral_source_split_6186;

  $bb75:
    out_$p123 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_6185;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb75;

  $bb76:
    assume {:verifier.code 0} true;
    assume out_$i122 == 1;
    goto $bb75;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} list_add(out_$p161, in_$p3);
    goto corral_source_split_6248;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6247;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p160, 1);
    goto corral_source_split_6246;

  $bb107:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6245;

  $bb106:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i159 := out_$i157;
    assume true;
    goto $bb106;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_6232;

  SeqInstr_162:
    call {:si_unique_call 1334} {:cexpr "err"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_6231;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} out_$i157 := team_option_set(in_$p8, out_$p94, in_$p5);
    goto SeqInstr_161;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p135, out_$i133);
    goto corral_source_split_6229;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p134);
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6227;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} out_$i133 := nla_get_u32(in_$p63);
    goto corral_source_split_6226;

  $bb97:
    assume out_$i132 == 1;
    goto corral_source_split_6225;

  $bb95:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(in_$i61, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97;

  $bb86:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(in_$i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(in_$i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p126, out_$p97);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6193;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p140, out_$p138);
    goto corral_source_split_6239;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$p140 := $bitcast.ref.ref(out_$p139);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6237;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_$p138 := nla_data(in_$p63);
    goto corral_source_split_6236;

  $bb101:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$i137 := $sgt.i32(out_$i136, 32);
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} out_$i136 := nla_len(in_$p63);
    call {:si_unique_call 1331} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_6222;

  $bb96:
    assume !(out_$i131 == 1);
    goto corral_source_split_6221;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p148, out_$p145);
    goto corral_source_split_6205;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p146);
    goto corral_source_split_6203;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} out_$p145 := nla_data(in_$p63);
    goto corral_source_split_6201;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p144, out_$i141);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} out_$i141 := nla_len(in_$p63);
    call {:si_unique_call 1327} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_6196;

  $bb88:
    assume out_$i128 == 1;
    goto corral_source_split_6195;

  $bb87:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(in_$i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p152, out_$i153);
    goto corral_source_split_6213;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i1.i8(out_$i150);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(out_$p151);
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i149, 0);
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    out_$i149 := $p2i.ref.i64(in_$p63);
    goto corral_source_split_6208;

  $bb90:
    assume out_$i129 == 1;
    goto corral_source_split_6207;

  $bb89:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(in_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p156, out_$i154);
    goto corral_source_split_6219;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    out_$p156 := $bitcast.ref.ref(out_$p155);
    goto corral_source_split_6218;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6217;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} out_$i154 := nla_get_s32(in_$p63);
    goto corral_source_split_6216;

  $bb92:
    assume out_$i130 == 1;
    goto corral_source_split_6215;

  $bb91:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(in_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92;

  $bb108_dummy:
    call {:si_unique_call 1} out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169 := team_nl_cmd_options_set_loop_$bb61(in_$p3, in_$p5, in_$p8, in_$i61, in_$p63, in_$p69, in_$i75, in_$i81, in_$i82, in_$i90, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169);
    return;

  exit:
    return;
}



procedure team_nl_cmd_options_set_loop_$bb61(in_$p3: ref, in_$p5: ref, in_$p8: ref, in_$i61: i32, in_$p63: ref, in_$p69: ref, in_$i75: i32, in_$i81: i32, in_$i82: i8, in_$i90: i64, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p112: ref, in_$i113: i8, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$i168: i1, in_$i93: i8, in_$p94: ref, in_$i169: i8) returns (out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p112: ref, out_$i113: i8, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$i168: i1, out_$i93: i8, out_$p94: ref, out_$i169: i8);
  modifies $M.0, $M.24, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_cmd_options_set_loop_$bb12(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i8, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i56: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i1, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i8, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p112: ref, in_$i113: i8, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$i168: i1, in_$i93: i8, in_$p94: ref, in_$i169: i8, in_$i92: i8, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$p33: ref) returns (out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i8, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i56: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i1, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i8, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p112: ref, out_$i113: i8, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$i168: i1, out_$i93: i8, out_$p94: ref, out_$i169: i8, out_$i92: i8, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$p33: ref)
{

  entry:
    out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169, out_$i92, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p33 := in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i57, in_$i58, in_$i59, in_$i60, in_$i56, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$p89, in_$i90, in_$i91, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$p114, in_$p115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$p135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i141, in_$p142, in_$p143, in_$p144, in_$p145, in_$p146, in_$p147, in_$p148, in_$i149, in_$i150, in_$p151, in_$p152, in_$i153, in_$i154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$p160, in_$p161, in_$p112, in_$i113, in_$p163, in_$p164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i93, in_$p94, in_$i169, in_$i92, in_$i170, in_$p171, in_$i172, in_$i173, in_$i174, in_$p33;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6050;

  $bb114:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$p33 := out_$p171;
    goto $bb114_dummy;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    out_$i174 := $ne.i32(out_$i173, 0);
    goto corral_source_split_6259;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} out_$i173 := nla_ok(out_$p171, out_$i172);
    call {:si_unique_call 1340} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_6258;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i32($M.24, in_$p2);
    goto corral_source_split_6257;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} out_$p171 := nla_next(out_$p33, in_$p2);
    goto corral_source_split_6256;

  $bb111:
    assume out_$i170 == 1;
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i170 := $trunc.i8.i1(out_$i92);
    goto corral_source_split_6252;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb60;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i169;
    goto $bb60;

  $bb109:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6250;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i113;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i64(out_$i167, out_$i90);
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$i167 := $p2i.ref.i64(out_$p166);
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p165, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p165 := $bitcast.ref.ref(out_$p164);
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$p164 := $load.ref($M.0, out_$p163);
    goto corral_source_split_6164;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref($add.ref(out_$p112, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6163;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6162;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, 1;
    goto $bb68;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113 := out_$p94, out_$i93;
    goto $bb68;

  $bb66:
    assume out_$i111 == 1;
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, out_$i61);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6150;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i108 := 0;
    goto $bb65;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i107;
    goto $bb65;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 2968)), $mul.ref(288, 1));
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_6141;

  $bb63:
    assume out_$i101 == 1;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, 0);
    goto corral_source_split_6138;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_6137;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.0, out_$p98);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1));
    out_$p98 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(8, 1));
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_6134;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    call out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169 := team_nl_cmd_options_set_loop_$bb61(in_$p3, in_$p5, in_$p8, out_$i61, out_$p63, out_$p69, out_$i75, out_$i81, out_$i82, out_$i90, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169);
    goto $bb61_last;

  $bb61_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i93, out_$p94 := 0, out_$p85;
    goto $bb61;

  $bb108:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i93, out_$p94 := out_$i113, out_$p164;
    assume false;
    return;

  $bb58:
    assume out_$i91 == 1;
    goto corral_source_split_6129;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    out_$i92 := 0;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i64(out_$i88, out_$i90);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p8, $mul.ref(0, 976)), $mul.ref(344, 1));
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$i88 := $p2i.ref.i64(out_$p87);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$p86 := $bitcast.ref.ref(out_$p85);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.0, out_$p84);
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 976)), $mul.ref(344, 1)), $mul.ref(0, 1));
    goto corral_source_split_6120;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6119;

  $bb56:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i81, out_$i82 := 0, 0;
    goto $bb57;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$i81, out_$i82 := out_$i80, 1;
    goto $bb57;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_$i80 := nla_get_u32(out_$p77);
    call {:si_unique_call 1323} {:cexpr "opt_array_index"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_6117;

  $bb55:
    assume out_$i79 == 1;
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.25, out_$p76);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(7, 8));
    goto corral_source_split_6111;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  $bb53:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := 0;
    goto $bb54;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i74;
    goto $bb54;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} out_$i74 := nla_get_u32(out_$p71);
    call {:si_unique_call 1321} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_6108;

  $bb52:
    assume out_$i73 == 1;
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.25, out_$p70);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(6, 8));
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} out_$p69 := nla_data(out_$p68);
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.25, out_$p67);
    goto corral_source_split_6100;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_6099;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb48;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb48;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_6094;

  $bb46:
    assume out_$i64 == 1;
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i61, 3);
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.25, out_$p62);
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(4, 8));
    goto corral_source_split_6089;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_6088;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    out_$i61 := 4;
    goto $bb44;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$i61 := 2;
    goto $bb44;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$i61 := 3;
    goto $bb44;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$i61 := 1;
    goto $bb44;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$i61 := 0;
    goto $bb44;

  $bb42:
    assume out_$i60 == 1;
    goto corral_source_split_6086;

  $bb40:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i51, 3);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    assume true;
    goto $bb42;

  $bb27:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i51, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i52 := $slt.i32(out_$i51, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i8.i32(out_$i50);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} out_$i50 := nla_get_u8(out_$p49);
    call {:si_unique_call 1318} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i50);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.25, out_$p48);
    goto corral_source_split_6075;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_6074;

  $bb24:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.25, out_$p44);
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(3, 8));
    goto corral_source_split_6069;

  $bb22:
    assume !(out_$i43 == 1);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.25, out_$p40);
    goto corral_source_split_6064;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p4, $mul.ref(0, 64)), $mul.ref(1, 8));
    goto corral_source_split_6063;

  $bb18:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i37;
    assume true;
    goto $bb18;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} out_$i37 := nla_parse_nested(out_$p36, 7, out_$p33, team_nl_option_policy);
    call {:si_unique_call 1316} {:cexpr "err"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_6058;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_6057;

  $bb15:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 1);
    goto corral_source_split_6053;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} out_$i34 := nla_type(out_$p33);
    call {:si_unique_call 1314} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb41:
    assume !(out_$i59 == 1);
    goto corral_source_split_6084;

  $bb38:
    assume out_$i58 == 1;
    goto corral_source_split_6082;

  $bb29:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i51, 6);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    assume true;
    goto $bb38;

  $bb28:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i51, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb36:
    assume out_$i57 == 1;
    goto corral_source_split_6080;

  $bb31:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i51, 11);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    assume true;
    goto $bb36;

  $bb30:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i51, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb33:
    assume out_$i55 == 1;
    goto corral_source_split_6078;

  $bb32:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, 14);
    assume {:verifier.code 0} true;
    out_$i56 := out_$i37;
    assume true;
    goto $bb33;

  $bb64:
    assume !(out_$i101 == 1);
    goto corral_source_split_6147;

  $bb69:
    assume out_$i117 == 1;
    goto corral_source_split_6170;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} out_$i116 := strcmp(out_$p115, out_$p69);
    call {:si_unique_call 1325} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6157;

  $bb67:
    assume !(out_$i111 == 1);
    goto corral_source_split_6156;

  $bb71:
    assume out_$i118 == 1;
    goto corral_source_split_6175;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i108, out_$i75);
    goto corral_source_split_6173;

  $bb70:
    assume !(out_$i117 == 1);
    goto corral_source_split_6172;

  $bb77:
    assume !(out_$i122 == 1);
    goto corral_source_split_6189;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    out_$i122 := $trunc.i8.i1(out_$i82);
    goto corral_source_split_6183;

  $bb73:
    assume out_$i121 == 1;
    goto corral_source_split_6182;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_6180;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.0, out_$p119);
    goto corral_source_split_6179;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p96, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_6178;

  $bb72:
    assume !(out_$i118 == 1);
    goto corral_source_split_6177;

  $bb78:
    assume out_$i125 == 1;
    goto corral_source_split_6191;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, out_$i81);
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, out_$p123);
    goto corral_source_split_6186;

  $bb75:
    out_$p123 := $add.ref($add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_6185;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i121 == 1);
    goto $bb75;

  $bb76:
    assume {:verifier.code 0} true;
    assume out_$i122 == 1;
    goto $bb75;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} list_add(out_$p161, in_$p3);
    goto corral_source_split_6248;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6247;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p160, 1);
    goto corral_source_split_6246;

  $bb107:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(out_$p94, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_6245;

  $bb106:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    out_$i159 := out_$i157;
    assume true;
    goto $bb106;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    out_$i158 := $ne.i32(out_$i157, 0);
    goto corral_source_split_6232;

  SeqInstr_162:
    call {:si_unique_call 1334} {:cexpr "err"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_6231;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  $bb99:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} out_$i157 := team_option_set(in_$p8, out_$p94, in_$p5);
    goto SeqInstr_161;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p135, out_$i133);
    goto corral_source_split_6229;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    out_$p135 := $bitcast.ref.ref(out_$p134);
    goto corral_source_split_6228;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6227;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} out_$i133 := nla_get_u32(out_$p63);
    goto corral_source_split_6226;

  $bb97:
    assume out_$i132 == 1;
    goto corral_source_split_6225;

  $bb95:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i61, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97;

  $bb86:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p126, out_$p97);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6193;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p140, out_$p138);
    goto corral_source_split_6239;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    out_$p140 := $bitcast.ref.ref(out_$p139);
    goto corral_source_split_6238;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6237;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} out_$p138 := nla_data(out_$p63);
    goto corral_source_split_6236;

  $bb101:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    out_$i137 := $sgt.i32(out_$i136, 32);
    goto corral_source_split_6223;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} out_$i136 := nla_len(out_$p63);
    call {:si_unique_call 1331} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_6222;

  $bb96:
    assume !(out_$i131 == 1);
    goto corral_source_split_6221;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p148, out_$p145);
    goto corral_source_split_6205;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6204;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p146);
    goto corral_source_split_6203;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6202;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} out_$p145 := nla_data(out_$p63);
    goto corral_source_split_6201;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p144, out_$i141);
    goto corral_source_split_6200;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6199;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_6198;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6197;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} out_$i141 := nla_len(out_$p63);
    call {:si_unique_call 1327} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_6196;

  $bb88:
    assume out_$i128 == 1;
    goto corral_source_split_6195;

  $bb87:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p152, out_$i153);
    goto corral_source_split_6213;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    out_$i153 := $zext.i1.i8(out_$i150);
    goto corral_source_split_6212;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    out_$p152 := $bitcast.ref.ref(out_$p151);
    goto corral_source_split_6211;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6210;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i149, 0);
    goto corral_source_split_6209;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    out_$i149 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_6208;

  $bb90:
    assume out_$i129 == 1;
    goto corral_source_split_6207;

  $bb89:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p156, out_$i154);
    goto corral_source_split_6219;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    out_$p156 := $bitcast.ref.ref(out_$p155);
    goto corral_source_split_6218;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6217;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} out_$i154 := nla_get_s32(out_$p63);
    goto corral_source_split_6216;

  $bb92:
    assume out_$i130 == 1;
    goto corral_source_split_6215;

  $bb91:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i61, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92;

  $bb114_dummy:
    call {:si_unique_call 1} out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169, out_$i92, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p33 := team_nl_cmd_options_set_loop_$bb12(in_$p2, in_$p3, in_$p4, in_$p5, in_$p8, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i57, out_$i58, out_$i59, out_$i60, out_$i56, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$p89, out_$i90, out_$i91, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$p135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$p145, out_$p146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p151, out_$p152, out_$i153, out_$i154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$p160, out_$p161, out_$p112, out_$i113, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i93, out_$p94, out_$i169, out_$i92, out_$i170, out_$p171, out_$i172, out_$i173, out_$i174, out_$p33);
    return;

  exit:
    return;
}



procedure team_nl_cmd_options_set_loop_$bb12(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$i50: i8, in_$i51: i32, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i56: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i1, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i8, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$p109: ref, in_$i110: i32, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$i116: i32, in_$i117: i1, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p146: ref, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$i159: i32, in_$p160: ref, in_$p161: ref, in_$p112: ref, in_$i113: i8, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i64, in_$i168: i1, in_$i93: i8, in_$p94: ref, in_$i169: i8, in_$i92: i8, in_$i170: i1, in_$p171: ref, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$p33: ref) returns (out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$i50: i8, out_$i51: i32, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i56: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i1, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i8, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$p109: ref, out_$i110: i32, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$i116: i32, out_$i117: i1, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p146: ref, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$i159: i32, out_$p160: ref, out_$p161: ref, out_$p112: ref, out_$i113: i8, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i64, out_$i168: i1, out_$i93: i8, out_$p94: ref, out_$i169: i8, out_$i92: i8, out_$i170: i1, out_$p171: ref, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$p33: ref);
  modifies $M.24, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.17, $M.9, $M.11, $M.13, $M.15, $M.10, $M.12, $M.14, $M.16, assertsPassed;



implementation team_nl_cmd_options_get_loop_$bb8(in_$p2: ref, in_$i16: i64, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p18: ref) returns (out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p18: ref)
{

  entry:
    out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p18 := in_$p19, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p18;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i64(out_$i25, in_$i16);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 64)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} list_add_tail(out_$p19, in_$p2);
    goto corral_source_split_6292;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p18 := team_nl_cmd_options_get_loop_$bb8(in_$p2, in_$i16, out_$p19, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p18);
    return;

  exit:
    return;
}



procedure team_nl_cmd_options_get_loop_$bb8(in_$p2: ref, in_$i16: i64, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p18: ref) returns (out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p18: ref);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$i101: i32, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i16, in_$i145: i32, in_$i146: i16, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i16, in_$i152: i32, in_$i153: i16, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i16, in_$i159: i32, in_$i160: i16, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$p165: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i16, in_$i181: i32, in_$i182: i16, in_$i183: i16, in_$i184: i32, in_$i185: i16, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i16, in_$i191: i32, in_$i192: i16, in_$i193: i16, in_$i194: i32, in_$i195: i16, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i16, in_$i201: i32, in_$i202: i16, in_$i203: i16, in_$i204: i32, in_$i205: i16, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i16, in_$i211: i32, in_$i212: i16, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i16, in_$i218: i32, in_$i219: i16, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i224: i16, in_$i225: i32, in_$i226: i16, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i231: i16, in_$i232: i32, in_$i233: i16, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i16, in_$i239: i32, in_$i240: i16, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i16, in_$i246: i32, in_$i247: i16, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i16, in_$i253: i32, in_$i254: i16, in_$i255: i16, in_$i256: i32, in_$i257: i16, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i16, in_$i263: i32, in_$i264: i16, in_$i265: i16, in_$i266: i32, in_$i267: i16, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i16, in_$i273: i32, in_$i274: i16, in_$i275: i16, in_$i276: i32, in_$i277: i16, in_$i279: i32, in_$i280: i1, in_$i281: i32, in_$i282: i32, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i32, in_$p291: ref, in_$i292: i32, in_$i293: i32, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i32, in_$p299: ref, in_$i300: i32, in_$i301: i32, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$p306: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$p311: ref, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$p316: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i1, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i64, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i336: i64, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$i341: i64, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i346: i32, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i32, in_$i355: i1, in_$p356: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i376: i64, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$i381: i64, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$i386: i64, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$p398: ref, in_$i399: i32, in_$i400: i32, in_$i401: i1, in_$p402: ref, in_$p403: ref, in_$i404: i32, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$p409: ref, in_$i410: i32, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$p415: ref, in_$i416: i32, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$i421: i32, in_$i422: i1, in_$p423: ref, in_$i424: i32, in_$i425: i1, in_$p426: ref, in_$i427: i32, in_$i428: i1, in_$p429: ref, in_$i430: i16, in_$i431: i32, in_$i432: i16, in_$i433: i16, in_$i434: i32, in_$i435: i16, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$i440: i16, in_$i441: i32, in_$i442: i16, in_$i443: i16, in_$i444: i32, in_$i445: i16, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i450: i16, in_$i451: i32, in_$i452: i16, in_$i453: i16, in_$i454: i32, in_$i455: i16, in_$i457: i32, in_$i458: i1, in_$p459: ref, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i469: i32, in_$i470: i1, in_$p471: ref, in_$p472: ref, in_$i474: i32, in_$i475: i1, in_$p476: ref, in_$p477: ref, in_$i479: i32, in_$i480: i1, in_$p481: ref, in_$p482: ref, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$i487: i32, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$i492: i32, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$i497: i32, in_$i498: i32, in_$i499: i32, in_$i500: i1, in_$p501: ref, in_$i502: i8, in_$i503: i1, in_$i505: i32, in_$i506: i1, in_$p507: ref, in_$i508: i8, in_$i509: i1, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$i514: i8, in_$i515: i1, in_$i517: i32, in_$i518: i1, in_$p519: ref, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i529: i32, in_$i530: i1, in_$p531: ref, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$i537: i32, in_$i538: i1, in_$p539: ref, in_$i541: i32, in_$i542: i1, in_$i543: i32, in_$i544: i1, in_$i545: i1, in_$i546: i1, in_$i547: i1, in_$i548: i1, in_$i549: i1, in_$i550: i1, in_$i551: i1, in_$i552: i32, in_$i553: i1, in_$p554: ref, in_$i555: i32, in_$i556: i32, in_$i557: i32, in_$i558: i1, in_$i560: i32, in_$i561: i1, in_$i563: i32, in_$i564: i1, in_$i566: i32, in_$i567: i1, in_$p568: ref, in_$p569: ref, in_$i571: i32, in_$i572: i1, in_$p573: ref, in_$p574: ref, in_$i576: i32, in_$i577: i1, in_$p578: ref, in_$p579: ref, in_$i581: i32, in_$i582: i1, in_$i584: i32, in_$i585: i1, in_$i587: i32, in_$i588: i1, in_$i590: i32, in_$i591: i1, in_$p592: ref, in_$p593: ref, in_$p594: ref, in_$i596: i32, in_$i597: i1, in_$p598: ref, in_$p599: ref, in_$p600: ref, in_$i602: i32, in_$i603: i1, in_$p604: ref, in_$p605: ref, in_$p606: ref, in_$i608: i32, in_$i609: i1, in_$i611: i32, in_$i612: i32, in_$i613: i32, in_$i614: i1, in_$i616: i32, in_$i617: i32, in_$i618: i32, in_$i619: i1, in_$i621: i32, in_$i622: i1, in_$i623: i32, in_$i624: i1, in_$i625: i32, in_$i626: i1, in_$i627: i1, in_$i628: i1, in_$i629: i32, in_$i630: i1, in_$i631: i32, in_$i632: i1, in_$i633: i32, in_$i634: i1, in_$i635: i32, in_$i636: i32, in_$i637: i1, in_$i638: i32, in_$i639: i1, in_$i640: i32, in_$i641: i1, in_$i642: i32, in_$i643: i1, in_$i644: i32, in_$i645: i1, in_$i646: i64, in_$i648: i32, in_$i649: i1, in_$i650: i32, in_$i651: i1, in_$i652: i32, in_$i653: i1, in_$i654: i1, in_$i655: i1, in_$i656: i32, in_$i657: i1, in_$p658: ref, in_$i659: i32, in_$i660: i1, in_$p661: ref, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i64, in_vslice_dummy_var_113: i64, in_vslice_dummy_var_114: i64, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i64, in_vslice_dummy_var_117: i64, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i16, in_vslice_dummy_var_129: i16, in_vslice_dummy_var_130: i16, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: ref, in_vslice_dummy_var_140: ref, in_vslice_dummy_var_141: ref, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32) returns (out_$i101: i32, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i16, out_$i145: i32, out_$i146: i16, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i16, out_$i152: i32, out_$i153: i16, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i16, out_$i159: i32, out_$i160: i16, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$p165: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i16, out_$i181: i32, out_$i182: i16, out_$i183: i16, out_$i184: i32, out_$i185: i16, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i16, out_$i191: i32, out_$i192: i16, out_$i193: i16, out_$i194: i32, out_$i195: i16, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i16, out_$i201: i32, out_$i202: i16, out_$i203: i16, out_$i204: i32, out_$i205: i16, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i16, out_$i211: i32, out_$i212: i16, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i16, out_$i218: i32, out_$i219: i16, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i224: i16, out_$i225: i32, out_$i226: i16, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i231: i16, out_$i232: i32, out_$i233: i16, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i16, out_$i239: i32, out_$i240: i16, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i16, out_$i246: i32, out_$i247: i16, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i16, out_$i253: i32, out_$i254: i16, out_$i255: i16, out_$i256: i32, out_$i257: i16, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i16, out_$i263: i32, out_$i264: i16, out_$i265: i16, out_$i266: i32, out_$i267: i16, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i16, out_$i273: i32, out_$i274: i16, out_$i275: i16, out_$i276: i32, out_$i277: i16, out_$i279: i32, out_$i280: i1, out_$i281: i32, out_$i282: i32, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i32, out_$p291: ref, out_$i292: i32, out_$i293: i32, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i32, out_$p299: ref, out_$i300: i32, out_$i301: i32, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$p306: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$p311: ref, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$p316: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i1, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i64, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i336: i64, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$i341: i64, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i346: i32, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i32, out_$i355: i1, out_$p356: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i376: i64, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$i381: i64, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$i386: i64, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$p398: ref, out_$i399: i32, out_$i400: i32, out_$i401: i1, out_$p402: ref, out_$p403: ref, out_$i404: i32, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$p409: ref, out_$i410: i32, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$p415: ref, out_$i416: i32, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$i421: i32, out_$i422: i1, out_$p423: ref, out_$i424: i32, out_$i425: i1, out_$p426: ref, out_$i427: i32, out_$i428: i1, out_$p429: ref, out_$i430: i16, out_$i431: i32, out_$i432: i16, out_$i433: i16, out_$i434: i32, out_$i435: i16, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$i440: i16, out_$i441: i32, out_$i442: i16, out_$i443: i16, out_$i444: i32, out_$i445: i16, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i450: i16, out_$i451: i32, out_$i452: i16, out_$i453: i16, out_$i454: i32, out_$i455: i16, out_$i457: i32, out_$i458: i1, out_$p459: ref, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i469: i32, out_$i470: i1, out_$p471: ref, out_$p472: ref, out_$i474: i32, out_$i475: i1, out_$p476: ref, out_$p477: ref, out_$i479: i32, out_$i480: i1, out_$p481: ref, out_$p482: ref, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$i487: i32, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$i492: i32, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$i497: i32, out_$i498: i32, out_$i499: i32, out_$i500: i1, out_$p501: ref, out_$i502: i8, out_$i503: i1, out_$i505: i32, out_$i506: i1, out_$p507: ref, out_$i508: i8, out_$i509: i1, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$i514: i8, out_$i515: i1, out_$i517: i32, out_$i518: i1, out_$p519: ref, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i529: i32, out_$i530: i1, out_$p531: ref, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$i537: i32, out_$i538: i1, out_$p539: ref, out_$i541: i32, out_$i542: i1, out_$i543: i32, out_$i544: i1, out_$i545: i1, out_$i546: i1, out_$i547: i1, out_$i548: i1, out_$i549: i1, out_$i550: i1, out_$i551: i1, out_$i552: i32, out_$i553: i1, out_$p554: ref, out_$i555: i32, out_$i556: i32, out_$i557: i32, out_$i558: i1, out_$i560: i32, out_$i561: i1, out_$i563: i32, out_$i564: i1, out_$i566: i32, out_$i567: i1, out_$p568: ref, out_$p569: ref, out_$i571: i32, out_$i572: i1, out_$p573: ref, out_$p574: ref, out_$i576: i32, out_$i577: i1, out_$p578: ref, out_$p579: ref, out_$i581: i32, out_$i582: i1, out_$i584: i32, out_$i585: i1, out_$i587: i32, out_$i588: i1, out_$i590: i32, out_$i591: i1, out_$p592: ref, out_$p593: ref, out_$p594: ref, out_$i596: i32, out_$i597: i1, out_$p598: ref, out_$p599: ref, out_$p600: ref, out_$i602: i32, out_$i603: i1, out_$p604: ref, out_$p605: ref, out_$p606: ref, out_$i608: i32, out_$i609: i1, out_$i611: i32, out_$i612: i32, out_$i613: i32, out_$i614: i1, out_$i616: i32, out_$i617: i32, out_$i618: i32, out_$i619: i1, out_$i621: i32, out_$i622: i1, out_$i623: i32, out_$i624: i1, out_$i625: i32, out_$i626: i1, out_$i627: i1, out_$i628: i1, out_$i629: i32, out_$i630: i1, out_$i631: i32, out_$i632: i1, out_$i633: i32, out_$i634: i1, out_$i635: i32, out_$i636: i32, out_$i637: i1, out_$i638: i32, out_$i639: i1, out_$i640: i32, out_$i641: i1, out_$i642: i32, out_$i643: i1, out_$i644: i32, out_$i645: i1, out_$i646: i64, out_$i648: i32, out_$i649: i1, out_$i650: i32, out_$i651: i1, out_$i652: i32, out_$i653: i1, out_$i654: i1, out_$i655: i1, out_$i656: i32, out_$i657: i1, out_$p658: ref, out_$i659: i32, out_$i660: i1, out_$p661: ref, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i64, out_vslice_dummy_var_113: i64, out_vslice_dummy_var_114: i64, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i64, out_vslice_dummy_var_117: i64, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i16, out_vslice_dummy_var_129: i16, out_vslice_dummy_var_130: i16, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: ref, out_vslice_dummy_var_140: ref, out_vslice_dummy_var_141: ref, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32)
{

  entry:
    out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i162, out_$i163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$i300, out_$i301, out_$i303, out_$i304, out_$p305, out_$p306, out_$i308, out_$i309, out_$p310, out_$p311, out_$i313, out_$i314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$i336, out_$i338, out_$i339, out_$p340, out_$i341, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$p356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i378, out_$i379, out_$p380, out_$i381, out_$i383, out_$i384, out_$p385, out_$i386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$i397, out_$p398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p403, out_$i404, out_$i406, out_$i407, out_$p408, out_$p409, out_$i410, out_$i412, out_$i413, out_$p414, out_$p415, out_$i416, out_$i418, out_$i419, out_$p420, out_$i421, out_$i422, out_$p423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i457, out_$i458, out_$p459, out_$i461, out_$i462, out_$p463, out_$i465, out_$i466, out_$p467, out_$i469, out_$i470, out_$p471, out_$p472, out_$i474, out_$i475, out_$p476, out_$p477, out_$i479, out_$i480, out_$p481, out_$p482, out_$i484, out_$i485, out_$p486, out_$i487, out_$i489, out_$i490, out_$p491, out_$i492, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i499, out_$i500, out_$p501, out_$i502, out_$i503, out_$i505, out_$i506, out_$p507, out_$i508, out_$i509, out_$i511, out_$i512, out_$p513, out_$i514, out_$i515, out_$i517, out_$i518, out_$p519, out_$i521, out_$i522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i541, out_$i542, out_$i543, out_$i544, out_$i545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p554, out_$i555, out_$i556, out_$i557, out_$i558, out_$i560, out_$i561, out_$i563, out_$i564, out_$i566, out_$i567, out_$p568, out_$p569, out_$i571, out_$i572, out_$p573, out_$p574, out_$i576, out_$i577, out_$p578, out_$p579, out_$i581, out_$i582, out_$i584, out_$i585, out_$i587, out_$i588, out_$i590, out_$i591, out_$p592, out_$p593, out_$p594, out_$i596, out_$i597, out_$p598, out_$p599, out_$p600, out_$i602, out_$i603, out_$p604, out_$p605, out_$p606, out_$i608, out_$i609, out_$i611, out_$i612, out_$i613, out_$i614, out_$i616, out_$i617, out_$i618, out_$i619, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$i627, out_$i628, out_$i629, out_$i630, out_$i631, out_$i632, out_$i633, out_$i634, out_$i635, out_$i636, out_$i637, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$i643, out_$i644, out_$i645, out_$i646, out_$i648, out_$i649, out_$i650, out_$i651, out_$i652, out_$i653, out_$i654, out_$i655, out_$i656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p661, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158 := in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$p143, in_$i144, in_$i145, in_$i146, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$i153, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$i160, in_$i162, in_$i163, in_$p164, in_$p165, in_$i167, in_$i168, in_$p169, in_$p170, in_$i172, in_$i173, in_$p174, in_$p175, in_$i177, in_$i178, in_$p179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i207, in_$i208, in_$p209, in_$i210, in_$i211, in_$i212, in_$i214, in_$i215, in_$p216, in_$i217, in_$i218, in_$i219, in_$i221, in_$i222, in_$p223, in_$i224, in_$i225, in_$i226, in_$i228, in_$i229, in_$p230, in_$i231, in_$i232, in_$i233, in_$i235, in_$i236, in_$p237, in_$i238, in_$i239, in_$i240, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i247, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i259, in_$i260, in_$p261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i269, in_$i270, in_$p271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i279, in_$i280, in_$i281, in_$i282, in_$p283, in_$i284, in_$i285, in_$i287, in_$i288, in_$i289, in_$i290, in_$p291, in_$i292, in_$i293, in_$i295, in_$i296, in_$i297, in_$i298, in_$p299, in_$i300, in_$i301, in_$i303, in_$i304, in_$p305, in_$p306, in_$i308, in_$i309, in_$p310, in_$p311, in_$i313, in_$i314, in_$p315, in_$p316, in_$i318, in_$i319, in_$p320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$p326, in_$i328, in_$i329, in_$p330, in_$i331, in_$i333, in_$i334, in_$p335, in_$i336, in_$i338, in_$i339, in_$p340, in_$i341, in_$i343, in_$i344, in_$p345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$p353, in_$i354, in_$i355, in_$p356, in_$i357, in_$i358, in_$p359, in_$i360, in_$i361, in_$p362, in_$i364, in_$i365, in_$p366, in_$i367, in_$i368, in_$p369, in_$i370, in_$i371, in_$p372, in_$i373, in_$i374, in_$p375, in_$i376, in_$i378, in_$i379, in_$p380, in_$i381, in_$i383, in_$i384, in_$p385, in_$i386, in_$i388, in_$i389, in_$p390, in_$i391, in_$i392, in_$i393, in_$p394, in_$i395, in_$i396, in_$i397, in_$p398, in_$i399, in_$i400, in_$i401, in_$p402, in_$p403, in_$i404, in_$i406, in_$i407, in_$p408, in_$p409, in_$i410, in_$i412, in_$i413, in_$p414, in_$p415, in_$i416, in_$i418, in_$i419, in_$p420, in_$i421, in_$i422, in_$p423, in_$i424, in_$i425, in_$p426, in_$i427, in_$i428, in_$p429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i437, in_$i438, in_$p439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i447, in_$i448, in_$p449, in_$i450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i455, in_$i457, in_$i458, in_$p459, in_$i461, in_$i462, in_$p463, in_$i465, in_$i466, in_$p467, in_$i469, in_$i470, in_$p471, in_$p472, in_$i474, in_$i475, in_$p476, in_$p477, in_$i479, in_$i480, in_$p481, in_$p482, in_$i484, in_$i485, in_$p486, in_$i487, in_$i489, in_$i490, in_$p491, in_$i492, in_$i494, in_$i495, in_$p496, in_$i497, in_$i498, in_$i499, in_$i500, in_$p501, in_$i502, in_$i503, in_$i505, in_$i506, in_$p507, in_$i508, in_$i509, in_$i511, in_$i512, in_$p513, in_$i514, in_$i515, in_$i517, in_$i518, in_$p519, in_$i521, in_$i522, in_$p523, in_$i525, in_$i526, in_$p527, in_$i529, in_$i530, in_$p531, in_$i533, in_$i534, in_$p535, in_$i537, in_$i538, in_$p539, in_$i541, in_$i542, in_$i543, in_$i544, in_$i545, in_$i546, in_$i547, in_$i548, in_$i549, in_$i550, in_$i551, in_$i552, in_$i553, in_$p554, in_$i555, in_$i556, in_$i557, in_$i558, in_$i560, in_$i561, in_$i563, in_$i564, in_$i566, in_$i567, in_$p568, in_$p569, in_$i571, in_$i572, in_$p573, in_$p574, in_$i576, in_$i577, in_$p578, in_$p579, in_$i581, in_$i582, in_$i584, in_$i585, in_$i587, in_$i588, in_$i590, in_$i591, in_$p592, in_$p593, in_$p594, in_$i596, in_$i597, in_$p598, in_$p599, in_$p600, in_$i602, in_$i603, in_$p604, in_$p605, in_$p606, in_$i608, in_$i609, in_$i611, in_$i612, in_$i613, in_$i614, in_$i616, in_$i617, in_$i618, in_$i619, in_$i621, in_$i622, in_$i623, in_$i624, in_$i625, in_$i626, in_$i627, in_$i628, in_$i629, in_$i630, in_$i631, in_$i632, in_$i633, in_$i634, in_$i635, in_$i636, in_$i637, in_$i638, in_$i639, in_$i640, in_$i641, in_$i642, in_$i643, in_$i644, in_$i645, in_$i646, in_$i648, in_$i649, in_$i650, in_$i651, in_$i652, in_$i653, in_$i654, in_$i655, in_$i656, in_$i657, in_$p658, in_$i659, in_$i660, in_$p661, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1525} out_$i101 := __VERIFIER_nondet_int();
    call {:si_unique_call 1526} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i101);
    call {:si_unique_call 1527} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i101);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb300_dummy;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb21:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6899;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} out_vslice_dummy_var_89 := switchdev_port_fdb_del(in_$p29, in_$p45, out_$p157, in_$p37, out_$i160);
    goto corral_source_split_6898;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    out_$i160 := $trunc.i32.i16(out_$i159);
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    out_$i159 := $zext.i16.i32(out_$i158);
    goto corral_source_split_6896;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i16($M.0, in_$p4);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$p157 := $M.27;
    goto corral_source_split_6894;

  $bb86:
    assume out_$i156 == 1;
    goto corral_source_split_6893;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 2);
    goto corral_source_split_6891;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i155 := $M.37;
    goto corral_source_split_6890;

  $bb84:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} out_vslice_dummy_var_88 := switchdev_port_fdb_del(in_$p29, in_$p45, out_$p150, in_$p37, out_$i153);
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$i153 := $trunc.i32.i16(out_$i152);
    goto corral_source_split_6886;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i152 := $zext.i16.i32(out_$i151);
    goto corral_source_split_6885;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i16($M.0, in_$p4);
    goto corral_source_split_6884;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$p150 := $M.27;
    goto corral_source_split_6883;

  $bb83:
    assume out_$i149 == 1;
    goto corral_source_split_6882;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 3);
    goto corral_source_split_6880;

  $bb82:
    assume {:verifier.code 0} true;
    out_$i148 := $M.37;
    goto corral_source_split_6879;

  $bb81:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} out_vslice_dummy_var_87 := switchdev_port_fdb_del(in_$p29, in_$p45, out_$p143, in_$p37, out_$i146);
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    out_$i146 := $trunc.i32.i16(out_$i145);
    goto corral_source_split_6875;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i16.i32(out_$i144);
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i16($M.0, in_$p4);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$p143 := $M.27;
    goto corral_source_split_6872;

  $bb80:
    assume out_$i142 == 1;
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 1);
    goto corral_source_split_6869;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$i141 := $M.37;
    goto corral_source_split_6868;

  $bb78:
    assume out_$i140 == 1;
    goto corral_source_split_6867;

  $bb74:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i112, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb68:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i112, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb54:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i112, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb23:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i112, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i112, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6761:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1528} out_$i112 := __VERIFIER_nondet_int();
    call {:si_unique_call 1529} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i112);
    call {:si_unique_call 1530} {:cexpr "tmp___22"} boogie_si_record_i32(out_$i112);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i111 == 1;
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i32(out_$i110, 0);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$i110 := $M.37;
    goto corral_source_split_6758;

  $bb18:
    assume out_$i109 == 1;
    goto corral_source_split_6757;

  $bb14:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i101, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i101, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i101, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb97:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6923;

  SeqInstr_183:
    goto corral_source_split_6922;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} out_vslice_dummy_var_92 := team_add_slave(out_$p174, out_$p175);
    goto SeqInstr_182;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$p175 := $M.27;
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    out_$p174 := $M.27;
    goto corral_source_split_6920;

  $bb96:
    assume out_$i173 == 1;
    goto corral_source_split_6919;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 2);
    goto corral_source_split_6917;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i172 := $M.37;
    goto corral_source_split_6916;

  $bb94:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_6914;

  SeqInstr_180:
    goto corral_source_split_6913;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_vslice_dummy_var_91 := team_add_slave(out_$p169, out_$p170);
    goto SeqInstr_179;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    out_$p170 := $M.27;
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$p169 := $M.27;
    goto corral_source_split_6911;

  $bb93:
    assume out_$i168 == 1;
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 3);
    goto corral_source_split_6908;

  $bb92:
    assume {:verifier.code 0} true;
    out_$i167 := $M.37;
    goto corral_source_split_6907;

  $bb91:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1538} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6905;

  SeqInstr_177:
    goto corral_source_split_6904;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} out_vslice_dummy_var_90 := team_add_slave(out_$p164, out_$p165);
    goto SeqInstr_176;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    out_$p165 := $M.27;
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    out_$p164 := $M.27;
    goto corral_source_split_6902;

  $bb90:
    assume out_$i163 == 1;
    goto corral_source_split_6901;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 1);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$i162 := $M.37;
    goto corral_source_split_6860;

  $bb76:
    assume out_$i139 == 1;
    goto corral_source_split_6859;

  $bb75:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    out_$i139 := $slt.i32(out_$i112, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb106:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6962;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} out_vslice_dummy_var_95 := team_vlan_rx_kill_vid(out_$p199, out_$i202, out_$i205);
    goto corral_source_split_6961;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    out_$i205 := $trunc.i32.i16(out_$i204);
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    out_$i204 := $zext.i16.i32(out_$i203);
    goto corral_source_split_6959;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i16($M.0, in_$p1);
    goto corral_source_split_6958;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    out_$i202 := $trunc.i32.i16(out_$i201);
    goto corral_source_split_6957;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    out_$i201 := $zext.i16.i32(out_$i200);
    goto corral_source_split_6956;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i16($M.0, in_$p6);
    goto corral_source_split_6955;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$p199 := $M.27;
    goto corral_source_split_6954;

  $bb105:
    assume out_$i198 == 1;
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 2);
    goto corral_source_split_6951;

  $bb104:
    assume {:verifier.code 0} true;
    out_$i197 := $M.37;
    goto corral_source_split_6950;

  $bb103:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_6948;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_vslice_dummy_var_94 := team_vlan_rx_kill_vid(out_$p189, out_$i192, out_$i195);
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    out_$i195 := $trunc.i32.i16(out_$i194);
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    out_$i194 := $zext.i16.i32(out_$i193);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i16($M.0, in_$p1);
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    out_$i192 := $trunc.i32.i16(out_$i191);
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i16.i32(out_$i190);
    goto corral_source_split_6942;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i16($M.0, in_$p6);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    out_$p189 := $M.27;
    goto corral_source_split_6940;

  $bb102:
    assume out_$i188 == 1;
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 3);
    goto corral_source_split_6937;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i187 := $M.37;
    goto corral_source_split_6936;

  $bb100:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} out_vslice_dummy_var_93 := team_vlan_rx_kill_vid(out_$p179, out_$i182, out_$i185);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$i185 := $trunc.i32.i16(out_$i184);
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i184 := $zext.i16.i32(out_$i183);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i16($M.0, in_$p1);
    goto corral_source_split_6930;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    out_$i182 := $trunc.i32.i16(out_$i181);
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$i181 := $zext.i16.i32(out_$i180);
    goto corral_source_split_6928;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i16($M.0, in_$p6);
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$p179 := $M.27;
    goto corral_source_split_6926;

  $bb99:
    assume out_$i178 == 1;
    goto corral_source_split_6925;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 1);
    goto corral_source_split_6865;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i177 := $M.37;
    goto corral_source_split_6864;

  $bb77:
    assume !(out_$i139 == 1);
    goto corral_source_split_6863;

  $bb115:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} out_vslice_dummy_var_98 := switchdev_port_bridge_setlink(out_$p223, in_$p41, out_$i226);
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$i226 := $trunc.i32.i16(out_$i225);
    goto corral_source_split_6990;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$i225 := $zext.i16.i32(out_$i224);
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    out_$i224 := $load.i16($M.0, in_$p16);
    goto corral_source_split_6988;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    out_$p223 := $M.27;
    goto corral_source_split_6987;

  $bb114:
    assume out_$i222 == 1;
    goto corral_source_split_6986;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 2);
    goto corral_source_split_6984;

  $bb113:
    assume {:verifier.code 0} true;
    out_$i221 := $M.37;
    goto corral_source_split_6983;

  $bb112:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_6981;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} out_vslice_dummy_var_97 := switchdev_port_bridge_setlink(out_$p216, in_$p41, out_$i219);
    goto corral_source_split_6980;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    out_$i219 := $trunc.i32.i16(out_$i218);
    goto corral_source_split_6979;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    out_$i218 := $zext.i16.i32(out_$i217);
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$i217 := $load.i16($M.0, in_$p16);
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    out_$p216 := $M.27;
    goto corral_source_split_6976;

  $bb111:
    assume out_$i215 == 1;
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 3);
    goto corral_source_split_6973;

  $bb110:
    assume {:verifier.code 0} true;
    out_$i214 := $M.37;
    goto corral_source_split_6972;

  $bb109:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6970;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} out_vslice_dummy_var_96 := switchdev_port_bridge_setlink(out_$p209, in_$p41, out_$i212);
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    out_$i212 := $trunc.i32.i16(out_$i211);
    goto corral_source_split_6968;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i211 := $zext.i16.i32(out_$i210);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i16($M.0, in_$p16);
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$p209 := $M.27;
    goto corral_source_split_6965;

  $bb108:
    assume out_$i208 == 1;
    goto corral_source_split_6964;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 1);
    goto corral_source_split_6849;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    out_$i207 := $M.37;
    goto corral_source_split_6848;

  $bb70:
    assume out_$i136 == 1;
    goto corral_source_split_6847;

  $bb69:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i112, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb124:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} out_vslice_dummy_var_101 := switchdev_port_bridge_dellink(out_$p244, in_$p27, out_$i247);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$i247 := $trunc.i32.i16(out_$i246);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$i246 := $zext.i16.i32(out_$i245);
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i16($M.0, in_$p9);
    goto corral_source_split_7018;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    out_$p244 := $M.27;
    goto corral_source_split_7017;

  $bb123:
    assume out_$i243 == 1;
    goto corral_source_split_7016;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 2);
    goto corral_source_split_7014;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i242 := $M.37;
    goto corral_source_split_7013;

  $bb121:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1558} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7011;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} out_vslice_dummy_var_100 := switchdev_port_bridge_dellink(out_$p237, in_$p27, out_$i240);
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    out_$i240 := $trunc.i32.i16(out_$i239);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$i239 := $zext.i16.i32(out_$i238);
    goto corral_source_split_7008;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    out_$i238 := $load.i16($M.0, in_$p9);
    goto corral_source_split_7007;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    out_$p237 := $M.27;
    goto corral_source_split_7006;

  $bb120:
    assume out_$i236 == 1;
    goto corral_source_split_7005;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 3);
    goto corral_source_split_7003;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i235 := $M.37;
    goto corral_source_split_7002;

  $bb118:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1556} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} out_vslice_dummy_var_99 := switchdev_port_bridge_dellink(out_$p230, in_$p27, out_$i233);
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$i233 := $trunc.i32.i16(out_$i232);
    goto corral_source_split_6998;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i232 := $zext.i16.i32(out_$i231);
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i16($M.0, in_$p9);
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$p230 := $M.27;
    goto corral_source_split_6995;

  $bb117:
    assume out_$i229 == 1;
    goto corral_source_split_6994;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 1);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$i228 := $M.37;
    goto corral_source_split_6852;

  $bb72:
    assume out_$i137 == 1;
    goto corral_source_split_6851;

  $bb71:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i112, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb133:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1566} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7061;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} out_vslice_dummy_var_104 := team_vlan_rx_add_vid(out_$p271, out_$i274, out_$i277);
    goto corral_source_split_7060;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    out_$i277 := $trunc.i32.i16(out_$i276);
    goto corral_source_split_7059;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    out_$i276 := $zext.i16.i32(out_$i275);
    goto corral_source_split_7058;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    out_$i275 := $load.i16($M.0, in_$p13);
    goto corral_source_split_7057;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    out_$i274 := $trunc.i32.i16(out_$i273);
    goto corral_source_split_7056;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$i273 := $zext.i16.i32(out_$i272);
    goto corral_source_split_7055;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    out_$i272 := $load.i16($M.0, in_$p14);
    goto corral_source_split_7054;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    out_$p271 := $M.27;
    goto corral_source_split_7053;

  $bb132:
    assume out_$i270 == 1;
    goto corral_source_split_7052;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 2);
    goto corral_source_split_7050;

  $bb131:
    assume {:verifier.code 0} true;
    out_$i269 := $M.37;
    goto corral_source_split_7049;

  $bb130:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1564} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7047;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} out_vslice_dummy_var_103 := team_vlan_rx_add_vid(out_$p261, out_$i264, out_$i267);
    goto corral_source_split_7046;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    out_$i267 := $trunc.i32.i16(out_$i266);
    goto corral_source_split_7045;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    out_$i266 := $zext.i16.i32(out_$i265);
    goto corral_source_split_7044;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i16($M.0, in_$p13);
    goto corral_source_split_7043;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    out_$i264 := $trunc.i32.i16(out_$i263);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i263 := $zext.i16.i32(out_$i262);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i16($M.0, in_$p14);
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$p261 := $M.27;
    goto corral_source_split_7039;

  $bb129:
    assume out_$i260 == 1;
    goto corral_source_split_7038;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 3);
    goto corral_source_split_7036;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i259 := $M.37;
    goto corral_source_split_7035;

  $bb127:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1562} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} out_vslice_dummy_var_102 := team_vlan_rx_add_vid(out_$p251, out_$i254, out_$i257);
    goto corral_source_split_7032;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    out_$i257 := $trunc.i32.i16(out_$i256);
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    out_$i256 := $zext.i16.i32(out_$i255);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$i255 := $load.i16($M.0, in_$p13);
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i254 := $trunc.i32.i16(out_$i253);
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    out_$i253 := $zext.i16.i32(out_$i252);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i16($M.0, in_$p14);
    goto corral_source_split_7026;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    out_$p251 := $M.27;
    goto corral_source_split_7025;

  $bb126:
    assume out_$i250 == 1;
    goto corral_source_split_7024;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 1);
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$i249 := $M.37;
    goto corral_source_split_6856;

  $bb73:
    assume !(out_$i137 == 1);
    goto corral_source_split_6855;

  $bb142:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1572} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7094;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} out_vslice_dummy_var_107 := switchdev_port_bridge_getlink(in_$p52, out_$i297, out_$i298, out_$p299, out_$i300, out_$i301);
    goto corral_source_split_7093;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i32($M.0, in_$p17);
    goto corral_source_split_7092;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    out_$i300 := $load.i32($M.0, in_$p18);
    goto corral_source_split_7091;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    out_$p299 := $M.27;
    goto corral_source_split_7090;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$i298 := $load.i32($M.0, in_$p2);
    goto corral_source_split_7089;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    out_$i297 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7088;

  $bb141:
    assume out_$i296 == 1;
    goto corral_source_split_7087;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 2);
    goto corral_source_split_7085;

  $bb140:
    assume {:verifier.code 0} true;
    out_$i295 := $M.37;
    goto corral_source_split_7084;

  $bb139:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7082;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} out_vslice_dummy_var_106 := switchdev_port_bridge_getlink(in_$p52, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293);
    goto corral_source_split_7081;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    out_$i293 := $load.i32($M.0, in_$p17);
    goto corral_source_split_7080;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    out_$i292 := $load.i32($M.0, in_$p18);
    goto corral_source_split_7079;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    out_$p291 := $M.27;
    goto corral_source_split_7078;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    out_$i290 := $load.i32($M.0, in_$p2);
    goto corral_source_split_7077;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7076;

  $bb138:
    assume out_$i288 == 1;
    goto corral_source_split_7075;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 3);
    goto corral_source_split_7073;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i287 := $M.37;
    goto corral_source_split_7072;

  $bb136:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1568} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7070;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} out_vslice_dummy_var_105 := switchdev_port_bridge_getlink(in_$p52, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285);
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i32($M.0, in_$p17);
    goto corral_source_split_7068;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$i284 := $load.i32($M.0, in_$p18);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$p283 := $M.27;
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$i282 := $load.i32($M.0, in_$p2);
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    out_$i281 := $load.i32($M.0, in_$p5);
    goto corral_source_split_7064;

  $bb135:
    assume out_$i280 == 1;
    goto corral_source_split_7063;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 1);
    goto corral_source_split_6837;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$i279 := $M.37;
    goto corral_source_split_6836;

  $bb64:
    assume out_$i133 == 1;
    goto corral_source_split_6835;

  $bb56:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i112, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb55:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i112, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb151:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7118;

  SeqInstr_192:
    goto corral_source_split_7117;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} out_vslice_dummy_var_110 := team_del_slave(out_$p315, out_$p316);
    goto SeqInstr_191;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    out_$p316 := $M.27;
    goto corral_source_split_7116;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    out_$p315 := $M.27;
    goto corral_source_split_7115;

  $bb150:
    assume out_$i314 == 1;
    goto corral_source_split_7114;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 2);
    goto corral_source_split_7112;

  $bb149:
    assume {:verifier.code 0} true;
    out_$i313 := $M.37;
    goto corral_source_split_7111;

  $bb148:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7109;

  SeqInstr_189:
    goto corral_source_split_7108;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} out_vslice_dummy_var_109 := team_del_slave(out_$p310, out_$p311);
    goto SeqInstr_188;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    out_$p311 := $M.27;
    goto corral_source_split_7107;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    out_$p310 := $M.27;
    goto corral_source_split_7106;

  $bb147:
    assume out_$i309 == 1;
    goto corral_source_split_7105;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 3);
    goto corral_source_split_7103;

  $bb146:
    assume {:verifier.code 0} true;
    out_$i308 := $M.37;
    goto corral_source_split_7102;

  $bb145:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1574} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7100;

  SeqInstr_186:
    goto corral_source_split_7099;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} out_vslice_dummy_var_108 := team_del_slave(out_$p305, out_$p306);
    goto SeqInstr_185;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    out_$p306 := $M.27;
    goto corral_source_split_7098;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$p305 := $M.27;
    goto corral_source_split_7097;

  $bb144:
    assume out_$i304 == 1;
    goto corral_source_split_7096;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 1);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$i303 := $M.37;
    goto corral_source_split_6840;

  $bb66:
    assume out_$i134 == 1;
    goto corral_source_split_6839;

  $bb65:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i112, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb154:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb156:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7128;

  $bb155:
    assume out_$i323 == 1;
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 0);
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    out_$i322 := $M.45;
    goto corral_source_split_7124;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.45 := out_$i321;
    call {:si_unique_call 1580} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i321);
    goto corral_source_split_7123;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} out_$i321 := team_open(out_$p320);
    goto corral_source_split_7122;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    out_$p320 := $M.27;
    goto corral_source_split_7121;

  $bb153:
    assume out_$i319 == 1;
    goto corral_source_split_7120;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 2);
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i318 := $M.37;
    goto corral_source_split_6844;

  $bb67:
    assume !(out_$i134 == 1);
    goto corral_source_split_6843;

  $bb160:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7133;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} out_vslice_dummy_var_111 := team_xmit(in_$p39, out_$p326);
    goto corral_source_split_7132;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    out_$p326 := $M.27;
    goto corral_source_split_7131;

  $bb159:
    assume out_$i325 == 1;
    goto corral_source_split_7130;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 3);
    goto corral_source_split_6829;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    out_$i324 := $M.37;
    goto corral_source_split_6828;

  $bb62:
    assume out_$i132 == 1;
    goto corral_source_split_6827;

  $bb58:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i112, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb57:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i112, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb169:
    assume !(out_$i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7157;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} out_vslice_dummy_var_114 := team_fix_features(out_$p340, out_$i341);
    goto corral_source_split_7156;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    out_$i341 := $load.i64($M.0, in_$p19);
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    out_$p340 := $M.27;
    goto corral_source_split_7154;

  $bb168:
    assume out_$i339 == 1;
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    out_$i339 := $eq.i32(out_$i338, 2);
    goto corral_source_split_7151;

  $bb167:
    assume {:verifier.code 0} true;
    out_$i338 := $M.37;
    goto corral_source_split_7150;

  $bb166:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7148;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} out_vslice_dummy_var_113 := team_fix_features(out_$p335, out_$i336);
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i64($M.0, in_$p19);
    goto corral_source_split_7146;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    out_$p335 := $M.27;
    goto corral_source_split_7145;

  $bb165:
    assume out_$i334 == 1;
    goto corral_source_split_7144;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 3);
    goto corral_source_split_7142;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i333 := $M.37;
    goto corral_source_split_7141;

  $bb163:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7139;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_vslice_dummy_var_112 := team_fix_features(out_$p330, out_$i331);
    goto corral_source_split_7138;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    out_$i331 := $load.i64($M.0, in_$p19);
    goto corral_source_split_7137;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    out_$p330 := $M.27;
    goto corral_source_split_7136;

  $bb162:
    assume out_$i329 == 1;
    goto corral_source_split_7135;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i328, 1);
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$i328 := $M.37;
    goto corral_source_split_6832;

  $bb63:
    assume !(out_$i132 == 1);
    goto corral_source_split_6831;

  $bb172:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb174:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $M.40 := out_$i350;
    call {:si_unique_call 1593} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i350);
    goto corral_source_split_7170;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$i350 := $add.i32(out_$i349, 1);
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    out_$i349 := $M.40;
    goto corral_source_split_7168;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7167;

  $bb173:
    assume out_$i348 == 1;
    goto corral_source_split_7166;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    out_$i348 := $eq.i32(out_$i347, 0);
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    out_$i347 := $M.46;
    goto corral_source_split_7163;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $M.46 := out_$i346;
    call {:si_unique_call 1591} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i346);
    goto corral_source_split_7162;

  SeqInstr_195:
    goto corral_source_split_7161;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} out_$i346 := team_init(out_$p345);
    goto SeqInstr_194;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    out_$p345 := $M.27;
    goto corral_source_split_7160;

  $bb171:
    assume out_$i344 == 1;
    goto corral_source_split_7159;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 1);
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    out_$i343 := $M.37;
    goto corral_source_split_6820;

  $bb60:
    assume out_$i131 == 1;
    goto corral_source_split_6819;

  $bb59:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i112, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb184:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1599} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7191;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} team_netpoll_cleanup(out_$p359);
    goto corral_source_split_7190;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    out_$p359 := $M.27;
    goto corral_source_split_7189;

  $bb183:
    assume out_$i358 == 1;
    goto corral_source_split_7188;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 2);
    goto corral_source_split_7186;

  $bb182:
    assume {:verifier.code 0} true;
    out_$i357 := $M.37;
    goto corral_source_split_7185;

  $bb181:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} team_netpoll_cleanup(out_$p356);
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$p356 := $M.27;
    goto corral_source_split_7181;

  $bb180:
    assume out_$i355 == 1;
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 3);
    goto corral_source_split_7178;

  $bb179:
    assume {:verifier.code 0} true;
    out_$i354 := $M.37;
    goto corral_source_split_7177;

  $bb178:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7175;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} team_netpoll_cleanup(out_$p353);
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$p353 := $M.27;
    goto corral_source_split_7173;

  $bb177:
    assume out_$i352 == 1;
    goto corral_source_split_7172;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 1);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i351 := $M.37;
    goto corral_source_split_6824;

  $bb61:
    assume !(out_$i131 == 1);
    goto corral_source_split_6823;

  $bb187:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7196;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} out_vslice_dummy_var_115 := team_close(out_$p362);
    goto corral_source_split_7195;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$p362 := $M.27;
    goto corral_source_split_7194;

  $bb186:
    assume out_$i361 == 1;
    goto corral_source_split_7193;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i360, 3);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$i360 := $M.37;
    goto corral_source_split_6808;

  $bb50:
    assume out_$i126 == 1;
    goto corral_source_split_6807;

  $bb42:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i112, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb25:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i112, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb24:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i112, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb196:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7217;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} team_set_rx_mode(out_$p372);
    goto corral_source_split_7216;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    out_$p372 := $M.27;
    goto corral_source_split_7215;

  $bb195:
    assume out_$i371 == 1;
    goto corral_source_split_7214;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 2);
    goto corral_source_split_7212;

  $bb194:
    assume {:verifier.code 0} true;
    out_$i370 := $M.37;
    goto corral_source_split_7211;

  $bb193:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7209;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} team_set_rx_mode(out_$p369);
    goto corral_source_split_7208;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    out_$p369 := $M.27;
    goto corral_source_split_7207;

  $bb192:
    assume out_$i368 == 1;
    goto corral_source_split_7206;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i367, 3);
    goto corral_source_split_7204;

  $bb191:
    assume {:verifier.code 0} true;
    out_$i367 := $M.37;
    goto corral_source_split_7203;

  $bb190:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1603} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7201;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} team_set_rx_mode(out_$p366);
    goto corral_source_split_7200;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    out_$p366 := $M.27;
    goto corral_source_split_7199;

  $bb189:
    assume out_$i365 == 1;
    goto corral_source_split_7198;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 1);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i364 := $M.37;
    goto corral_source_split_6812;

  $bb52:
    assume out_$i127 == 1;
    goto corral_source_split_6811;

  $bb51:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i112, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb205:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7241;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} out_vslice_dummy_var_118 := passthru_features_check(in_$p50, out_$p385, out_$i386);
    goto corral_source_split_7240;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    out_$i386 := $load.i64($M.0, in_$p0);
    goto corral_source_split_7239;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    out_$p385 := $M.27;
    goto corral_source_split_7238;

  $bb204:
    assume out_$i384 == 1;
    goto corral_source_split_7237;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i383, 2);
    goto corral_source_split_7235;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i383 := $M.37;
    goto corral_source_split_7234;

  $bb202:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7232;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_vslice_dummy_var_117 := passthru_features_check(in_$p50, out_$p380, out_$i381);
    goto corral_source_split_7231;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    out_$i381 := $load.i64($M.0, in_$p0);
    goto corral_source_split_7230;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    out_$p380 := $M.27;
    goto corral_source_split_7229;

  $bb201:
    assume out_$i379 == 1;
    goto corral_source_split_7228;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i378, 3);
    goto corral_source_split_7226;

  $bb200:
    assume {:verifier.code 0} true;
    out_$i378 := $M.37;
    goto corral_source_split_7225;

  $bb199:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7223;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} out_vslice_dummy_var_116 := passthru_features_check(in_$p50, out_$p375, out_$i376);
    goto corral_source_split_7222;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    out_$i376 := $load.i64($M.0, in_$p0);
    goto corral_source_split_7221;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    out_$p375 := $M.27;
    goto corral_source_split_7220;

  $bb198:
    assume out_$i374 == 1;
    goto corral_source_split_7219;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 1);
    goto corral_source_split_6817;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    out_$i373 := $M.37;
    goto corral_source_split_6816;

  $bb53:
    assume !(out_$i127 == 1);
    goto corral_source_split_6815;

  $bb214:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7265;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} team_change_rx_flags(out_$p398, out_$i399);
    goto corral_source_split_7264;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    out_$i399 := $load.i32($M.0, in_$p7);
    goto corral_source_split_7263;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$p398 := $M.27;
    goto corral_source_split_7262;

  $bb213:
    assume out_$i397 == 1;
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$i397 := $eq.i32(out_$i396, 2);
    goto corral_source_split_7259;

  $bb212:
    assume {:verifier.code 0} true;
    out_$i396 := $M.37;
    goto corral_source_split_7258;

  $bb211:
    assume !(out_$i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7256;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} team_change_rx_flags(out_$p394, out_$i395);
    goto corral_source_split_7255;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    out_$i395 := $load.i32($M.0, in_$p7);
    goto corral_source_split_7254;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    out_$p394 := $M.27;
    goto corral_source_split_7253;

  $bb210:
    assume out_$i393 == 1;
    goto corral_source_split_7252;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    out_$i393 := $eq.i32(out_$i392, 3);
    goto corral_source_split_7250;

  $bb209:
    assume {:verifier.code 0} true;
    out_$i392 := $M.37;
    goto corral_source_split_7249;

  $bb208:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7247;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} team_change_rx_flags(out_$p390, out_$i391);
    goto corral_source_split_7246;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    out_$i391 := $load.i32($M.0, in_$p7);
    goto corral_source_split_7245;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    out_$p390 := $M.27;
    goto corral_source_split_7244;

  $bb207:
    assume out_$i389 == 1;
    goto corral_source_split_7243;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i389 := $eq.i32(out_$i388, 1);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    out_$i388 := $M.37;
    goto corral_source_split_6800;

  $bb48:
    assume out_$i125 == 1;
    goto corral_source_split_6799;

  $bb44:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i112, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb43:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i112, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb223:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} out_vslice_dummy_var_121 := switchdev_port_fdb_dump(in_$p43, in_$p36, out_$p414, out_$p415, out_$i416);
    goto corral_source_split_7291;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    out_$i416 := $load.i32($M.0, in_$p15);
    goto corral_source_split_7290;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    out_$p415 := $M.27;
    goto corral_source_split_7289;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    out_$p414 := $M.27;
    goto corral_source_split_7288;

  $bb222:
    assume out_$i413 == 1;
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$i413 := $eq.i32(out_$i412, 2);
    goto corral_source_split_7285;

  $bb221:
    assume {:verifier.code 0} true;
    out_$i412 := $M.37;
    goto corral_source_split_7284;

  $bb220:
    assume !(out_$i407 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7282;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} out_vslice_dummy_var_120 := switchdev_port_fdb_dump(in_$p43, in_$p36, out_$p408, out_$p409, out_$i410);
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    out_$i410 := $load.i32($M.0, in_$p15);
    goto corral_source_split_7280;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    out_$p409 := $M.27;
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    out_$p408 := $M.27;
    goto corral_source_split_7278;

  $bb219:
    assume out_$i407 == 1;
    goto corral_source_split_7277;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i406, 3);
    goto corral_source_split_7275;

  $bb218:
    assume {:verifier.code 0} true;
    out_$i406 := $M.37;
    goto corral_source_split_7274;

  $bb217:
    assume !(out_$i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} out_vslice_dummy_var_119 := switchdev_port_fdb_dump(in_$p43, in_$p36, out_$p402, out_$p403, out_$i404);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$i404 := $load.i32($M.0, in_$p15);
    goto corral_source_split_7270;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$p403 := $M.27;
    goto corral_source_split_7269;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$p402 := $M.27;
    goto corral_source_split_7268;

  $bb216:
    assume out_$i401 == 1;
    goto corral_source_split_7267;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i401 := $eq.i32(out_$i400, 1);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    out_$i400 := $M.37;
    goto corral_source_split_6804;

  $bb49:
    assume !(out_$i125 == 1);
    goto corral_source_split_6803;

  $bb232:
    assume !(out_$i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} team_poll_controller(out_$p426);
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$p426 := $M.27;
    goto corral_source_split_7311;

  $bb231:
    assume out_$i425 == 1;
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    out_$i425 := $eq.i32(out_$i424, 2);
    goto corral_source_split_7308;

  $bb230:
    assume {:verifier.code 0} true;
    out_$i424 := $M.37;
    goto corral_source_split_7307;

  $bb229:
    assume !(out_$i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} team_poll_controller(out_$p423);
    goto corral_source_split_7304;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    out_$p423 := $M.27;
    goto corral_source_split_7303;

  $bb228:
    assume out_$i422 == 1;
    goto corral_source_split_7302;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    out_$i422 := $eq.i32(out_$i421, 3);
    goto corral_source_split_7300;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i421 := $M.37;
    goto corral_source_split_7299;

  $bb226:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} team_poll_controller(out_$p420);
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$p420 := $M.27;
    goto corral_source_split_7295;

  $bb225:
    assume out_$i419 == 1;
    goto corral_source_split_7294;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i419 := $eq.i32(out_$i418, 1);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$i418 := $M.37;
    goto corral_source_split_6792;

  $bb46:
    assume out_$i124 == 1;
    goto corral_source_split_6791;

  $bb45:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i112, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb241:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7352;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} out_vslice_dummy_var_124 := switchdev_port_fdb_add(in_$p47, in_$p22, out_$p449, in_$p48, out_$i452, out_$i455);
    goto corral_source_split_7351;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    out_$i455 := $trunc.i32.i16(out_$i454);
    goto corral_source_split_7350;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    out_$i454 := $zext.i16.i32(out_$i453);
    goto corral_source_split_7349;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    out_$i453 := $load.i16($M.0, in_$p12);
    goto corral_source_split_7348;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    out_$i452 := $trunc.i32.i16(out_$i451);
    goto corral_source_split_7347;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    out_$i451 := $zext.i16.i32(out_$i450);
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    out_$i450 := $load.i16($M.0, in_$p3);
    goto corral_source_split_7345;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    out_$p449 := $M.27;
    goto corral_source_split_7344;

  $bb240:
    assume out_$i448 == 1;
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    out_$i448 := $eq.i32(out_$i447, 2);
    goto corral_source_split_7341;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i447 := $M.37;
    goto corral_source_split_7340;

  $bb238:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} out_vslice_dummy_var_123 := switchdev_port_fdb_add(in_$p47, in_$p22, out_$p439, in_$p48, out_$i442, out_$i445);
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    out_$i445 := $trunc.i32.i16(out_$i444);
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i444 := $zext.i16.i32(out_$i443);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$i443 := $load.i16($M.0, in_$p12);
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    out_$i442 := $trunc.i32.i16(out_$i441);
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$i441 := $zext.i16.i32(out_$i440);
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$i440 := $load.i16($M.0, in_$p3);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$p439 := $M.27;
    goto corral_source_split_7330;

  $bb237:
    assume out_$i438 == 1;
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i438 := $eq.i32(out_$i437, 3);
    goto corral_source_split_7327;

  $bb236:
    assume {:verifier.code 0} true;
    out_$i437 := $M.37;
    goto corral_source_split_7326;

  $bb235:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} out_vslice_dummy_var_122 := switchdev_port_fdb_add(in_$p47, in_$p22, out_$p429, in_$p48, out_$i432, out_$i435);
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$i435 := $trunc.i32.i16(out_$i434);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i434 := $zext.i16.i32(out_$i433);
    goto corral_source_split_7321;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$i433 := $load.i16($M.0, in_$p12);
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    out_$i432 := $trunc.i32.i16(out_$i431);
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i431 := $zext.i16.i32(out_$i430);
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$i430 := $load.i16($M.0, in_$p3);
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$p429 := $M.27;
    goto corral_source_split_7316;

  $bb234:
    assume out_$i428 == 1;
    goto corral_source_split_7315;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i428 := $eq.i32(out_$i427, 1);
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i427 := $M.37;
    goto corral_source_split_6796;

  $bb47:
    assume !(out_$i124 == 1);
    goto corral_source_split_6795;

  $bb250:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7373;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} out_vslice_dummy_var_127 := team_netpoll_setup(out_$p467, in_$p24);
    goto corral_source_split_7372;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    out_$p467 := $M.27;
    goto corral_source_split_7371;

  $bb249:
    assume out_$i466 == 1;
    goto corral_source_split_7370;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i465, 2);
    goto corral_source_split_7368;

  $bb248:
    assume {:verifier.code 0} true;
    out_$i465 := $M.37;
    goto corral_source_split_7367;

  $bb247:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} out_vslice_dummy_var_126 := team_netpoll_setup(out_$p463, in_$p24);
    goto corral_source_split_7364;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    out_$p463 := $M.27;
    goto corral_source_split_7363;

  $bb246:
    assume out_$i462 == 1;
    goto corral_source_split_7362;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    out_$i462 := $eq.i32(out_$i461, 3);
    goto corral_source_split_7360;

  $bb245:
    assume {:verifier.code 0} true;
    out_$i461 := $M.37;
    goto corral_source_split_7359;

  $bb244:
    assume !(out_$i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7357;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} out_vslice_dummy_var_125 := team_netpoll_setup(out_$p459, in_$p24);
    goto corral_source_split_7356;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    out_$p459 := $M.27;
    goto corral_source_split_7355;

  $bb243:
    assume out_$i458 == 1;
    goto corral_source_split_7354;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    out_$i458 := $eq.i32(out_$i457, 1);
    goto corral_source_split_6781;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i457 := $M.37;
    goto corral_source_split_6780;

  $bb38:
    assume out_$i120 == 1;
    goto corral_source_split_6779;

  $bb27:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i112, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb26:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i112, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb259:
    assume !(out_$i480 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7397;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} out_vslice_dummy_var_130 := team_select_queue(out_$p481, in_$p34, in_$p32, out_$p482);
    goto corral_source_split_7396;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    out_$p482 := $load.ref($M.0, in_$p8);
    goto corral_source_split_7395;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    out_$p481 := $M.27;
    goto corral_source_split_7394;

  $bb258:
    assume out_$i480 == 1;
    goto corral_source_split_7393;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    out_$i480 := $eq.i32(out_$i479, 2);
    goto corral_source_split_7391;

  $bb257:
    assume {:verifier.code 0} true;
    out_$i479 := $M.37;
    goto corral_source_split_7390;

  $bb256:
    assume !(out_$i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7388;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} out_vslice_dummy_var_129 := team_select_queue(out_$p476, in_$p34, in_$p32, out_$p477);
    goto corral_source_split_7387;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    out_$p477 := $load.ref($M.0, in_$p8);
    goto corral_source_split_7386;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    out_$p476 := $M.27;
    goto corral_source_split_7385;

  $bb255:
    assume out_$i475 == 1;
    goto corral_source_split_7384;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    out_$i475 := $eq.i32(out_$i474, 3);
    goto corral_source_split_7382;

  $bb254:
    assume {:verifier.code 0} true;
    out_$i474 := $M.37;
    goto corral_source_split_7381;

  $bb253:
    assume !(out_$i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7379;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} out_vslice_dummy_var_128 := team_select_queue(out_$p471, in_$p34, in_$p32, out_$p472);
    goto corral_source_split_7378;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    out_$p472 := $load.ref($M.0, in_$p8);
    goto corral_source_split_7377;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    out_$p471 := $M.27;
    goto corral_source_split_7376;

  $bb252:
    assume out_$i470 == 1;
    goto corral_source_split_7375;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    out_$i470 := $eq.i32(out_$i469, 1);
    goto corral_source_split_6785;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    out_$i469 := $M.37;
    goto corral_source_split_6784;

  $bb40:
    assume out_$i121 == 1;
    goto corral_source_split_6783;

  $bb39:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i112, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb265:
    assume !(out_$i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7412;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} out_vslice_dummy_var_132 := team_change_mtu(out_$p491, out_$i492);
    goto corral_source_split_7411;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    out_$i492 := $load.i32($M.0, in_$p11);
    goto corral_source_split_7410;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$p491 := $M.27;
    goto corral_source_split_7409;

  $bb264:
    assume out_$i490 == 1;
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$i490 := $eq.i32(out_$i489, 2);
    goto corral_source_split_7406;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i489 := $M.37;
    goto corral_source_split_7405;

  $bb262:
    assume !(out_$i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7403;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} out_vslice_dummy_var_131 := team_change_mtu(out_$p486, out_$i487);
    goto corral_source_split_7402;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    out_$i487 := $load.i32($M.0, in_$p11);
    goto corral_source_split_7401;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    out_$p486 := $M.27;
    goto corral_source_split_7400;

  $bb261:
    assume out_$i485 == 1;
    goto corral_source_split_7399;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i485 := $eq.i32(out_$i484, 3);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i484 := $M.37;
    goto corral_source_split_6788;

  $bb41:
    assume !(out_$i121 == 1);
    goto corral_source_split_6787;

  $bb268:
    assume !(out_$i495 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $M.40 := out_$i498;
    call {:si_unique_call 1656} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i498);
    goto corral_source_split_7420;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    out_$i498 := $sub.i32(out_$i497, 1);
    goto corral_source_split_7419;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    out_$i497 := $M.40;
    goto corral_source_split_7418;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7417;

  SeqInstr_198:
    goto corral_source_split_7416;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} team_uninit(out_$p496);
    goto SeqInstr_197;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    out_$p496 := $M.27;
    goto corral_source_split_7415;

  $bb267:
    assume out_$i495 == 1;
    goto corral_source_split_7414;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i495 := $eq.i32(out_$i494, 2);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$i494 := $M.37;
    goto corral_source_split_6772;

  $bb36:
    assume out_$i119 == 1;
    goto corral_source_split_6771;

  $bb29:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i119 := $slt.i32(out_$i112, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb28:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i112, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb277:
    assume !(out_$i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7447;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} out_vslice_dummy_var_135 := team_change_carrier(out_$p513, out_$i515);
    goto corral_source_split_7446;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    out_$i515 := $trunc.i8.i1(out_$i514);
    goto corral_source_split_7445;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    out_$i514 := $load.i8($M.0, in_$p10);
    goto corral_source_split_7444;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    out_$p513 := $M.27;
    goto corral_source_split_7443;

  $bb276:
    assume out_$i512 == 1;
    goto corral_source_split_7442;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    out_$i512 := $eq.i32(out_$i511, 2);
    goto corral_source_split_7440;

  $bb275:
    assume {:verifier.code 0} true;
    out_$i511 := $M.37;
    goto corral_source_split_7439;

  $bb274:
    assume !(out_$i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7437;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} out_vslice_dummy_var_134 := team_change_carrier(out_$p507, out_$i509);
    goto corral_source_split_7436;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    out_$i509 := $trunc.i8.i1(out_$i508);
    goto corral_source_split_7435;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    out_$i508 := $load.i8($M.0, in_$p10);
    goto corral_source_split_7434;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    out_$p507 := $M.27;
    goto corral_source_split_7433;

  $bb273:
    assume out_$i506 == 1;
    goto corral_source_split_7432;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    out_$i506 := $eq.i32(out_$i505, 3);
    goto corral_source_split_7430;

  $bb272:
    assume {:verifier.code 0} true;
    out_$i505 := $M.37;
    goto corral_source_split_7429;

  $bb271:
    assume !(out_$i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7427;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} out_vslice_dummy_var_133 := team_change_carrier(out_$p501, out_$i503);
    goto corral_source_split_7426;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    out_$i503 := $trunc.i8.i1(out_$i502);
    goto corral_source_split_7425;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    out_$i502 := $load.i8($M.0, in_$p10);
    goto corral_source_split_7424;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    out_$p501 := $M.27;
    goto corral_source_split_7423;

  $bb270:
    assume out_$i500 == 1;
    goto corral_source_split_7422;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$i500 := $eq.i32(out_$i499, 1);
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$i499 := $M.37;
    goto corral_source_split_6776;

  $bb37:
    assume !(out_$i119 == 1);
    goto corral_source_split_6775;

  $bb286:
    assume !(out_$i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7468;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} out_vslice_dummy_var_138 := team_set_mac_address(out_$p527, in_$p25);
    goto corral_source_split_7467;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    out_$p527 := $M.27;
    goto corral_source_split_7466;

  $bb285:
    assume out_$i526 == 1;
    goto corral_source_split_7465;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    out_$i526 := $eq.i32(out_$i525, 2);
    goto corral_source_split_7463;

  $bb284:
    assume {:verifier.code 0} true;
    out_$i525 := $M.37;
    goto corral_source_split_7462;

  $bb283:
    assume !(out_$i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    goto $bb284;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7460;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} out_vslice_dummy_var_137 := team_set_mac_address(out_$p523, in_$p25);
    goto corral_source_split_7459;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    out_$p523 := $M.27;
    goto corral_source_split_7458;

  $bb282:
    assume out_$i522 == 1;
    goto corral_source_split_7457;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    out_$i522 := $eq.i32(out_$i521, 3);
    goto corral_source_split_7455;

  $bb281:
    assume {:verifier.code 0} true;
    out_$i521 := $M.37;
    goto corral_source_split_7454;

  $bb280:
    assume !(out_$i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7452;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} out_vslice_dummy_var_136 := team_set_mac_address(out_$p519, in_$p25);
    goto corral_source_split_7451;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    out_$p519 := $M.27;
    goto corral_source_split_7450;

  $bb279:
    assume out_$i518 == 1;
    goto corral_source_split_7449;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    out_$i518 := $eq.i32(out_$i517, 1);
    goto corral_source_split_6765;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    out_$i517 := $M.37;
    goto corral_source_split_6764;

  $bb31:
    assume out_$i117 == 1;
    goto corral_source_split_6763;

  $bb30:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i112, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb295:
    assume !(out_$i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb296;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1674} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7489;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} out_vslice_dummy_var_141 := team_get_stats64(out_$p539, in_$p31);
    goto corral_source_split_7488;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    out_$p539 := $M.27;
    goto corral_source_split_7487;

  $bb294:
    assume out_$i538 == 1;
    goto corral_source_split_7486;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb294, $bb295;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    out_$i538 := $eq.i32(out_$i537, 2);
    goto corral_source_split_7484;

  $bb293:
    assume {:verifier.code 0} true;
    out_$i537 := $M.37;
    goto corral_source_split_7483;

  $bb292:
    assume !(out_$i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7481;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} out_vslice_dummy_var_140 := team_get_stats64(out_$p535, in_$p31);
    goto corral_source_split_7480;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    out_$p535 := $M.27;
    goto corral_source_split_7479;

  $bb291:
    assume out_$i534 == 1;
    goto corral_source_split_7478;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    out_$i534 := $eq.i32(out_$i533, 3);
    goto corral_source_split_7476;

  $bb290:
    assume {:verifier.code 0} true;
    out_$i533 := $M.37;
    goto corral_source_split_7475;

  $bb289:
    assume !(out_$i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1670} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7473;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} out_vslice_dummy_var_139 := team_get_stats64(out_$p531, in_$p31);
    goto corral_source_split_7472;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    out_$p531 := $M.27;
    goto corral_source_split_7471;

  $bb288:
    assume out_$i530 == 1;
    goto corral_source_split_7470;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    out_$i530 := $eq.i32(out_$i529, 1);
    goto corral_source_split_6769;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    out_$i529 := $M.37;
    goto corral_source_split_6768;

  $bb33:
    assume out_$i118 == 1;
    goto corral_source_split_6767;

  $bb32:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i112, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} ldv_stop();
    goto corral_source_split_7491;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i118 == 1);
    goto $bb35;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i140 == 1);
    goto $bb35;

  $bb302:
    assume !(out_$i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb351:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb322:
    assume !(out_$i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $M.40 := out_$i556;
    call {:si_unique_call 1681} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i556);
    goto corral_source_split_7529;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    out_$i556 := $add.i32(out_$i555, 1);
    goto corral_source_split_7528;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$i555 := $M.40;
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7526;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} team_setup(out_$p554);
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    out_$p554 := $M.33;
    goto corral_source_split_7524;

  $bb321:
    assume out_$i553 == 1;
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    out_$i553 := $eq.i32(out_$i552, 1);
    goto corral_source_split_7521;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    out_$i552 := $M.38;
    goto corral_source_split_7520;

  $bb319:
    assume out_$i551 == 1;
    goto corral_source_split_7519;

  $bb315:
    assume out_$i549 == 1;
    assume {:verifier.code 0} true;
    out_$i551 := $eq.i32(out_$i543, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb304:
    assume out_$i544 == 1;
    assume {:verifier.code 0} true;
    out_$i549 := $slt.i32(out_$i543, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb303:
    assume {:verifier.code 0} true;
    out_$i544 := $slt.i32(out_$i543, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_7493:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1676} out_$i543 := __VERIFIER_nondet_int();
    call {:si_unique_call 1677} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i543);
    call {:si_unique_call 1678} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i543);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb301:
    assume out_$i542 == 1;
    goto corral_source_split_7493;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    out_$i542 := $ne.i32(out_$i541, 0);
    goto corral_source_split_6751;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i541 := $M.38;
    goto corral_source_split_6750;

  $bb16:
    assume out_$i108 == 1;
    goto corral_source_split_6749;

  $bb15:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i101, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb332:
    assume !(out_$i564 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7547;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} out_vslice_dummy_var_144 := team_get_num_tx_queues();
    goto corral_source_split_7546;

  $bb331:
    assume out_$i564 == 1;
    goto corral_source_split_7545;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    out_$i564 := $eq.i32(out_$i563, 2);
    goto corral_source_split_7543;

  $bb330:
    assume {:verifier.code 0} true;
    out_$i563 := $M.38;
    goto corral_source_split_7542;

  $bb329:
    assume !(out_$i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    goto $bb330;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7540;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} out_vslice_dummy_var_143 := team_get_num_tx_queues();
    goto corral_source_split_7539;

  $bb328:
    assume out_$i561 == 1;
    goto corral_source_split_7538;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    out_$i561 := $eq.i32(out_$i560, 3);
    goto corral_source_split_7536;

  $bb327:
    assume {:verifier.code 0} true;
    out_$i560 := $M.38;
    goto corral_source_split_7535;

  $bb326:
    assume !(out_$i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    goto $bb327;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7533;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_142 := team_get_num_tx_queues();
    goto corral_source_split_7532;

  $bb325:
    assume out_$i558 == 1;
    goto corral_source_split_7531;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb325, $bb326;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    out_$i558 := $eq.i32(out_$i557, 1);
    goto corral_source_split_7513;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    out_$i557 := $M.38;
    goto corral_source_split_7512;

  $bb317:
    assume out_$i550 == 1;
    goto corral_source_split_7511;

  $bb316:
    assume !(out_$i549 == 1);
    assume {:verifier.code 0} true;
    out_$i550 := $slt.i32(out_$i543, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb341:
    assume !(out_$i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7571;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} out_vslice_dummy_var_147 := team_validate(out_$p578, out_$p579);
    goto corral_source_split_7570;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    out_$p579 := $M.35;
    goto corral_source_split_7569;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    out_$p578 := $M.34;
    goto corral_source_split_7568;

  $bb340:
    assume out_$i577 == 1;
    goto corral_source_split_7567;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    out_$i577 := $eq.i32(out_$i576, 2);
    goto corral_source_split_7565;

  $bb339:
    assume {:verifier.code 0} true;
    out_$i576 := $M.38;
    goto corral_source_split_7564;

  $bb338:
    assume !(out_$i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7562;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} out_vslice_dummy_var_146 := team_validate(out_$p573, out_$p574);
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    out_$p574 := $M.35;
    goto corral_source_split_7560;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    out_$p573 := $M.34;
    goto corral_source_split_7559;

  $bb337:
    assume out_$i572 == 1;
    goto corral_source_split_7558;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$i572 := $eq.i32(out_$i571, 3);
    goto corral_source_split_7556;

  $bb336:
    assume {:verifier.code 0} true;
    out_$i571 := $M.38;
    goto corral_source_split_7555;

  $bb335:
    assume !(out_$i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7553;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} out_vslice_dummy_var_145 := team_validate(out_$p568, out_$p569);
    goto corral_source_split_7552;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    out_$p569 := $M.35;
    goto corral_source_split_7551;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    out_$p568 := $M.34;
    goto corral_source_split_7550;

  $bb334:
    assume out_$i567 == 1;
    goto corral_source_split_7549;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$i567 := $eq.i32(out_$i566, 1);
    goto corral_source_split_7517;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    out_$i566 := $M.38;
    goto corral_source_split_7516;

  $bb318:
    assume !(out_$i550 == 1);
    goto corral_source_split_7515;

  $bb350:
    assume !(out_$i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7589;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} out_vslice_dummy_var_150 := team_get_num_rx_queues();
    goto corral_source_split_7588;

  $bb349:
    assume out_$i588 == 1;
    goto corral_source_split_7587;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    out_$i588 := $eq.i32(out_$i587, 2);
    goto corral_source_split_7585;

  $bb348:
    assume {:verifier.code 0} true;
    out_$i587 := $M.38;
    goto corral_source_split_7584;

  $bb347:
    assume !(out_$i585 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7582;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} out_vslice_dummy_var_149 := team_get_num_rx_queues();
    goto corral_source_split_7581;

  $bb346:
    assume out_$i585 == 1;
    goto corral_source_split_7580;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$i585 := $eq.i32(out_$i584, 3);
    goto corral_source_split_7578;

  $bb345:
    assume {:verifier.code 0} true;
    out_$i584 := $M.38;
    goto corral_source_split_7577;

  $bb344:
    assume !(out_$i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} out_vslice_dummy_var_148 := team_get_num_rx_queues();
    goto corral_source_split_7574;

  $bb343:
    assume out_$i582 == 1;
    goto corral_source_split_7573;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$i582 := $eq.i32(out_$i581, 1);
    goto corral_source_split_7505;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i581 := $M.38;
    goto corral_source_split_7504;

  $bb313:
    assume out_$i548 == 1;
    goto corral_source_split_7503;

  $bb306:
    assume out_$i545 == 1;
    assume {:verifier.code 0} true;
    out_$i548 := $slt.i32(out_$i543, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb305:
    assume !(out_$i544 == 1);
    assume {:verifier.code 0} true;
    out_$i545 := $slt.i32(out_$i543, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb359:
    assume !(out_$i603 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7616;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} out_vslice_dummy_var_153 := team_newlink(in_$p54, out_$p604, out_$p605, out_$p606);
    goto corral_source_split_7615;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    out_$p606 := $M.35;
    goto corral_source_split_7614;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    out_$p605 := $M.34;
    goto corral_source_split_7613;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    out_$p604 := $M.33;
    goto corral_source_split_7612;

  $bb358:
    assume out_$i603 == 1;
    goto corral_source_split_7611;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    out_$i603 := $eq.i32(out_$i602, 2);
    goto corral_source_split_7609;

  $bb357:
    assume {:verifier.code 0} true;
    out_$i602 := $M.38;
    goto corral_source_split_7608;

  $bb356:
    assume !(out_$i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7606;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} out_vslice_dummy_var_152 := team_newlink(in_$p54, out_$p598, out_$p599, out_$p600);
    goto corral_source_split_7605;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    out_$p600 := $M.35;
    goto corral_source_split_7604;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    out_$p599 := $M.34;
    goto corral_source_split_7603;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    out_$p598 := $M.33;
    goto corral_source_split_7602;

  $bb355:
    assume out_$i597 == 1;
    goto corral_source_split_7601;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    out_$i597 := $eq.i32(out_$i596, 3);
    goto corral_source_split_7599;

  $bb354:
    assume {:verifier.code 0} true;
    out_$i596 := $M.38;
    goto corral_source_split_7598;

  $bb353:
    assume !(out_$i591 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7596;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} out_vslice_dummy_var_151 := team_newlink(in_$p54, out_$p592, out_$p593, out_$p594);
    goto corral_source_split_7595;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    out_$p594 := $M.35;
    goto corral_source_split_7594;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    out_$p593 := $M.34;
    goto corral_source_split_7593;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    out_$p592 := $M.33;
    goto corral_source_split_7592;

  $bb352:
    assume out_$i591 == 1;
    goto corral_source_split_7591;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$i591 := $eq.i32(out_$i590, 1);
    goto corral_source_split_7509;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    out_$i590 := $M.38;
    goto corral_source_split_7508;

  $bb314:
    assume !(out_$i548 == 1);
    goto corral_source_split_7507;

  $bb365:
    assume !(out_$i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $M.40 := out_$i617;
    call {:si_unique_call 1711} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i617);
    goto corral_source_split_7633;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    out_$i617 := $sub.i32(out_$i616, 1);
    goto corral_source_split_7632;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    out_$i616 := $M.40;
    goto corral_source_split_7631;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1710} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7630;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} out_vslice_dummy_var_155 := ldv_release_4();
    goto corral_source_split_7629;

  $bb364:
    assume out_$i614 == 1;
    goto corral_source_split_7628;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    out_$i614 := $eq.i32(out_$i613, 2);
    goto corral_source_split_7626;

  $bb363:
    assume {:verifier.code 0} true;
    out_$i613 := $M.38;
    goto corral_source_split_7625;

  $bb362:
    assume !(out_$i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $M.40 := out_$i612;
    call {:si_unique_call 1708} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i612);
    goto corral_source_split_7623;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    out_$i612 := $sub.i32(out_$i611, 1);
    goto corral_source_split_7622;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    out_$i611 := $M.40;
    goto corral_source_split_7621;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7620;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_vslice_dummy_var_154 := ldv_release_4();
    goto corral_source_split_7619;

  $bb361:
    assume out_$i609 == 1;
    goto corral_source_split_7618;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    out_$i609 := $eq.i32(out_$i608, 3);
    goto corral_source_split_7497;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    out_$i608 := $M.38;
    goto corral_source_split_7496;

  $bb308:
    assume out_$i546 == 1;
    goto corral_source_split_7495;

  $bb307:
    assume !(out_$i545 == 1);
    assume {:verifier.code 0} true;
    out_$i546 := $slt.i32(out_$i543, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb368:
    assume !(out_$i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.38 := 3;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_7637;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} out_vslice_dummy_var_156 := ldv_init_4();
    goto corral_source_split_7636;

  $bb367:
    assume out_$i619 == 1;
    goto corral_source_split_7635;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    out_$i619 := $eq.i32(out_$i618, 2);
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$i618 := $M.38;
    goto corral_source_split_7500;

  $bb310:
    assume out_$i547 == 1;
    goto corral_source_split_7499;

  $bb309:
    assume !(out_$i546 == 1);
    assume {:verifier.code 0} true;
    out_$i547 := $eq.i32(out_$i543, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} ldv_stop();
    goto corral_source_split_7639;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb311:
    assume {:verifier.code 0} true;
    assume !(out_$i547 == 1);
    goto $bb312;

  $bb320:
    assume {:verifier.code 0} true;
    assume !(out_$i551 == 1);
    goto $bb312;

  $bb374:
    assume !(out_$i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} invoke_work_1();
    goto corral_source_split_7642;

  $bb373:
    assume out_$i622 == 1;
    goto corral_source_split_7641;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    out_$i622 := $ne.i32(out_$i621, 0);
    goto corral_source_split_6755;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    out_$i621 := $M.39;
    goto corral_source_split_6754;

  $bb17:
    assume !(out_$i108 == 1);
    goto corral_source_split_6753;

  $bb377:
    assume !(out_$i624 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb387:
    assume {:verifier.code 0} true;
    assume !(out_$i630 == 1);
    goto $bb388;

  $bb390:
    assume {:verifier.code 0} true;
    assume !(out_$i632 == 1);
    goto $bb388;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    out_$i632 := $eq.i32(out_$i631, 0);
    goto corral_source_split_7656;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    out_$i631 := $M.40;
    goto corral_source_split_7655;

  $bb386:
    assume out_$i630 == 1;
    goto corral_source_split_7654;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    out_$i630 := $eq.i32(out_$i629, 2);
    goto corral_source_split_7652;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    out_$i629 := $M.41;
    goto corral_source_split_7651;

  $bb384:
    assume out_$i628 == 1;
    goto corral_source_split_7650;

  $bb379:
    assume out_$i626 == 1;
    assume {:verifier.code 0} true;
    out_$i628 := $eq.i32(out_$i625, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb378:
    assume {:verifier.code 0} true;
    out_$i626 := $slt.i32(out_$i625, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_7644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1716} out_$i625 := __VERIFIER_nondet_int();
    call {:si_unique_call 1717} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i625);
    call {:si_unique_call 1718} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i625);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb376:
    assume out_$i624 == 1;
    goto corral_source_split_7644;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    out_$i624 := $ne.i32(out_$i623, 0);
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$i623 := $M.41;
    goto corral_source_split_6742;

  $bb12:
    assume out_$i106 == 1;
    goto corral_source_split_6741;

  $bb5:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i101, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i101, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb395:
    assume !(out_$i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb400:
    assume !(out_$i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} ldv_net_device_ops_6();
    goto corral_source_split_7684;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7683;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} ldv_initialize_rtnl_link_ops_4();
    goto corral_source_split_7682;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7681;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7680;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} ldv_initialize_ethtool_ops_5();
    goto corral_source_split_7679;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7678;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_7677;

  $bb399:
    assume out_$i639 == 1;
    goto corral_source_split_7676;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    out_$i639 := $eq.i32(out_$i638, 0);
    goto corral_source_split_7674;

  $bb398:
    assume {:verifier.code 0} true;
    out_$i638 := $M.47;
    goto corral_source_split_7673;

  $bb397:
    assume !(out_$i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    out_$i637 := $ne.i32(out_$i636, 0);
    goto corral_source_split_7668;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    out_$i636 := $M.47;
    goto corral_source_split_7667;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $M.47 := out_$i635;
    call {:si_unique_call 1723} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i635);
    goto corral_source_split_7666;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} out_$i635 := team_module_init();
    goto corral_source_split_7665;

  $bb394:
    assume out_$i634 == 1;
    goto corral_source_split_7664;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb394, $bb395;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    out_$i634 := $eq.i32(out_$i633, 1);
    goto corral_source_split_7648;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    out_$i633 := $M.41;
    goto corral_source_split_7647;

  $bb381:
    assume out_$i627 == 1;
    goto corral_source_split_7646;

  $bb380:
    assume !(out_$i626 == 1);
    assume {:verifier.code 0} true;
    out_$i627 := $eq.i32(out_$i625, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} ldv_stop();
    goto corral_source_split_7686;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb382:
    assume {:verifier.code 0} true;
    assume !(out_$i627 == 1);
    goto $bb383;

  $bb385:
    assume {:verifier.code 0} true;
    assume !(out_$i628 == 1);
    goto $bb383;

  $bb407:
    assume !(out_$i641 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb412:
    assume !(out_$i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb413;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7697;

  SeqInstr_204:
    goto corral_source_split_7696;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} out_vslice_dummy_var_157 := team_device_event(in_$p56, out_$i646, in_$p57);
    goto SeqInstr_203;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    out_$i646 := $load.i64($M.0, in_$p20);
    goto corral_source_split_7695;

  $bb411:
    assume out_$i645 == 1;
    goto corral_source_split_7694;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    out_$i645 := $eq.i32(out_$i644, 1);
    goto corral_source_split_7692;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    out_$i644 := $M.42;
    goto corral_source_split_7691;

  $bb409:
    assume out_$i643 == 1;
    goto corral_source_split_7690;

  $bb408:
    assume {:verifier.code 0} true;
    out_$i643 := $eq.i32(out_$i642, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  corral_source_split_7688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1734} out_$i642 := __VERIFIER_nondet_int();
    call {:si_unique_call 1735} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i642);
    call {:si_unique_call 1736} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i642);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb406:
    assume out_$i641 == 1;
    goto corral_source_split_7688;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    out_$i641 := $ne.i32(out_$i640, 0);
    goto corral_source_split_6747;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    out_$i640 := $M.42;
    goto corral_source_split_6746;

  $bb13:
    assume !(out_$i106 == 1);
    goto corral_source_split_6745;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} ldv_stop();
    goto corral_source_split_7699;

  $bb410:
    assume !(out_$i643 == 1);
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb419:
    assume !(out_$i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb420;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    goto $bb420;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} invoke_work_2();
    goto corral_source_split_7702;

  $bb418:
    assume out_$i649 == 1;
    goto corral_source_split_7701;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    out_$i649 := $ne.i32(out_$i648, 0);
    goto corral_source_split_6735;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    out_$i648 := $M.43;
    goto corral_source_split_6734;

  $bb7:
    assume out_$i104 == 1;
    goto corral_source_split_6733;

  $bb6:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i101, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb422:
    assume !(out_$i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb432:
    assume !(out_$i657 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7717;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} team_ethtool_get_drvinfo(out_$p658, in_$p59);
    goto corral_source_split_7716;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    out_$p658 := $M.32;
    goto corral_source_split_7715;

  $bb431:
    assume out_$i657 == 1;
    goto corral_source_split_7714;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    out_$i657 := $eq.i32(out_$i656, 1);
    goto corral_source_split_7712;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    out_$i656 := $M.44;
    goto corral_source_split_7711;

  $bb429:
    assume out_$i655 == 1;
    goto corral_source_split_7710;

  $bb424:
    assume out_$i653 == 1;
    assume {:verifier.code 0} true;
    out_$i655 := $eq.i32(out_$i652, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb423:
    assume {:verifier.code 0} true;
    out_$i653 := $slt.i32(out_$i652, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  corral_source_split_7704:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1741} out_$i652 := __VERIFIER_nondet_int();
    call {:si_unique_call 1742} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i652);
    call {:si_unique_call 1743} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i652);
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb421:
    assume out_$i651 == 1;
    goto corral_source_split_7704;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    out_$i651 := $ne.i32(out_$i650, 0);
    goto corral_source_split_6739;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    out_$i650 := $M.44;
    goto corral_source_split_6738;

  $bb9:
    assume out_$i105 == 1;
    goto corral_source_split_6737;

  $bb8:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i101, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb436:
    assume !(out_$i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    goto $bb437;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7722;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} out_vslice_dummy_var_158 := ethtool_op_get_link(out_$p661);
    goto corral_source_split_7721;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    out_$p661 := $M.32;
    goto corral_source_split_7720;

  $bb435:
    assume out_$i660 == 1;
    goto corral_source_split_7719;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    out_$i660 := $eq.i32(out_$i659, 1);
    goto corral_source_split_7708;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    out_$i659 := $M.44;
    goto corral_source_split_7707;

  $bb426:
    assume out_$i654 == 1;
    goto corral_source_split_7706;

  $bb425:
    assume !(out_$i653 == 1);
    assume {:verifier.code 0} true;
    out_$i654 := $eq.i32(out_$i652, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} ldv_stop();
    goto corral_source_split_7724;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb427:
    assume {:verifier.code 0} true;
    assume !(out_$i654 == 1);
    goto $bb428;

  $bb430:
    assume {:verifier.code 0} true;
    assume !(out_$i655 == 1);
    goto $bb428;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} ldv_stop();
    goto corral_source_split_7726;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i109 == 1);
    goto $bb11;

  $bb300_dummy:
    call {:si_unique_call 1} out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i162, out_$i163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$i300, out_$i301, out_$i303, out_$i304, out_$p305, out_$p306, out_$i308, out_$i309, out_$p310, out_$p311, out_$i313, out_$i314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$i336, out_$i338, out_$i339, out_$p340, out_$i341, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$p356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i378, out_$i379, out_$p380, out_$i381, out_$i383, out_$i384, out_$p385, out_$i386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$i397, out_$p398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p403, out_$i404, out_$i406, out_$i407, out_$p408, out_$p409, out_$i410, out_$i412, out_$i413, out_$p414, out_$p415, out_$i416, out_$i418, out_$i419, out_$p420, out_$i421, out_$i422, out_$p423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i457, out_$i458, out_$p459, out_$i461, out_$i462, out_$p463, out_$i465, out_$i466, out_$p467, out_$i469, out_$i470, out_$p471, out_$p472, out_$i474, out_$i475, out_$p476, out_$p477, out_$i479, out_$i480, out_$p481, out_$p482, out_$i484, out_$i485, out_$p486, out_$i487, out_$i489, out_$i490, out_$p491, out_$i492, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i499, out_$i500, out_$p501, out_$i502, out_$i503, out_$i505, out_$i506, out_$p507, out_$i508, out_$i509, out_$i511, out_$i512, out_$p513, out_$i514, out_$i515, out_$i517, out_$i518, out_$p519, out_$i521, out_$i522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i541, out_$i542, out_$i543, out_$i544, out_$i545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p554, out_$i555, out_$i556, out_$i557, out_$i558, out_$i560, out_$i561, out_$i563, out_$i564, out_$i566, out_$i567, out_$p568, out_$p569, out_$i571, out_$i572, out_$p573, out_$p574, out_$i576, out_$i577, out_$p578, out_$p579, out_$i581, out_$i582, out_$i584, out_$i585, out_$i587, out_$i588, out_$i590, out_$i591, out_$p592, out_$p593, out_$p594, out_$i596, out_$i597, out_$p598, out_$p599, out_$p600, out_$i602, out_$i603, out_$p604, out_$p605, out_$p606, out_$i608, out_$i609, out_$i611, out_$i612, out_$i613, out_$i614, out_$i616, out_$i617, out_$i618, out_$i619, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$i627, out_$i628, out_$i629, out_$i630, out_$i631, out_$i632, out_$i633, out_$i634, out_$i635, out_$i636, out_$i637, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$i643, out_$i644, out_$i645, out_$i646, out_$i648, out_$i649, out_$i650, out_$i651, out_$i652, out_$i653, out_$i654, out_$i655, out_$i656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p661, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p22, in_$p24, in_$p25, in_$p27, in_$p29, in_$p31, in_$p32, in_$p34, in_$p36, in_$p37, in_$p39, in_$p41, in_$p43, in_$p45, in_$p47, in_$p48, in_$p50, in_$p52, in_$p54, in_$p56, in_$p57, in_$p59, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i146, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i162, out_$i163, out_$p164, out_$p165, out_$i167, out_$i168, out_$p169, out_$p170, out_$i172, out_$i173, out_$p174, out_$p175, out_$i177, out_$i178, out_$p179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i214, out_$i215, out_$p216, out_$i217, out_$i218, out_$i219, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i238, out_$i239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i247, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i269, out_$i270, out_$p271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$i284, out_$i285, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i295, out_$i296, out_$i297, out_$i298, out_$p299, out_$i300, out_$i301, out_$i303, out_$i304, out_$p305, out_$p306, out_$i308, out_$i309, out_$p310, out_$p311, out_$i313, out_$i314, out_$p315, out_$p316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$p326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$i336, out_$i338, out_$i339, out_$p340, out_$i341, out_$i343, out_$i344, out_$p345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$p356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_$p372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i378, out_$i379, out_$p380, out_$i381, out_$i383, out_$i384, out_$p385, out_$i386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i393, out_$p394, out_$i395, out_$i396, out_$i397, out_$p398, out_$i399, out_$i400, out_$i401, out_$p402, out_$p403, out_$i404, out_$i406, out_$i407, out_$p408, out_$p409, out_$i410, out_$i412, out_$i413, out_$p414, out_$p415, out_$i416, out_$i418, out_$i419, out_$p420, out_$i421, out_$i422, out_$p423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$p429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i437, out_$i438, out_$p439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i447, out_$i448, out_$p449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i457, out_$i458, out_$p459, out_$i461, out_$i462, out_$p463, out_$i465, out_$i466, out_$p467, out_$i469, out_$i470, out_$p471, out_$p472, out_$i474, out_$i475, out_$p476, out_$p477, out_$i479, out_$i480, out_$p481, out_$p482, out_$i484, out_$i485, out_$p486, out_$i487, out_$i489, out_$i490, out_$p491, out_$i492, out_$i494, out_$i495, out_$p496, out_$i497, out_$i498, out_$i499, out_$i500, out_$p501, out_$i502, out_$i503, out_$i505, out_$i506, out_$p507, out_$i508, out_$i509, out_$i511, out_$i512, out_$p513, out_$i514, out_$i515, out_$i517, out_$i518, out_$p519, out_$i521, out_$i522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i529, out_$i530, out_$p531, out_$i533, out_$i534, out_$p535, out_$i537, out_$i538, out_$p539, out_$i541, out_$i542, out_$i543, out_$i544, out_$i545, out_$i546, out_$i547, out_$i548, out_$i549, out_$i550, out_$i551, out_$i552, out_$i553, out_$p554, out_$i555, out_$i556, out_$i557, out_$i558, out_$i560, out_$i561, out_$i563, out_$i564, out_$i566, out_$i567, out_$p568, out_$p569, out_$i571, out_$i572, out_$p573, out_$p574, out_$i576, out_$i577, out_$p578, out_$p579, out_$i581, out_$i582, out_$i584, out_$i585, out_$i587, out_$i588, out_$i590, out_$i591, out_$p592, out_$p593, out_$p594, out_$i596, out_$i597, out_$p598, out_$p599, out_$p600, out_$i602, out_$i603, out_$p604, out_$p605, out_$p606, out_$i608, out_$i609, out_$i611, out_$i612, out_$i613, out_$i614, out_$i616, out_$i617, out_$i618, out_$i619, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i626, out_$i627, out_$i628, out_$i629, out_$i630, out_$i631, out_$i632, out_$i633, out_$i634, out_$i635, out_$i636, out_$i637, out_$i638, out_$i639, out_$i640, out_$i641, out_$i642, out_$i643, out_$i644, out_$i645, out_$i646, out_$i648, out_$i649, out_$i650, out_$i651, out_$i652, out_$i653, out_$i654, out_$i655, out_$i656, out_$i657, out_$p658, out_$i659, out_$i660, out_$p661, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p43: ref, in_$p45: ref, in_$p47: ref, in_$p48: ref, in_$p50: ref, in_$p52: ref, in_$p54: ref, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$i101: i32, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$i112: i32, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i16, in_$i145: i32, in_$i146: i16, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i16, in_$i152: i32, in_$i153: i16, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i16, in_$i159: i32, in_$i160: i16, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$p165: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$p170: ref, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$p175: ref, in_$i177: i32, in_$i178: i1, in_$p179: ref, in_$i180: i16, in_$i181: i32, in_$i182: i16, in_$i183: i16, in_$i184: i32, in_$i185: i16, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i16, in_$i191: i32, in_$i192: i16, in_$i193: i16, in_$i194: i32, in_$i195: i16, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i16, in_$i201: i32, in_$i202: i16, in_$i203: i16, in_$i204: i32, in_$i205: i16, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i16, in_$i211: i32, in_$i212: i16, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i217: i16, in_$i218: i32, in_$i219: i16, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i224: i16, in_$i225: i32, in_$i226: i16, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i231: i16, in_$i232: i32, in_$i233: i16, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i238: i16, in_$i239: i32, in_$i240: i16, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i16, in_$i246: i32, in_$i247: i16, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i16, in_$i253: i32, in_$i254: i16, in_$i255: i16, in_$i256: i32, in_$i257: i16, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i16, in_$i263: i32, in_$i264: i16, in_$i265: i16, in_$i266: i32, in_$i267: i16, in_$i269: i32, in_$i270: i1, in_$p271: ref, in_$i272: i16, in_$i273: i32, in_$i274: i16, in_$i275: i16, in_$i276: i32, in_$i277: i16, in_$i279: i32, in_$i280: i1, in_$i281: i32, in_$i282: i32, in_$p283: ref, in_$i284: i32, in_$i285: i32, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i32, in_$p291: ref, in_$i292: i32, in_$i293: i32, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i32, in_$p299: ref, in_$i300: i32, in_$i301: i32, in_$i303: i32, in_$i304: i1, in_$p305: ref, in_$p306: ref, in_$i308: i32, in_$i309: i1, in_$p310: ref, in_$p311: ref, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$p316: ref, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i32, in_$i322: i32, in_$i323: i1, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i64, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i336: i64, in_$i338: i32, in_$i339: i1, in_$p340: ref, in_$i341: i64, in_$i343: i32, in_$i344: i1, in_$p345: ref, in_$i346: i32, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i32, in_$i355: i1, in_$p356: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i376: i64, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$i381: i64, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$i386: i64, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i392: i32, in_$i393: i1, in_$p394: ref, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$p398: ref, in_$i399: i32, in_$i400: i32, in_$i401: i1, in_$p402: ref, in_$p403: ref, in_$i404: i32, in_$i406: i32, in_$i407: i1, in_$p408: ref, in_$p409: ref, in_$i410: i32, in_$i412: i32, in_$i413: i1, in_$p414: ref, in_$p415: ref, in_$i416: i32, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$i421: i32, in_$i422: i1, in_$p423: ref, in_$i424: i32, in_$i425: i1, in_$p426: ref, in_$i427: i32, in_$i428: i1, in_$p429: ref, in_$i430: i16, in_$i431: i32, in_$i432: i16, in_$i433: i16, in_$i434: i32, in_$i435: i16, in_$i437: i32, in_$i438: i1, in_$p439: ref, in_$i440: i16, in_$i441: i32, in_$i442: i16, in_$i443: i16, in_$i444: i32, in_$i445: i16, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i450: i16, in_$i451: i32, in_$i452: i16, in_$i453: i16, in_$i454: i32, in_$i455: i16, in_$i457: i32, in_$i458: i1, in_$p459: ref, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i469: i32, in_$i470: i1, in_$p471: ref, in_$p472: ref, in_$i474: i32, in_$i475: i1, in_$p476: ref, in_$p477: ref, in_$i479: i32, in_$i480: i1, in_$p481: ref, in_$p482: ref, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$i487: i32, in_$i489: i32, in_$i490: i1, in_$p491: ref, in_$i492: i32, in_$i494: i32, in_$i495: i1, in_$p496: ref, in_$i497: i32, in_$i498: i32, in_$i499: i32, in_$i500: i1, in_$p501: ref, in_$i502: i8, in_$i503: i1, in_$i505: i32, in_$i506: i1, in_$p507: ref, in_$i508: i8, in_$i509: i1, in_$i511: i32, in_$i512: i1, in_$p513: ref, in_$i514: i8, in_$i515: i1, in_$i517: i32, in_$i518: i1, in_$p519: ref, in_$i521: i32, in_$i522: i1, in_$p523: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i529: i32, in_$i530: i1, in_$p531: ref, in_$i533: i32, in_$i534: i1, in_$p535: ref, in_$i537: i32, in_$i538: i1, in_$p539: ref, in_$i541: i32, in_$i542: i1, in_$i543: i32, in_$i544: i1, in_$i545: i1, in_$i546: i1, in_$i547: i1, in_$i548: i1, in_$i549: i1, in_$i550: i1, in_$i551: i1, in_$i552: i32, in_$i553: i1, in_$p554: ref, in_$i555: i32, in_$i556: i32, in_$i557: i32, in_$i558: i1, in_$i560: i32, in_$i561: i1, in_$i563: i32, in_$i564: i1, in_$i566: i32, in_$i567: i1, in_$p568: ref, in_$p569: ref, in_$i571: i32, in_$i572: i1, in_$p573: ref, in_$p574: ref, in_$i576: i32, in_$i577: i1, in_$p578: ref, in_$p579: ref, in_$i581: i32, in_$i582: i1, in_$i584: i32, in_$i585: i1, in_$i587: i32, in_$i588: i1, in_$i590: i32, in_$i591: i1, in_$p592: ref, in_$p593: ref, in_$p594: ref, in_$i596: i32, in_$i597: i1, in_$p598: ref, in_$p599: ref, in_$p600: ref, in_$i602: i32, in_$i603: i1, in_$p604: ref, in_$p605: ref, in_$p606: ref, in_$i608: i32, in_$i609: i1, in_$i611: i32, in_$i612: i32, in_$i613: i32, in_$i614: i1, in_$i616: i32, in_$i617: i32, in_$i618: i32, in_$i619: i1, in_$i621: i32, in_$i622: i1, in_$i623: i32, in_$i624: i1, in_$i625: i32, in_$i626: i1, in_$i627: i1, in_$i628: i1, in_$i629: i32, in_$i630: i1, in_$i631: i32, in_$i632: i1, in_$i633: i32, in_$i634: i1, in_$i635: i32, in_$i636: i32, in_$i637: i1, in_$i638: i32, in_$i639: i1, in_$i640: i32, in_$i641: i1, in_$i642: i32, in_$i643: i1, in_$i644: i32, in_$i645: i1, in_$i646: i64, in_$i648: i32, in_$i649: i1, in_$i650: i32, in_$i651: i1, in_$i652: i32, in_$i653: i1, in_$i654: i1, in_$i655: i1, in_$i656: i32, in_$i657: i1, in_$p658: ref, in_$i659: i32, in_$i660: i1, in_$p661: ref, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i64, in_vslice_dummy_var_113: i64, in_vslice_dummy_var_114: i64, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i64, in_vslice_dummy_var_117: i64, in_vslice_dummy_var_118: i64, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i16, in_vslice_dummy_var_129: i16, in_vslice_dummy_var_130: i16, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: ref, in_vslice_dummy_var_140: ref, in_vslice_dummy_var_141: ref, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32) returns (out_$i101: i32, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$i112: i32, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i16, out_$i145: i32, out_$i146: i16, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i16, out_$i152: i32, out_$i153: i16, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i16, out_$i159: i32, out_$i160: i16, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$p165: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$p170: ref, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$p175: ref, out_$i177: i32, out_$i178: i1, out_$p179: ref, out_$i180: i16, out_$i181: i32, out_$i182: i16, out_$i183: i16, out_$i184: i32, out_$i185: i16, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i16, out_$i191: i32, out_$i192: i16, out_$i193: i16, out_$i194: i32, out_$i195: i16, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i16, out_$i201: i32, out_$i202: i16, out_$i203: i16, out_$i204: i32, out_$i205: i16, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i16, out_$i211: i32, out_$i212: i16, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i217: i16, out_$i218: i32, out_$i219: i16, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i224: i16, out_$i225: i32, out_$i226: i16, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i231: i16, out_$i232: i32, out_$i233: i16, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i238: i16, out_$i239: i32, out_$i240: i16, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i16, out_$i246: i32, out_$i247: i16, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i16, out_$i253: i32, out_$i254: i16, out_$i255: i16, out_$i256: i32, out_$i257: i16, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i16, out_$i263: i32, out_$i264: i16, out_$i265: i16, out_$i266: i32, out_$i267: i16, out_$i269: i32, out_$i270: i1, out_$p271: ref, out_$i272: i16, out_$i273: i32, out_$i274: i16, out_$i275: i16, out_$i276: i32, out_$i277: i16, out_$i279: i32, out_$i280: i1, out_$i281: i32, out_$i282: i32, out_$p283: ref, out_$i284: i32, out_$i285: i32, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i32, out_$p291: ref, out_$i292: i32, out_$i293: i32, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i32, out_$p299: ref, out_$i300: i32, out_$i301: i32, out_$i303: i32, out_$i304: i1, out_$p305: ref, out_$p306: ref, out_$i308: i32, out_$i309: i1, out_$p310: ref, out_$p311: ref, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$p316: ref, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i32, out_$i322: i32, out_$i323: i1, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i64, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i336: i64, out_$i338: i32, out_$i339: i1, out_$p340: ref, out_$i341: i64, out_$i343: i32, out_$i344: i1, out_$p345: ref, out_$i346: i32, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i32, out_$i355: i1, out_$p356: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i376: i64, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$i381: i64, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$i386: i64, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i392: i32, out_$i393: i1, out_$p394: ref, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$p398: ref, out_$i399: i32, out_$i400: i32, out_$i401: i1, out_$p402: ref, out_$p403: ref, out_$i404: i32, out_$i406: i32, out_$i407: i1, out_$p408: ref, out_$p409: ref, out_$i410: i32, out_$i412: i32, out_$i413: i1, out_$p414: ref, out_$p415: ref, out_$i416: i32, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$i421: i32, out_$i422: i1, out_$p423: ref, out_$i424: i32, out_$i425: i1, out_$p426: ref, out_$i427: i32, out_$i428: i1, out_$p429: ref, out_$i430: i16, out_$i431: i32, out_$i432: i16, out_$i433: i16, out_$i434: i32, out_$i435: i16, out_$i437: i32, out_$i438: i1, out_$p439: ref, out_$i440: i16, out_$i441: i32, out_$i442: i16, out_$i443: i16, out_$i444: i32, out_$i445: i16, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i450: i16, out_$i451: i32, out_$i452: i16, out_$i453: i16, out_$i454: i32, out_$i455: i16, out_$i457: i32, out_$i458: i1, out_$p459: ref, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i469: i32, out_$i470: i1, out_$p471: ref, out_$p472: ref, out_$i474: i32, out_$i475: i1, out_$p476: ref, out_$p477: ref, out_$i479: i32, out_$i480: i1, out_$p481: ref, out_$p482: ref, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$i487: i32, out_$i489: i32, out_$i490: i1, out_$p491: ref, out_$i492: i32, out_$i494: i32, out_$i495: i1, out_$p496: ref, out_$i497: i32, out_$i498: i32, out_$i499: i32, out_$i500: i1, out_$p501: ref, out_$i502: i8, out_$i503: i1, out_$i505: i32, out_$i506: i1, out_$p507: ref, out_$i508: i8, out_$i509: i1, out_$i511: i32, out_$i512: i1, out_$p513: ref, out_$i514: i8, out_$i515: i1, out_$i517: i32, out_$i518: i1, out_$p519: ref, out_$i521: i32, out_$i522: i1, out_$p523: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i529: i32, out_$i530: i1, out_$p531: ref, out_$i533: i32, out_$i534: i1, out_$p535: ref, out_$i537: i32, out_$i538: i1, out_$p539: ref, out_$i541: i32, out_$i542: i1, out_$i543: i32, out_$i544: i1, out_$i545: i1, out_$i546: i1, out_$i547: i1, out_$i548: i1, out_$i549: i1, out_$i550: i1, out_$i551: i1, out_$i552: i32, out_$i553: i1, out_$p554: ref, out_$i555: i32, out_$i556: i32, out_$i557: i32, out_$i558: i1, out_$i560: i32, out_$i561: i1, out_$i563: i32, out_$i564: i1, out_$i566: i32, out_$i567: i1, out_$p568: ref, out_$p569: ref, out_$i571: i32, out_$i572: i1, out_$p573: ref, out_$p574: ref, out_$i576: i32, out_$i577: i1, out_$p578: ref, out_$p579: ref, out_$i581: i32, out_$i582: i1, out_$i584: i32, out_$i585: i1, out_$i587: i32, out_$i588: i1, out_$i590: i32, out_$i591: i1, out_$p592: ref, out_$p593: ref, out_$p594: ref, out_$i596: i32, out_$i597: i1, out_$p598: ref, out_$p599: ref, out_$p600: ref, out_$i602: i32, out_$i603: i1, out_$p604: ref, out_$p605: ref, out_$p606: ref, out_$i608: i32, out_$i609: i1, out_$i611: i32, out_$i612: i32, out_$i613: i32, out_$i614: i1, out_$i616: i32, out_$i617: i32, out_$i618: i32, out_$i619: i1, out_$i621: i32, out_$i622: i1, out_$i623: i32, out_$i624: i1, out_$i625: i32, out_$i626: i1, out_$i627: i1, out_$i628: i1, out_$i629: i32, out_$i630: i1, out_$i631: i32, out_$i632: i1, out_$i633: i32, out_$i634: i1, out_$i635: i32, out_$i636: i32, out_$i637: i1, out_$i638: i32, out_$i639: i1, out_$i640: i32, out_$i641: i1, out_$i642: i32, out_$i643: i1, out_$i644: i32, out_$i645: i1, out_$i646: i64, out_$i648: i32, out_$i649: i1, out_$i650: i32, out_$i651: i1, out_$i652: i32, out_$i653: i1, out_$i654: i1, out_$i655: i1, out_$i656: i32, out_$i657: i1, out_$p658: ref, out_$i659: i32, out_$i660: i1, out_$p661: ref, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i64, out_vslice_dummy_var_113: i64, out_vslice_dummy_var_114: i64, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i64, out_vslice_dummy_var_117: i64, out_vslice_dummy_var_118: i64, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i16, out_vslice_dummy_var_129: i16, out_vslice_dummy_var_130: i16, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: ref, out_vslice_dummy_var_140: ref, out_vslice_dummy_var_141: ref, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32);
  modifies $M.37, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr, $M.24, $M.10, $M.9, $M.12, $M.11, $M.14, $M.13, $M.16, $M.15, $M.17, assertsPassed, $M.45, $M.40, $M.46, $M.38, $M.23, $M.27, $M.33, $M.34, $M.35, $M.42, $M.32, $M.44, $M.41, $M.47, $M.2, $M.28, $M.29, $M.30, $M.31;


